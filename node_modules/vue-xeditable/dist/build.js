/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/dist/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 3);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

eval("var disposed = false\nvar Component = __webpack_require__(11)(\n  /* script */\n  __webpack_require__(1),\n  /* template */\n  __webpack_require__(12),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\nComponent.options.__file = \"/Users/madao/dev/vue-editable/src/Editable.vue\"\nif (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== \"default\" && key.substr(0, 2) !== \"__\"})) {console.error(\"named exports are not supported in *.vue files.\")}\nif (Component.options.functional) {console.error(\"[vue-loader] Editable.vue: functional components are not supported with templates, they should use render functions.\")}\n\n/* hot reload */\nif (false) {(function () {\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), false)\n  if (!hotAPI.compatible) return\n  module.hot.accept()\n  if (!module.hot.data) {\n    hotAPI.createRecord(\"data-v-409b4816\", Component.options)\n  } else {\n    hotAPI.reload(\"data-v-409b4816\", Component.options)\n  }\n  module.hot.dispose(function (data) {\n    disposed = true\n  })\n})()}\n\nmodule.exports = Component.exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvRWRpdGFibGUudnVlP2EwZjEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUFvSDtBQUNwSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0VBQStFLHNEQUFzRCxJQUFJO0FBQ3pJLG1DQUFtQzs7QUFFbkM7QUFDQSxZQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQzs7QUFFRCIsImZpbGUiOiIwLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGRpc3Bvc2VkID0gZmFsc2VcbnZhciBDb21wb25lbnQgPSByZXF1aXJlKFwiIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9jb21wb25lbnQtbm9ybWFsaXplclwiKShcbiAgLyogc2NyaXB0ICovXG4gIHJlcXVpcmUoXCIhIWJhYmVsLWxvYWRlciEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL0VkaXRhYmxlLnZ1ZVwiKSxcbiAgLyogdGVtcGxhdGUgKi9cbiAgcmVxdWlyZShcIiEhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyL2luZGV4P3tcXFwiaWRcXFwiOlxcXCJkYXRhLXYtNDA5YjQ4MTZcXFwiLFxcXCJoYXNTY29wZWRcXFwiOmZhbHNlfSEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vRWRpdGFibGUudnVlXCIpLFxuICAvKiBzdHlsZXMgKi9cbiAgbnVsbCxcbiAgLyogc2NvcGVJZCAqL1xuICBudWxsLFxuICAvKiBtb2R1bGVJZGVudGlmaWVyIChzZXJ2ZXIgb25seSkgKi9cbiAgbnVsbFxuKVxuQ29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCIvVXNlcnMvbWFkYW8vZGV2L3Z1ZS1lZGl0YWJsZS9zcmMvRWRpdGFibGUudnVlXCJcbmlmIChDb21wb25lbnQuZXNNb2R1bGUgJiYgT2JqZWN0LmtleXMoQ29tcG9uZW50LmVzTW9kdWxlKS5zb21lKGZ1bmN0aW9uIChrZXkpIHtyZXR1cm4ga2V5ICE9PSBcImRlZmF1bHRcIiAmJiBrZXkuc3Vic3RyKDAsIDIpICE9PSBcIl9fXCJ9KSkge2NvbnNvbGUuZXJyb3IoXCJuYW1lZCBleHBvcnRzIGFyZSBub3Qgc3VwcG9ydGVkIGluICoudnVlIGZpbGVzLlwiKX1cbmlmIChDb21wb25lbnQub3B0aW9ucy5mdW5jdGlvbmFsKSB7Y29uc29sZS5lcnJvcihcIlt2dWUtbG9hZGVyXSBFZGl0YWJsZS52dWU6IGZ1bmN0aW9uYWwgY29tcG9uZW50cyBhcmUgbm90IHN1cHBvcnRlZCB3aXRoIHRlbXBsYXRlcywgdGhleSBzaG91bGQgdXNlIHJlbmRlciBmdW5jdGlvbnMuXCIpfVxuXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkgeyhmdW5jdGlvbiAoKSB7XG4gIHZhciBob3RBUEkgPSByZXF1aXJlKFwidnVlLWhvdC1yZWxvYWQtYXBpXCIpXG4gIGhvdEFQSS5pbnN0YWxsKHJlcXVpcmUoXCJ2dWVcIiksIGZhbHNlKVxuICBpZiAoIWhvdEFQSS5jb21wYXRpYmxlKSByZXR1cm5cbiAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICBpZiAoIW1vZHVsZS5ob3QuZGF0YSkge1xuICAgIGhvdEFQSS5jcmVhdGVSZWNvcmQoXCJkYXRhLXYtNDA5YjQ4MTZcIiwgQ29tcG9uZW50Lm9wdGlvbnMpXG4gIH0gZWxzZSB7XG4gICAgaG90QVBJLnJlbG9hZChcImRhdGEtdi00MDliNDgxNlwiLCBDb21wb25lbnQub3B0aW9ucylcbiAgfVxuICBtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICBkaXNwb3NlZCA9IHRydWVcbiAgfSlcbn0pKCl9XG5cbm1vZHVsZS5leHBvcnRzID0gQ29tcG9uZW50LmV4cG9ydHNcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL0VkaXRhYmxlLnZ1ZVxuLy8gbW9kdWxlIGlkID0gMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__editable_css_bootstrap_min_css__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__editable_css_bootstrap_min_css___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__editable_css_bootstrap_min_css__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__editable_css_bootstrap_editable_css__ = __webpack_require__(8);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__editable_css_bootstrap_editable_css___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__editable_css_bootstrap_editable_css__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__editable_css_bootstrap_wysihtml5_css__ = __webpack_require__(20);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__editable_css_bootstrap_wysihtml5_css___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__editable_css_bootstrap_wysihtml5_css__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__editable_js_bootstrap_min_js__ = __webpack_require__(13);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__editable_js_bootstrap_min_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__editable_js_bootstrap_min_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__editable_js_bootstrap_editable_js__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__editable_js_bootstrap_editable_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4__editable_js_bootstrap_editable_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__editable_js_wysihtml5_js__ = __webpack_require__(22);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__editable_js_wysihtml5_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5__editable_js_wysihtml5_js__);\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n\n\n\n\n$.fn.editable.defaults.mode = 'inline';\n$.fn.editable.defaults.onblur = 'submit';\n$.fn.editable.defaults.showbuttons = false;\n$.fn.editable.defaults.clear = false;\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  props: {\n    type: {\n      type: String,\n      default: 'text'\n    },\n    value: {\n      type: String,\n      default: ''\n    },\n    ajaxOptions: {\n      type: Object,\n      default: function _default() {\n        return {\n          type: 'put',\n          dataType: 'json'\n        };\n      }\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    emptytext: {\n      type: String,\n      default: 'æ— '\n    },\n    placeholder: {\n      type: String,\n      default: ''\n    },\n    display: {\n      type: Boolean,\n      default: true\n    },\n    shown: {\n      type: Function,\n      default: function _default() {}\n    },\n    hidden: {\n      type: Function,\n      default: function _default() {}\n    },\n    option: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    }\n  },\n  watch: {\n    'display': function display(value) {\n      var input_el = $(this.$el);\n      var action = value ? 'show' : 'hide';\n      input_el.editable(action);\n    }\n  },\n  data: function data() {},\n  created: function created() {},\n  mounted: function mounted() {\n    var self = this;\n    var el = $(this.$el);\n    if (el.data('editable')) {\n      el.editable().destroy();\n    }\n    var option = Object.assign(this.ajaxOptions, this.option);\n    el.editable(option).on('shown', function (e, editble) {\n      self.shown();\n    }).on('hidden', function (e, reason) {\n      self.hidden();\n    }).on('save', function (e, params) {\n      if (params.newValue == self.value) return;\n      self.handleChange(params.newValue);\n    });\n  },\n\n  methods: {\n    handleChange: function handleChange(value) {\n      this.value = value;\n      this.$emit('change', this.value);\n      this.$emit('input', this.value);\n    }\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vRWRpdGFibGUudnVlPzI5NzAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFPQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOzs7WUFJQTtlQUVBO0FBSEE7O1lBS0E7ZUFFQTtBQUhBOztZQUtBO21DQUNBOztnQkFFQTtvQkFFQTtBQUhBO0FBS0E7QUFSQTs7WUFVQTtlQUVBO0FBSEE7O1lBS0E7ZUFFQTtBQUhBOztZQUtBO2VBRUE7QUFIQTs7WUFLQTtlQUVBO0FBSEE7O1lBS0E7b0NBRUE7QUFIQTs7WUFLQTtvQ0FFQTtBQUhBOztZQUtBOzs7QUFHQTtBQUpBO0FBMUNBOzt1Q0FnREE7NEJBQ0E7b0NBQ0E7d0JBQ0E7QUFFQTtBQU5BO3dCQVFBLENBQ0E7OEJBQ0EsQ0FDQTs4QkFDQTtlQUNBO29CQUNBOzZCQUNBO29CQUNBO0FBQ0E7c0RBQ0E7MERBQ0E7V0FDQTt5Q0FDQTtXQUNBO3VDQUNBO3lDQUNBOytCQUNBO0FBQ0E7QUFDQTs7OytDQUVBO21CQUNBO2dDQUNBOytCQUNBO0FBRUE7QUFOQTtBQTVFQSIsImZpbGUiOiIxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiPHRlbXBsYXRlPlxuICA8YSBocmVmPVwiamF2YXNjcmlwdDo7XCJcbiAgICAgOmRhdGEtdHlwZT1cInR5cGVcIlxuICAgICA6ZGlzYWJsZWQ9J2Rpc2FibGVkJ1xuICAgICA6ZW1wdHl0ZXh0PSdlbXB0eXRleHQnPnt7dmFsdWV9fTwvYT5cbjwvdGVtcGxhdGU+XG48c2NyaXB0PlxuICBpbXBvcnQgJy4vZWRpdGFibGUvY3NzL2Jvb3RzdHJhcC5taW4uY3NzJ1xuICBpbXBvcnQgJy4vZWRpdGFibGUvY3NzL2Jvb3RzdHJhcC1lZGl0YWJsZS5jc3MnXG4gIGltcG9ydCAnLi9lZGl0YWJsZS9jc3MvYm9vdHN0cmFwLXd5c2lodG1sNS5jc3MnXG5cbiAgaW1wb3J0ICcuL2VkaXRhYmxlL2pzL2Jvb3RzdHJhcC5taW4uanMnXG4gIGltcG9ydCAnLi9lZGl0YWJsZS9qcy9ib290c3RyYXAtZWRpdGFibGUuanMnXG4gIGltcG9ydCAnLi9lZGl0YWJsZS9qcy93eXNpaHRtbDUuanMnXG5cbiAgJC5mbi5lZGl0YWJsZS5kZWZhdWx0cy5tb2RlID0gJ2lubGluZSc7XG4gICQuZm4uZWRpdGFibGUuZGVmYXVsdHMub25ibHVyID0gJ3N1Ym1pdCc7XG4gICQuZm4uZWRpdGFibGUuZGVmYXVsdHMuc2hvd2J1dHRvbnMgPSBmYWxzZTtcbiAgJC5mbi5lZGl0YWJsZS5kZWZhdWx0cy5jbGVhciA9IGZhbHNlO1xuXG4gIGV4cG9ydCBkZWZhdWx0IHtcbiAgICBwcm9wczp7XG4gICAgICB0eXBlOiB7XG4gICAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgICAgZGVmYXVsdDogJ3RleHQnXG4gICAgICB9LFxuICAgICAgdmFsdWU6IHtcbiAgICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgICBkZWZhdWx0OiAnJ1xuICAgICAgfSxcbiAgICAgIGFqYXhPcHRpb25zOiB7XG4gICAgICAgIHR5cGU6IE9iamVjdCxcbiAgICAgICAgZGVmYXVsdDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6ICdwdXQnLFxuICAgICAgICAgICAgZGF0YVR5cGU6ICdqc29uJ1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGRpc2FibGVkOiB7XG4gICAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICAgIGRlZmF1bHQ6IGZhbHNlXG4gICAgICB9LFxuICAgICAgZW1wdHl0ZXh0OiB7XG4gICAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgICAgZGVmYXVsdDogJ+aXoCdcbiAgICAgIH0sXG4gICAgICBwbGFjZWhvbGRlcjoge1xuICAgICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICAgIGRlZmF1bHQ6ICcnXG4gICAgICB9LFxuICAgICAgZGlzcGxheToge1xuICAgICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgICBkZWZhdWx0OiB0cnVlXG4gICAgICB9LFxuICAgICAgc2hvd246IHtcbiAgICAgICAgdHlwZTogRnVuY3Rpb24sXG4gICAgICAgIGRlZmF1bHQ6IGZ1bmN0aW9uKCkge31cbiAgICAgIH0sXG4gICAgICBoaWRkZW46IHtcbiAgICAgICAgdHlwZTogRnVuY3Rpb24sXG4gICAgICAgIGRlZmF1bHQ6IGZ1bmN0aW9uKCkge31cbiAgICAgIH0sXG4gICAgICBvcHRpb246IHtcbiAgICAgICAgdHlwZTogT2JqZWN0LFxuICAgICAgICBkZWZhdWx0OiBmdW5jdGlvbigpIHsgcmV0dXJuIHsgfSB9XG4gICAgICB9XG4gICAgfSxcbiAgICB3YXRjaDoge1xuICAgICAgJ2Rpc3BsYXknOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgbGV0IGlucHV0X2VsID0gJCh0aGlzLiRlbClcbiAgICAgICAgbGV0IGFjdGlvbiA9IHZhbHVlID8gJ3Nob3cnIDogJ2hpZGUnXG4gICAgICAgIGlucHV0X2VsLmVkaXRhYmxlKGFjdGlvbilcbiAgICAgIH1cbiAgICB9LFxuICAgIGRhdGEoKSB7XG5cbiAgICB9LFxuICAgIGNyZWF0ZWQoKSB7XG4gICAgfSxcbiAgICBtb3VudGVkKCl7XG4gICAgICBsZXQgc2VsZiA9IHRoaXM7XG4gICAgICBsZXQgZWwgPSAkKHRoaXMuJGVsKVxuICAgICAgaWYgKGVsLmRhdGEoJ2VkaXRhYmxlJykpIHtcbiAgICAgICAgZWwuZWRpdGFibGUoKS5kZXN0cm95KClcbiAgICAgIH1cbiAgICAgIGxldCBvcHRpb24gPSBPYmplY3QuYXNzaWduKHRoaXMuYWpheE9wdGlvbnMsIHRoaXMub3B0aW9uKVxuICAgICAgZWwuZWRpdGFibGUob3B0aW9uKS5vbignc2hvd24nLCBmdW5jdGlvbihlLGVkaXRibGUpe1xuICAgICAgICBzZWxmLnNob3duKCk7XG4gICAgICB9KS5vbignaGlkZGVuJywgZnVuY3Rpb24oZSwgcmVhc29uKXtcbiAgICAgICAgc2VsZi5oaWRkZW4oKTtcbiAgICAgIH0pLm9uKCdzYXZlJywgZnVuY3Rpb24oZSwgcGFyYW1zKSB7XG4gICAgICAgIGlmIChwYXJhbXMubmV3VmFsdWUgPT0gc2VsZi52YWx1ZSkgcmV0dXJuXG4gICAgICAgIHNlbGYuaGFuZGxlQ2hhbmdlKHBhcmFtcy5uZXdWYWx1ZSlcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgbWV0aG9kczoge1xuICAgICAgaGFuZGxlQ2hhbmdlKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy4kZW1pdCgnY2hhbmdlJywgdGhpcy52YWx1ZSk7XG4gICAgICAgIHRoaXMuJGVtaXQoJ2lucHV0JywgdGhpcy52YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG48L3NjcmlwdD5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBFZGl0YWJsZS52dWU/MjZhNWZiYTgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/***/ (function(module, exports) {

eval("var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/*! X-editable - v1.5.1 \n* In-place editing with Twitter Bootstrap, jQuery UI or pure jQuery\n* http://github.com/vitalets/x-editable\n* Copyright (c) 2013 Vitaliy Potapov; Licensed MIT */\n/**\nForm with single input element, two buttons and two states: normal/loading.\nApplied as jQuery method to DIV tag (not to form tag!). This is because form can be in loading state when spinner shown.\nEditableform is linked with one of input types, e.g. 'text', 'select' etc.\n\n@class editableform\n@uses text\n@uses textarea\n**/\n(function ($) {\n\n    var EditableForm = function EditableForm(div, options) {\n        this.options = $.extend({}, $.fn.editableform.defaults, options);\n        this.$div = $(div); //div, containing form. Not form tag. Not editable-element.\n        if (!this.options.scope) {\n            this.options.scope = this;\n        }\n        //nothing shown after init\n    };\n\n    EditableForm.prototype = {\n        constructor: EditableForm,\n        initInput: function initInput() {\n            //called once\n            //take input from options (as it is created in editable-element)\n            this.input = this.options.input;\n\n            //set initial value\n            //todo: may be add check: typeof str === 'string' ? \n            this.value = this.input.str2value(this.options.value);\n\n            //prerender: get input.$input\n            this.input.prerender();\n        },\n        initTemplate: function initTemplate() {\n            this.$form = $($.fn.editableform.template);\n        },\n        initButtons: function initButtons() {\n            var $btn = this.$form.find('.editable-buttons');\n            $btn.append($.fn.editableform.buttons);\n            if (this.options.showbuttons === 'bottom') {\n                $btn.addClass('editable-buttons-bottom');\n            }\n        },\n        /**\n        Renders editableform\n         @method render\n        **/\n        render: function render() {\n            //init loader\n            this.$loading = $($.fn.editableform.loading);\n            this.$div.empty().append(this.$loading);\n\n            //init form template and buttons\n            this.initTemplate();\n            if (this.options.showbuttons) {\n                this.initButtons();\n            } else {\n                this.$form.find('.editable-buttons').remove();\n            }\n\n            //show loading state\n            this.showLoading();\n\n            //flag showing is form now saving value to server. \n            //It is needed to wait when closing form.\n            this.isSaving = false;\n\n            /**        \n            Fired when rendering starts\n            @event rendering \n            @param {Object} event event object\n            **/\n            this.$div.triggerHandler('rendering');\n\n            //init input\n            this.initInput();\n\n            //append input to form\n            this.$form.find('div.editable-input').append(this.input.$tpl);\n\n            //append form to container\n            this.$div.append(this.$form);\n\n            //render input\n            $.when(this.input.render()).then($.proxy(function () {\n                //setup input to submit automatically when no buttons shown\n                if (!this.options.showbuttons) {\n                    this.input.autosubmit();\n                }\n\n                //attach 'cancel' handler\n                this.$form.find('.editable-cancel').click($.proxy(this.cancel, this));\n\n                if (this.input.error) {\n                    this.error(this.input.error);\n                    this.$form.find('.editable-submit').attr('disabled', true);\n                    this.input.$input.attr('disabled', true);\n                    //prevent form from submitting\n                    this.$form.submit(function (e) {\n                        e.preventDefault();\n                    });\n                } else {\n                    this.error(false);\n                    this.input.$input.removeAttr('disabled');\n                    this.$form.find('.editable-submit').removeAttr('disabled');\n                    var value = this.value === null || this.value === undefined || this.value === '' ? this.options.defaultValue : this.value;\n                    this.input.value2input(value);\n                    //attach submit handler\n                    this.$form.submit($.proxy(this.submit, this));\n                }\n\n                /**        \n                Fired when form is rendered\n                @event rendered\n                @param {Object} event event object\n                **/\n                this.$div.triggerHandler('rendered');\n\n                this.showForm();\n\n                //call postrender method to perform actions required visibility of form\n                if (this.input.postrender) {\n                    this.input.postrender();\n                }\n            }, this));\n        },\n        cancel: function cancel() {\n            /**        \n            Fired when form was cancelled by user\n            @event cancel \n            @param {Object} event event object\n            **/\n            this.$div.triggerHandler('cancel');\n        },\n        showLoading: function showLoading() {\n            var w, h;\n            if (this.$form) {\n                //set loading size equal to form\n                w = this.$form.outerWidth();\n                h = this.$form.outerHeight();\n                if (w) {\n                    this.$loading.width(w);\n                }\n                if (h) {\n                    this.$loading.height(h);\n                }\n                this.$form.hide();\n            } else {\n                //stretch loading to fill container width\n                w = this.$loading.parent().width();\n                if (w) {\n                    this.$loading.width(w);\n                }\n            }\n            this.$loading.show();\n        },\n\n        showForm: function showForm(activate) {\n            this.$loading.hide();\n            this.$form.show();\n            if (activate !== false) {\n                this.input.activate();\n            }\n            /**        \n            Fired when form is shown\n            @event show \n            @param {Object} event event object\n            **/\n            this.$div.triggerHandler('show');\n        },\n\n        error: function error(msg) {\n            var $group = this.$form.find('.control-group'),\n                $block = this.$form.find('.editable-error-block'),\n                lines;\n\n            if (msg === false) {\n                $group.removeClass($.fn.editableform.errorGroupClass);\n                $block.removeClass($.fn.editableform.errorBlockClass).empty().hide();\n            } else {\n                //convert newline to <br> for more pretty error display\n                if (msg) {\n                    lines = ('' + msg).split('\\n');\n                    for (var i = 0; i < lines.length; i++) {\n                        lines[i] = $('<div>').text(lines[i]).html();\n                    }\n                    msg = lines.join('<br>');\n                }\n                $group.addClass($.fn.editableform.errorGroupClass);\n                $block.addClass($.fn.editableform.errorBlockClass).html(msg).show();\n            }\n        },\n\n        submit: function submit(e) {\n            e.stopPropagation();\n            e.preventDefault();\n\n            //get new value from input\n            var newValue = this.input.input2value();\n\n            //validation: if validate returns string or truthy value - means error\n            //if returns object like {newValue: '...'} => submitted value is reassigned to it\n            var error = this.validate(newValue);\n            if ($.type(error) === 'object' && error.newValue !== undefined) {\n                newValue = error.newValue;\n                this.input.value2input(newValue);\n                if (typeof error.msg === 'string') {\n                    this.error(error.msg);\n                    this.showForm();\n                    return;\n                }\n            } else if (error) {\n                this.error(error);\n                this.showForm();\n                return;\n            }\n\n            //if value not changed --> trigger 'nochange' event and return\n            /*jslint eqeq: true*/\n            if (!this.options.savenochange && this.input.value2str(newValue) == this.input.value2str(this.value)) {\n                /*jslint eqeq: false*/\n                /**        \n                Fired when value not changed but form is submitted. Requires savenochange = false.\n                @event nochange \n                @param {Object} event event object\n                **/\n                this.$div.triggerHandler('nochange');\n                return;\n            }\n\n            //convert value for submitting to server\n            var submitValue = this.input.value2submit(newValue);\n\n            this.isSaving = true;\n\n            //sending data to server\n            $.when(this.save(submitValue)).done($.proxy(function (response) {\n                this.isSaving = false;\n\n                //run success callback\n                var res = typeof this.options.success === 'function' ? this.options.success.call(this.options.scope, response, newValue) : null;\n\n                //if success callback returns false --> keep form open and do not activate input\n                if (res === false) {\n                    this.error(false);\n                    this.showForm(false);\n                    return;\n                }\n\n                //if success callback returns string -->  keep form open, show error and activate input               \n                if (typeof res === 'string') {\n                    this.error(res);\n                    this.showForm();\n                    return;\n                }\n\n                //if success callback returns object like {newValue: <something>} --> use that value instead of submitted\n                //it is usefull if you want to chnage value in url-function\n                if (res && (typeof res === 'undefined' ? 'undefined' : _typeof(res)) === 'object' && res.hasOwnProperty('newValue')) {\n                    newValue = res.newValue;\n                }\n\n                //clear error message\n                this.error(false);\n                this.value = newValue;\n                /**        \n                Fired when form is submitted\n                @event save \n                @param {Object} event event object\n                @param {Object} params additional params\n                @param {mixed} params.newValue raw new value\n                @param {mixed} params.submitValue submitted value as string\n                @param {Object} params.response ajax response\n                 @example\n                $('#form-div').on('save'), function(e, params){\n                    if(params.newValue === 'username') {...}\n                });\n                **/\n                this.$div.triggerHandler('save', { newValue: newValue, submitValue: submitValue, response: response });\n            }, this)).fail($.proxy(function (xhr) {\n                this.isSaving = false;\n\n                var msg;\n                if (typeof this.options.error === 'function') {\n                    msg = this.options.error.call(this.options.scope, xhr, newValue);\n                } else {\n                    msg = typeof xhr === 'string' ? xhr : xhr.responseText || xhr.statusText || 'Unknown error!';\n                }\n\n                this.error(msg);\n                this.showForm();\n            }, this));\n        },\n\n        save: function save(submitValue) {\n            //try parse composite pk defined as json string in data-pk \n            this.options.pk = $.fn.editableutils.tryParseJson(this.options.pk, true);\n\n            var pk = typeof this.options.pk === 'function' ? this.options.pk.call(this.options.scope) : this.options.pk,\n\n            /*\n              send on server in following cases:\n              1. url is function\n              2. url is string AND (pk defined OR send option = always) \n            */\n            send = !!(typeof this.options.url === 'function' || this.options.url && (this.options.send === 'always' || this.options.send === 'auto' && pk !== null && pk !== undefined)),\n                params;\n\n            if (send) {\n                //send to server\n                this.showLoading();\n\n                //standard params\n                params = {\n                    name: this.options.name || '',\n                    value: submitValue,\n                    pk: pk\n                };\n\n                //additional params\n                if (typeof this.options.params === 'function') {\n                    params = this.options.params.call(this.options.scope, params);\n                } else {\n                    //try parse json in single quotes (from data-params attribute)\n                    this.options.params = $.fn.editableutils.tryParseJson(this.options.params, true);\n                    $.extend(params, this.options.params);\n                }\n\n                if (typeof this.options.url === 'function') {\n                    //user's function\n                    return this.options.url.call(this.options.scope, params);\n                } else {\n                    //send ajax to server and return deferred object\n                    return $.ajax($.extend({\n                        url: this.options.url,\n                        data: params,\n                        type: 'POST'\n                    }, this.options.ajaxOptions));\n                }\n            }\n        },\n\n        validate: function validate(value) {\n            if (value === undefined) {\n                value = this.value;\n            }\n            if (typeof this.options.validate === 'function') {\n                return this.options.validate.call(this.options.scope, value);\n            }\n        },\n\n        option: function option(key, value) {\n            if (key in this.options) {\n                this.options[key] = value;\n            }\n\n            if (key === 'value') {\n                this.setValue(value);\n            }\n\n            //do not pass option to input as it is passed in editable-element\n        },\n\n        setValue: function setValue(value, convertStr) {\n            if (convertStr) {\n                this.value = this.input.str2value(value);\n            } else {\n                this.value = value;\n            }\n\n            //if form is visible, update input\n            if (this.$form && this.$form.is(':visible')) {\n                this.input.value2input(this.value);\n            }\n        }\n    };\n\n    /*\n    Initialize editableform. Applied to jQuery object.\n     @method $().editableform(options)\n    @params {Object} options\n    @example\n    var $form = $('&lt;div&gt;').editableform({\n        type: 'text',\n        name: 'username',\n        url: '/post',\n        value: 'vitaliy'\n    });\n     //to display form you should call 'render' method\n    $form.editableform('render');     \n    */\n    $.fn.editableform = function (option) {\n        var args = arguments;\n        return this.each(function () {\n            var $this = $(this),\n                data = $this.data('editableform'),\n                options = (typeof option === 'undefined' ? 'undefined' : _typeof(option)) === 'object' && option;\n            if (!data) {\n                $this.data('editableform', data = new EditableForm(this, options));\n            }\n\n            if (typeof option === 'string') {\n                //call method \n                data[option].apply(data, Array.prototype.slice.call(args, 1));\n            }\n        });\n    };\n\n    //keep link to constructor to allow inheritance\n    $.fn.editableform.Constructor = EditableForm;\n\n    //defaults\n    $.fn.editableform.defaults = {\n        /* see also defaults for input */\n\n        /**\n        Type of input. Can be <code>text|textarea|select|date|checklist</code>\n         @property type \n        @type string\n        @default 'text'\n        **/\n        type: 'text',\n        /**\n        Url for submit, e.g. <code>'/post'</code>  \n        If function - it will be called instead of ajax. Function should return deferred object to run fail/done callbacks.\n         @property url \n        @type string|function\n        @default null\n        @example\n        url: function(params) {\n            var d = new $.Deferred;\n            if(params.value === 'abc') {\n                return d.reject('error message'); //returning error via deferred object\n            } else {\n                //async saving data in js model\n                someModel.asyncSaveMethod({\n                   ..., \n                   success: function(){\n                      d.resolve();\n                   }\n                }); \n                return d.promise();\n            }\n        } \n        **/\n        url: null,\n        /**\n        Additional params for submit. If defined as <code>object</code> - it is **appended** to original ajax data (pk, name and value).  \n        If defined as <code>function</code> - returned object **overwrites** original ajax data.\n        @example\n        params: function(params) {\n            //originally params contain pk, name and value\n            params.a = 1;\n            return params;\n        }\n         @property params \n        @type object|function\n        @default null\n        **/\n        params: null,\n        /**\n        Name of field. Will be submitted on server. Can be taken from <code>id</code> attribute\n         @property name \n        @type string\n        @default null\n        **/\n        name: null,\n        /**\n        Primary key of editable object (e.g. record id in database). For composite keys use object, e.g. <code>{id: 1, lang: 'en'}</code>.\n        Can be calculated dynamically via function.\n         @property pk \n        @type string|object|function\n        @default null\n        **/\n        pk: null,\n        /**\n        Initial value. If not defined - will be taken from element's content.\n        For __select__ type should be defined (as it is ID of shown text).\n         @property value \n        @type string|object\n        @default null\n        **/\n        value: null,\n        /**\n        Value that will be displayed in input if original field value is empty (`null|undefined|''`).\n         @property defaultValue \n        @type string|object\n        @default null\n        @since 1.4.6\n        **/\n        defaultValue: null,\n        /**\n        Strategy for sending data on server. Can be `auto|always|never`.\n        When 'auto' data will be sent on server **only if pk and url defined**, otherwise new value will be stored locally.\n         @property send \n        @type string\n        @default 'auto'\n        **/\n        send: 'auto',\n        /**\n        Function for client-side validation. If returns string - means validation not passed and string showed as error.\n        Since 1.5.1 you can modify submitted value by returning object from `validate`: \n        `{newValue: '...'}` or `{newValue: '...', msg: '...'}`\n         @property validate \n        @type function\n        @default null\n        @example\n        validate: function(value) {\n            if($.trim(value) == '') {\n                return 'This field is required';\n            }\n        }\n        **/\n        validate: null,\n        /**\n        Success callback. Called when value successfully sent on server and **response status = 200**.  \n        Usefull to work with json response. For example, if your backend response can be <code>{success: true}</code>\n        or <code>{success: false, msg: \"server error\"}</code> you can check it inside this callback.  \n        If it returns **string** - means error occured and string is shown as error message.  \n        If it returns **object like** <code>{newValue: &lt;something&gt;}</code> - it overwrites value, submitted by user.  \n        Otherwise newValue simply rendered into element.\n        \n        @property success \n        @type function\n        @default null\n        @example\n        success: function(response, newValue) {\n            if(!response.success) return response.msg;\n        }\n        **/\n        success: null,\n        /**\n        Error callback. Called when request failed (response status != 200).  \n        Usefull when you want to parse error response and display a custom message.\n        Must return **string** - the message to be displayed in the error block.\n                \n        @property error \n        @type function\n        @default null\n        @since 1.4.4\n        @example\n        error: function(response, newValue) {\n            if(response.status === 500) {\n                return 'Service unavailable. Please try later.';\n            } else {\n                return response.responseText;\n            }\n        }\n        **/\n        error: null,\n        /**\n        Additional options for submit ajax request.\n        List of values: http://api.jquery.com/jQuery.ajax\n        \n        @property ajaxOptions \n        @type object\n        @default null\n        @since 1.1.1        \n        @example \n        ajaxOptions: {\n            type: 'put',\n            dataType: 'json'\n        }        \n        **/\n        ajaxOptions: null,\n        /**\n        Where to show buttons: left(true)|bottom|false  \n        Form without buttons is auto-submitted.\n         @property showbuttons \n        @type boolean|string\n        @default true\n        @since 1.1.1\n        **/\n        showbuttons: true,\n        /**\n        Scope for callback methods (success, validate).  \n        If <code>null</code> means editableform instance itself. \n         @property scope \n        @type DOMElement|object\n        @default null\n        @since 1.2.0\n        @private\n        **/\n        scope: null,\n        /**\n        Whether to save or cancel value when it was not changed but form was submitted\n         @property savenochange \n        @type boolean\n        @default false\n        @since 1.2.0\n        **/\n        savenochange: false\n    };\n\n    /*\n    Note: following params could redefined in engine: bootstrap or jqueryui:\n    Classes 'control-group' and 'editable-error-block' must always present!\n    */\n    $.fn.editableform.template = '<form class=\"form-inline editableform\">' + '<div class=\"control-group\">' + '<div><div class=\"editable-input\"></div><div class=\"editable-buttons\"></div></div>' + '<div class=\"editable-error-block\"></div>' + '</div>' + '</form>';\n\n    //loading div\n    $.fn.editableform.loading = '<div class=\"editableform-loading\"></div>';\n\n    //buttons\n    $.fn.editableform.buttons = '<button type=\"submit\" class=\"editable-submit\">ok</button>' + '<button type=\"button\" class=\"editable-cancel\">cancel</button>';\n\n    //error class attached to control-group\n    $.fn.editableform.errorGroupClass = null;\n\n    //error class attached to editable-error-block\n    $.fn.editableform.errorBlockClass = 'editable-error';\n\n    //engine\n    $.fn.editableform.engine = 'jquery';\n})(window.jQuery);\n\n/**\n* EditableForm utilites\n*/\n(function ($) {\n\n    //utils\n    $.fn.editableutils = {\n        /**\n        * classic JS inheritance function\n        */\n        inherit: function inherit(Child, Parent) {\n            var F = function F() {};\n            F.prototype = Parent.prototype;\n            Child.prototype = new F();\n            Child.prototype.constructor = Child;\n            Child.superclass = Parent.prototype;\n        },\n\n        /**\n        * set caret position in input\n        * see http://stackoverflow.com/questions/499126/jquery-set-cursor-position-in-text-area\n        */\n        setCursorPosition: function setCursorPosition(elem, pos) {\n            if (elem.setSelectionRange) {\n                elem.setSelectionRange(pos, pos);\n            } else if (elem.createTextRange) {\n                var range = elem.createTextRange();\n                range.collapse(true);\n                range.moveEnd('character', pos);\n                range.moveStart('character', pos);\n                range.select();\n            }\n        },\n\n        /**\n        * function to parse JSON in *single* quotes. (jquery automatically parse only double quotes)\n        * That allows such code as: <a data-source=\"{'a': 'b', 'c': 'd'}\">\n        * safe = true --> means no exception will be thrown\n        * for details see http://stackoverflow.com/questions/7410348/how-to-set-json-format-to-html5-data-attributes-in-the-jquery\n        */\n        tryParseJson: function tryParseJson(s, safe) {\n            if (typeof s === 'string' && s.length && s.match(/^[\\{\\[].*[\\}\\]]$/)) {\n                if (safe) {\n                    try {\n                        /*jslint evil: true*/\n                        s = new Function('return ' + s)();\n                        /*jslint evil: false*/\n                    } catch (e) {} finally {\n                        return s;\n                    }\n                } else {\n                    /*jslint evil: true*/\n                    s = new Function('return ' + s)();\n                    /*jslint evil: false*/\n                }\n            }\n            return s;\n        },\n\n        /**\n        * slice object by specified keys\n        */\n        sliceObj: function sliceObj(obj, keys, caseSensitive /* default: false */) {\n            var key,\n                keyLower,\n                newObj = {};\n\n            if (!$.isArray(keys) || !keys.length) {\n                return newObj;\n            }\n\n            for (var i = 0; i < keys.length; i++) {\n                key = keys[i];\n                if (obj.hasOwnProperty(key)) {\n                    newObj[key] = obj[key];\n                }\n\n                if (caseSensitive === true) {\n                    continue;\n                }\n\n                //when getting data-* attributes via $.data() it's converted to lowercase.\n                //details: http://stackoverflow.com/questions/7602565/using-data-attributes-with-jquery\n                //workaround is code below.\n                keyLower = key.toLowerCase();\n                if (obj.hasOwnProperty(keyLower)) {\n                    newObj[key] = obj[keyLower];\n                }\n            }\n\n            return newObj;\n        },\n\n        /*\n        exclude complex objects from $.data() before pass to config\n        */\n        getConfigData: function getConfigData($element) {\n            var data = {};\n            $.each($element.data(), function (k, v) {\n                if ((typeof v === 'undefined' ? 'undefined' : _typeof(v)) !== 'object' || v && (typeof v === 'undefined' ? 'undefined' : _typeof(v)) === 'object' && (v.constructor === Object || v.constructor === Array)) {\n                    data[k] = v;\n                }\n            });\n            return data;\n        },\n\n        /*\n         returns keys of object\n        */\n        objectKeys: function objectKeys(o) {\n            if (Object.keys) {\n                return Object.keys(o);\n            } else {\n                if (o !== Object(o)) {\n                    throw new TypeError('Object.keys called on a non-object');\n                }\n                var k = [],\n                    p;\n                for (p in o) {\n                    if (Object.prototype.hasOwnProperty.call(o, p)) {\n                        k.push(p);\n                    }\n                }\n                return k;\n            }\n        },\n\n        /**\n         method to escape html.\n        **/\n        escape: function escape(str) {\n            return $('<div>').text(str).html();\n        },\n\n        /*\n         returns array items from sourceData having value property equal or inArray of 'value'\n        */\n        itemsByValue: function itemsByValue(value, sourceData, valueProp) {\n            if (!sourceData || value === null) {\n                return [];\n            }\n\n            if (typeof valueProp !== \"function\") {\n                var idKey = valueProp || 'value';\n                valueProp = function valueProp(e) {\n                    return e[idKey];\n                };\n            }\n\n            var isValArray = $.isArray(value),\n                result = [],\n                that = this;\n\n            $.each(sourceData, function (i, o) {\n                if (o.children) {\n                    result = result.concat(that.itemsByValue(value, o.children, valueProp));\n                } else {\n                    /*jslint eqeq: true*/\n                    if (isValArray) {\n                        if ($.grep(value, function (v) {\n                            return v == (o && (typeof o === 'undefined' ? 'undefined' : _typeof(o)) === 'object' ? valueProp(o) : o);\n                        }).length) {\n                            result.push(o);\n                        }\n                    } else {\n                        var itemValue = o && (typeof o === 'undefined' ? 'undefined' : _typeof(o)) === 'object' ? valueProp(o) : o;\n                        if (value == itemValue) {\n                            result.push(o);\n                        }\n                    }\n                    /*jslint eqeq: false*/\n                }\n            });\n\n            return result;\n        },\n\n        /*\n        Returns input by options: type, mode. \n        */\n        createInput: function createInput(options) {\n            var TypeConstructor,\n                typeOptions,\n                input,\n                type = options.type;\n\n            //`date` is some kind of virtual type that is transformed to one of exact types\n            //depending on mode and core lib\n            if (type === 'date') {\n                //inline\n                if (options.mode === 'inline') {\n                    if ($.fn.editabletypes.datefield) {\n                        type = 'datefield';\n                    } else if ($.fn.editabletypes.dateuifield) {\n                        type = 'dateuifield';\n                    }\n                    //popup\n                } else {\n                    if ($.fn.editabletypes.date) {\n                        type = 'date';\n                    } else if ($.fn.editabletypes.dateui) {\n                        type = 'dateui';\n                    }\n                }\n\n                //if type still `date` and not exist in types, replace with `combodate` that is base input\n                if (type === 'date' && !$.fn.editabletypes.date) {\n                    type = 'combodate';\n                }\n            }\n\n            //`datetime` should be datetimefield in 'inline' mode\n            if (type === 'datetime' && options.mode === 'inline') {\n                type = 'datetimefield';\n            }\n\n            //change wysihtml5 to textarea for jquery UI and plain versions\n            if (type === 'wysihtml5' && !$.fn.editabletypes[type]) {\n                type = 'textarea';\n            }\n\n            //create input of specified type. Input will be used for converting value, not in form\n            if (typeof $.fn.editabletypes[type] === 'function') {\n                TypeConstructor = $.fn.editabletypes[type];\n                typeOptions = this.sliceObj(options, this.objectKeys(TypeConstructor.defaults));\n                input = new TypeConstructor(typeOptions);\n                return input;\n            } else {\n                $.error('Unknown type: ' + type);\n                return false;\n            }\n        },\n\n        //see http://stackoverflow.com/questions/7264899/detect-css-transitions-using-javascript-and-without-modernizr\n        supportsTransitions: function supportsTransitions() {\n            var b = document.body || document.documentElement,\n                s = b.style,\n                p = 'transition',\n                v = ['Moz', 'Webkit', 'Khtml', 'O', 'ms'];\n\n            if (typeof s[p] === 'string') {\n                return true;\n            }\n\n            // Tests for vendor specific prop\n            p = p.charAt(0).toUpperCase() + p.substr(1);\n            for (var i = 0; i < v.length; i++) {\n                if (typeof s[v[i] + p] === 'string') {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n    };\n})(window.jQuery);\n\n/**\nAttaches stand-alone container with editable-form to HTML element. Element is used only for positioning, value is not stored anywhere.<br>\nThis method applied internally in <code>$().editable()</code>. You should subscribe on it's events (save / cancel) to get profit of it.<br>\nFinal realization can be different: bootstrap-popover, jqueryui-tooltip, poshytip, inline-div. It depends on which js file you include.<br>\nApplied as jQuery method.\n\n@class editableContainer\n@uses editableform\n**/\n(function ($) {\n\n    var Popup = function Popup(element, options) {\n        this.init(element, options);\n    };\n\n    var Inline = function Inline(element, options) {\n        this.init(element, options);\n    };\n\n    //methods\n    Popup.prototype = {\n        containerName: null, //method to call container on element\n        containerDataName: null, //object name in element's .data()\n        innerCss: null, //tbd in child class\n        containerClass: 'editable-container editable-popup', //css class applied to container element\n        defaults: {}, //container itself defaults\n\n        init: function init(element, options) {\n            this.$element = $(element);\n            //since 1.4.1 container do not use data-* directly as they already merged into options.\n            this.options = $.extend({}, $.fn.editableContainer.defaults, options);\n            this.splitOptions();\n\n            //set scope of form callbacks to element\n            this.formOptions.scope = this.$element[0];\n\n            this.initContainer();\n\n            //flag to hide container, when saving value will finish\n            this.delayedHide = false;\n\n            //bind 'destroyed' listener to destroy container when element is removed from dom\n            this.$element.on('destroyed', $.proxy(function () {\n                this.destroy();\n            }, this));\n\n            //attach document handler to close containers on click / escape\n            if (!$(document).data('editable-handlers-attached')) {\n                //close all on escape\n                $(document).on('keyup.editable', function (e) {\n                    if (e.which === 27) {\n                        $('.editable-open').editableContainer('hide');\n                        //todo: return focus on element \n                    }\n                });\n\n                //close containers when click outside \n                //(mousedown could be better than click, it closes everything also on drag drop)\n                $(document).on('click.editable', function (e) {\n                    var $target = $(e.target),\n                        i,\n                        exclude_classes = ['.editable-container', '.ui-datepicker-header', '.datepicker', //in inline mode datepicker is rendered into body\n                    '.modal-backdrop', '.bootstrap-wysihtml5-insert-image-modal', '.bootstrap-wysihtml5-insert-link-modal'];\n\n                    //check if element is detached. It occurs when clicking in bootstrap datepicker\n                    if (!$.contains(document.documentElement, e.target)) {\n                        return;\n                    }\n\n                    //for some reason FF 20 generates extra event (click) in select2 widget with e.target = document\n                    //we need to filter it via construction below. See https://github.com/vitalets/x-editable/issues/199\n                    //Possibly related to http://stackoverflow.com/questions/10119793/why-does-firefox-react-differently-from-webkit-and-ie-to-click-event-on-selec\n                    if ($target.is(document)) {\n                        return;\n                    }\n\n                    //if click inside one of exclude classes --> no nothing\n                    for (i = 0; i < exclude_classes.length; i++) {\n                        if ($target.is(exclude_classes[i]) || $target.parents(exclude_classes[i]).length) {\n                            return;\n                        }\n                    }\n\n                    //close all open containers (except one - target)\n                    Popup.prototype.closeOthers(e.target);\n                });\n\n                $(document).data('editable-handlers-attached', true);\n            }\n        },\n\n        //split options on containerOptions and formOptions\n        splitOptions: function splitOptions() {\n            this.containerOptions = {};\n            this.formOptions = {};\n\n            if (!$.fn[this.containerName]) {\n                throw new Error(this.containerName + ' not found. Have you included corresponding js file?');\n            }\n\n            //keys defined in container defaults go to container, others go to form\n            for (var k in this.options) {\n                if (k in this.defaults) {\n                    this.containerOptions[k] = this.options[k];\n                } else {\n                    this.formOptions[k] = this.options[k];\n                }\n            }\n        },\n\n        /*\n        Returns jquery object of container\n        @method tip()\n        */\n        tip: function tip() {\n            return this.container() ? this.container().$tip : null;\n        },\n\n        /* returns container object */\n        container: function container() {\n            var container;\n            //first, try get it by `containerDataName`\n            if (this.containerDataName) {\n                if (container = this.$element.data(this.containerDataName)) {\n                    return container;\n                }\n            }\n            //second, try `containerName`\n            container = this.$element.data(this.containerName);\n            return container;\n        },\n\n        /* call native method of underlying container, e.g. this.$element.popover('method') */\n        call: function call() {\n            this.$element[this.containerName].apply(this.$element, arguments);\n        },\n\n        initContainer: function initContainer() {\n            this.call(this.containerOptions);\n        },\n\n        renderForm: function renderForm() {\n            this.$form.editableform(this.formOptions).on({\n                save: $.proxy(this.save, this), //click on submit button (value changed)\n                nochange: $.proxy(function () {\n                    this.hide('nochange');\n                }, this), //click on submit button (value NOT changed)                \n                cancel: $.proxy(function () {\n                    this.hide('cancel');\n                }, this), //click on calcel button\n                show: $.proxy(function () {\n                    if (this.delayedHide) {\n                        this.hide(this.delayedHide.reason);\n                        this.delayedHide = false;\n                    } else {\n                        this.setPosition();\n                    }\n                }, this), //re-position container every time form is shown (occurs each time after loading state)\n                rendering: $.proxy(this.setPosition, this), //this allows to place container correctly when loading shown\n                resize: $.proxy(this.setPosition, this), //this allows to re-position container when form size is changed \n                rendered: $.proxy(function () {\n                    /**        \n                    Fired when container is shown and form is rendered (for select will wait for loading dropdown options).  \n                    **Note:** Bootstrap popover has own `shown` event that now cannot be separated from x-editable's one.\n                    The workaround is to check `arguments.length` that is always `2` for x-editable.                     \n                    \n                    @event shown \n                    @param {Object} event event object\n                    @example\n                    $('#username').on('shown', function(e, editable) {\n                        editable.input.$input.val('overwriting value of input..');\n                    });                     \n                    **/\n                    /*\n                     TODO: added second param mainly to distinguish from bootstrap's shown event. It's a hotfix that will be solved in future versions via namespaced events.  \n                    */\n                    this.$element.triggerHandler('shown', $(this.options.scope).data('editable'));\n                }, this)\n            }).editableform('render');\n        },\n\n        /**\n        Shows container with form\n        @method show()\n        @param {boolean} closeAll Whether to close all other editable containers when showing this one. Default true.\n        **/\n        /* Note: poshytip owerwrites this method totally! */\n        show: function show(closeAll) {\n            this.$element.addClass('editable-open');\n            if (closeAll !== false) {\n                //close all open containers (except this)\n                this.closeOthers(this.$element[0]);\n            }\n\n            //show container itself\n            this.innerShow();\n            this.tip().addClass(this.containerClass);\n\n            /*\n            Currently, form is re-rendered on every show. \n            The main reason is that we dont know, what will container do with content when closed:\n            remove(), detach() or just hide() - it depends on container.\n            \n            Detaching form itself before hide and re-insert before show is good solution, \n            but visually it looks ugly --> container changes size before hide.  \n            */\n\n            //if form already exist - delete previous data \n            if (this.$form) {\n                //todo: destroy prev data!\n                //this.$form.destroy();\n            }\n\n            this.$form = $('<div>');\n\n            //insert form into container body\n            if (this.tip().is(this.innerCss)) {\n                //for inline container\n                this.tip().append(this.$form);\n            } else {\n                this.tip().find(this.innerCss).append(this.$form);\n            }\n\n            //render form\n            this.renderForm();\n        },\n\n        /**\n        Hides container with form\n        @method hide()\n        @param {string} reason Reason caused hiding. Can be <code>save|cancel|onblur|nochange|undefined (=manual)</code>\n        **/\n        hide: function hide(reason) {\n            if (!this.tip() || !this.tip().is(':visible') || !this.$element.hasClass('editable-open')) {\n                return;\n            }\n\n            //if form is saving value, schedule hide\n            if (this.$form.data('editableform').isSaving) {\n                this.delayedHide = { reason: reason };\n                return;\n            } else {\n                this.delayedHide = false;\n            }\n\n            this.$element.removeClass('editable-open');\n            this.innerHide();\n\n            /**\n            Fired when container was hidden. It occurs on both save or cancel.  \n            **Note:** Bootstrap popover has own `hidden` event that now cannot be separated from x-editable's one.\n            The workaround is to check `arguments.length` that is always `2` for x-editable. \n             @event hidden \n            @param {object} event event object\n            @param {string} reason Reason caused hiding. Can be <code>save|cancel|onblur|nochange|manual</code>\n            @example\n            $('#username').on('hidden', function(e, reason) {\n                if(reason === 'save' || reason === 'cancel') {\n                    //auto-open next editable\n                    $(this).closest('tr').next().find('.editable').editable('show');\n                } \n            });\n            **/\n            this.$element.triggerHandler('hidden', reason || 'manual');\n        },\n\n        /* internal show method. To be overwritten in child classes */\n        innerShow: function innerShow() {},\n\n        /* internal hide method. To be overwritten in child classes */\n        innerHide: function innerHide() {},\n\n        /**\n        Toggles container visibility (show / hide)\n        @method toggle()\n        @param {boolean} closeAll Whether to close all other editable containers when showing this one. Default true.\n        **/\n        toggle: function toggle(closeAll) {\n            if (this.container() && this.tip() && this.tip().is(':visible')) {\n                this.hide();\n            } else {\n                this.show(closeAll);\n            }\n        },\n\n        /*\n        Updates the position of container when content changed.\n        @method setPosition()\n        */\n        setPosition: function setPosition() {\n            //tbd in child class\n        },\n\n        save: function save(e, params) {\n            /**        \n            Fired when new value was submitted. You can use <code>$(this).data('editableContainer')</code> inside handler to access to editableContainer instance\n            \n            @event save \n            @param {Object} event event object\n            @param {Object} params additional params\n            @param {mixed} params.newValue submitted value\n            @param {Object} params.response ajax response\n            @example\n            $('#username').on('save', function(e, params) {\n                //assuming server response: '{success: true}'\n                var pk = $(this).data('editableContainer').options.pk;\n                if(params.response && params.response.success) {\n                    alert('value: ' + params.newValue + ' with pk: ' + pk + ' saved!');\n                } else {\n                    alert('error!'); \n                } \n            });\n            **/\n            this.$element.triggerHandler('save', params);\n\n            //hide must be after trigger, as saving value may require methods of plugin, applied to input\n            this.hide('save');\n        },\n\n        /**\n        Sets new option\n        \n        @method option(key, value)\n        @param {string} key \n        @param {mixed} value \n        **/\n        option: function option(key, value) {\n            this.options[key] = value;\n            if (key in this.containerOptions) {\n                this.containerOptions[key] = value;\n                this.setContainerOption(key, value);\n            } else {\n                this.formOptions[key] = value;\n                if (this.$form) {\n                    this.$form.editableform('option', key, value);\n                }\n            }\n        },\n\n        setContainerOption: function setContainerOption(key, value) {\n            this.call('option', key, value);\n        },\n\n        /**\n        Destroys the container instance\n        @method destroy()\n        **/\n        destroy: function destroy() {\n            this.hide();\n            this.innerDestroy();\n            this.$element.off('destroyed');\n            this.$element.removeData('editableContainer');\n        },\n\n        /* to be overwritten in child classes */\n        innerDestroy: function innerDestroy() {},\n\n        /*\n        Closes other containers except one related to passed element. \n        Other containers can be cancelled or submitted (depends on onblur option)\n        */\n        closeOthers: function closeOthers(element) {\n            $('.editable-open').each(function (i, el) {\n                //do nothing with passed element and it's children\n                if (el === element || $(el).find(element).length) {\n                    return;\n                }\n\n                //otherwise cancel or submit all open containers \n                var $el = $(el),\n                    ec = $el.data('editableContainer');\n\n                if (!ec) {\n                    return;\n                }\n\n                if (ec.options.onblur === 'cancel') {\n                    $el.data('editableContainer').hide('onblur');\n                } else if (ec.options.onblur === 'submit') {\n                    $el.data('editableContainer').tip().find('form').submit();\n                }\n            });\n        },\n\n        /**\n        Activates input of visible container (e.g. set focus)\n        @method activate()\n        **/\n        activate: function activate() {\n            if (this.tip && this.tip().is(':visible') && this.$form) {\n                this.$form.data('editableform').input.activate();\n            }\n        }\n\n    };\n\n    /**\n    jQuery method to initialize editableContainer.\n    \n    @method $().editableContainer(options)\n    @params {Object} options\n    @example\n    $('#edit').editableContainer({\n        type: 'text',\n        url: '/post',\n        pk: 1,\n        value: 'hello'\n    });\n    **/\n    $.fn.editableContainer = function (option) {\n        var args = arguments;\n        return this.each(function () {\n            var $this = $(this),\n                dataKey = 'editableContainer',\n                data = $this.data(dataKey),\n                options = (typeof option === 'undefined' ? 'undefined' : _typeof(option)) === 'object' && option,\n                Constructor = options.mode === 'inline' ? Inline : Popup;\n\n            if (!data) {\n                $this.data(dataKey, data = new Constructor(this, options));\n            }\n\n            if (typeof option === 'string') {\n                //call method \n                data[option].apply(data, Array.prototype.slice.call(args, 1));\n            }\n        });\n    };\n\n    //store constructors\n    $.fn.editableContainer.Popup = Popup;\n    $.fn.editableContainer.Inline = Inline;\n\n    //defaults\n    $.fn.editableContainer.defaults = {\n        /**\n        Initial value of form input\n         @property value \n        @type mixed\n        @default null\n        @private\n        **/\n        value: null,\n        /**\n        Placement of container relative to element. Can be <code>top|right|bottom|left</code>. Not used for inline container.\n         @property placement \n        @type string\n        @default 'top'\n        **/\n        placement: 'top',\n        /**\n        Whether to hide container on save/cancel.\n         @property autohide \n        @type boolean\n        @default true\n        @private \n        **/\n        autohide: true,\n        /**\n        Action when user clicks outside the container. Can be <code>cancel|submit|ignore</code>.  \n        Setting <code>ignore</code> allows to have several containers open. \n         @property onblur \n        @type string\n        @default 'cancel'\n        @since 1.1.1\n        **/\n        onblur: 'cancel',\n\n        /**\n        Animation speed (inline mode only)\n        @property anim \n        @type string\n        @default false\n        **/\n        anim: false,\n\n        /**\n        Mode of editable, can be `popup` or `inline` \n        \n        @property mode \n        @type string         \n        @default 'popup'\n        @since 1.4.0        \n        **/\n        mode: 'popup'\n    };\n\n    /* \n    * workaround to have 'destroyed' event to destroy popover when element is destroyed\n    * see http://stackoverflow.com/questions/2200494/jquery-trigger-event-when-an-element-is-removed-from-the-dom\n    */\n    jQuery.event.special.destroyed = {\n        remove: function remove(o) {\n            if (o.handler) {\n                o.handler();\n            }\n        }\n    };\n})(window.jQuery);\n\n/**\n* Editable Inline \n* ---------------------\n*/\n(function ($) {\n\n    //copy prototype from EditableContainer\n    //extend methods\n    $.extend($.fn.editableContainer.Inline.prototype, $.fn.editableContainer.Popup.prototype, {\n        containerName: 'editableform',\n        innerCss: '.editable-inline',\n        containerClass: 'editable-container editable-inline', //css class applied to container element\n\n        initContainer: function initContainer() {\n            //container is <span> element\n            this.$tip = $('<span></span>');\n\n            //convert anim to miliseconds (int)\n            if (!this.options.anim) {\n                this.options.anim = 0;\n            }\n        },\n\n        splitOptions: function splitOptions() {\n            //all options are passed to form\n            this.containerOptions = {};\n            this.formOptions = this.options;\n        },\n\n        tip: function tip() {\n            return this.$tip;\n        },\n\n        innerShow: function innerShow() {\n            this.$element.hide();\n            this.tip().insertAfter(this.$element).show();\n        },\n\n        innerHide: function innerHide() {\n            this.$tip.hide(this.options.anim, $.proxy(function () {\n                this.$element.show();\n                this.innerDestroy();\n            }, this));\n        },\n\n        innerDestroy: function innerDestroy() {\n            if (this.tip()) {\n                this.tip().empty().remove();\n            }\n        }\n    });\n})(window.jQuery);\n/**\nMakes editable any HTML element on the page. Applied as jQuery method.\n\n@class editable\n@uses editableContainer\n**/\n(function ($) {\n\n    var Editable = function Editable(element, options) {\n        this.$element = $(element);\n        //data-* has more priority over js options: because dynamically created elements may change data-* \n        this.options = $.extend({}, $.fn.editable.defaults, options, $.fn.editableutils.getConfigData(this.$element));\n        if (this.options.selector) {\n            this.initLive();\n        } else {\n            this.init();\n        }\n\n        //check for transition support\n        if (this.options.highlight && !$.fn.editableutils.supportsTransitions()) {\n            this.options.highlight = false;\n        }\n    };\n\n    Editable.prototype = {\n        constructor: Editable,\n        init: function init() {\n            var isValueByText = false,\n                doAutotext,\n                finalize;\n\n            //name\n            this.options.name = this.options.name || this.$element.attr('id');\n\n            //create input of specified type. Input needed already here to convert value for initial display (e.g. show text by id for select)\n            //also we set scope option to have access to element inside input specific callbacks (e. g. source as function)\n            this.options.scope = this.$element[0];\n            this.input = $.fn.editableutils.createInput(this.options);\n            if (!this.input) {\n                return;\n            }\n\n            //set value from settings or by element's text\n            if (this.options.value === undefined || this.options.value === null) {\n                this.value = this.input.html2value($.trim(this.$element.html()));\n                isValueByText = true;\n            } else {\n                /*\n                  value can be string when received from 'data-value' attribute\n                  for complext objects value can be set as json string in data-value attribute, \n                  e.g. data-value=\"{city: 'Moscow', street: 'Lenina'}\"\n                */\n                this.options.value = $.fn.editableutils.tryParseJson(this.options.value, true);\n                if (typeof this.options.value === 'string') {\n                    this.value = this.input.str2value(this.options.value);\n                } else {\n                    this.value = this.options.value;\n                }\n            }\n\n            //add 'editable' class to every editable element\n            this.$element.addClass('editable');\n\n            //specifically for \"textarea\" add class .editable-pre-wrapped to keep linebreaks\n            if (this.input.type === 'textarea') {\n                this.$element.addClass('editable-pre-wrapped');\n            }\n\n            //attach handler activating editable. In disabled mode it just prevent default action (useful for links)\n            if (this.options.toggle !== 'manual') {\n                this.$element.addClass('editable-click');\n                this.$element.on(this.options.toggle + '.editable', $.proxy(function (e) {\n                    //prevent following link if editable enabled\n                    if (!this.options.disabled) {\n                        e.preventDefault();\n                    }\n\n                    //stop propagation not required because in document click handler it checks event target\n                    //e.stopPropagation();\n\n                    if (this.options.toggle === 'mouseenter') {\n                        //for hover only show container\n                        this.show();\n                    } else {\n                        //when toggle='click' we should not close all other containers as they will be closed automatically in document click listener\n                        var closeAll = this.options.toggle !== 'click';\n                        this.toggle(closeAll);\n                    }\n                }, this));\n            } else {\n                this.$element.attr('tabindex', -1); //do not stop focus on element when toggled manually\n            }\n\n            //if display is function it's far more convinient to have autotext = always to render correctly on init\n            //see https://github.com/vitalets/x-editable-yii/issues/34\n            if (typeof this.options.display === 'function') {\n                this.options.autotext = 'always';\n            }\n\n            //check conditions for autotext:\n            switch (this.options.autotext) {\n                case 'always':\n                    doAutotext = true;\n                    break;\n                case 'auto':\n                    //if element text is empty and value is defined and value not generated by text --> run autotext\n                    doAutotext = !$.trim(this.$element.text()).length && this.value !== null && this.value !== undefined && !isValueByText;\n                    break;\n                default:\n                    doAutotext = false;\n            }\n\n            //depending on autotext run render() or just finilize init\n            $.when(doAutotext ? this.render() : true).then($.proxy(function () {\n                if (this.options.disabled) {\n                    this.disable();\n                } else {\n                    this.enable();\n                }\n                /**        \n                Fired when element was initialized by `$().editable()` method. \n                Please note that you should setup `init` handler **before** applying `editable`. \n                               \n                @event init \n                @param {Object} event event object\n                @param {Object} editable editable instance (as here it cannot accessed via data('editable'))\n                @since 1.2.0\n                @example\n                $('#username').on('init', function(e, editable) {\n                    alert('initialized ' + editable.options.name);\n                });\n                $('#username').editable();\n                **/\n                this.$element.triggerHandler('init', this);\n            }, this));\n        },\n\n        /*\n         Initializes parent element for live editables \n        */\n        initLive: function initLive() {\n            //store selector \n            var selector = this.options.selector;\n            //modify options for child elements\n            this.options.selector = false;\n            this.options.autotext = 'never';\n            //listen toggle events\n            this.$element.on(this.options.toggle + '.editable', selector, $.proxy(function (e) {\n                var $target = $(e.target);\n                if (!$target.data('editable')) {\n                    //if delegated element initially empty, we need to clear it's text (that was manually set to `empty` by user)\n                    //see https://github.com/vitalets/x-editable/issues/137 \n                    if ($target.hasClass(this.options.emptyclass)) {\n                        $target.empty();\n                    }\n                    $target.editable(this.options).trigger(e);\n                }\n            }, this));\n        },\n\n        /*\n        Renders value into element's text.\n        Can call custom display method from options.\n        Can return deferred object.\n        @method render()\n        @param {mixed} response server response (if exist) to pass into display function\n        */\n        render: function render(response) {\n            //do not display anything\n            if (this.options.display === false) {\n                return;\n            }\n\n            //if input has `value2htmlFinal` method, we pass callback in third param to be called when source is loaded\n            if (this.input.value2htmlFinal) {\n                return this.input.value2html(this.value, this.$element[0], this.options.display, response);\n                //if display method defined --> use it    \n            } else if (typeof this.options.display === 'function') {\n                return this.options.display.call(this.$element[0], this.value, response);\n                //else use input's original value2html() method    \n            } else {\n                return this.input.value2html(this.value, this.$element[0]);\n            }\n        },\n\n        /**\n        Enables editable\n        @method enable()\n        **/\n        enable: function enable() {\n            this.options.disabled = false;\n            this.$element.removeClass('editable-disabled');\n            this.handleEmpty(this.isEmpty);\n            if (this.options.toggle !== 'manual') {\n                if (this.$element.attr('tabindex') === '-1') {\n                    this.$element.removeAttr('tabindex');\n                }\n            }\n        },\n\n        /**\n        Disables editable\n        @method disable()\n        **/\n        disable: function disable() {\n            this.options.disabled = true;\n            this.hide();\n            this.$element.addClass('editable-disabled');\n            this.handleEmpty(this.isEmpty);\n            //do not stop focus on this element\n            this.$element.attr('tabindex', -1);\n        },\n\n        /**\n        Toggles enabled / disabled state of editable element\n        @method toggleDisabled()\n        **/\n        toggleDisabled: function toggleDisabled() {\n            if (this.options.disabled) {\n                this.enable();\n            } else {\n                this.disable();\n            }\n        },\n\n        /**\n        Sets new option\n        \n        @method option(key, value)\n        @param {string|object} key option name or object with several options\n        @param {mixed} value option new value\n        @example\n        $('.editable').editable('option', 'pk', 2);\n        **/\n        option: function option(key, value) {\n            //set option(s) by object\n            if (key && (typeof key === 'undefined' ? 'undefined' : _typeof(key)) === 'object') {\n                $.each(key, $.proxy(function (k, v) {\n                    this.option($.trim(k), v);\n                }, this));\n                return;\n            }\n\n            //set option by string             \n            this.options[key] = value;\n\n            //disabled\n            if (key === 'disabled') {\n                return value ? this.disable() : this.enable();\n            }\n\n            //value\n            if (key === 'value') {\n                this.setValue(value);\n            }\n\n            //transfer new option to container! \n            if (this.container) {\n                this.container.option(key, value);\n            }\n\n            //pass option to input directly (as it points to the same in form)\n            if (this.input.option) {\n                this.input.option(key, value);\n            }\n        },\n\n        /*\n        * set emptytext if element is empty\n        */\n        handleEmpty: function handleEmpty(isEmpty) {\n            //do not handle empty if we do not display anything\n            if (this.options.display === false) {\n                return;\n            }\n\n            /* \n            isEmpty may be set directly as param of method.\n            It is required when we enable/disable field and can't rely on content \n            as node content is text: \"Empty\" that is not empty %)\n            */\n            if (isEmpty !== undefined) {\n                this.isEmpty = isEmpty;\n            } else {\n                //detect empty\n                //for some inputs we need more smart check\n                //e.g. wysihtml5 may have <br>, <p></p>, <img>\n                if (typeof this.input.isEmpty === 'function') {\n                    this.isEmpty = this.input.isEmpty(this.$element);\n                } else {\n                    this.isEmpty = $.trim(this.$element.html()) === '';\n                }\n            }\n\n            //emptytext shown only for enabled\n            if (!this.options.disabled) {\n                if (this.isEmpty) {\n                    this.$element.html(this.options.emptytext);\n                    if (this.options.emptyclass) {\n                        this.$element.addClass(this.options.emptyclass);\n                    }\n                } else if (this.options.emptyclass) {\n                    this.$element.removeClass(this.options.emptyclass);\n                }\n            } else {\n                //below required if element disable property was changed\n                if (this.isEmpty) {\n                    this.$element.empty();\n                    if (this.options.emptyclass) {\n                        this.$element.removeClass(this.options.emptyclass);\n                    }\n                }\n            }\n        },\n\n        /**\n        Shows container with form\n        @method show()\n        @param {boolean} closeAll Whether to close all other editable containers when showing this one. Default true.\n        **/\n        show: function show(closeAll) {\n            if (this.options.disabled) {\n                return;\n            }\n\n            //init editableContainer: popover, tooltip, inline, etc..\n            if (!this.container) {\n                var containerOptions = $.extend({}, this.options, {\n                    value: this.value,\n                    input: this.input //pass input to form (as it is already created)\n                });\n                this.$element.editableContainer(containerOptions);\n                //listen `save` event \n                this.$element.on(\"save.internal\", $.proxy(this.save, this));\n                this.container = this.$element.data('editableContainer');\n            } else if (this.container.tip().is(':visible')) {\n                return;\n            }\n\n            //show container\n            this.container.show(closeAll);\n        },\n\n        /**\n        Hides container with form\n        @method hide()\n        **/\n        hide: function hide() {\n            if (this.container) {\n                this.container.hide();\n            }\n        },\n\n        /**\n        Toggles container visibility (show / hide)\n        @method toggle()\n        @param {boolean} closeAll Whether to close all other editable containers when showing this one. Default true.\n        **/\n        toggle: function toggle(closeAll) {\n            if (this.container && this.container.tip().is(':visible')) {\n                this.hide();\n            } else {\n                this.show(closeAll);\n            }\n        },\n\n        /*\n        * called when form was submitted\n        */\n        save: function save(e, params) {\n            //mark element with unsaved class if needed\n            if (this.options.unsavedclass) {\n                /*\n                 Add unsaved css to element if:\n                  - url is not user's function \n                  - value was not sent to server\n                  - params.response === undefined, that means data was not sent\n                  - value changed \n                */\n                var sent = false;\n                sent = sent || typeof this.options.url === 'function';\n                sent = sent || this.options.display === false;\n                sent = sent || params.response !== undefined;\n                sent = sent || this.input.value2str(this.value) !== this.input.value2str(params.newValue);\n\n                if (sent) {\n                    this.$element.removeClass(this.options.unsavedclass);\n                } else {\n                    this.$element.addClass(this.options.unsavedclass);\n                }\n            }\n\n            //highlight when saving\n            if (this.options.highlight) {\n                var $e = this.$element,\n                    bgColor = $e.css('background-color');\n\n                $e.css('background-color', this.options.highlight);\n                setTimeout(function () {\n                    if (bgColor === 'transparent') {\n                        bgColor = '';\n                    }\n                    $e.css('background-color', bgColor);\n                    $e.addClass('editable-bg-transition');\n                    setTimeout(function () {\n                        $e.removeClass('editable-bg-transition');\n                    }, 1700);\n                }, 10);\n            }\n\n            //set new value\n            this.setValue(params.newValue, false, params.response);\n\n            /**        \n            Fired when new value was submitted. You can use <code>$(this).data('editable')</code> to access to editable instance\n            \n            @event save \n            @param {Object} event event object\n            @param {Object} params additional params\n            @param {mixed} params.newValue submitted value\n            @param {Object} params.response ajax response\n            @example\n            $('#username').on('save', function(e, params) {\n                alert('Saved value: ' + params.newValue);\n            });\n            **/\n            //event itself is triggered by editableContainer. Description here is only for documentation              \n        },\n\n        validate: function validate() {\n            if (typeof this.options.validate === 'function') {\n                return this.options.validate.call(this, this.value);\n            }\n        },\n\n        /**\n        Sets new value of editable\n        @method setValue(value, convertStr)\n        @param {mixed} value new value \n        @param {boolean} convertStr whether to convert value from string to internal format\n        **/\n        setValue: function setValue(value, convertStr, response) {\n            if (convertStr) {\n                this.value = this.input.str2value(value);\n            } else {\n                this.value = value;\n            }\n            if (this.container) {\n                this.container.option('value', this.value);\n            }\n            $.when(this.render(response)).then($.proxy(function () {\n                this.handleEmpty();\n            }, this));\n        },\n\n        /**\n        Activates input of visible container (e.g. set focus)\n        @method activate()\n        **/\n        activate: function activate() {\n            if (this.container) {\n                this.container.activate();\n            }\n        },\n\n        /**\n        Removes editable feature from element\n        @method destroy()\n        **/\n        destroy: function destroy() {\n            this.disable();\n\n            if (this.container) {\n                this.container.destroy();\n            }\n\n            this.input.destroy();\n\n            if (this.options.toggle !== 'manual') {\n                this.$element.removeClass('editable-click');\n                this.$element.off(this.options.toggle + '.editable');\n            }\n\n            this.$element.off(\"save.internal\");\n\n            this.$element.removeClass('editable editable-open editable-disabled');\n            this.$element.removeData('editable');\n        }\n    };\n\n    /* EDITABLE PLUGIN DEFINITION\n    * ======================= */\n\n    /**\n    jQuery method to initialize editable element.\n    \n    @method $().editable(options)\n    @params {Object} options\n    @example\n    $('#username').editable({\n        type: 'text',\n        url: '/post',\n        pk: 1\n    });\n    **/\n    $.fn.editable = function (option) {\n        //special API methods returning non-jquery object\n        var result = {},\n            args = arguments,\n            datakey = 'editable';\n        switch (option) {\n            /**\n            Runs client-side validation for all matched editables\n            \n            @method validate()\n            @returns {Object} validation errors map\n            @example\n            $('#username, #fullname').editable('validate');\n            // possible result:\n            {\n              username: \"username is required\",\n              fullname: \"fullname should be minimum 3 letters length\"\n            }\n            **/\n            case 'validate':\n                this.each(function () {\n                    var $this = $(this),\n                        data = $this.data(datakey),\n                        error;\n                    if (data && (error = data.validate())) {\n                        result[data.options.name] = error;\n                    }\n                });\n                return result;\n\n            /**\n            Returns current values of editable elements.   \n            Note that it returns an **object** with name-value pairs, not a value itself. It allows to get data from several elements.    \n            If value of some editable is `null` or `undefined` it is excluded from result object.\n            When param `isSingle` is set to **true** - it is supposed you have single element and will return value of editable instead of object.   \n             \n            @method getValue()\n            @param {bool} isSingle whether to return just value of single element\n            @returns {Object} object of element names and values\n            @example\n            $('#username, #fullname').editable('getValue');\n            //result:\n            {\n            username: \"superuser\",\n            fullname: \"John\"\n            }\n            //isSingle = true\n            $('#username').editable('getValue', true);\n            //result \"superuser\" \n            **/\n            case 'getValue':\n                if (arguments.length === 2 && arguments[1] === true) {\n                    //isSingle = true\n                    result = this.eq(0).data(datakey).value;\n                } else {\n                    this.each(function () {\n                        var $this = $(this),\n                            data = $this.data(datakey);\n                        if (data && data.value !== undefined && data.value !== null) {\n                            result[data.options.name] = data.input.value2submit(data.value);\n                        }\n                    });\n                }\n                return result;\n\n            /**\n            This method collects values from several editable elements and submit them all to server.   \n            Internally it runs client-side validation for all fields and submits only in case of success.  \n            See <a href=\"#newrecord\">creating new records</a> for details.  \n            Since 1.5.1 `submit` can be applied to single element to send data programmatically. In that case\n            `url`, `success` and `error` is taken from initial options and you can just call `$('#username').editable('submit')`. \n            \n            @method submit(options)\n            @param {object} options \n            @param {object} options.url url to submit data \n            @param {object} options.data additional data to submit\n            @param {object} options.ajaxOptions additional ajax options\n            @param {function} options.error(obj) error handler \n            @param {function} options.success(obj,config) success handler\n            @returns {Object} jQuery object\n            **/\n            case 'submit':\n                //collects value, validate and submit to server for creating new record\n                var config = arguments[1] || {},\n                    $elems = this,\n                    errors = this.editable('validate');\n\n                // validation ok\n                if ($.isEmptyObject(errors)) {\n                    var ajaxOptions = {};\n\n                    // for single element use url, success etc from options\n                    if ($elems.length === 1) {\n                        var editable = $elems.data('editable');\n                        //standard params\n                        var params = {\n                            name: editable.options.name || '',\n                            value: editable.input.value2submit(editable.value),\n                            pk: typeof editable.options.pk === 'function' ? editable.options.pk.call(editable.options.scope) : editable.options.pk\n                        };\n\n                        //additional params\n                        if (typeof editable.options.params === 'function') {\n                            params = editable.options.params.call(editable.options.scope, params);\n                        } else {\n                            //try parse json in single quotes (from data-params attribute)\n                            editable.options.params = $.fn.editableutils.tryParseJson(editable.options.params, true);\n                            $.extend(params, editable.options.params);\n                        }\n\n                        ajaxOptions = {\n                            url: editable.options.url,\n                            data: params,\n                            type: 'POST'\n                        };\n\n                        // use success / error from options \n                        config.success = config.success || editable.options.success;\n                        config.error = config.error || editable.options.error;\n\n                        // multiple elements\n                    } else {\n                        var values = this.editable('getValue');\n\n                        ajaxOptions = {\n                            url: config.url,\n                            data: values,\n                            type: 'POST'\n                        };\n                    }\n\n                    // ajax success callabck (response 200 OK)\n                    ajaxOptions.success = typeof config.success === 'function' ? function (response) {\n                        config.success.call($elems, response, config);\n                    } : $.noop;\n\n                    // ajax error callabck\n                    ajaxOptions.error = typeof config.error === 'function' ? function () {\n                        config.error.apply($elems, arguments);\n                    } : $.noop;\n\n                    // extend ajaxOptions    \n                    if (config.ajaxOptions) {\n                        $.extend(ajaxOptions, config.ajaxOptions);\n                    }\n\n                    // extra data \n                    if (config.data) {\n                        $.extend(ajaxOptions.data, config.data);\n                    }\n\n                    // perform ajax request\n                    $.ajax(ajaxOptions);\n                } else {\n                    //client-side validation error\n                    if (typeof config.error === 'function') {\n                        config.error.call($elems, errors);\n                    }\n                }\n                return this;\n        }\n\n        //return jquery object\n        return this.each(function () {\n            var $this = $(this),\n                data = $this.data(datakey),\n                options = (typeof option === 'undefined' ? 'undefined' : _typeof(option)) === 'object' && option;\n\n            //for delegated targets do not store `editable` object for element\n            //it's allows several different selectors.\n            //see: https://github.com/vitalets/x-editable/issues/312    \n            if (options && options.selector) {\n                data = new Editable(this, options);\n                return;\n            }\n\n            if (!data) {\n                $this.data(datakey, data = new Editable(this, options));\n            }\n\n            if (typeof option === 'string') {\n                //call method \n                data[option].apply(data, Array.prototype.slice.call(args, 1));\n            }\n        });\n    };\n\n    $.fn.editable.defaults = {\n        /**\n        Type of input. Can be <code>text|textarea|select|date|checklist</code> and more\n         @property type \n        @type string\n        @default 'text'\n        **/\n        type: 'text',\n        /**\n        Sets disabled state of editable\n         @property disabled \n        @type boolean\n        @default false\n        **/\n        disabled: false,\n        /**\n        How to toggle editable. Can be <code>click|dblclick|mouseenter|manual</code>.   \n        When set to <code>manual</code> you should manually call <code>show/hide</code> methods of editable.    \n        **Note**: if you call <code>show</code> or <code>toggle</code> inside **click** handler of some DOM element, \n        you need to apply <code>e.stopPropagation()</code> because containers are being closed on any click on document.\n        \n        @example\n        $('#edit-button').click(function(e) {\n            e.stopPropagation();\n            $('#username').editable('toggle');\n        });\n         @property toggle \n        @type string\n        @default 'click'\n        **/\n        toggle: 'click',\n        /**\n        Text shown when element is empty.\n         @property emptytext \n        @type string\n        @default 'Empty'\n        **/\n        emptytext: 'Empty',\n        /**\n        Allows to automatically set element's text based on it's value. Can be <code>auto|always|never</code>. Useful for select and date.\n        For example, if dropdown list is <code>{1: 'a', 2: 'b'}</code> and element's value set to <code>1</code>, it's html will be automatically set to <code>'a'</code>.  \n        <code>auto</code> - text will be automatically set only if element is empty.  \n        <code>always|never</code> - always(never) try to set element's text.\n         @property autotext \n        @type string\n        @default 'auto'\n        **/\n        autotext: 'auto',\n        /**\n        Initial value of input. If not set, taken from element's text.  \n        Note, that if element's text is empty - text is automatically generated from value and can be customized (see `autotext` option).  \n        For example, to display currency sign:\n        @example\n        <a id=\"price\" data-type=\"text\" data-value=\"100\"></a>\n        <script>\n        $('#price').editable({\n            ...\n            display: function(value) {\n              $(this).text(value + '$');\n            } \n        }) \n        </script>\n                \n        @property value \n        @type mixed\n        @default element's text\n        **/\n        value: null,\n        /**\n        Callback to perform custom displaying of value in element's text.  \n        If `null`, default input's display used.  \n        If `false`, no displaying methods will be called, element's text will never change.  \n        Runs under element's scope.  \n        _**Parameters:**_  \n        \n        * `value` current value to be displayed\n        * `response` server response (if display called after ajax submit), since 1.4.0\n         \n        For _inputs with source_ (select, checklist) parameters are different:  \n          \n        * `value` current value to be displayed\n        * `sourceData` array of items for current input (e.g. dropdown items) \n        * `response` server response (if display called after ajax submit), since 1.4.0\n                  \n        To get currently selected items use `$.fn.editableutils.itemsByValue(value, sourceData)`.\n        \n        @property display \n        @type function|boolean\n        @default null\n        @since 1.2.0\n        @example\n        display: function(value, sourceData) {\n           //display checklist as comma-separated values\n           var html = [],\n               checked = $.fn.editableutils.itemsByValue(value, sourceData);\n               \n           if(checked.length) {\n               $.each(checked, function(i, v) { html.push($.fn.editableutils.escape(v.text)); });\n               $(this).html(html.join(', '));\n           } else {\n               $(this).empty(); \n           }\n        }\n        **/\n        display: null,\n        /**\n        Css class applied when editable text is empty.\n         @property emptyclass \n        @type string\n        @since 1.4.1        \n        @default editable-empty\n        **/\n        emptyclass: 'editable-empty',\n        /**\n        Css class applied when value was stored but not sent to server (`pk` is empty or `send = 'never'`).  \n        You may set it to `null` if you work with editables locally and submit them together.  \n         @property unsavedclass \n        @type string\n        @since 1.4.1        \n        @default editable-unsaved\n        **/\n        unsavedclass: 'editable-unsaved',\n        /**\n        If selector is provided, editable will be delegated to the specified targets.  \n        Usefull for dynamically generated DOM elements.  \n        **Please note**, that delegated targets can't be initialized with `emptytext` and `autotext` options, \n        as they actually become editable only after first click.  \n        You should manually set class `editable-click` to these elements.  \n        Also, if element originally empty you should add class `editable-empty`, set `data-value=\"\"` and write emptytext into element:\n         @property selector \n        @type string\n        @since 1.4.1        \n        @default null\n        @example\n        <div id=\"user\">\n          <!-- empty -->\n          <a href=\"#\" data-name=\"username\" data-type=\"text\" class=\"editable-click editable-empty\" data-value=\"\" title=\"Username\">Empty</a>\n          <!-- non-empty -->\n          <a href=\"#\" data-name=\"group\" data-type=\"select\" data-source=\"/groups\" data-value=\"1\" class=\"editable-click\" title=\"Group\">Operator</a>\n        </div>     \n        \n        <script>\n        $('#user').editable({\n            selector: 'a',\n            url: '/post',\n            pk: 1\n        });\n        </script>\n        **/\n        selector: null,\n        /**\n        Color used to highlight element after update. Implemented via CSS3 transition, works in modern browsers.\n        \n        @property highlight \n        @type string|boolean\n        @since 1.4.5        \n        @default #FFFF80 \n        **/\n        highlight: '#FFFF80'\n    };\n})(window.jQuery);\n\n/**\nAbstractInput - base class for all editable inputs.\nIt defines interface to be implemented by any input type.\nTo create your own input you can inherit from this class.\n\n@class abstractinput\n**/\n(function ($) {\n\n    //types\n    $.fn.editabletypes = {};\n\n    var AbstractInput = function AbstractInput() {};\n\n    AbstractInput.prototype = {\n        /**\n         Initializes input\n          @method init() \n         **/\n        init: function init(type, options, defaults) {\n            this.type = type;\n            this.options = $.extend({}, defaults, options);\n        },\n\n        /*\n        this method called before render to init $tpl that is inserted in DOM\n        */\n        prerender: function prerender() {\n            this.$tpl = $(this.options.tpl); //whole tpl as jquery object    \n            this.$input = this.$tpl; //control itself, can be changed in render method\n            this.$clear = null; //clear button\n            this.error = null; //error message, if input cannot be rendered           \n        },\n\n        /**\n         Renders input from tpl. Can return jQuery deferred object.\n         Can be overwritten in child objects\n          @method render()\n        **/\n        render: function render() {},\n\n        /**\n         Sets element's html by value. \n          @method value2html(value, element)\n         @param {mixed} value\n         @param {DOMElement} element\n        **/\n        value2html: function value2html(value, element) {\n            $(element)[this.options.escape ? 'text' : 'html']($.trim(value));\n        },\n\n        /**\n         Converts element's html to value\n          @method html2value(html)\n         @param {string} html\n         @returns {mixed}\n        **/\n        html2value: function html2value(html) {\n            return $('<div>').html(html).text();\n        },\n\n        /**\n         Converts value to string (for internal compare). For submitting to server used value2submit().\n          @method value2str(value) \n         @param {mixed} value\n         @returns {string}\n        **/\n        value2str: function value2str(value) {\n            return value;\n        },\n\n        /**\n         Converts string received from server into value. Usually from `data-value` attribute.\n          @method str2value(str)\n         @param {string} str\n         @returns {mixed}\n        **/\n        str2value: function str2value(str) {\n            return str;\n        },\n\n        /**\n         Converts value for submitting to server. Result can be string or object.\n          @method value2submit(value) \n         @param {mixed} value\n         @returns {mixed}\n        **/\n        value2submit: function value2submit(value) {\n            return value;\n        },\n\n        /**\n         Sets value of input.\n          @method value2input(value) \n         @param {mixed} value\n        **/\n        value2input: function value2input(value) {\n            this.$input.val(value);\n        },\n\n        /**\n         Returns value of input. Value can be object (e.g. datepicker)\n          @method input2value() \n        **/\n        input2value: function input2value() {\n            return this.$input.val();\n        },\n\n        /**\n         Activates input. For text it sets focus.\n          @method activate() \n        **/\n        activate: function activate() {\n            if (this.$input.is(':visible')) {\n                this.$input.focus();\n            }\n        },\n\n        /**\n         Creates input.\n          @method clear() \n        **/\n        clear: function clear() {\n            this.$input.val(null);\n        },\n\n        /**\n         method to escape html.\n        **/\n        escape: function escape(str) {\n            return $('<div>').text(str).html();\n        },\n\n        /**\n         attach handler to automatically submit form when value changed (useful when buttons not shown)\n        **/\n        autosubmit: function autosubmit() {},\n\n        /**\n        Additional actions when destroying element \n        **/\n        destroy: function destroy() {},\n\n        // -------- helper functions --------\n        setClass: function setClass() {\n            if (this.options.inputclass) {\n                this.$input.addClass(this.options.inputclass);\n            }\n        },\n\n        setAttr: function setAttr(attr) {\n            if (this.options[attr] !== undefined && this.options[attr] !== null) {\n                this.$input.attr(attr, this.options[attr]);\n            }\n        },\n\n        option: function option(key, value) {\n            this.options[key] = value;\n        }\n\n    };\n\n    AbstractInput.defaults = {\n        /**\n        HTML template of input. Normally you should not change it.\n         @property tpl \n        @type string\n        @default ''\n        **/\n        tpl: '',\n        /**\n        CSS class automatically applied to input\n        \n        @property inputclass \n        @type string\n        @default null\n        **/\n        inputclass: null,\n\n        /**\n        If `true` - html will be escaped in content of element via $.text() method.  \n        If `false` - html will not be escaped, $.html() used.  \n        When you use own `display` function, this option obviosly has no effect.\n        \n        @property escape \n        @type boolean\n        @since 1.5.0\n        @default true\n        **/\n        escape: true,\n\n        //scope for external methods (e.g. source defined as function)\n        //for internal use only\n        scope: null,\n\n        //need to re-declare showbuttons here to get it's value from common config (passed only options existing in defaults)\n        showbuttons: true\n    };\n\n    $.extend($.fn.editabletypes, { abstractinput: AbstractInput });\n})(window.jQuery);\n\n/**\nList - abstract class for inputs that have source option loaded from js array or via ajax\n\n@class list\n@extends abstractinput\n**/\n(function ($) {\n\n    var List = function List(options) {};\n\n    $.fn.editableutils.inherit(List, $.fn.editabletypes.abstractinput);\n\n    $.extend(List.prototype, {\n        render: function render() {\n            var deferred = $.Deferred();\n\n            this.error = null;\n            this.onSourceReady(function () {\n                this.renderList();\n                deferred.resolve();\n            }, function () {\n                this.error = this.options.sourceError;\n                deferred.resolve();\n            });\n\n            return deferred.promise();\n        },\n\n        html2value: function html2value(html) {\n            return null; //can't set value by text\n        },\n\n        value2html: function value2html(value, element, display, response) {\n            var deferred = $.Deferred(),\n                success = function success() {\n                if (typeof display === 'function') {\n                    //custom display method\n                    display.call(element, value, this.sourceData, response);\n                } else {\n                    this.value2htmlFinal(value, element);\n                }\n                deferred.resolve();\n            };\n\n            //for null value just call success without loading source\n            if (value === null) {\n                success.call(this);\n            } else {\n                this.onSourceReady(success, function () {\n                    deferred.resolve();\n                });\n            }\n\n            return deferred.promise();\n        },\n\n        // ------------- additional functions ------------\n\n        onSourceReady: function onSourceReady(success, error) {\n            //run source if it function\n            var source;\n            if ($.isFunction(this.options.source)) {\n                source = this.options.source.call(this.options.scope);\n                this.sourceData = null;\n                //note: if function returns the same source as URL - sourceData will be taken from cahce and no extra request performed\n            } else {\n                source = this.options.source;\n            }\n\n            //if allready loaded just call success\n            if (this.options.sourceCache && $.isArray(this.sourceData)) {\n                success.call(this);\n                return;\n            }\n\n            //try parse json in single quotes (for double quotes jquery does automatically)\n            try {\n                source = $.fn.editableutils.tryParseJson(source, false);\n            } catch (e) {\n                error.call(this);\n                return;\n            }\n\n            //loading from url\n            if (typeof source === 'string') {\n                //try to get sourceData from cache\n                if (this.options.sourceCache) {\n                    var cacheID = source,\n                        cache;\n\n                    if (!$(document).data(cacheID)) {\n                        $(document).data(cacheID, {});\n                    }\n                    cache = $(document).data(cacheID);\n\n                    //check for cached data\n                    if (cache.loading === false && cache.sourceData) {\n                        //take source from cache\n                        this.sourceData = cache.sourceData;\n                        this.doPrepend();\n                        success.call(this);\n                        return;\n                    } else if (cache.loading === true) {\n                        //cache is loading, put callback in stack to be called later\n                        cache.callbacks.push($.proxy(function () {\n                            this.sourceData = cache.sourceData;\n                            this.doPrepend();\n                            success.call(this);\n                        }, this));\n\n                        //also collecting error callbacks\n                        cache.err_callbacks.push($.proxy(error, this));\n                        return;\n                    } else {\n                        //no cache yet, activate it\n                        cache.loading = true;\n                        cache.callbacks = [];\n                        cache.err_callbacks = [];\n                    }\n                }\n\n                //ajaxOptions for source. Can be overwritten bt options.sourceOptions\n                var ajaxOptions = $.extend({\n                    url: source,\n                    type: 'get',\n                    cache: false,\n                    dataType: 'json',\n                    success: $.proxy(function (data) {\n                        if (cache) {\n                            cache.loading = false;\n                        }\n                        this.sourceData = this.makeArray(data);\n                        if ($.isArray(this.sourceData)) {\n                            if (cache) {\n                                //store result in cache\n                                cache.sourceData = this.sourceData;\n                                //run success callbacks for other fields waiting for this source\n                                $.each(cache.callbacks, function () {\n                                    this.call();\n                                });\n                            }\n                            this.doPrepend();\n                            success.call(this);\n                        } else {\n                            error.call(this);\n                            if (cache) {\n                                //run error callbacks for other fields waiting for this source\n                                $.each(cache.err_callbacks, function () {\n                                    this.call();\n                                });\n                            }\n                        }\n                    }, this),\n                    error: $.proxy(function () {\n                        error.call(this);\n                        if (cache) {\n                            cache.loading = false;\n                            //run error callbacks for other fields\n                            $.each(cache.err_callbacks, function () {\n                                this.call();\n                            });\n                        }\n                    }, this)\n                }, this.options.sourceOptions);\n\n                //loading sourceData from server\n                $.ajax(ajaxOptions);\n            } else {\n                //options as json/array\n                this.sourceData = this.makeArray(source);\n\n                if ($.isArray(this.sourceData)) {\n                    this.doPrepend();\n                    success.call(this);\n                } else {\n                    error.call(this);\n                }\n            }\n        },\n\n        doPrepend: function doPrepend() {\n            if (this.options.prepend === null || this.options.prepend === undefined) {\n                return;\n            }\n\n            if (!$.isArray(this.prependData)) {\n                //run prepend if it is function (once)\n                if ($.isFunction(this.options.prepend)) {\n                    this.options.prepend = this.options.prepend.call(this.options.scope);\n                }\n\n                //try parse json in single quotes\n                this.options.prepend = $.fn.editableutils.tryParseJson(this.options.prepend, true);\n\n                //convert prepend from string to object\n                if (typeof this.options.prepend === 'string') {\n                    this.options.prepend = { '': this.options.prepend };\n                }\n\n                this.prependData = this.makeArray(this.options.prepend);\n            }\n\n            if ($.isArray(this.prependData) && $.isArray(this.sourceData)) {\n                this.sourceData = this.prependData.concat(this.sourceData);\n            }\n        },\n\n        /*\n         renders input list\n        */\n        renderList: function renderList() {\n            // this method should be overwritten in child class\n        },\n\n        /*\n        set element's html by value\n        */\n        value2htmlFinal: function value2htmlFinal(value, element) {\n            // this method should be overwritten in child class\n        },\n\n        /**\n        * convert data to array suitable for sourceData, e.g. [{value: 1, text: 'abc'}, {...}]\n        */\n        makeArray: function makeArray(data) {\n            var count,\n                obj,\n                result = [],\n                item,\n                iterateItem;\n            if (!data || typeof data === 'string') {\n                return null;\n            }\n\n            if ($.isArray(data)) {\n                //array\n                /* \n                   function to iterate inside item of array if item is object.\n                   Caclulates count of keys in item and store in obj. \n                */\n                iterateItem = function iterateItem(k, v) {\n                    obj = { value: k, text: v };\n                    if (count++ >= 2) {\n                        return false; // exit from `each` if item has more than one key.\n                    }\n                };\n\n                for (var i = 0; i < data.length; i++) {\n                    item = data[i];\n                    if ((typeof item === 'undefined' ? 'undefined' : _typeof(item)) === 'object') {\n                        count = 0; //count of keys inside item\n                        $.each(item, iterateItem);\n                        //case: [{val1: 'text1'}, {val2: 'text2} ...]\n                        if (count === 1) {\n                            result.push(obj);\n                            //case: [{value: 1, text: 'text1'}, {value: 2, text: 'text2'}, ...]\n                        } else if (count > 1) {\n                            //removed check of existance: item.hasOwnProperty('value') && item.hasOwnProperty('text')\n                            if (item.children) {\n                                item.children = this.makeArray(item.children);\n                            }\n                            result.push(item);\n                        }\n                    } else {\n                        //case: ['text1', 'text2' ...]\n                        result.push({ value: item, text: item });\n                    }\n                }\n            } else {\n                //case: {val1: 'text1', val2: 'text2, ...}\n                $.each(data, function (k, v) {\n                    result.push({ value: k, text: v });\n                });\n            }\n            return result;\n        },\n\n        option: function option(key, value) {\n            this.options[key] = value;\n            if (key === 'source') {\n                this.sourceData = null;\n            }\n            if (key === 'prepend') {\n                this.prependData = null;\n            }\n        }\n\n    });\n\n    List.defaults = $.extend({}, $.fn.editabletypes.abstractinput.defaults, {\n        /**\n        Source data for list.  \n        If **array** - it should be in format: `[{value: 1, text: \"text1\"}, {value: 2, text: \"text2\"}, ...]`  \n        For compability, object format is also supported: `{\"1\": \"text1\", \"2\": \"text2\" ...}` but it does not guarantee elements order.\n        \n        If **string** - considered ajax url to load items. In that case results will be cached for fields with the same source and name. See also `sourceCache` option.\n          \n        If **function**, it should return data in format above (since 1.4.0).\n        \n        Since 1.4.1 key `children` supported to render OPTGROUP (for **select** input only).  \n        `[{text: \"group1\", children: [{value: 1, text: \"text1\"}, {value: 2, text: \"text2\"}]}, ...]` \n            @property source \n        @type string | array | object | function\n        @default null\n        **/\n        source: null,\n        /**\n        Data automatically prepended to the beginning of dropdown list.\n        \n        @property prepend \n        @type string | array | object | function\n        @default false\n        **/\n        prepend: false,\n        /**\n        Error message when list cannot be loaded (e.g. ajax error)\n        \n        @property sourceError \n        @type string\n        @default Error when loading list\n        **/\n        sourceError: 'Error when loading list',\n        /**\n        if <code>true</code> and source is **string url** - results will be cached for fields with the same source.    \n        Usefull for editable column in grid to prevent extra requests.\n        \n        @property sourceCache \n        @type boolean\n        @default true\n        @since 1.2.0\n        **/\n        sourceCache: true,\n        /**\n        Additional ajax options to be used in $.ajax() when loading list from server.\n        Useful to send extra parameters (`data` key) or change request method (`type` key).\n        \n        @property sourceOptions \n        @type object|function\n        @default null\n        @since 1.5.0\n        **/\n        sourceOptions: null\n    });\n\n    $.fn.editabletypes.list = List;\n})(window.jQuery);\n\n/**\nText input\n\n@class text\n@extends abstractinput\n@final\n@example\n<a href=\"#\" id=\"username\" data-type=\"text\" data-pk=\"1\">awesome</a>\n<script>\n$(function(){\n    $('#username').editable({\n        url: '/post',\n        title: 'Enter username'\n    });\n});\n</script>\n**/\n(function ($) {\n\n    var Text = function Text(options) {\n        this.init('text', options, Text.defaults);\n    };\n\n    $.fn.editableutils.inherit(Text, $.fn.editabletypes.abstractinput);\n\n    $.extend(Text.prototype, {\n        render: function render() {\n            this.renderClear();\n            this.setClass();\n            this.setAttr('placeholder');\n        },\n\n        activate: function activate() {\n            if (this.$input.is(':visible')) {\n                this.$input.focus();\n                $.fn.editableutils.setCursorPosition(this.$input.get(0), this.$input.val().length);\n                if (this.toggleClear) {\n                    this.toggleClear();\n                }\n            }\n        },\n\n        //render clear button\n        renderClear: function renderClear() {\n            if (this.options.clear) {\n                this.$clear = $('<span class=\"editable-clear-x\"></span>');\n                this.$input.after(this.$clear).css('padding-right', 24).keyup($.proxy(function (e) {\n                    //arrows, enter, tab, etc\n                    if (~$.inArray(e.keyCode, [40, 38, 9, 13, 27])) {\n                        return;\n                    }\n\n                    clearTimeout(this.t);\n                    var that = this;\n                    this.t = setTimeout(function () {\n                        that.toggleClear(e);\n                    }, 100);\n                }, this)).parent().css('position', 'relative');\n\n                this.$clear.click($.proxy(this.clear, this));\n            }\n        },\n\n        postrender: function postrender() {\n            /*\n            //now `clear` is positioned via css\n            if(this.$clear) {\n                //can position clear button only here, when form is shown and height can be calculated\n            //                var h = this.$input.outerHeight(true) || 20,\n                var h = this.$clear.parent().height(),\n                    delta = (h - this.$clear.height()) / 2;\n                    \n                //this.$clear.css({bottom: delta, right: delta});\n            }\n            */\n        },\n\n        //show / hide clear button\n        toggleClear: function toggleClear(e) {\n            if (!this.$clear) {\n                return;\n            }\n\n            var len = this.$input.val().length,\n                visible = this.$clear.is(':visible');\n\n            if (len && !visible) {\n                this.$clear.show();\n            }\n\n            if (!len && visible) {\n                this.$clear.hide();\n            }\n        },\n\n        clear: function clear() {\n            this.$clear.hide();\n            this.$input.val('').focus();\n        }\n    });\n\n    Text.defaults = $.extend({}, $.fn.editabletypes.abstractinput.defaults, {\n        /**\n        @property tpl \n        @default <input type=\"text\">\n        **/\n        tpl: '<input type=\"text\">',\n        /**\n        Placeholder attribute of input. Shown when input is empty.\n         @property placeholder \n        @type string\n        @default null\n        **/\n        placeholder: null,\n\n        /**\n        Whether to show `clear` button \n        \n        @property clear \n        @type boolean\n        @default true        \n        **/\n        clear: true\n    });\n\n    $.fn.editabletypes.text = Text;\n})(window.jQuery);\n\n/**\nTextarea input\n\n@class textarea\n@extends abstractinput\n@final\n@example\n<a href=\"#\" id=\"comments\" data-type=\"textarea\" data-pk=\"1\">awesome comment!</a>\n<script>\n$(function(){\n    $('#comments').editable({\n        url: '/post',\n        title: 'Enter comments',\n        rows: 10\n    });\n});\n</script>\n**/\n(function ($) {\n\n    var Textarea = function Textarea(options) {\n        this.init('textarea', options, Textarea.defaults);\n    };\n\n    $.fn.editableutils.inherit(Textarea, $.fn.editabletypes.abstractinput);\n\n    $.extend(Textarea.prototype, {\n        render: function render() {\n            this.setClass();\n            this.setAttr('placeholder');\n            this.setAttr('rows');\n\n            //ctrl + enter\n            this.$input.keydown(function (e) {\n                if (e.ctrlKey && e.which === 13) {\n                    $(this).closest('form').submit();\n                }\n            });\n        },\n\n        //using `white-space: pre-wrap` solves \\n  <--> BR conversion very elegant!\n        /* \n        value2html: function(value, element) {\n             var html = '', lines;\n             if(value) {\n                 lines = value.split(\"\\n\");\n                 for (var i = 0; i < lines.length; i++) {\n                     lines[i] = $('<div>').text(lines[i]).html();\n                 }\n                 html = lines.join('<br>');\n             }\n             $(element).html(html);\n         },\n        \n         html2value: function(html) {\n             if(!html) {\n                 return '';\n             }\n              var regex = new RegExp(String.fromCharCode(10), 'g');\n             var lines = html.split(/<br\\s*\\/?>/i);\n             for (var i = 0; i < lines.length; i++) {\n                 var text = $('<div>').html(lines[i]).text();\n                  // Remove newline characters (\\n) to avoid them being converted by value2html() method\n                 // thus adding extra <br> tags\n                 text = text.replace(regex, '');\n                  lines[i] = text;\n             }\n             return lines.join(\"\\n\");\n         },\n          */\n        activate: function activate() {\n            $.fn.editabletypes.text.prototype.activate.call(this);\n        }\n    });\n\n    Textarea.defaults = $.extend({}, $.fn.editabletypes.abstractinput.defaults, {\n        /**\n        @property tpl\n        @default <textarea></textarea>\n        **/\n        tpl: '<textarea></textarea>',\n        /**\n        @property inputclass\n        @default input-large\n        **/\n        inputclass: 'input-large',\n        /**\n        Placeholder attribute of input. Shown when input is empty.\n         @property placeholder\n        @type string\n        @default null\n        **/\n        placeholder: null,\n        /**\n        Number of rows in textarea\n         @property rows\n        @type integer\n        @default 7\n        **/\n        rows: 7\n    });\n\n    $.fn.editabletypes.textarea = Textarea;\n})(window.jQuery);\n\n/**\nSelect (dropdown)\n\n@class select\n@extends list\n@final\n@example\n<a href=\"#\" id=\"status\" data-type=\"select\" data-pk=\"1\" data-url=\"/post\" data-title=\"Select status\"></a>\n<script>\n$(function(){\n    $('#status').editable({\n        value: 2,    \n        source: [\n              {value: 1, text: 'Active'},\n              {value: 2, text: 'Blocked'},\n              {value: 3, text: 'Deleted'}\n           ]\n    });\n});\n</script>\n**/\n(function ($) {\n    ;\n\n    var Select = function Select(options) {\n        this.init('select', options, Select.defaults);\n    };\n\n    $.fn.editableutils.inherit(Select, $.fn.editabletypes.list);\n\n    $.extend(Select.prototype, {\n        renderList: function renderList() {\n            this.$input.empty();\n\n            var fillItems = function fillItems($el, data) {\n                var attr;\n                if ($.isArray(data)) {\n                    for (var i = 0; i < data.length; i++) {\n                        attr = {};\n                        if (data[i].children) {\n                            attr.label = data[i].text;\n                            $el.append(fillItems($('<optgroup>', attr), data[i].children));\n                        } else {\n                            attr.value = data[i].value;\n                            if (data[i].disabled) {\n                                attr.disabled = true;\n                            }\n                            $el.append($('<option>', attr).text(data[i].text));\n                        }\n                    }\n                }\n                return $el;\n            };\n\n            fillItems(this.$input, this.sourceData);\n\n            this.setClass();\n\n            //enter submit\n            this.$input.on('keydown.editable', function (e) {\n                if (e.which === 13) {\n                    $(this).closest('form').submit();\n                }\n            });\n        },\n\n        value2htmlFinal: function value2htmlFinal(value, element) {\n            var text = '',\n                items = $.fn.editableutils.itemsByValue(value, this.sourceData);\n\n            if (items.length) {\n                text = items[0].text;\n            }\n\n            //$(element).text(text);\n            $.fn.editabletypes.abstractinput.prototype.value2html.call(this, text, element);\n        },\n\n        autosubmit: function autosubmit() {\n            this.$input.off('keydown.editable').on('change.editable', function () {\n                $(this).closest('form').submit();\n            });\n        }\n    });\n\n    Select.defaults = $.extend({}, $.fn.editabletypes.list.defaults, {\n        /**\n        @property tpl \n        @default <select></select>\n        **/\n        tpl: '<select></select>'\n    });\n\n    $.fn.editabletypes.select = Select;\n})(window.jQuery);\n\n/**\nList of checkboxes. \nInternally value stored as javascript array of values.\n\n@class checklist\n@extends list\n@final\n@example\n<a href=\"#\" id=\"options\" data-type=\"checklist\" data-pk=\"1\" data-url=\"/post\" data-title=\"Select options\"></a>\n<script>\n$(function(){\n    $('#options').editable({\n        value: [2, 3],    \n        source: [\n              {value: 1, text: 'option1'},\n              {value: 2, text: 'option2'},\n              {value: 3, text: 'option3'}\n           ]\n    });\n});\n</script>\n**/\n(function ($) {\n    ;\n\n    var Checklist = function Checklist(options) {\n        this.init('checklist', options, Checklist.defaults);\n    };\n\n    $.fn.editableutils.inherit(Checklist, $.fn.editabletypes.list);\n\n    $.extend(Checklist.prototype, {\n        renderList: function renderList() {\n            var $label, $div;\n\n            this.$tpl.empty();\n\n            if (!$.isArray(this.sourceData)) {\n                return;\n            }\n\n            for (var i = 0; i < this.sourceData.length; i++) {\n                $label = $('<label>').append($('<input>', {\n                    type: 'checkbox',\n                    value: this.sourceData[i].value\n                })).append($('<span>').text(' ' + this.sourceData[i].text));\n\n                $('<div>').append($label).appendTo(this.$tpl);\n            }\n\n            this.$input = this.$tpl.find('input[type=\"checkbox\"]');\n            this.setClass();\n        },\n\n        value2str: function value2str(value) {\n            return $.isArray(value) ? value.sort().join($.trim(this.options.separator)) : '';\n        },\n\n        //parse separated string\n        str2value: function str2value(str) {\n            var reg,\n                value = null;\n            if (typeof str === 'string' && str.length) {\n                reg = new RegExp('\\\\s*' + $.trim(this.options.separator) + '\\\\s*');\n                value = str.split(reg);\n            } else if ($.isArray(str)) {\n                value = str;\n            } else {\n                value = [str];\n            }\n            return value;\n        },\n\n        //set checked on required checkboxes\n        value2input: function value2input(value) {\n            this.$input.prop('checked', false);\n            if ($.isArray(value) && value.length) {\n                this.$input.each(function (i, el) {\n                    var $el = $(el);\n                    // cannot use $.inArray as it performs strict comparison\n                    $.each(value, function (j, val) {\n                        /*jslint eqeq: true*/\n                        if ($el.val() == val) {\n                            /*jslint eqeq: false*/\n                            $el.prop('checked', true);\n                        }\n                    });\n                });\n            }\n        },\n\n        input2value: function input2value() {\n            var checked = [];\n            this.$input.filter(':checked').each(function (i, el) {\n                checked.push($(el).val());\n            });\n            return checked;\n        },\n\n        //collect text of checked boxes\n        value2htmlFinal: function value2htmlFinal(value, element) {\n            var html = [],\n                checked = $.fn.editableutils.itemsByValue(value, this.sourceData),\n                escape = this.options.escape;\n\n            if (checked.length) {\n                $.each(checked, function (i, v) {\n                    var text = escape ? $.fn.editableutils.escape(v.text) : v.text;\n                    html.push(text);\n                });\n                $(element).html(html.join('<br>'));\n            } else {\n                $(element).empty();\n            }\n        },\n\n        activate: function activate() {\n            this.$input.first().focus();\n        },\n\n        autosubmit: function autosubmit() {\n            this.$input.on('keydown', function (e) {\n                if (e.which === 13) {\n                    $(this).closest('form').submit();\n                }\n            });\n        }\n    });\n\n    Checklist.defaults = $.extend({}, $.fn.editabletypes.list.defaults, {\n        /**\n        @property tpl \n        @default <div></div>\n        **/\n        tpl: '<div class=\"editable-checklist\"></div>',\n\n        /**\n        @property inputclass \n        @type string\n        @default null\n        **/\n        inputclass: null,\n\n        /**\n        Separator of values when reading from `data-value` attribute\n         @property separator \n        @type string\n        @default ','\n        **/\n        separator: ','\n    });\n\n    $.fn.editabletypes.checklist = Checklist;\n})(window.jQuery);\n\n/**\nHTML5 input types.\nFollowing types are supported:\n\n* password\n* email\n* url\n* tel\n* number\n* range\n* time\n\nLearn more about html5 inputs:  \nhttp://www.w3.org/wiki/HTML5_form_additions  \nTo check browser compatibility please see:  \nhttps://developer.mozilla.org/en-US/docs/HTML/Element/Input\n            \n@class html5types \n@extends text\n@final\n@since 1.3.0\n@example\n<a href=\"#\" id=\"email\" data-type=\"email\" data-pk=\"1\">admin@example.com</a>\n<script>\n$(function(){\n    $('#email').editable({\n        url: '/post',\n        title: 'Enter email'\n    });\n});\n</script>\n**/\n\n/**\n@property tpl \n@default depends on type\n**/\n\n/*\nPassword\n*/\n(function ($) {\n    ;\n\n    var Password = function Password(options) {\n        this.init('password', options, Password.defaults);\n    };\n    $.fn.editableutils.inherit(Password, $.fn.editabletypes.text);\n    $.extend(Password.prototype, {\n        //do not display password, show '[hidden]' instead\n        value2html: function value2html(value, element) {\n            if (value) {\n                $(element).text('[hidden]');\n            } else {\n                $(element).empty();\n            }\n        },\n        //as password not displayed, should not set value by html\n        html2value: function html2value(html) {\n            return null;\n        }\n    });\n    Password.defaults = $.extend({}, $.fn.editabletypes.text.defaults, {\n        tpl: '<input type=\"password\">'\n    });\n    $.fn.editabletypes.password = Password;\n})(window.jQuery);\n\n/*\nEmail\n*/\n(function ($) {\n    ;\n\n    var Email = function Email(options) {\n        this.init('email', options, Email.defaults);\n    };\n    $.fn.editableutils.inherit(Email, $.fn.editabletypes.text);\n    Email.defaults = $.extend({}, $.fn.editabletypes.text.defaults, {\n        tpl: '<input type=\"email\">'\n    });\n    $.fn.editabletypes.email = Email;\n})(window.jQuery);\n\n/*\nUrl\n*/\n(function ($) {\n    ;\n\n    var Url = function Url(options) {\n        this.init('url', options, Url.defaults);\n    };\n    $.fn.editableutils.inherit(Url, $.fn.editabletypes.text);\n    Url.defaults = $.extend({}, $.fn.editabletypes.text.defaults, {\n        tpl: '<input type=\"url\">'\n    });\n    $.fn.editabletypes.url = Url;\n})(window.jQuery);\n\n/*\nTel\n*/\n(function ($) {\n    ;\n\n    var Tel = function Tel(options) {\n        this.init('tel', options, Tel.defaults);\n    };\n    $.fn.editableutils.inherit(Tel, $.fn.editabletypes.text);\n    Tel.defaults = $.extend({}, $.fn.editabletypes.text.defaults, {\n        tpl: '<input type=\"tel\">'\n    });\n    $.fn.editabletypes.tel = Tel;\n})(window.jQuery);\n\n/*\nNumber\n*/\n(function ($) {\n    ;\n\n    var NumberInput = function NumberInput(options) {\n        this.init('number', options, NumberInput.defaults);\n    };\n    $.fn.editableutils.inherit(NumberInput, $.fn.editabletypes.text);\n    $.extend(NumberInput.prototype, {\n        render: function render() {\n            NumberInput.superclass.render.call(this);\n            this.setAttr('min');\n            this.setAttr('max');\n            this.setAttr('step');\n        },\n        postrender: function postrender() {\n            if (this.$clear) {\n                //increase right ffset  for up/down arrows\n                this.$clear.css({ right: 24 });\n                /*\n                //can position clear button only here, when form is shown and height can be calculated\n                var h = this.$input.outerHeight(true) || 20,\n                    delta = (h - this.$clear.height()) / 2;\n                \n                //add 12px to offset right for up/down arrows    \n                this.$clear.css({top: delta, right: delta + 16});\n                */\n            }\n        }\n    });\n    NumberInput.defaults = $.extend({}, $.fn.editabletypes.text.defaults, {\n        tpl: '<input type=\"number\">',\n        inputclass: 'input-mini',\n        min: null,\n        max: null,\n        step: null\n    });\n    $.fn.editabletypes.number = NumberInput;\n})(window.jQuery);\n\n/*\nRange (inherit from number)\n*/\n(function ($) {\n    ;\n\n    var Range = function Range(options) {\n        this.init('range', options, Range.defaults);\n    };\n    $.fn.editableutils.inherit(Range, $.fn.editabletypes.number);\n    $.extend(Range.prototype, {\n        render: function render() {\n            this.$input = this.$tpl.filter('input');\n\n            this.setClass();\n            this.setAttr('min');\n            this.setAttr('max');\n            this.setAttr('step');\n\n            this.$input.on('input', function () {\n                $(this).siblings('output').text($(this).val());\n            });\n        },\n        activate: function activate() {\n            this.$input.focus();\n        }\n    });\n    Range.defaults = $.extend({}, $.fn.editabletypes.number.defaults, {\n        tpl: '<input type=\"range\"><output style=\"width: 30px; display: inline-block\"></output>',\n        inputclass: 'input-medium'\n    });\n    $.fn.editabletypes.range = Range;\n})(window.jQuery);\n\n/*\nTime\n*/\n(function ($) {\n    ;\n\n    var Time = function Time(options) {\n        this.init('time', options, Time.defaults);\n    };\n    //inherit from abstract, as inheritance from text gives selection error.\n    $.fn.editableutils.inherit(Time, $.fn.editabletypes.abstractinput);\n    $.extend(Time.prototype, {\n        render: function render() {\n            this.setClass();\n        }\n    });\n    Time.defaults = $.extend({}, $.fn.editabletypes.abstractinput.defaults, {\n        tpl: '<input type=\"time\">'\n    });\n    $.fn.editabletypes.time = Time;\n})(window.jQuery);\n\n/**\nSelect2 input. Based on amazing work of Igor Vaynberg https://github.com/ivaynberg/select2.  \nPlease see [original select2 docs](http://ivaynberg.github.com/select2) for detailed description and options.  \n \nYou should manually download and include select2 distributive:  \n\n    <link href=\"select2/select2.css\" rel=\"stylesheet\" type=\"text/css\"></link>  \n    <script src=\"select2/select2.js\"></script>  \n    \nTo make it **bootstrap-styled** you can use css from [here](https://github.com/t0m/select2-bootstrap-css): \n\n    <link href=\"select2-bootstrap.css\" rel=\"stylesheet\" type=\"text/css\"></link>    \n    \n**Note:** currently `autotext` feature does not work for select2 with `ajax` remote source.    \nYou need initially put both `data-value` and element's text youself:    \n\n    <a href=\"#\" data-type=\"select2\" data-value=\"1\">Text1</a>\n    \n    \n@class select2\n@extends abstractinput\n@since 1.4.1\n@final\n@example\n<a href=\"#\" id=\"country\" data-type=\"select2\" data-pk=\"1\" data-value=\"ru\" data-url=\"/post\" data-title=\"Select country\"></a>\n<script>\n$(function(){\n    //local source\n    $('#country').editable({\n        source: [\n              {id: 'gb', text: 'Great Britain'},\n              {id: 'us', text: 'United States'},\n              {id: 'ru', text: 'Russia'}\n           ],\n        select2: {\n           multiple: true\n        }\n    });\n    //remote source (simple)\n    $('#country').editable({\n        source: '/getCountries',\n        select2: {\n            placeholder: 'Select Country',\n            minimumInputLength: 1\n        }\n    });\n    //remote source (advanced)\n    $('#country').editable({\n        select2: {\n            placeholder: 'Select Country',\n            allowClear: true,\n            minimumInputLength: 3,\n            id: function (item) {\n                return item.CountryId;\n            },\n            ajax: {\n                url: '/getCountries',\n                dataType: 'json',\n                data: function (term, page) {\n                    return { query: term };\n                },\n                results: function (data, page) {\n                    return { results: data };\n                }\n            },\n            formatResult: function (item) {\n                return item.CountryName;\n            },\n            formatSelection: function (item) {\n                return item.CountryName;\n            },\n            initSelection: function (element, callback) {\n                return $.get('/getCountryById', { query: element.val() }, function (data) {\n                    callback(data);\n                });\n            } \n        }  \n    });\n});\n</script>\n**/\n(function ($) {\n    ;\n\n    var Constructor = function Constructor(options) {\n        this.init('select2', options, Constructor.defaults);\n\n        options.select2 = options.select2 || {};\n\n        this.sourceData = null;\n\n        //placeholder\n        if (options.placeholder) {\n            options.select2.placeholder = options.placeholder;\n        }\n\n        //if not `tags` mode, use source\n        if (!options.select2.tags && options.source) {\n            var source = options.source;\n            //if source is function, call it (once!)\n            if ($.isFunction(options.source)) {\n                source = options.source.call(options.scope);\n            }\n\n            if (typeof source === 'string') {\n                options.select2.ajax = options.select2.ajax || {};\n                //some default ajax params\n                if (!options.select2.ajax.data) {\n                    options.select2.ajax.data = function (term) {\n                        return { query: term };\n                    };\n                }\n                if (!options.select2.ajax.results) {\n                    options.select2.ajax.results = function (data) {\n                        return { results: data };\n                    };\n                }\n                options.select2.ajax.url = source;\n            } else {\n                //check format and convert x-editable format to select2 format (if needed)\n                this.sourceData = this.convertSource(source);\n                options.select2.data = this.sourceData;\n            }\n        }\n\n        //overriding objects in config (as by default jQuery extend() is not recursive)\n        this.options.select2 = $.extend({}, Constructor.defaults.select2, options.select2);\n\n        //detect whether it is multi-valued\n        this.isMultiple = this.options.select2.tags || this.options.select2.multiple;\n        this.isRemote = 'ajax' in this.options.select2;\n\n        //store function returning ID of item\n        //should be here as used inautotext for local source\n        this.idFunc = this.options.select2.id;\n        if (typeof this.idFunc !== \"function\") {\n            var idKey = this.idFunc || 'id';\n            this.idFunc = function (e) {\n                return e[idKey];\n            };\n        }\n\n        //store function that renders text in select2\n        this.formatSelection = this.options.select2.formatSelection;\n        if (typeof this.formatSelection !== \"function\") {\n            this.formatSelection = function (e) {\n                return e.text;\n            };\n        }\n    };\n\n    $.fn.editableutils.inherit(Constructor, $.fn.editabletypes.abstractinput);\n\n    $.extend(Constructor.prototype, {\n        render: function render() {\n            this.setClass();\n\n            //can not apply select2 here as it calls initSelection \n            //over input that does not have correct value yet.\n            //apply select2 only in value2input\n            //this.$input.select2(this.options.select2);\n\n            //when data is loaded via ajax, we need to know when it's done to populate listData\n            if (this.isRemote) {\n                //listen to loaded event to populate data\n                this.$input.on('select2-loaded', $.proxy(function (e) {\n                    this.sourceData = e.items.results;\n                }, this));\n            }\n\n            //trigger resize of editableform to re-position container in multi-valued mode\n            if (this.isMultiple) {\n                this.$input.on('change', function () {\n                    $(this).closest('form').parent().triggerHandler('resize');\n                });\n            }\n        },\n\n        value2html: function value2html(value, element) {\n            var text = '',\n                data,\n                that = this;\n\n            if (this.options.select2.tags) {\n                //in tags mode just assign value\n                data = value;\n                //data = $.fn.editableutils.itemsByValue(value, this.options.select2.tags, this.idFunc);\n            } else if (this.sourceData) {\n                data = $.fn.editableutils.itemsByValue(value, this.sourceData, this.idFunc);\n            } else {}\n            //can not get list of possible values \n            //(e.g. autotext for select2 with ajax source)\n\n\n            //data may be array (when multiple values allowed)\n            if ($.isArray(data)) {\n                //collect selected data and show with separator\n                text = [];\n                $.each(data, function (k, v) {\n                    text.push(v && (typeof v === 'undefined' ? 'undefined' : _typeof(v)) === 'object' ? that.formatSelection(v) : v);\n                });\n            } else if (data) {\n                text = that.formatSelection(data);\n            }\n\n            text = $.isArray(text) ? text.join(this.options.viewseparator) : text;\n\n            //$(element).text(text);\n            Constructor.superclass.value2html.call(this, text, element);\n        },\n\n        html2value: function html2value(html) {\n            return this.options.select2.tags ? this.str2value(html, this.options.viewseparator) : null;\n        },\n\n        value2input: function value2input(value) {\n            // if value array => join it anyway\n            if ($.isArray(value)) {\n                value = value.join(this.getSeparator());\n            }\n\n            //for remote source just set value, text is updated by initSelection\n            if (!this.$input.data('select2')) {\n                this.$input.val(value);\n                this.$input.select2(this.options.select2);\n            } else {\n                //second argument needed to separate initial change from user's click (for autosubmit)   \n                this.$input.val(value).trigger('change', true);\n\n                //Uncaught Error: cannot call val() if initSelection() is not defined\n                //this.$input.select2('val', value);\n            }\n\n            // if defined remote source AND no multiple mode AND no user's initSelection provided --> \n            // we should somehow get text for provided id.\n            // The solution is to use element's text as text for that id (exclude empty)\n            if (this.isRemote && !this.isMultiple && !this.options.select2.initSelection) {\n                // customId and customText are methods to extract `id` and `text` from data object\n                // we can use this workaround only if user did not define these methods\n                // otherwise we cant construct data object\n                var customId = this.options.select2.id,\n                    customText = this.options.select2.formatSelection;\n\n                if (!customId && !customText) {\n                    var $el = $(this.options.scope);\n                    if (!$el.data('editable').isEmpty) {\n                        var data = { id: value, text: $el.text() };\n                        this.$input.select2('data', data);\n                    }\n                }\n            }\n        },\n\n        input2value: function input2value() {\n            return this.$input.select2('val');\n        },\n\n        str2value: function str2value(str, separator) {\n            if (typeof str !== 'string' || !this.isMultiple) {\n                return str;\n            }\n\n            separator = separator || this.getSeparator();\n\n            var val, i, l;\n\n            if (str === null || str.length < 1) {\n                return null;\n            }\n            val = str.split(separator);\n            for (i = 0, l = val.length; i < l; i = i + 1) {\n                val[i] = $.trim(val[i]);\n            }\n\n            return val;\n        },\n\n        autosubmit: function autosubmit() {\n            this.$input.on('change', function (e, isInitial) {\n                if (!isInitial) {\n                    $(this).closest('form').submit();\n                }\n            });\n        },\n\n        getSeparator: function getSeparator() {\n            return this.options.select2.separator || $.fn.select2.defaults.separator;\n        },\n\n        /*\n        Converts source from x-editable format: {value: 1, text: \"1\"} to\n        select2 format: {id: 1, text: \"1\"}\n        */\n        convertSource: function convertSource(source) {\n            if ($.isArray(source) && source.length && source[0].value !== undefined) {\n                for (var i = 0; i < source.length; i++) {\n                    if (source[i].value !== undefined) {\n                        source[i].id = source[i].value;\n                        delete source[i].value;\n                    }\n                }\n            }\n            return source;\n        },\n\n        destroy: function destroy() {\n            if (this.$input.data('select2')) {\n                this.$input.select2('destroy');\n            }\n        }\n\n    });\n\n    Constructor.defaults = $.extend({}, $.fn.editabletypes.abstractinput.defaults, {\n        /**\n        @property tpl \n        @default <input type=\"hidden\">\n        **/\n        tpl: '<input type=\"hidden\">',\n        /**\n        Configuration of select2. [Full list of options](http://ivaynberg.github.com/select2).\n         @property select2 \n        @type object\n        @default null\n        **/\n        select2: null,\n        /**\n        Placeholder attribute of select\n         @property placeholder \n        @type string\n        @default null\n        **/\n        placeholder: null,\n        /**\n        Source data for select. It will be assigned to select2 `data` property and kept here just for convenience.\n        Please note, that format is different from simple `select` input: use 'id' instead of 'value'.\n        E.g. `[{id: 1, text: \"text1\"}, {id: 2, text: \"text2\"}, ...]`.\n         @property source \n        @type array|string|function\n        @default null        \n        **/\n        source: null,\n        /**\n        Separator used to display tags.\n         @property viewseparator \n        @type string\n        @default ', '        \n        **/\n        viewseparator: ', '\n    });\n\n    $.fn.editabletypes.select2 = Constructor;\n})(window.jQuery);\n\n/**\n* Combodate - 1.0.5\n* Dropdown date and time picker.\n* Converts text input into dropdowns to pick day, month, year, hour, minute and second.\n* Uses momentjs as datetime library http://momentjs.com.\n* For i18n include corresponding file from https://github.com/timrwood/moment/tree/master/lang \n*\n* Confusion at noon and midnight - see http://en.wikipedia.org/wiki/12-hour_clock#Confusion_at_noon_and_midnight\n* In combodate: \n* 12:00 pm --> 12:00 (24-h format, midday)\n* 12:00 am --> 00:00 (24-h format, midnight, start of day)\n* \n* Differs from momentjs parse rules:\n* 00:00 pm, 12:00 pm --> 12:00 (24-h format, day not change)\n* 00:00 am, 12:00 am --> 00:00 (24-h format, day not change)\n* \n* \n* Author: Vitaliy Potapov\n* Project page: http://github.com/vitalets/combodate\n* Copyright (c) 2012 Vitaliy Potapov. Released under MIT License.\n**/\n(function ($) {\n\n    var Combodate = function Combodate(element, options) {\n        this.$element = $(element);\n        if (!this.$element.is('input')) {\n            $.error('Combodate should be applied to INPUT element');\n            return;\n        }\n        this.options = $.extend({}, $.fn.combodate.defaults, options, this.$element.data());\n        this.init();\n    };\n\n    Combodate.prototype = {\n        constructor: Combodate,\n        init: function init() {\n            this.map = {\n                //key   regexp    moment.method\n                day: ['D', 'date'],\n                month: ['M', 'month'],\n                year: ['Y', 'year'],\n                hour: ['[Hh]', 'hours'],\n                minute: ['m', 'minutes'],\n                second: ['s', 'seconds'],\n                ampm: ['[Aa]', '']\n            };\n\n            this.$widget = $('<span class=\"combodate\"></span>').html(this.getTemplate());\n\n            this.initCombos();\n\n            //update original input on change \n            this.$widget.on('change', 'select', $.proxy(function (e) {\n                this.$element.val(this.getValue()).change();\n                // update days count if month or year changes\n                if (this.options.smartDays) {\n                    if ($(e.target).is('.month') || $(e.target).is('.year')) {\n                        this.fillCombo('day');\n                    }\n                }\n            }, this));\n\n            this.$widget.find('select').css('width', 'auto');\n\n            // hide original input and insert widget                                       \n            this.$element.hide().after(this.$widget);\n\n            // set initial value\n            this.setValue(this.$element.val() || this.options.value);\n        },\n\n        /*\n         Replace tokens in template with <select> elements \n        */\n        getTemplate: function getTemplate() {\n            var tpl = this.options.template;\n\n            //first pass\n            $.each(this.map, function (k, v) {\n                v = v[0];\n                var r = new RegExp(v + '+'),\n                    token = v.length > 1 ? v.substring(1, 2) : v;\n\n                tpl = tpl.replace(r, '{' + token + '}');\n            });\n\n            //replace spaces with &nbsp;\n            tpl = tpl.replace(/ /g, '&nbsp;');\n\n            //second pass\n            $.each(this.map, function (k, v) {\n                v = v[0];\n                var token = v.length > 1 ? v.substring(1, 2) : v;\n\n                tpl = tpl.replace('{' + token + '}', '<select class=\"' + k + '\"></select>');\n            });\n\n            return tpl;\n        },\n\n        /*\n         Initialize combos that presents in template \n        */\n        initCombos: function initCombos() {\n            for (var k in this.map) {\n                var $c = this.$widget.find('.' + k);\n                // set properties like this.$day, this.$month etc.\n                this['$' + k] = $c.length ? $c : null;\n                // fill with items\n                this.fillCombo(k);\n            }\n        },\n\n        /*\n         Fill combo with items \n        */\n        fillCombo: function fillCombo(k) {\n            var $combo = this['$' + k];\n            if (!$combo) {\n                return;\n            }\n\n            // define method name to fill items, e.g `fillDays`\n            var f = 'fill' + k.charAt(0).toUpperCase() + k.slice(1);\n            var items = this[f]();\n            var value = $combo.val();\n\n            $combo.empty();\n            for (var i = 0; i < items.length; i++) {\n                $combo.append('<option value=\"' + items[i][0] + '\">' + items[i][1] + '</option>');\n            }\n\n            $combo.val(value);\n        },\n\n        /*\n         Initialize items of combos. Handles `firstItem` option \n        */\n        fillCommon: function fillCommon(key) {\n            var values = [],\n                relTime;\n\n            if (this.options.firstItem === 'name') {\n                //need both to support moment ver < 2 and  >= 2\n                relTime = moment.relativeTime || moment.langData()._relativeTime;\n                var header = typeof relTime[key] === 'function' ? relTime[key](1, true, key, false) : relTime[key];\n                //take last entry (see momentjs lang files structure) \n                header = header.split(' ').reverse()[0];\n                values.push(['', header]);\n            } else if (this.options.firstItem === 'empty') {\n                values.push(['', '']);\n            }\n            return values;\n        },\n\n        /*\n        fill day\n        */\n        fillDay: function fillDay() {\n            var items = this.fillCommon('d'),\n                name,\n                i,\n                twoDigit = this.options.template.indexOf('DD') !== -1,\n                daysCount = 31;\n\n            // detect days count (depends on month and year)\n            // originally https://github.com/vitalets/combodate/pull/7\n            if (this.options.smartDays && this.$month && this.$year) {\n                var month = parseInt(this.$month.val(), 10);\n                var year = parseInt(this.$year.val(), 10);\n\n                if (!isNaN(month) && !isNaN(year)) {\n                    daysCount = moment([year, month]).daysInMonth();\n                }\n            }\n\n            for (i = 1; i <= daysCount; i++) {\n                name = twoDigit ? this.leadZero(i) : i;\n                items.push([i, name]);\n            }\n            return items;\n        },\n\n        /*\n        fill month\n        */\n        fillMonth: function fillMonth() {\n            var items = this.fillCommon('M'),\n                name,\n                i,\n                longNames = this.options.template.indexOf('MMMM') !== -1,\n                shortNames = this.options.template.indexOf('MMM') !== -1,\n                twoDigit = this.options.template.indexOf('MM') !== -1;\n\n            for (i = 0; i <= 11; i++) {\n                if (longNames) {\n                    //see https://github.com/timrwood/momentjs.com/pull/36\n                    name = moment().date(1).month(i).format('MMMM');\n                } else if (shortNames) {\n                    name = moment().date(1).month(i).format('MMM');\n                } else if (twoDigit) {\n                    name = this.leadZero(i + 1);\n                } else {\n                    name = i + 1;\n                }\n                items.push([i, name]);\n            }\n            return items;\n        },\n\n        /*\n        fill year\n        */\n        fillYear: function fillYear() {\n            var items = [],\n                name,\n                i,\n                longNames = this.options.template.indexOf('YYYY') !== -1;\n\n            for (i = this.options.maxYear; i >= this.options.minYear; i--) {\n                name = longNames ? i : (i + '').substring(2);\n                items[this.options.yearDescending ? 'push' : 'unshift']([i, name]);\n            }\n\n            items = this.fillCommon('y').concat(items);\n\n            return items;\n        },\n\n        /*\n        fill hour\n        */\n        fillHour: function fillHour() {\n            var items = this.fillCommon('h'),\n                name,\n                i,\n                h12 = this.options.template.indexOf('h') !== -1,\n                h24 = this.options.template.indexOf('H') !== -1,\n                twoDigit = this.options.template.toLowerCase().indexOf('hh') !== -1,\n                min = h12 ? 1 : 0,\n                max = h12 ? 12 : 23;\n\n            for (i = min; i <= max; i++) {\n                name = twoDigit ? this.leadZero(i) : i;\n                items.push([i, name]);\n            }\n            return items;\n        },\n\n        /*\n        fill minute\n        */\n        fillMinute: function fillMinute() {\n            var items = this.fillCommon('m'),\n                name,\n                i,\n                twoDigit = this.options.template.indexOf('mm') !== -1;\n\n            for (i = 0; i <= 59; i += this.options.minuteStep) {\n                name = twoDigit ? this.leadZero(i) : i;\n                items.push([i, name]);\n            }\n            return items;\n        },\n\n        /*\n        fill second\n        */\n        fillSecond: function fillSecond() {\n            var items = this.fillCommon('s'),\n                name,\n                i,\n                twoDigit = this.options.template.indexOf('ss') !== -1;\n\n            for (i = 0; i <= 59; i += this.options.secondStep) {\n                name = twoDigit ? this.leadZero(i) : i;\n                items.push([i, name]);\n            }\n            return items;\n        },\n\n        /*\n        fill ampm\n        */\n        fillAmpm: function fillAmpm() {\n            var ampmL = this.options.template.indexOf('a') !== -1,\n                ampmU = this.options.template.indexOf('A') !== -1,\n                items = [['am', ampmL ? 'am' : 'AM'], ['pm', ampmL ? 'pm' : 'PM']];\n            return items;\n        },\n\n        /*\n         Returns current date value from combos. \n         If format not specified - `options.format` used.\n         If format = `null` - Moment object returned.\n        */\n        getValue: function getValue(format) {\n            var dt,\n                values = {},\n                that = this,\n                notSelected = false;\n\n            //getting selected values    \n            $.each(this.map, function (k, v) {\n                if (k === 'ampm') {\n                    return;\n                }\n                var def = k === 'day' ? 1 : 0;\n\n                values[k] = that['$' + k] ? parseInt(that['$' + k].val(), 10) : def;\n\n                if (isNaN(values[k])) {\n                    notSelected = true;\n                    return false;\n                }\n            });\n\n            //if at least one visible combo not selected - return empty string\n            if (notSelected) {\n                return '';\n            }\n\n            //convert hours 12h --> 24h \n            if (this.$ampm) {\n                //12:00 pm --> 12:00 (24-h format, midday), 12:00 am --> 00:00 (24-h format, midnight, start of day)\n                if (values.hour === 12) {\n                    values.hour = this.$ampm.val() === 'am' ? 0 : 12;\n                } else {\n                    values.hour = this.$ampm.val() === 'am' ? values.hour : values.hour + 12;\n                }\n            }\n\n            dt = moment([values.year, values.month, values.day, values.hour, values.minute, values.second]);\n\n            //highlight invalid date\n            this.highlight(dt);\n\n            format = format === undefined ? this.options.format : format;\n            if (format === null) {\n                return dt.isValid() ? dt : null;\n            } else {\n                return dt.isValid() ? dt.format(format) : '';\n            }\n        },\n\n        setValue: function setValue(value) {\n            if (!value) {\n                return;\n            }\n\n            var dt = typeof value === 'string' ? moment(value, this.options.format) : moment(value),\n                that = this,\n                values = {};\n\n            //function to find nearest value in select options\n            function getNearest($select, value) {\n                var delta = {};\n                $select.children('option').each(function (i, opt) {\n                    var optValue = $(opt).attr('value'),\n                        distance;\n\n                    if (optValue === '') return;\n                    distance = Math.abs(optValue - value);\n                    if (typeof delta.distance === 'undefined' || distance < delta.distance) {\n                        delta = { value: optValue, distance: distance };\n                    }\n                });\n                return delta.value;\n            }\n\n            if (dt.isValid()) {\n                //read values from date object\n                $.each(this.map, function (k, v) {\n                    if (k === 'ampm') {\n                        return;\n                    }\n                    values[k] = dt[v[1]]();\n                });\n\n                if (this.$ampm) {\n                    //12:00 pm --> 12:00 (24-h format, midday), 12:00 am --> 00:00 (24-h format, midnight, start of day)\n                    if (values.hour >= 12) {\n                        values.ampm = 'pm';\n                        if (values.hour > 12) {\n                            values.hour -= 12;\n                        }\n                    } else {\n                        values.ampm = 'am';\n                        if (values.hour === 0) {\n                            values.hour = 12;\n                        }\n                    }\n                }\n\n                $.each(values, function (k, v) {\n                    //call val() for each existing combo, e.g. this.$hour.val()\n                    if (that['$' + k]) {\n\n                        if (k === 'minute' && that.options.minuteStep > 1 && that.options.roundTime) {\n                            v = getNearest(that['$' + k], v);\n                        }\n\n                        if (k === 'second' && that.options.secondStep > 1 && that.options.roundTime) {\n                            v = getNearest(that['$' + k], v);\n                        }\n\n                        that['$' + k].val(v);\n                    }\n                });\n\n                // update days count\n                if (this.options.smartDays) {\n                    this.fillCombo('day');\n                }\n\n                this.$element.val(dt.format(this.options.format)).change();\n            }\n        },\n\n        /*\n         highlight combos if date is invalid\n        */\n        highlight: function highlight(dt) {\n            if (!dt.isValid()) {\n                if (this.options.errorClass) {\n                    this.$widget.addClass(this.options.errorClass);\n                } else {\n                    //store original border color\n                    if (!this.borderColor) {\n                        this.borderColor = this.$widget.find('select').css('border-color');\n                    }\n                    this.$widget.find('select').css('border-color', 'red');\n                }\n            } else {\n                if (this.options.errorClass) {\n                    this.$widget.removeClass(this.options.errorClass);\n                } else {\n                    this.$widget.find('select').css('border-color', this.borderColor);\n                }\n            }\n        },\n\n        leadZero: function leadZero(v) {\n            return v <= 9 ? '0' + v : v;\n        },\n\n        destroy: function destroy() {\n            this.$widget.remove();\n            this.$element.removeData('combodate').show();\n        }\n\n        //todo: clear method        \n    };\n\n    $.fn.combodate = function (option) {\n        var d,\n            args = Array.apply(null, arguments);\n        args.shift();\n\n        //getValue returns date as string / object (not jQuery object)\n        if (option === 'getValue' && this.length && (d = this.eq(0).data('combodate'))) {\n            return d.getValue.apply(d, args);\n        }\n\n        return this.each(function () {\n            var $this = $(this),\n                data = $this.data('combodate'),\n                options = (typeof option === 'undefined' ? 'undefined' : _typeof(option)) == 'object' && option;\n            if (!data) {\n                $this.data('combodate', data = new Combodate(this, options));\n            }\n            if (typeof option == 'string' && typeof data[option] == 'function') {\n                data[option].apply(data, args);\n            }\n        });\n    };\n\n    $.fn.combodate.defaults = {\n        //in this format value stored in original input\n        format: 'DD-MM-YYYY HH:mm',\n        //in this format items in dropdowns are displayed\n        template: 'D / MMM / YYYY   H : mm',\n        //initial value, can be `new Date()`    \n        value: null,\n        minYear: 1970,\n        maxYear: 2015,\n        yearDescending: true,\n        minuteStep: 5,\n        secondStep: 1,\n        firstItem: 'empty', //'name', 'empty', 'none'\n        errorClass: null,\n        roundTime: true, // whether to round minutes and seconds if step > 1\n        smartDays: false // whether days in combo depend on selected month: 31, 30, 28\n    };\n})(window.jQuery);\n/**\nCombodate input - dropdown date and time picker.    \nBased on [combodate](http://vitalets.github.com/combodate) plugin (included). To use it you should manually include [momentjs](http://momentjs.com).\n\n    <script src=\"js/moment.min.js\"></script>\n   \nAllows to input:\n\n* only date\n* only time \n* both date and time  \n\nPlease note, that format is taken from momentjs and **not compatible** with bootstrap-datepicker / jquery UI datepicker.  \nInternally value stored as `momentjs` object. \n\n@class combodate\n@extends abstractinput\n@final\n@since 1.4.0\n@example\n<a href=\"#\" id=\"dob\" data-type=\"combodate\" data-pk=\"1\" data-url=\"/post\" data-value=\"1984-05-15\" data-title=\"Select date\"></a>\n<script>\n$(function(){\n    $('#dob').editable({\n        format: 'YYYY-MM-DD',    \n        viewformat: 'DD.MM.YYYY',    \n        template: 'D / MMMM / YYYY',    \n        combodate: {\n                minYear: 2000,\n                maxYear: 2015,\n                minuteStep: 1\n           }\n        }\n    });\n});\n</script>\n**/\n\n/*global moment*/\n\n(function ($) {\n    ;\n\n    var Constructor = function Constructor(options) {\n        this.init('combodate', options, Constructor.defaults);\n\n        //by default viewformat equals to format\n        if (!this.options.viewformat) {\n            this.options.viewformat = this.options.format;\n        }\n\n        //try parse combodate config defined as json string in data-combodate\n        options.combodate = $.fn.editableutils.tryParseJson(options.combodate, true);\n\n        //overriding combodate config (as by default jQuery extend() is not recursive)\n        this.options.combodate = $.extend({}, Constructor.defaults.combodate, options.combodate, {\n            format: this.options.format,\n            template: this.options.template\n        });\n    };\n\n    $.fn.editableutils.inherit(Constructor, $.fn.editabletypes.abstractinput);\n\n    $.extend(Constructor.prototype, {\n        render: function render() {\n            this.$input.combodate(this.options.combodate);\n\n            if ($.fn.editableform.engine === 'bs3') {\n                this.$input.siblings().find('select').addClass('form-control');\n            }\n\n            if (this.options.inputclass) {\n                this.$input.siblings().find('select').addClass(this.options.inputclass);\n            }\n            //\"clear\" link\n            /*\n            if(this.options.clear) {\n                this.$clear = $('<a href=\"#\"></a>').html(this.options.clear).click($.proxy(function(e){\n                    e.preventDefault();\n                    e.stopPropagation();\n                    this.clear();\n                }, this));\n                \n                this.$tpl.parent().append($('<div class=\"editable-clear\">').append(this.$clear));  \n            } \n            */\n        },\n\n        value2html: function value2html(value, element) {\n            var text = value ? value.format(this.options.viewformat) : '';\n            //$(element).text(text);\n            Constructor.superclass.value2html.call(this, text, element);\n        },\n\n        html2value: function html2value(html) {\n            return html ? moment(html, this.options.viewformat) : null;\n        },\n\n        value2str: function value2str(value) {\n            return value ? value.format(this.options.format) : '';\n        },\n\n        str2value: function str2value(str) {\n            return str ? moment(str, this.options.format) : null;\n        },\n\n        value2submit: function value2submit(value) {\n            return this.value2str(value);\n        },\n\n        value2input: function value2input(value) {\n            this.$input.combodate('setValue', value);\n        },\n\n        input2value: function input2value() {\n            return this.$input.combodate('getValue', null);\n        },\n\n        activate: function activate() {\n            this.$input.siblings('.combodate').find('select').eq(0).focus();\n        },\n\n        /*\n        clear:  function() {\n           this.$input.data('datepicker').date = null;\n           this.$input.find('.active').removeClass('active');\n        },\n        */\n\n        autosubmit: function autosubmit() {}\n\n    });\n\n    Constructor.defaults = $.extend({}, $.fn.editabletypes.abstractinput.defaults, {\n        /**\n        @property tpl \n        @default <input type=\"text\">\n        **/\n        tpl: '<input type=\"text\">',\n        /**\n        @property inputclass \n        @default null\n        **/\n        inputclass: null,\n        /**\n        Format used for sending value to server. Also applied when converting date from <code>data-value</code> attribute.<br>\n        See list of tokens in [momentjs docs](http://momentjs.com/docs/#/parsing/string-format)  \n        \n        @property format \n        @type string\n        @default YYYY-MM-DD\n        **/\n        format: 'YYYY-MM-DD',\n        /**\n        Format used for displaying date. Also applied when converting date from element's text on init.   \n        If not specified equals to `format`.\n        \n        @property viewformat \n        @type string\n        @default null\n        **/\n        viewformat: null,\n        /**\n        Template used for displaying dropdowns.\n        \n        @property template \n        @type string\n        @default D / MMM / YYYY\n        **/\n        template: 'D / MMM / YYYY',\n        /**\n        Configuration of combodate.\n        Full list of options: http://vitalets.github.com/combodate/#docs\n        \n        @property combodate \n        @type object\n        @default null\n        **/\n        combodate: null\n\n        /*\n        (not implemented yet)\n        Text shown as clear date button. \n        If <code>false</code> clear button will not be rendered.\n        \n        @property clear \n        @type boolean|string\n        @default 'x clear'         \n        */\n        //clear: '&times; clear'\n    });\n\n    $.fn.editabletypes.combodate = Constructor;\n})(window.jQuery);\n\n/*\nEditableform based on Twitter Bootstrap 3\n*/\n(function ($) {\n    ;\n\n    //store parent methods\n    var pInitInput = $.fn.editableform.Constructor.prototype.initInput;\n\n    $.extend($.fn.editableform.Constructor.prototype, {\n        initTemplate: function initTemplate() {\n            this.$form = $($.fn.editableform.template);\n            this.$form.find('.control-group').addClass('form-group');\n            this.$form.find('.editable-error-block').addClass('help-block');\n        },\n        initInput: function initInput() {\n            pInitInput.apply(this);\n\n            //for bs3 set default class `input-sm` to standard inputs\n            var emptyInputClass = this.input.options.inputclass === null || this.input.options.inputclass === false;\n            var defaultClass = 'input-sm';\n\n            //bs3 add `form-control` class to standard inputs\n            var stdtypes = 'text,select,textarea,password,email,url,tel,number,range,time,typeaheadjs'.split(',');\n            if (~$.inArray(this.input.type, stdtypes)) {\n                this.input.$input.addClass('form-control');\n                if (emptyInputClass) {\n                    this.input.options.inputclass = defaultClass;\n                    this.input.$input.addClass(defaultClass);\n                }\n            }\n\n            //apply bs3 size class also to buttons (to fit size of control)\n            var $btn = this.$form.find('.editable-buttons');\n            var classes = emptyInputClass ? [defaultClass] : this.input.options.inputclass.split(' ');\n            for (var i = 0; i < classes.length; i++) {\n                // `btn-sm` is default now\n                /*\n                if(classes[i].toLowerCase() === 'input-sm') { \n                    $btn.find('button').addClass('btn-sm');  \n                }\n                */\n                if (classes[i].toLowerCase() === 'input-lg') {\n                    $btn.find('button').removeClass('btn-sm').addClass('btn-lg');\n                }\n            }\n        }\n    });\n\n    //buttons\n    $.fn.editableform.buttons = '<button type=\"submit\" class=\"btn btn-primary btn-sm editable-submit\">' + '<i class=\"fa fa-ok\"></i>' + '</button>' + '<button type=\"button\" class=\"btn btn-default btn-sm editable-cancel\">' + '<i class=\"fa fa-remove\"></i>' + '</button>';\n\n    //error classes\n    $.fn.editableform.errorGroupClass = 'has-error';\n    $.fn.editableform.errorBlockClass = null;\n    //engine\n    $.fn.editableform.engine = 'bs3';\n})(window.jQuery);\n/**\n* Editable Popover3 (for Bootstrap 3) \n* ---------------------\n* requires bootstrap-popover.js\n*/\n(function ($) {\n    ;\n\n    //extend methods\n    $.extend($.fn.editableContainer.Popup.prototype, {\n        containerName: 'popover',\n        containerDataName: 'bs.popover',\n        innerCss: '.popover-content',\n        defaults: $.fn.popover.Constructor.DEFAULTS,\n\n        initContainer: function initContainer() {\n            $.extend(this.containerOptions, {\n                trigger: 'manual',\n                selector: false,\n                content: ' ',\n                template: this.defaults.template\n            });\n\n            //as template property is used in inputs, hide it from popover\n            var t;\n            if (this.$element.data('template')) {\n                t = this.$element.data('template');\n                this.$element.removeData('template');\n            }\n\n            this.call(this.containerOptions);\n\n            if (t) {\n                //restore data('template')\n                this.$element.data('template', t);\n            }\n        },\n\n        /* show */\n        innerShow: function innerShow() {\n            this.call('show');\n        },\n\n        /* hide */\n        innerHide: function innerHide() {\n            this.call('hide');\n        },\n\n        /* destroy */\n        innerDestroy: function innerDestroy() {\n            this.call('destroy');\n        },\n\n        setContainerOption: function setContainerOption(key, value) {\n            this.container().options[key] = value;\n        },\n\n        /**\n        * move popover to new position. This function mainly copied from bootstrap-popover.\n        */\n        /*jshint laxcomma: true, eqeqeq: false*/\n        setPosition: function setPosition() {\n\n            (function () {\n                /*    \n                    var $tip = this.tip()\n                    , inside\n                    , pos\n                    , actualWidth\n                    , actualHeight\n                    , placement\n                    , tp\n                    , tpt\n                    , tpb\n                    , tpl\n                    , tpr;\n                     placement = typeof this.options.placement === 'function' ?\n                    this.options.placement.call(this, $tip[0], this.$element[0]) :\n                    this.options.placement;\n                     inside = /in/.test(placement);\n                   \n                    $tip\n                  //  .detach()\n                  //vitalets: remove any placement class because otherwise they dont influence on re-positioning of visible popover\n                    .removeClass('top right bottom left')\n                    .css({ top: 0, left: 0, display: 'block' });\n                  //  .insertAfter(this.$element);\n                   \n                    pos = this.getPosition(inside);\n                     actualWidth = $tip[0].offsetWidth;\n                    actualHeight = $tip[0].offsetHeight;\n                     placement = inside ? placement.split(' ')[1] : placement;\n                     tpb = {top: pos.top + pos.height, left: pos.left + pos.width / 2 - actualWidth / 2};\n                    tpt = {top: pos.top - actualHeight, left: pos.left + pos.width / 2 - actualWidth / 2};\n                    tpl = {top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left - actualWidth};\n                    tpr = {top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width};\n                     switch (placement) {\n                        case 'bottom':\n                            if ((tpb.top + actualHeight) > ($(window).scrollTop() + $(window).height())) {\n                                if (tpt.top > $(window).scrollTop()) {\n                                    placement = 'top';\n                                } else if ((tpr.left + actualWidth) < ($(window).scrollLeft() + $(window).width())) {\n                                    placement = 'right';\n                                } else if (tpl.left > $(window).scrollLeft()) {\n                                    placement = 'left';\n                                } else {\n                                    placement = 'right';\n                                }\n                            }\n                            break;\n                        case 'top':\n                            if (tpt.top < $(window).scrollTop()) {\n                                if ((tpb.top + actualHeight) < ($(window).scrollTop() + $(window).height())) {\n                                    placement = 'bottom';\n                                } else if ((tpr.left + actualWidth) < ($(window).scrollLeft() + $(window).width())) {\n                                    placement = 'right';\n                                } else if (tpl.left > $(window).scrollLeft()) {\n                                    placement = 'left';\n                                } else {\n                                    placement = 'right';\n                                }\n                            }\n                            break;\n                        case 'left':\n                            if (tpl.left < $(window).scrollLeft()) {\n                                if ((tpr.left + actualWidth) < ($(window).scrollLeft() + $(window).width())) {\n                                    placement = 'right';\n                                } else if (tpt.top > $(window).scrollTop()) {\n                                    placement = 'top';\n                                } else if (tpt.top > $(window).scrollTop()) {\n                                    placement = 'bottom';\n                                } else {\n                                    placement = 'right';\n                                }\n                            }\n                            break;\n                        case 'right':\n                            if ((tpr.left + actualWidth) > ($(window).scrollLeft() + $(window).width())) {\n                                if (tpl.left > $(window).scrollLeft()) {\n                                    placement = 'left';\n                                } else if (tpt.top > $(window).scrollTop()) {\n                                    placement = 'top';\n                                } else if (tpt.top > $(window).scrollTop()) {\n                                    placement = 'bottom';\n                                }\n                            }\n                            break;\n                    }\n                     switch (placement) {\n                        case 'bottom':\n                            tp = tpb;\n                            break;\n                        case 'top':\n                            tp = tpt;\n                            break;\n                        case 'left':\n                            tp = tpl;\n                            break;\n                        case 'right':\n                            tp = tpr;\n                            break;\n                    }\n                     $tip\n                    .offset(tp)\n                    .addClass(placement)\n                    .addClass('in');\n                */\n\n                var $tip = this.tip();\n\n                var placement = typeof this.options.placement == 'function' ? this.options.placement.call(this, $tip[0], this.$element[0]) : this.options.placement;\n\n                var autoToken = /\\s?auto?\\s?/i;\n                var autoPlace = autoToken.test(placement);\n                if (autoPlace) {\n                    placement = placement.replace(autoToken, '') || 'top';\n                }\n\n                var pos = this.getPosition();\n                var actualWidth = $tip[0].offsetWidth;\n                var actualHeight = $tip[0].offsetHeight;\n\n                if (autoPlace) {\n                    var $parent = this.$element.parent();\n\n                    var orgPlacement = placement;\n                    var docScroll = document.documentElement.scrollTop || document.body.scrollTop;\n                    var parentWidth = this.options.container == 'body' ? window.innerWidth : $parent.outerWidth();\n                    var parentHeight = this.options.container == 'body' ? window.innerHeight : $parent.outerHeight();\n                    var parentLeft = this.options.container == 'body' ? 0 : $parent.offset().left;\n\n                    placement = placement == 'bottom' && pos.top + pos.height + actualHeight - docScroll > parentHeight ? 'top' : placement == 'top' && pos.top - docScroll - actualHeight < 0 ? 'bottom' : placement == 'right' && pos.right + actualWidth > parentWidth ? 'left' : placement == 'left' && pos.left - actualWidth < parentLeft ? 'right' : placement;\n\n                    $tip.removeClass(orgPlacement).addClass(placement);\n                }\n\n                var calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight);\n\n                this.applyPlacement(calculatedOffset, placement);\n            }).call(this.container());\n            /*jshint laxcomma: false, eqeqeq: true*/\n        }\n    });\n})(window.jQuery);\n\n/* =========================================================\n * bootstrap-datepicker.js\n * http://www.eyecon.ro/bootstrap-datepicker\n * =========================================================\n * Copyright 2012 Stefan Petre\n * Improvements by Andrew Rowls\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ========================================================= */\n\n(function ($) {\n\n    function UTCDate() {\n        return new Date(Date.UTC.apply(Date, arguments));\n    }\n    function UTCToday() {\n        var today = new Date();\n        return UTCDate(today.getUTCFullYear(), today.getUTCMonth(), today.getUTCDate());\n    }\n\n    // Picker object\n\n    var Datepicker = function Datepicker(element, options) {\n        var that = this;\n\n        this._process_options(options);\n\n        this.element = $(element);\n        this.isInline = false;\n        this.isInput = this.element.is('input');\n        this.component = this.element.is('.date') ? this.element.find('.add-on, .btn') : false;\n        this.hasInput = this.component && this.element.find('input').length;\n        if (this.component && this.component.length === 0) this.component = false;\n\n        this.picker = $(DPGlobal.template);\n        this._buildEvents();\n        this._attachEvents();\n\n        if (this.isInline) {\n            this.picker.addClass('datepicker-inline').appendTo(this.element);\n        } else {\n            this.picker.addClass('datepicker-dropdown dropdown-menu');\n        }\n\n        if (this.o.rtl) {\n            this.picker.addClass('datepicker-rtl');\n            this.picker.find('.prev i, .next i').toggleClass('icon-arrow-left icon-arrow-right');\n        }\n\n        this.viewMode = this.o.startView;\n\n        if (this.o.calendarWeeks) this.picker.find('tfoot th.today').attr('colspan', function (i, val) {\n            return parseInt(val) + 1;\n        });\n\n        this._allow_update = false;\n\n        this.setStartDate(this.o.startDate);\n        this.setEndDate(this.o.endDate);\n        this.setDaysOfWeekDisabled(this.o.daysOfWeekDisabled);\n\n        this.fillDow();\n        this.fillMonths();\n\n        this._allow_update = true;\n\n        this.update();\n        this.showMode();\n\n        if (this.isInline) {\n            this.show();\n        }\n    };\n\n    Datepicker.prototype = {\n        constructor: Datepicker,\n\n        _process_options: function _process_options(opts) {\n            // Store raw options for reference\n            this._o = $.extend({}, this._o, opts);\n            // Processed options\n            var o = this.o = $.extend({}, this._o);\n\n            // Check if \"de-DE\" style date is available, if not language should\n            // fallback to 2 letter code eg \"de\"\n            var lang = o.language;\n            if (!dates[lang]) {\n                lang = lang.split('-')[0];\n                if (!dates[lang]) lang = defaults.language;\n            }\n            o.language = lang;\n\n            switch (o.startView) {\n                case 2:\n                case 'decade':\n                    o.startView = 2;\n                    break;\n                case 1:\n                case 'year':\n                    o.startView = 1;\n                    break;\n                default:\n                    o.startView = 0;\n            }\n\n            switch (o.minViewMode) {\n                case 1:\n                case 'months':\n                    o.minViewMode = 1;\n                    break;\n                case 2:\n                case 'years':\n                    o.minViewMode = 2;\n                    break;\n                default:\n                    o.minViewMode = 0;\n            }\n\n            o.startView = Math.max(o.startView, o.minViewMode);\n\n            o.weekStart %= 7;\n            o.weekEnd = (o.weekStart + 6) % 7;\n\n            var format = DPGlobal.parseFormat(o.format);\n            if (o.startDate !== -Infinity) {\n                o.startDate = DPGlobal.parseDate(o.startDate, format, o.language);\n            }\n            if (o.endDate !== Infinity) {\n                o.endDate = DPGlobal.parseDate(o.endDate, format, o.language);\n            }\n\n            o.daysOfWeekDisabled = o.daysOfWeekDisabled || [];\n            if (!$.isArray(o.daysOfWeekDisabled)) o.daysOfWeekDisabled = o.daysOfWeekDisabled.split(/[,\\s]*/);\n            o.daysOfWeekDisabled = $.map(o.daysOfWeekDisabled, function (d) {\n                return parseInt(d, 10);\n            });\n        },\n        _events: [],\n        _secondaryEvents: [],\n        _applyEvents: function _applyEvents(evs) {\n            for (var i = 0, el, ev; i < evs.length; i++) {\n                el = evs[i][0];\n                ev = evs[i][1];\n                el.on(ev);\n            }\n        },\n        _unapplyEvents: function _unapplyEvents(evs) {\n            for (var i = 0, el, ev; i < evs.length; i++) {\n                el = evs[i][0];\n                ev = evs[i][1];\n                el.off(ev);\n            }\n        },\n        _buildEvents: function _buildEvents() {\n            if (this.isInput) {\n                // single input\n                this._events = [[this.element, {\n                    focus: $.proxy(this.show, this),\n                    keyup: $.proxy(this.update, this),\n                    keydown: $.proxy(this.keydown, this)\n                }]];\n            } else if (this.component && this.hasInput) {\n                // component: input + button\n                this._events = [\n                // For components that are not readonly, allow keyboard nav\n                [this.element.find('input'), {\n                    focus: $.proxy(this.show, this),\n                    keyup: $.proxy(this.update, this),\n                    keydown: $.proxy(this.keydown, this)\n                }], [this.component, {\n                    click: $.proxy(this.show, this)\n                }]];\n            } else if (this.element.is('div')) {\n                // inline datepicker\n                this.isInline = true;\n            } else {\n                this._events = [[this.element, {\n                    click: $.proxy(this.show, this)\n                }]];\n            }\n\n            this._secondaryEvents = [[this.picker, {\n                click: $.proxy(this.click, this)\n            }], [$(window), {\n                resize: $.proxy(this.place, this)\n            }], [$(document), {\n                mousedown: $.proxy(function (e) {\n                    // Clicked outside the datepicker, hide it\n                    if (!(this.element.is(e.target) || this.element.find(e.target).size() || this.picker.is(e.target) || this.picker.find(e.target).size())) {\n                        this.hide();\n                    }\n                }, this)\n            }]];\n        },\n        _attachEvents: function _attachEvents() {\n            this._detachEvents();\n            this._applyEvents(this._events);\n        },\n        _detachEvents: function _detachEvents() {\n            this._unapplyEvents(this._events);\n        },\n        _attachSecondaryEvents: function _attachSecondaryEvents() {\n            this._detachSecondaryEvents();\n            this._applyEvents(this._secondaryEvents);\n        },\n        _detachSecondaryEvents: function _detachSecondaryEvents() {\n            this._unapplyEvents(this._secondaryEvents);\n        },\n        _trigger: function _trigger(event, altdate) {\n            var date = altdate || this.date,\n                local_date = new Date(date.getTime() + date.getTimezoneOffset() * 60000);\n\n            this.element.trigger({\n                type: event,\n                date: local_date,\n                format: $.proxy(function (altformat) {\n                    var format = altformat || this.o.format;\n                    return DPGlobal.formatDate(date, format, this.o.language);\n                }, this)\n            });\n        },\n\n        show: function show(e) {\n            if (!this.isInline) this.picker.appendTo('body');\n            this.picker.show();\n            this.height = this.component ? this.component.outerHeight() : this.element.outerHeight();\n            this.place();\n            this._attachSecondaryEvents();\n            if (e) {\n                e.preventDefault();\n            }\n            this._trigger('show');\n        },\n\n        hide: function hide(e) {\n            if (this.isInline) return;\n            if (!this.picker.is(':visible')) return;\n            this.picker.hide().detach();\n            this._detachSecondaryEvents();\n            this.viewMode = this.o.startView;\n            this.showMode();\n\n            if (this.o.forceParse && (this.isInput && this.element.val() || this.hasInput && this.element.find('input').val())) this.setValue();\n            this._trigger('hide');\n        },\n\n        remove: function remove() {\n            this.hide();\n            this._detachEvents();\n            this._detachSecondaryEvents();\n            this.picker.remove();\n            delete this.element.data().datepicker;\n            if (!this.isInput) {\n                delete this.element.data().date;\n            }\n        },\n\n        getDate: function getDate() {\n            var d = this.getUTCDate();\n            return new Date(d.getTime() + d.getTimezoneOffset() * 60000);\n        },\n\n        getUTCDate: function getUTCDate() {\n            return this.date;\n        },\n\n        setDate: function setDate(d) {\n            this.setUTCDate(new Date(d.getTime() - d.getTimezoneOffset() * 60000));\n        },\n\n        setUTCDate: function setUTCDate(d) {\n            this.date = d;\n            this.setValue();\n        },\n\n        setValue: function setValue() {\n            var formatted = this.getFormattedDate();\n            if (!this.isInput) {\n                if (this.component) {\n                    this.element.find('input').val(formatted);\n                }\n            } else {\n                this.element.val(formatted);\n            }\n        },\n\n        getFormattedDate: function getFormattedDate(format) {\n            if (format === undefined) format = this.o.format;\n            return DPGlobal.formatDate(this.date, format, this.o.language);\n        },\n\n        setStartDate: function setStartDate(startDate) {\n            this._process_options({ startDate: startDate });\n            this.update();\n            this.updateNavArrows();\n        },\n\n        setEndDate: function setEndDate(endDate) {\n            this._process_options({ endDate: endDate });\n            this.update();\n            this.updateNavArrows();\n        },\n\n        setDaysOfWeekDisabled: function setDaysOfWeekDisabled(daysOfWeekDisabled) {\n            this._process_options({ daysOfWeekDisabled: daysOfWeekDisabled });\n            this.update();\n            this.updateNavArrows();\n        },\n\n        place: function place() {\n            if (this.isInline) return;\n            var zIndex = parseInt(this.element.parents().filter(function () {\n                return $(this).css('z-index') != 'auto';\n            }).first().css('z-index')) + 10;\n            var offset = this.component ? this.component.parent().offset() : this.element.offset();\n            var height = this.component ? this.component.outerHeight(true) : this.element.outerHeight(true);\n            this.picker.css({\n                top: offset.top + height,\n                left: offset.left,\n                zIndex: zIndex\n            });\n        },\n\n        _allow_update: true,\n        update: function update() {\n            if (!this._allow_update) return;\n\n            var date,\n                fromArgs = false;\n            if (arguments && arguments.length && (typeof arguments[0] === 'string' || arguments[0] instanceof Date)) {\n                date = arguments[0];\n                fromArgs = true;\n            } else {\n                date = this.isInput ? this.element.val() : this.element.data('date') || this.element.find('input').val();\n                delete this.element.data().date;\n            }\n\n            this.date = DPGlobal.parseDate(date, this.o.format, this.o.language);\n\n            if (fromArgs) this.setValue();\n\n            if (this.date < this.o.startDate) {\n                this.viewDate = new Date(this.o.startDate);\n            } else if (this.date > this.o.endDate) {\n                this.viewDate = new Date(this.o.endDate);\n            } else {\n                this.viewDate = new Date(this.date);\n            }\n            this.fill();\n        },\n\n        fillDow: function fillDow() {\n            var dowCnt = this.o.weekStart,\n                html = '<tr>';\n            if (this.o.calendarWeeks) {\n                var cell = '<th class=\"cw\">&nbsp;</th>';\n                html += cell;\n                this.picker.find('.datepicker-days thead tr:first-child').prepend(cell);\n            }\n            while (dowCnt < this.o.weekStart + 7) {\n                html += '<th class=\"dow\">' + dates[this.o.language].daysMin[dowCnt++ % 7] + '</th>';\n            }\n            html += '</tr>';\n            this.picker.find('.datepicker-days thead').append(html);\n        },\n\n        fillMonths: function fillMonths() {\n            var html = '',\n                i = 0;\n            while (i < 12) {\n                html += '<span class=\"month\">' + dates[this.o.language].monthsShort[i++] + '</span>';\n            }\n            this.picker.find('.datepicker-months td').html(html);\n        },\n\n        setRange: function setRange(range) {\n            if (!range || !range.length) delete this.range;else this.range = $.map(range, function (d) {\n                return d.valueOf();\n            });\n            this.fill();\n        },\n\n        getClassNames: function getClassNames(date) {\n            var cls = [],\n                year = this.viewDate.getUTCFullYear(),\n                month = this.viewDate.getUTCMonth(),\n                currentDate = this.date.valueOf(),\n                today = new Date();\n            if (date.getUTCFullYear() < year || date.getUTCFullYear() == year && date.getUTCMonth() < month) {\n                cls.push('old');\n            } else if (date.getUTCFullYear() > year || date.getUTCFullYear() == year && date.getUTCMonth() > month) {\n                cls.push('new');\n            }\n            // Compare internal UTC date with local today, not UTC today\n            if (this.o.todayHighlight && date.getUTCFullYear() == today.getFullYear() && date.getUTCMonth() == today.getMonth() && date.getUTCDate() == today.getDate()) {\n                cls.push('today');\n            }\n            if (currentDate && date.valueOf() == currentDate) {\n                cls.push('active');\n            }\n            if (date.valueOf() < this.o.startDate || date.valueOf() > this.o.endDate || $.inArray(date.getUTCDay(), this.o.daysOfWeekDisabled) !== -1) {\n                cls.push('disabled');\n            }\n            if (this.range) {\n                if (date > this.range[0] && date < this.range[this.range.length - 1]) {\n                    cls.push('range');\n                }\n                if ($.inArray(date.valueOf(), this.range) != -1) {\n                    cls.push('selected');\n                }\n            }\n            return cls;\n        },\n\n        fill: function fill() {\n            var d = new Date(this.viewDate),\n                year = d.getUTCFullYear(),\n                month = d.getUTCMonth(),\n                startYear = this.o.startDate !== -Infinity ? this.o.startDate.getUTCFullYear() : -Infinity,\n                startMonth = this.o.startDate !== -Infinity ? this.o.startDate.getUTCMonth() : -Infinity,\n                endYear = this.o.endDate !== Infinity ? this.o.endDate.getUTCFullYear() : Infinity,\n                endMonth = this.o.endDate !== Infinity ? this.o.endDate.getUTCMonth() : Infinity,\n                currentDate = this.date && this.date.valueOf(),\n                tooltip;\n            this.picker.find('.datepicker-days thead th.datepicker-switch').text(dates[this.o.language].months[month] + ' ' + year);\n            this.picker.find('tfoot th.today').text(dates[this.o.language].today).toggle(this.o.todayBtn !== false);\n            this.picker.find('tfoot th.clear').text(dates[this.o.language].clear).toggle(this.o.clearBtn !== false);\n            this.updateNavArrows();\n            this.fillMonths();\n            var prevMonth = UTCDate(year, month - 1, 28, 0, 0, 0, 0),\n                day = DPGlobal.getDaysInMonth(prevMonth.getUTCFullYear(), prevMonth.getUTCMonth());\n            prevMonth.setUTCDate(day);\n            prevMonth.setUTCDate(day - (prevMonth.getUTCDay() - this.o.weekStart + 7) % 7);\n            var nextMonth = new Date(prevMonth);\n            nextMonth.setUTCDate(nextMonth.getUTCDate() + 42);\n            nextMonth = nextMonth.valueOf();\n            var html = [];\n            var clsName;\n            while (prevMonth.valueOf() < nextMonth) {\n                if (prevMonth.getUTCDay() == this.o.weekStart) {\n                    html.push('<tr>');\n                    if (this.o.calendarWeeks) {\n                        // ISO 8601: First week contains first thursday.\n                        // ISO also states week starts on Monday, but we can be more abstract here.\n                        var\n                        // Start of current week: based on weekstart/current date\n                        ws = new Date(+prevMonth + (this.o.weekStart - prevMonth.getUTCDay() - 7) % 7 * 864e5),\n\n                        // Thursday of this week\n                        th = new Date(+ws + (7 + 4 - ws.getUTCDay()) % 7 * 864e5),\n\n                        // First Thursday of year, year from thursday\n                        yth = new Date(+(yth = UTCDate(th.getUTCFullYear(), 0, 1)) + (7 + 4 - yth.getUTCDay()) % 7 * 864e5),\n\n                        // Calendar week: ms between thursdays, div ms per day, div 7 days\n                        calWeek = (th - yth) / 864e5 / 7 + 1;\n                        html.push('<td class=\"cw\">' + calWeek + '</td>');\n                    }\n                }\n                clsName = this.getClassNames(prevMonth);\n                clsName.push('day');\n\n                var before = this.o.beforeShowDay(prevMonth);\n                if (before === undefined) before = {};else if (typeof before === 'boolean') before = { enabled: before };else if (typeof before === 'string') before = { classes: before };\n                if (before.enabled === false) clsName.push('disabled');\n                if (before.classes) clsName = clsName.concat(before.classes.split(/\\s+/));\n                if (before.tooltip) tooltip = before.tooltip;\n\n                clsName = $.unique(clsName);\n                html.push('<td class=\"' + clsName.join(' ') + '\"' + (tooltip ? ' title=\"' + tooltip + '\"' : '') + '>' + prevMonth.getUTCDate() + '</td>');\n                if (prevMonth.getUTCDay() == this.o.weekEnd) {\n                    html.push('</tr>');\n                }\n                prevMonth.setUTCDate(prevMonth.getUTCDate() + 1);\n            }\n            this.picker.find('.datepicker-days tbody').empty().append(html.join(''));\n            var currentYear = this.date && this.date.getUTCFullYear();\n\n            var months = this.picker.find('.datepicker-months').find('th:eq(1)').text(year).end().find('span').removeClass('active');\n            if (currentYear && currentYear == year) {\n                months.eq(this.date.getUTCMonth()).addClass('active');\n            }\n            if (year < startYear || year > endYear) {\n                months.addClass('disabled');\n            }\n            if (year == startYear) {\n                months.slice(0, startMonth).addClass('disabled');\n            }\n            if (year == endYear) {\n                months.slice(endMonth + 1).addClass('disabled');\n            }\n\n            html = '';\n            year = parseInt(year / 10, 10) * 10;\n            var yearCont = this.picker.find('.datepicker-years').find('th:eq(1)').text(year + '-' + (year + 9)).end().find('td');\n            year -= 1;\n            for (var i = -1; i < 11; i++) {\n                html += '<span class=\"year' + (i == -1 ? ' old' : i == 10 ? ' new' : '') + (currentYear == year ? ' active' : '') + (year < startYear || year > endYear ? ' disabled' : '') + '\">' + year + '</span>';\n                year += 1;\n            }\n            yearCont.html(html);\n        },\n\n        updateNavArrows: function updateNavArrows() {\n            if (!this._allow_update) return;\n\n            var d = new Date(this.viewDate),\n                year = d.getUTCFullYear(),\n                month = d.getUTCMonth();\n            switch (this.viewMode) {\n                case 0:\n                    if (this.o.startDate !== -Infinity && year <= this.o.startDate.getUTCFullYear() && month <= this.o.startDate.getUTCMonth()) {\n                        this.picker.find('.prev').css({ visibility: 'hidden' });\n                    } else {\n                        this.picker.find('.prev').css({ visibility: 'visible' });\n                    }\n                    if (this.o.endDate !== Infinity && year >= this.o.endDate.getUTCFullYear() && month >= this.o.endDate.getUTCMonth()) {\n                        this.picker.find('.next').css({ visibility: 'hidden' });\n                    } else {\n                        this.picker.find('.next').css({ visibility: 'visible' });\n                    }\n                    break;\n                case 1:\n                case 2:\n                    if (this.o.startDate !== -Infinity && year <= this.o.startDate.getUTCFullYear()) {\n                        this.picker.find('.prev').css({ visibility: 'hidden' });\n                    } else {\n                        this.picker.find('.prev').css({ visibility: 'visible' });\n                    }\n                    if (this.o.endDate !== Infinity && year >= this.o.endDate.getUTCFullYear()) {\n                        this.picker.find('.next').css({ visibility: 'hidden' });\n                    } else {\n                        this.picker.find('.next').css({ visibility: 'visible' });\n                    }\n                    break;\n            }\n        },\n\n        click: function click(e) {\n            e.preventDefault();\n            var target = $(e.target).closest('span, td, th');\n            if (target.length == 1) {\n                switch (target[0].nodeName.toLowerCase()) {\n                    case 'th':\n                        switch (target[0].className) {\n                            case 'datepicker-switch':\n                                this.showMode(1);\n                                break;\n                            case 'prev':\n                            case 'next':\n                                var dir = DPGlobal.modes[this.viewMode].navStep * (target[0].className == 'prev' ? -1 : 1);\n                                switch (this.viewMode) {\n                                    case 0:\n                                        this.viewDate = this.moveMonth(this.viewDate, dir);\n                                        break;\n                                    case 1:\n                                    case 2:\n                                        this.viewDate = this.moveYear(this.viewDate, dir);\n                                        break;\n                                }\n                                this.fill();\n                                break;\n                            case 'today':\n                                var date = new Date();\n                                date = UTCDate(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0);\n\n                                this.showMode(-2);\n                                var which = this.o.todayBtn == 'linked' ? null : 'view';\n                                this._setDate(date, which);\n                                break;\n                            case 'clear':\n                                var element;\n                                if (this.isInput) element = this.element;else if (this.component) element = this.element.find('input');\n                                if (element) element.val(\"\").change();\n                                this._trigger('changeDate');\n                                this.update();\n                                if (this.o.autoclose) this.hide();\n                                break;\n                        }\n                        break;\n                    case 'span':\n                        if (!target.is('.disabled')) {\n                            this.viewDate.setUTCDate(1);\n                            if (target.is('.month')) {\n                                var day = 1;\n                                var month = target.parent().find('span').index(target);\n                                var year = this.viewDate.getUTCFullYear();\n                                this.viewDate.setUTCMonth(month);\n                                this._trigger('changeMonth', this.viewDate);\n                                if (this.o.minViewMode === 1) {\n                                    this._setDate(UTCDate(year, month, day, 0, 0, 0, 0));\n                                }\n                            } else {\n                                var year = parseInt(target.text(), 10) || 0;\n                                var day = 1;\n                                var month = 0;\n                                this.viewDate.setUTCFullYear(year);\n                                this._trigger('changeYear', this.viewDate);\n                                if (this.o.minViewMode === 2) {\n                                    this._setDate(UTCDate(year, month, day, 0, 0, 0, 0));\n                                }\n                            }\n                            this.showMode(-1);\n                            this.fill();\n                        }\n                        break;\n                    case 'td':\n                        if (target.is('.day') && !target.is('.disabled')) {\n                            var day = parseInt(target.text(), 10) || 1;\n                            var year = this.viewDate.getUTCFullYear(),\n                                month = this.viewDate.getUTCMonth();\n                            if (target.is('.old')) {\n                                if (month === 0) {\n                                    month = 11;\n                                    year -= 1;\n                                } else {\n                                    month -= 1;\n                                }\n                            } else if (target.is('.new')) {\n                                if (month == 11) {\n                                    month = 0;\n                                    year += 1;\n                                } else {\n                                    month += 1;\n                                }\n                            }\n                            this._setDate(UTCDate(year, month, day, 0, 0, 0, 0));\n                        }\n                        break;\n                }\n            }\n        },\n\n        _setDate: function _setDate(date, which) {\n            if (!which || which == 'date') this.date = new Date(date);\n            if (!which || which == 'view') this.viewDate = new Date(date);\n            this.fill();\n            this.setValue();\n            this._trigger('changeDate');\n            var element;\n            if (this.isInput) {\n                element = this.element;\n            } else if (this.component) {\n                element = this.element.find('input');\n            }\n            if (element) {\n                element.change();\n                if (this.o.autoclose && (!which || which == 'date')) {\n                    this.hide();\n                }\n            }\n        },\n\n        moveMonth: function moveMonth(date, dir) {\n            if (!dir) return date;\n            var new_date = new Date(date.valueOf()),\n                day = new_date.getUTCDate(),\n                month = new_date.getUTCMonth(),\n                mag = Math.abs(dir),\n                new_month,\n                test;\n            dir = dir > 0 ? 1 : -1;\n            if (mag == 1) {\n                test = dir == -1\n                // If going back one month, make sure month is not current month\n                // (eg, Mar 31 -> Feb 31 == Feb 28, not Mar 02)\n                ? function () {\n                    return new_date.getUTCMonth() == month;\n                }\n                // If going forward one month, make sure month is as expected\n                // (eg, Jan 31 -> Feb 31 == Feb 28, not Mar 02)\n                : function () {\n                    return new_date.getUTCMonth() != new_month;\n                };\n                new_month = month + dir;\n                new_date.setUTCMonth(new_month);\n                // Dec -> Jan (12) or Jan -> Dec (-1) -- limit expected date to 0-11\n                if (new_month < 0 || new_month > 11) new_month = (new_month + 12) % 12;\n            } else {\n                // For magnitudes >1, move one month at a time...\n                for (var i = 0; i < mag; i++) {\n                    // ...which might decrease the day (eg, Jan 31 to Feb 28, etc)...\n                    new_date = this.moveMonth(new_date, dir);\n                } // ...then reset the day, keeping it in the new month\n                new_month = new_date.getUTCMonth();\n                new_date.setUTCDate(day);\n                test = function test() {\n                    return new_month != new_date.getUTCMonth();\n                };\n            }\n            // Common date-resetting loop -- if date is beyond end of month, make it\n            // end of month\n            while (test()) {\n                new_date.setUTCDate(--day);\n                new_date.setUTCMonth(new_month);\n            }\n            return new_date;\n        },\n\n        moveYear: function moveYear(date, dir) {\n            return this.moveMonth(date, dir * 12);\n        },\n\n        dateWithinRange: function dateWithinRange(date) {\n            return date >= this.o.startDate && date <= this.o.endDate;\n        },\n\n        keydown: function keydown(e) {\n            if (this.picker.is(':not(:visible)')) {\n                if (e.keyCode == 27) // allow escape to hide and re-show picker\n                    this.show();\n                return;\n            }\n            var dateChanged = false,\n                dir,\n                day,\n                month,\n                newDate,\n                newViewDate;\n            switch (e.keyCode) {\n                case 27:\n                    // escape\n                    this.hide();\n                    e.preventDefault();\n                    break;\n                case 37: // left\n                case 39:\n                    // right\n                    if (!this.o.keyboardNavigation) break;\n                    dir = e.keyCode == 37 ? -1 : 1;\n                    if (e.ctrlKey) {\n                        newDate = this.moveYear(this.date, dir);\n                        newViewDate = this.moveYear(this.viewDate, dir);\n                    } else if (e.shiftKey) {\n                        newDate = this.moveMonth(this.date, dir);\n                        newViewDate = this.moveMonth(this.viewDate, dir);\n                    } else {\n                        newDate = new Date(this.date);\n                        newDate.setUTCDate(this.date.getUTCDate() + dir);\n                        newViewDate = new Date(this.viewDate);\n                        newViewDate.setUTCDate(this.viewDate.getUTCDate() + dir);\n                    }\n                    if (this.dateWithinRange(newDate)) {\n                        this.date = newDate;\n                        this.viewDate = newViewDate;\n                        this.setValue();\n                        this.update();\n                        e.preventDefault();\n                        dateChanged = true;\n                    }\n                    break;\n                case 38: // up\n                case 40:\n                    // down\n                    if (!this.o.keyboardNavigation) break;\n                    dir = e.keyCode == 38 ? -1 : 1;\n                    if (e.ctrlKey) {\n                        newDate = this.moveYear(this.date, dir);\n                        newViewDate = this.moveYear(this.viewDate, dir);\n                    } else if (e.shiftKey) {\n                        newDate = this.moveMonth(this.date, dir);\n                        newViewDate = this.moveMonth(this.viewDate, dir);\n                    } else {\n                        newDate = new Date(this.date);\n                        newDate.setUTCDate(this.date.getUTCDate() + dir * 7);\n                        newViewDate = new Date(this.viewDate);\n                        newViewDate.setUTCDate(this.viewDate.getUTCDate() + dir * 7);\n                    }\n                    if (this.dateWithinRange(newDate)) {\n                        this.date = newDate;\n                        this.viewDate = newViewDate;\n                        this.setValue();\n                        this.update();\n                        e.preventDefault();\n                        dateChanged = true;\n                    }\n                    break;\n                case 13:\n                    // enter\n                    this.hide();\n                    e.preventDefault();\n                    break;\n                case 9:\n                    // tab\n                    this.hide();\n                    break;\n            }\n            if (dateChanged) {\n                this._trigger('changeDate');\n                var element;\n                if (this.isInput) {\n                    element = this.element;\n                } else if (this.component) {\n                    element = this.element.find('input');\n                }\n                if (element) {\n                    element.change();\n                }\n            }\n        },\n\n        showMode: function showMode(dir) {\n            if (dir) {\n                this.viewMode = Math.max(this.o.minViewMode, Math.min(2, this.viewMode + dir));\n            }\n            /*\n            \tvitalets: fixing bug of very special conditions:\n            \tjquery 1.7.1 + webkit + show inline datepicker in bootstrap popover.\n            \tMethod show() does not set display css correctly and datepicker is not shown.\n            \tChanged to .css('display', 'block') solve the problem.\n            \tSee https://github.com/vitalets/x-editable/issues/37\n            \t\tIn jquery 1.7.2+ everything works fine.\n            */\n            //this.picker.find('>div').hide().filter('.datepicker-'+DPGlobal.modes[this.viewMode].clsName).show();\n            this.picker.find('>div').hide().filter('.datepicker-' + DPGlobal.modes[this.viewMode].clsName).css('display', 'block');\n            this.updateNavArrows();\n        }\n    };\n\n    var DateRangePicker = function DateRangePicker(element, options) {\n        this.element = $(element);\n        this.inputs = $.map(options.inputs, function (i) {\n            return i.jquery ? i[0] : i;\n        });\n        delete options.inputs;\n\n        $(this.inputs).datepicker(options).bind('changeDate', $.proxy(this.dateUpdated, this));\n\n        this.pickers = $.map(this.inputs, function (i) {\n            return $(i).data('datepicker');\n        });\n        this.updateDates();\n    };\n    DateRangePicker.prototype = {\n        updateDates: function updateDates() {\n            this.dates = $.map(this.pickers, function (i) {\n                return i.date;\n            });\n            this.updateRanges();\n        },\n        updateRanges: function updateRanges() {\n            var range = $.map(this.dates, function (d) {\n                return d.valueOf();\n            });\n            $.each(this.pickers, function (i, p) {\n                p.setRange(range);\n            });\n        },\n        dateUpdated: function dateUpdated(e) {\n            var dp = $(e.target).data('datepicker'),\n                new_date = dp.getUTCDate(),\n                i = $.inArray(e.target, this.inputs),\n                l = this.inputs.length;\n            if (i == -1) return;\n\n            if (new_date < this.dates[i]) {\n                // Date being moved earlier/left\n                while (i >= 0 && new_date < this.dates[i]) {\n                    this.pickers[i--].setUTCDate(new_date);\n                }\n            } else if (new_date > this.dates[i]) {\n                // Date being moved later/right\n                while (i < l && new_date > this.dates[i]) {\n                    this.pickers[i++].setUTCDate(new_date);\n                }\n            }\n            this.updateDates();\n        },\n        remove: function remove() {\n            $.map(this.pickers, function (p) {\n                p.remove();\n            });\n            delete this.element.data().datepicker;\n        }\n    };\n\n    function opts_from_el(el, prefix) {\n        // Derive options from element data-attrs\n        var data = $(el).data(),\n            out = {},\n            inkey,\n            replace = new RegExp('^' + prefix.toLowerCase() + '([A-Z])'),\n            prefix = new RegExp('^' + prefix.toLowerCase());\n        for (var key in data) {\n            if (prefix.test(key)) {\n                inkey = key.replace(replace, function (_, a) {\n                    return a.toLowerCase();\n                });\n                out[inkey] = data[key];\n            }\n        }return out;\n    }\n\n    function opts_from_locale(lang) {\n        // Derive options from locale plugins\n        var out = {};\n        // Check if \"de-DE\" style date is available, if not language should\n        // fallback to 2 letter code eg \"de\"\n        if (!dates[lang]) {\n            lang = lang.split('-')[0];\n            if (!dates[lang]) return;\n        }\n        var d = dates[lang];\n        $.each(locale_opts, function (i, k) {\n            if (k in d) out[k] = d[k];\n        });\n        return out;\n    }\n\n    var old = $.fn.datepicker;\n    var datepicker = $.fn.datepicker = function (option) {\n        var args = Array.apply(null, arguments);\n        args.shift();\n        var internal_return, this_return;\n        this.each(function () {\n            var $this = $(this),\n                data = $this.data('datepicker'),\n                options = (typeof option === 'undefined' ? 'undefined' : _typeof(option)) == 'object' && option;\n            if (!data) {\n                var elopts = opts_from_el(this, 'date'),\n\n                // Preliminary otions\n                xopts = $.extend({}, defaults, elopts, options),\n                    locopts = opts_from_locale(xopts.language),\n\n                // Options priority: js args, data-attrs, locales, defaults\n                opts = $.extend({}, defaults, locopts, elopts, options);\n                if ($this.is('.input-daterange') || opts.inputs) {\n                    var ropts = {\n                        inputs: opts.inputs || $this.find('input').toArray()\n                    };\n                    $this.data('datepicker', data = new DateRangePicker(this, $.extend(opts, ropts)));\n                } else {\n                    $this.data('datepicker', data = new Datepicker(this, opts));\n                }\n            }\n            if (typeof option == 'string' && typeof data[option] == 'function') {\n                internal_return = data[option].apply(data, args);\n                if (internal_return !== undefined) return false;\n            }\n        });\n        if (internal_return !== undefined) return internal_return;else return this;\n    };\n\n    var defaults = $.fn.datepicker.defaults = {\n        autoclose: false,\n        beforeShowDay: $.noop,\n        calendarWeeks: false,\n        clearBtn: false,\n        daysOfWeekDisabled: [],\n        endDate: Infinity,\n        forceParse: true,\n        format: 'mm/dd/yyyy',\n        keyboardNavigation: true,\n        language: 'en',\n        minViewMode: 0,\n        rtl: false,\n        startDate: -Infinity,\n        startView: 0,\n        todayBtn: false,\n        todayHighlight: false,\n        weekStart: 0\n    };\n    var locale_opts = $.fn.datepicker.locale_opts = ['format', 'rtl', 'weekStart'];\n    $.fn.datepicker.Constructor = Datepicker;\n    var dates = $.fn.datepicker.dates = {\n        en: {\n            days: [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"],\n            daysShort: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"],\n            daysMin: [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\", \"Su\"],\n            months: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"],\n            monthsShort: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"],\n            today: \"Today\",\n            clear: \"Clear\"\n        }\n    };\n\n    var DPGlobal = {\n        modes: [{\n            clsName: 'days',\n            navFnc: 'Month',\n            navStep: 1\n        }, {\n            clsName: 'months',\n            navFnc: 'FullYear',\n            navStep: 1\n        }, {\n            clsName: 'years',\n            navFnc: 'FullYear',\n            navStep: 10\n        }],\n        isLeapYear: function isLeapYear(year) {\n            return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;\n        },\n        getDaysInMonth: function getDaysInMonth(year, month) {\n            return [31, DPGlobal.isLeapYear(year) ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month];\n        },\n        validParts: /dd?|DD?|mm?|MM?|yy(?:yy)?/g,\n        nonpunctuation: /[^ -\\/:-@\\[\\u3400-\\u9fff-`{-~\\t\\n\\r]+/g,\n        parseFormat: function parseFormat(format) {\n            // IE treats \\0 as a string end in inputs (truncating the value),\n            // so it's a bad format delimiter, anyway\n            var separators = format.replace(this.validParts, '\\0').split('\\0'),\n                parts = format.match(this.validParts);\n            if (!separators || !separators.length || !parts || parts.length === 0) {\n                throw new Error(\"Invalid date format.\");\n            }\n            return { separators: separators, parts: parts };\n        },\n        parseDate: function parseDate(date, format, language) {\n            if (date instanceof Date) return date;\n            if (typeof format === 'string') format = DPGlobal.parseFormat(format);\n            if (/^[\\-+]\\d+[dmwy]([\\s,]+[\\-+]\\d+[dmwy])*$/.test(date)) {\n                var part_re = /([\\-+]\\d+)([dmwy])/,\n                    parts = date.match(/([\\-+]\\d+)([dmwy])/g),\n                    part,\n                    dir;\n                date = new Date();\n                for (var i = 0; i < parts.length; i++) {\n                    part = part_re.exec(parts[i]);\n                    dir = parseInt(part[1]);\n                    switch (part[2]) {\n                        case 'd':\n                            date.setUTCDate(date.getUTCDate() + dir);\n                            break;\n                        case 'm':\n                            date = Datepicker.prototype.moveMonth.call(Datepicker.prototype, date, dir);\n                            break;\n                        case 'w':\n                            date.setUTCDate(date.getUTCDate() + dir * 7);\n                            break;\n                        case 'y':\n                            date = Datepicker.prototype.moveYear.call(Datepicker.prototype, date, dir);\n                            break;\n                    }\n                }\n                return UTCDate(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), 0, 0, 0);\n            }\n            var parts = date && date.match(this.nonpunctuation) || [],\n                date = new Date(),\n                parsed = {},\n                setters_order = ['yyyy', 'yy', 'M', 'MM', 'm', 'mm', 'd', 'dd'],\n                setters_map = {\n                yyyy: function yyyy(d, v) {\n                    return d.setUTCFullYear(v);\n                },\n                yy: function yy(d, v) {\n                    return d.setUTCFullYear(2000 + v);\n                },\n                m: function m(d, v) {\n                    v -= 1;\n                    while (v < 0) {\n                        v += 12;\n                    }v %= 12;\n                    d.setUTCMonth(v);\n                    while (d.getUTCMonth() != v) {\n                        d.setUTCDate(d.getUTCDate() - 1);\n                    }return d;\n                },\n                d: function d(_d, v) {\n                    return _d.setUTCDate(v);\n                }\n            },\n                val,\n                filtered,\n                part;\n            setters_map['M'] = setters_map['MM'] = setters_map['mm'] = setters_map['m'];\n            setters_map['dd'] = setters_map['d'];\n            date = UTCDate(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0);\n            var fparts = format.parts.slice();\n            // Remove noop parts\n            if (parts.length != fparts.length) {\n                fparts = $(fparts).filter(function (i, p) {\n                    return $.inArray(p, setters_order) !== -1;\n                }).toArray();\n            }\n            // Process remainder\n            if (parts.length == fparts.length) {\n                for (var i = 0, cnt = fparts.length; i < cnt; i++) {\n                    val = parseInt(parts[i], 10);\n                    part = fparts[i];\n                    if (isNaN(val)) {\n                        switch (part) {\n                            case 'MM':\n                                filtered = $(dates[language].months).filter(function () {\n                                    var m = this.slice(0, parts[i].length),\n                                        p = parts[i].slice(0, m.length);\n                                    return m == p;\n                                });\n                                val = $.inArray(filtered[0], dates[language].months) + 1;\n                                break;\n                            case 'M':\n                                filtered = $(dates[language].monthsShort).filter(function () {\n                                    var m = this.slice(0, parts[i].length),\n                                        p = parts[i].slice(0, m.length);\n                                    return m == p;\n                                });\n                                val = $.inArray(filtered[0], dates[language].monthsShort) + 1;\n                                break;\n                        }\n                    }\n                    parsed[part] = val;\n                }\n                for (var i = 0, s; i < setters_order.length; i++) {\n                    s = setters_order[i];\n                    if (s in parsed && !isNaN(parsed[s])) setters_map[s](date, parsed[s]);\n                }\n            }\n            return date;\n        },\n        formatDate: function formatDate(date, format, language) {\n            if (typeof format === 'string') format = DPGlobal.parseFormat(format);\n            var val = {\n                d: date.getUTCDate(),\n                D: dates[language].daysShort[date.getUTCDay()],\n                DD: dates[language].days[date.getUTCDay()],\n                m: date.getUTCMonth() + 1,\n                M: dates[language].monthsShort[date.getUTCMonth()],\n                MM: dates[language].months[date.getUTCMonth()],\n                yy: date.getUTCFullYear().toString().substring(2),\n                yyyy: date.getUTCFullYear()\n            };\n            val.dd = (val.d < 10 ? '0' : '') + val.d;\n            val.mm = (val.m < 10 ? '0' : '') + val.m;\n            var date = [],\n                seps = $.extend([], format.separators);\n            for (var i = 0, cnt = format.parts.length; i <= cnt; i++) {\n                if (seps.length) date.push(seps.shift());\n                date.push(val[format.parts[i]]);\n            }\n            return date.join('');\n        },\n        headTemplate: '<thead>' + '<tr>' + '<th class=\"prev\"><i class=\"icon-arrow-left\"/></th>' + '<th colspan=\"5\" class=\"datepicker-switch\"></th>' + '<th class=\"next\"><i class=\"icon-arrow-right\"/></th>' + '</tr>' + '</thead>',\n        contTemplate: '<tbody><tr><td colspan=\"7\"></td></tr></tbody>',\n        footTemplate: '<tfoot><tr><th colspan=\"7\" class=\"today\"></th></tr><tr><th colspan=\"7\" class=\"clear\"></th></tr></tfoot>'\n    };\n    DPGlobal.template = '<div class=\"datepicker\">' + '<div class=\"datepicker-days\">' + '<table class=\" table-condensed\">' + DPGlobal.headTemplate + '<tbody></tbody>' + DPGlobal.footTemplate + '</table>' + '</div>' + '<div class=\"datepicker-months\">' + '<table class=\"table-condensed\">' + DPGlobal.headTemplate + DPGlobal.contTemplate + DPGlobal.footTemplate + '</table>' + '</div>' + '<div class=\"datepicker-years\">' + '<table class=\"table-condensed\">' + DPGlobal.headTemplate + DPGlobal.contTemplate + DPGlobal.footTemplate + '</table>' + '</div>' + '</div>';\n\n    $.fn.datepicker.DPGlobal = DPGlobal;\n\n    /* DATEPICKER NO CONFLICT\n    * =================== */\n\n    $.fn.datepicker.noConflict = function () {\n        $.fn.datepicker = old;\n        return this;\n    };\n\n    /* DATEPICKER DATA-API\n    * ================== */\n\n    $(document).on('focus.datepicker.data-api click.datepicker.data-api', '[data-provide=\"datepicker\"]', function (e) {\n        var $this = $(this);\n        if ($this.data('datepicker')) return;\n        e.preventDefault();\n        // component click requires us to explicitly show it\n        datepicker.call($this, 'show');\n    });\n    $(function () {\n        //$('[data-provide=\"datepicker-inline\"]').datepicker();\n        //vit: changed to support noConflict()\n        datepicker.call($('[data-provide=\"datepicker-inline\"]'));\n    });\n})(window.jQuery);\n\n/**\nBootstrap-datepicker.  \nDescription and examples: https://github.com/eternicode/bootstrap-datepicker.  \nFor **i18n** you should include js file from here: https://github.com/eternicode/bootstrap-datepicker/tree/master/js/locales\nand set `language` option.  \nSince 1.4.0 date has different appearance in **popup** and **inline** modes. \n\n@class date\n@extends abstractinput\n@final\n@example\n<a href=\"#\" id=\"dob\" data-type=\"date\" data-pk=\"1\" data-url=\"/post\" data-title=\"Select date\">15/05/1984</a>\n<script>\n$(function(){\n    $('#dob').editable({\n        format: 'yyyy-mm-dd',    \n        viewformat: 'dd/mm/yyyy',    \n        datepicker: {\n                weekStart: 1\n           }\n        }\n    });\n});\n</script>\n**/\n(function ($) {\n    ;\n\n    //store bootstrap-datepicker as bdateicker to exclude conflict with jQuery UI one\n    $.fn.bdatepicker = $.fn.datepicker.noConflict();\n    if (!$.fn.datepicker) {\n        //if there were no other datepickers, keep also original name\n        $.fn.datepicker = $.fn.bdatepicker;\n    }\n\n    var Date = function Date(options) {\n        this.init('date', options, Date.defaults);\n        this.initPicker(options, Date.defaults);\n    };\n\n    $.fn.editableutils.inherit(Date, $.fn.editabletypes.abstractinput);\n\n    $.extend(Date.prototype, {\n        initPicker: function initPicker(options, defaults) {\n            //'format' is set directly from settings or data-* attributes\n\n            //by default viewformat equals to format\n            if (!this.options.viewformat) {\n                this.options.viewformat = this.options.format;\n            }\n\n            //try parse datepicker config defined as json string in data-datepicker\n            options.datepicker = $.fn.editableutils.tryParseJson(options.datepicker, true);\n\n            //overriding datepicker config (as by default jQuery extend() is not recursive)\n            //since 1.4 datepicker internally uses viewformat instead of format. Format is for submit only\n            this.options.datepicker = $.extend({}, defaults.datepicker, options.datepicker, {\n                format: this.options.viewformat\n            });\n\n            //language\n            this.options.datepicker.language = this.options.datepicker.language || 'en';\n\n            //store DPglobal\n            this.dpg = $.fn.bdatepicker.DPGlobal;\n\n            //store parsed formats\n            this.parsedFormat = this.dpg.parseFormat(this.options.format);\n            this.parsedViewFormat = this.dpg.parseFormat(this.options.viewformat);\n        },\n\n        render: function render() {\n            this.$input.bdatepicker(this.options.datepicker);\n\n            //\"clear\" link\n            if (this.options.clear) {\n                this.$clear = $('<a href=\"#\"></a>').html(this.options.clear).click($.proxy(function (e) {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    this.clear();\n                }, this));\n\n                this.$tpl.parent().append($('<div class=\"editable-clear\">').append(this.$clear));\n            }\n        },\n\n        value2html: function value2html(value, element) {\n            var text = value ? this.dpg.formatDate(value, this.parsedViewFormat, this.options.datepicker.language) : '';\n            Date.superclass.value2html.call(this, text, element);\n        },\n\n        html2value: function html2value(html) {\n            return this.parseDate(html, this.parsedViewFormat);\n        },\n\n        value2str: function value2str(value) {\n            return value ? this.dpg.formatDate(value, this.parsedFormat, this.options.datepicker.language) : '';\n        },\n\n        str2value: function str2value(str) {\n            return this.parseDate(str, this.parsedFormat);\n        },\n\n        value2submit: function value2submit(value) {\n            return this.value2str(value);\n        },\n\n        value2input: function value2input(value) {\n            this.$input.bdatepicker('update', value);\n        },\n\n        input2value: function input2value() {\n            return this.$input.data('datepicker').date;\n        },\n\n        activate: function activate() {},\n\n        clear: function clear() {\n            this.$input.data('datepicker').date = null;\n            this.$input.find('.active').removeClass('active');\n            if (!this.options.showbuttons) {\n                this.$input.closest('form').submit();\n            }\n        },\n\n        autosubmit: function autosubmit() {\n            this.$input.on('mouseup', '.day', function (e) {\n                if ($(e.currentTarget).is('.old') || $(e.currentTarget).is('.new')) {\n                    return;\n                }\n                var $form = $(this).closest('form');\n                setTimeout(function () {\n                    $form.submit();\n                }, 200);\n            });\n            //changedate is not suitable as it triggered when showing datepicker. see #149\n            /*\n            this.$input.on('changeDate', function(e){\n                var $form = $(this).closest('form');\n                setTimeout(function() {\n                    $form.submit();\n                }, 200);\n            });\n            */\n        },\n\n        /*\n         For incorrect date bootstrap-datepicker returns current date that is not suitable\n         for datefield.\n         This function returns null for incorrect date.  \n        */\n        parseDate: function parseDate(str, format) {\n            var date = null,\n                formattedBack;\n            if (str) {\n                date = this.dpg.parseDate(str, format, this.options.datepicker.language);\n                if (typeof str === 'string') {\n                    formattedBack = this.dpg.formatDate(date, format, this.options.datepicker.language);\n                    if (str !== formattedBack) {\n                        date = null;\n                    }\n                }\n            }\n            return date;\n        }\n\n    });\n\n    Date.defaults = $.extend({}, $.fn.editabletypes.abstractinput.defaults, {\n        /**\n        @property tpl \n        @default <div></div>\n        **/\n        tpl: '<div class=\"editable-date well\"></div>',\n        /**\n        @property inputclass \n        @default null\n        **/\n        inputclass: null,\n        /**\n        Format used for sending value to server. Also applied when converting date from <code>data-value</code> attribute.<br>\n        Possible tokens are: <code>d, dd, m, mm, yy, yyyy</code>  \n         @property format \n        @type string\n        @default yyyy-mm-dd\n        **/\n        format: 'yyyy-mm-dd',\n        /**\n        Format used for displaying date. Also applied when converting date from element's text on init.   \n        If not specified equals to <code>format</code>\n         @property viewformat \n        @type string\n        @default null\n        **/\n        viewformat: null,\n        /**\n        Configuration of datepicker.\n        Full list of options: http://bootstrap-datepicker.readthedocs.org/en/latest/options.html\n         @property datepicker \n        @type object\n        @default {\n            weekStart: 0,\n            startView: 0,\n            minViewMode: 0,\n            autoclose: false\n        }\n        **/\n        datepicker: {\n            weekStart: 0,\n            startView: 0,\n            minViewMode: 0,\n            autoclose: false\n        },\n        /**\n        Text shown as clear date button. \n        If <code>false</code> clear button will not be rendered.\n         @property clear \n        @type boolean|string\n        @default 'x clear'\n        **/\n        clear: '&times; clear'\n    });\n\n    $.fn.editabletypes.date = Date;\n})(window.jQuery);\n\n/**\nBootstrap datefield input - modification for inline mode.\nShows normal <input type=\"text\"> and binds popup datepicker.  \nAutomatically shown in inline mode.\n\n@class datefield\n@extends date\n\n@since 1.4.0\n**/\n(function ($) {\n    ;\n\n    var DateField = function DateField(options) {\n        this.init('datefield', options, DateField.defaults);\n        this.initPicker(options, DateField.defaults);\n    };\n\n    $.fn.editableutils.inherit(DateField, $.fn.editabletypes.date);\n\n    $.extend(DateField.prototype, {\n        render: function render() {\n            this.$input = this.$tpl.find('input');\n            this.setClass();\n            this.setAttr('placeholder');\n\n            //bootstrap-datepicker is set `bdateicker` to exclude conflict with jQuery UI one. (in date.js)        \n            this.$tpl.bdatepicker(this.options.datepicker);\n\n            //need to disable original event handlers\n            this.$input.off('focus keydown');\n\n            //update value of datepicker\n            this.$input.keyup($.proxy(function () {\n                this.$tpl.removeData('date');\n                this.$tpl.bdatepicker('update');\n            }, this));\n        },\n\n        value2input: function value2input(value) {\n            this.$input.val(value ? this.dpg.formatDate(value, this.parsedViewFormat, this.options.datepicker.language) : '');\n            this.$tpl.bdatepicker('update');\n        },\n\n        input2value: function input2value() {\n            return this.html2value(this.$input.val());\n        },\n\n        activate: function activate() {\n            $.fn.editabletypes.text.prototype.activate.call(this);\n        },\n\n        autosubmit: function autosubmit() {\n            //reset autosubmit to empty  \n        }\n    });\n\n    DateField.defaults = $.extend({}, $.fn.editabletypes.date.defaults, {\n        /**\n        @property tpl \n        **/\n        tpl: '<div class=\"input-append date\"><input type=\"text\"/><span class=\"add-on\"><i class=\"icon-th\"></i></span></div>',\n        /**\n        @property inputclass \n        @default 'input-small'\n        **/\n        inputclass: 'input-small',\n\n        /* datepicker config */\n        datepicker: {\n            weekStart: 0,\n            startView: 0,\n            minViewMode: 0,\n            autoclose: true\n        }\n    });\n\n    $.fn.editabletypes.datefield = DateField;\n})(window.jQuery);\n/**\nBootstrap-datetimepicker.  \nBased on [smalot bootstrap-datetimepicker plugin](https://github.com/smalot/bootstrap-datetimepicker). \nBefore usage you should manually include dependent js and css:\n\n    <link href=\"css/datetimepicker.css\" rel=\"stylesheet\" type=\"text/css\"></link> \n    <script src=\"js/bootstrap-datetimepicker.js\"></script>\n\nFor **i18n** you should include js file from here: https://github.com/smalot/bootstrap-datetimepicker/tree/master/js/locales\nand set `language` option.  \n\n@class datetime\n@extends abstractinput\n@final\n@since 1.4.4\n@example\n<a href=\"#\" id=\"last_seen\" data-type=\"datetime\" data-pk=\"1\" data-url=\"/post\" title=\"Select date & time\">15/03/2013 12:45</a>\n<script>\n$(function(){\n    $('#last_seen').editable({\n        format: 'yyyy-mm-dd hh:ii',    \n        viewformat: 'dd/mm/yyyy hh:ii',    \n        datetimepicker: {\n                weekStart: 1\n           }\n        }\n    });\n});\n</script>\n**/\n(function ($) {\n    ;\n\n    var DateTime = function DateTime(options) {\n        this.init('datetime', options, DateTime.defaults);\n        this.initPicker(options, DateTime.defaults);\n    };\n\n    $.fn.editableutils.inherit(DateTime, $.fn.editabletypes.abstractinput);\n\n    $.extend(DateTime.prototype, {\n        initPicker: function initPicker(options, defaults) {\n            //'format' is set directly from settings or data-* attributes\n\n            //by default viewformat equals to format\n            if (!this.options.viewformat) {\n                this.options.viewformat = this.options.format;\n            }\n\n            //try parse datetimepicker config defined as json string in data-datetimepicker\n            options.datetimepicker = $.fn.editableutils.tryParseJson(options.datetimepicker, true);\n\n            //overriding datetimepicker config (as by default jQuery extend() is not recursive)\n            //since 1.4 datetimepicker internally uses viewformat instead of format. Format is for submit only\n            this.options.datetimepicker = $.extend({}, defaults.datetimepicker, options.datetimepicker, {\n                format: this.options.viewformat\n            });\n\n            //language\n            this.options.datetimepicker.language = this.options.datetimepicker.language || 'en';\n\n            //store DPglobal\n            this.dpg = $.fn.datetimepicker.DPGlobal;\n\n            //store parsed formats\n            this.parsedFormat = this.dpg.parseFormat(this.options.format, this.options.formatType);\n            this.parsedViewFormat = this.dpg.parseFormat(this.options.viewformat, this.options.formatType);\n        },\n\n        render: function render() {\n            this.$input.datetimepicker(this.options.datetimepicker);\n\n            //adjust container position when viewMode changes\n            //see https://github.com/smalot/bootstrap-datetimepicker/pull/80\n            this.$input.on('changeMode', function (e) {\n                var f = $(this).closest('form').parent();\n                //timeout here, otherwise container changes position before form has new size\n                setTimeout(function () {\n                    f.triggerHandler('resize');\n                }, 0);\n            });\n\n            //\"clear\" link\n            if (this.options.clear) {\n                this.$clear = $('<a href=\"#\"></a>').html(this.options.clear).click($.proxy(function (e) {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    this.clear();\n                }, this));\n\n                this.$tpl.parent().append($('<div class=\"editable-clear\">').append(this.$clear));\n            }\n        },\n\n        value2html: function value2html(value, element) {\n            //formatDate works with UTCDate!\n            var text = value ? this.dpg.formatDate(this.toUTC(value), this.parsedViewFormat, this.options.datetimepicker.language, this.options.formatType) : '';\n            if (element) {\n                DateTime.superclass.value2html.call(this, text, element);\n            } else {\n                return text;\n            }\n        },\n\n        html2value: function html2value(html) {\n            //parseDate return utc date!\n            var value = this.parseDate(html, this.parsedViewFormat);\n            return value ? this.fromUTC(value) : null;\n        },\n\n        value2str: function value2str(value) {\n            //formatDate works with UTCDate!\n            return value ? this.dpg.formatDate(this.toUTC(value), this.parsedFormat, this.options.datetimepicker.language, this.options.formatType) : '';\n        },\n\n        str2value: function str2value(str) {\n            //parseDate return utc date!\n            var value = this.parseDate(str, this.parsedFormat);\n            return value ? this.fromUTC(value) : null;\n        },\n\n        value2submit: function value2submit(value) {\n            return this.value2str(value);\n        },\n\n        value2input: function value2input(value) {\n            if (value) {\n                this.$input.data('datetimepicker').setDate(value);\n            }\n        },\n\n        input2value: function input2value() {\n            //date may be cleared, in that case getDate() triggers error\n            var dt = this.$input.data('datetimepicker');\n            return dt.date ? dt.getDate() : null;\n        },\n\n        activate: function activate() {},\n\n        clear: function clear() {\n            this.$input.data('datetimepicker').date = null;\n            this.$input.find('.active').removeClass('active');\n            if (!this.options.showbuttons) {\n                this.$input.closest('form').submit();\n            }\n        },\n\n        autosubmit: function autosubmit() {\n            this.$input.on('mouseup', '.minute', function (e) {\n                var $form = $(this).closest('form');\n                setTimeout(function () {\n                    $form.submit();\n                }, 200);\n            });\n        },\n\n        //convert date from local to utc\n        toUTC: function toUTC(value) {\n            return value ? new Date(value.valueOf() - value.getTimezoneOffset() * 60000) : value;\n        },\n\n        //convert date from utc to local\n        fromUTC: function fromUTC(value) {\n            return value ? new Date(value.valueOf() + value.getTimezoneOffset() * 60000) : value;\n        },\n\n        /*\n         For incorrect date bootstrap-datetimepicker returns current date that is not suitable\n         for datetimefield.\n         This function returns null for incorrect date.  \n        */\n        parseDate: function parseDate(str, format) {\n            var date = null,\n                formattedBack;\n            if (str) {\n                date = this.dpg.parseDate(str, format, this.options.datetimepicker.language, this.options.formatType);\n                if (typeof str === 'string') {\n                    formattedBack = this.dpg.formatDate(date, format, this.options.datetimepicker.language, this.options.formatType);\n                    if (str !== formattedBack) {\n                        date = null;\n                    }\n                }\n            }\n            return date;\n        }\n\n    });\n\n    DateTime.defaults = $.extend({}, $.fn.editabletypes.abstractinput.defaults, {\n        /**\n        @property tpl \n        @default <div></div>\n        **/\n        tpl: '<div class=\"editable-date well\"></div>',\n        /**\n        @property inputclass \n        @default null\n        **/\n        inputclass: null,\n        /**\n        Format used for sending value to server. Also applied when converting date from <code>data-value</code> attribute.<br>\n        Possible tokens are: <code>d, dd, m, mm, yy, yyyy, h, i</code>  \n        \n        @property format \n        @type string\n        @default yyyy-mm-dd hh:ii\n        **/\n        format: 'yyyy-mm-dd hh:ii',\n        formatType: 'standard',\n        /**\n        Format used for displaying date. Also applied when converting date from element's text on init.   \n        If not specified equals to <code>format</code>\n        \n        @property viewformat \n        @type string\n        @default null\n        **/\n        viewformat: null,\n        /**\n        Configuration of datetimepicker.\n        Full list of options: https://github.com/smalot/bootstrap-datetimepicker\n         @property datetimepicker \n        @type object\n        @default { }\n        **/\n        datetimepicker: {\n            todayHighlight: false,\n            autoclose: false\n        },\n        /**\n        Text shown as clear date button. \n        If <code>false</code> clear button will not be rendered.\n         @property clear \n        @type boolean|string\n        @default 'x clear'\n        **/\n        clear: '&times; clear'\n    });\n\n    $.fn.editabletypes.datetime = DateTime;\n})(window.jQuery);\n/**\nBootstrap datetimefield input - datetime input for inline mode.\nShows normal <input type=\"text\"> and binds popup datetimepicker.  \nAutomatically shown in inline mode.\n\n@class datetimefield\n@extends datetime\n\n**/\n(function ($) {\n    ;\n\n    var DateTimeField = function DateTimeField(options) {\n        this.init('datetimefield', options, DateTimeField.defaults);\n        this.initPicker(options, DateTimeField.defaults);\n    };\n\n    $.fn.editableutils.inherit(DateTimeField, $.fn.editabletypes.datetime);\n\n    $.extend(DateTimeField.prototype, {\n        render: function render() {\n            this.$input = this.$tpl.find('input');\n            this.setClass();\n            this.setAttr('placeholder');\n\n            this.$tpl.datetimepicker(this.options.datetimepicker);\n\n            //need to disable original event handlers\n            this.$input.off('focus keydown');\n\n            //update value of datepicker\n            this.$input.keyup($.proxy(function () {\n                this.$tpl.removeData('date');\n                this.$tpl.datetimepicker('update');\n            }, this));\n        },\n\n        value2input: function value2input(value) {\n            this.$input.val(this.value2html(value));\n            this.$tpl.datetimepicker('update');\n        },\n\n        input2value: function input2value() {\n            return this.html2value(this.$input.val());\n        },\n\n        activate: function activate() {\n            $.fn.editabletypes.text.prototype.activate.call(this);\n        },\n\n        autosubmit: function autosubmit() {\n            //reset autosubmit to empty  \n        }\n    });\n\n    DateTimeField.defaults = $.extend({}, $.fn.editabletypes.datetime.defaults, {\n        /**\n        @property tpl \n        **/\n        tpl: '<div class=\"input-append date\"><input type=\"text\"/><span class=\"add-on\"><i class=\"icon-th\"></i></span></div>',\n        /**\n        @property inputclass \n        @default 'input-medium'\n        **/\n        inputclass: 'input-medium',\n\n        /* datetimepicker config */\n        datetimepicker: {\n            todayHighlight: false,\n            autoclose: true\n        }\n    });\n\n    $.fn.editabletypes.datetimefield = DateTimeField;\n})(window.jQuery);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvZWRpdGFibGUvanMvYm9vdHN0cmFwLWVkaXRhYmxlLmpzPzI5MzQiXSwibmFtZXMiOlsiJCIsIkVkaXRhYmxlRm9ybSIsImRpdiIsIm9wdGlvbnMiLCJleHRlbmQiLCJmbiIsImVkaXRhYmxlZm9ybSIsImRlZmF1bHRzIiwiJGRpdiIsInNjb3BlIiwicHJvdG90eXBlIiwiY29uc3RydWN0b3IiLCJpbml0SW5wdXQiLCJpbnB1dCIsInZhbHVlIiwic3RyMnZhbHVlIiwicHJlcmVuZGVyIiwiaW5pdFRlbXBsYXRlIiwiJGZvcm0iLCJ0ZW1wbGF0ZSIsImluaXRCdXR0b25zIiwiJGJ0biIsImZpbmQiLCJhcHBlbmQiLCJidXR0b25zIiwic2hvd2J1dHRvbnMiLCJhZGRDbGFzcyIsInJlbmRlciIsIiRsb2FkaW5nIiwibG9hZGluZyIsImVtcHR5IiwicmVtb3ZlIiwic2hvd0xvYWRpbmciLCJpc1NhdmluZyIsInRyaWdnZXJIYW5kbGVyIiwiJHRwbCIsIndoZW4iLCJ0aGVuIiwicHJveHkiLCJhdXRvc3VibWl0IiwiY2xpY2siLCJjYW5jZWwiLCJlcnJvciIsImF0dHIiLCIkaW5wdXQiLCJzdWJtaXQiLCJlIiwicHJldmVudERlZmF1bHQiLCJyZW1vdmVBdHRyIiwidW5kZWZpbmVkIiwiZGVmYXVsdFZhbHVlIiwidmFsdWUyaW5wdXQiLCJzaG93Rm9ybSIsInBvc3RyZW5kZXIiLCJ3IiwiaCIsIm91dGVyV2lkdGgiLCJvdXRlckhlaWdodCIsIndpZHRoIiwiaGVpZ2h0IiwiaGlkZSIsInBhcmVudCIsInNob3ciLCJhY3RpdmF0ZSIsIm1zZyIsIiRncm91cCIsIiRibG9jayIsImxpbmVzIiwicmVtb3ZlQ2xhc3MiLCJlcnJvckdyb3VwQ2xhc3MiLCJlcnJvckJsb2NrQ2xhc3MiLCJzcGxpdCIsImkiLCJsZW5ndGgiLCJ0ZXh0IiwiaHRtbCIsImpvaW4iLCJzdG9wUHJvcGFnYXRpb24iLCJuZXdWYWx1ZSIsImlucHV0MnZhbHVlIiwidmFsaWRhdGUiLCJ0eXBlIiwic2F2ZW5vY2hhbmdlIiwidmFsdWUyc3RyIiwic3VibWl0VmFsdWUiLCJ2YWx1ZTJzdWJtaXQiLCJzYXZlIiwiZG9uZSIsInJlc3BvbnNlIiwicmVzIiwic3VjY2VzcyIsImNhbGwiLCJoYXNPd25Qcm9wZXJ0eSIsImZhaWwiLCJ4aHIiLCJyZXNwb25zZVRleHQiLCJzdGF0dXNUZXh0IiwicGsiLCJlZGl0YWJsZXV0aWxzIiwidHJ5UGFyc2VKc29uIiwic2VuZCIsInVybCIsInBhcmFtcyIsIm5hbWUiLCJhamF4IiwiZGF0YSIsImFqYXhPcHRpb25zIiwib3B0aW9uIiwia2V5Iiwic2V0VmFsdWUiLCJjb252ZXJ0U3RyIiwiaXMiLCJhcmdzIiwiYXJndW1lbnRzIiwiZWFjaCIsIiR0aGlzIiwiYXBwbHkiLCJBcnJheSIsInNsaWNlIiwiQ29uc3RydWN0b3IiLCJlbmdpbmUiLCJ3aW5kb3ciLCJqUXVlcnkiLCJpbmhlcml0IiwiQ2hpbGQiLCJQYXJlbnQiLCJGIiwic3VwZXJjbGFzcyIsInNldEN1cnNvclBvc2l0aW9uIiwiZWxlbSIsInBvcyIsInNldFNlbGVjdGlvblJhbmdlIiwiY3JlYXRlVGV4dFJhbmdlIiwicmFuZ2UiLCJjb2xsYXBzZSIsIm1vdmVFbmQiLCJtb3ZlU3RhcnQiLCJzZWxlY3QiLCJzIiwic2FmZSIsIm1hdGNoIiwiRnVuY3Rpb24iLCJzbGljZU9iaiIsIm9iaiIsImtleXMiLCJjYXNlU2Vuc2l0aXZlIiwia2V5TG93ZXIiLCJuZXdPYmoiLCJpc0FycmF5IiwidG9Mb3dlckNhc2UiLCJnZXRDb25maWdEYXRhIiwiJGVsZW1lbnQiLCJrIiwidiIsIk9iamVjdCIsIm9iamVjdEtleXMiLCJvIiwiVHlwZUVycm9yIiwicCIsInB1c2giLCJlc2NhcGUiLCJzdHIiLCJpdGVtc0J5VmFsdWUiLCJzb3VyY2VEYXRhIiwidmFsdWVQcm9wIiwiaWRLZXkiLCJpc1ZhbEFycmF5IiwicmVzdWx0IiwidGhhdCIsImNoaWxkcmVuIiwiY29uY2F0IiwiZ3JlcCIsIml0ZW1WYWx1ZSIsImNyZWF0ZUlucHV0IiwiVHlwZUNvbnN0cnVjdG9yIiwidHlwZU9wdGlvbnMiLCJtb2RlIiwiZWRpdGFibGV0eXBlcyIsImRhdGVmaWVsZCIsImRhdGV1aWZpZWxkIiwiZGF0ZSIsImRhdGV1aSIsInN1cHBvcnRzVHJhbnNpdGlvbnMiLCJiIiwiZG9jdW1lbnQiLCJib2R5IiwiZG9jdW1lbnRFbGVtZW50Iiwic3R5bGUiLCJjaGFyQXQiLCJ0b1VwcGVyQ2FzZSIsInN1YnN0ciIsIlBvcHVwIiwiZWxlbWVudCIsImluaXQiLCJJbmxpbmUiLCJjb250YWluZXJOYW1lIiwiY29udGFpbmVyRGF0YU5hbWUiLCJpbm5lckNzcyIsImNvbnRhaW5lckNsYXNzIiwiZWRpdGFibGVDb250YWluZXIiLCJzcGxpdE9wdGlvbnMiLCJmb3JtT3B0aW9ucyIsImluaXRDb250YWluZXIiLCJkZWxheWVkSGlkZSIsIm9uIiwiZGVzdHJveSIsIndoaWNoIiwiJHRhcmdldCIsInRhcmdldCIsImV4Y2x1ZGVfY2xhc3NlcyIsImNvbnRhaW5zIiwicGFyZW50cyIsImNsb3NlT3RoZXJzIiwiY29udGFpbmVyT3B0aW9ucyIsIkVycm9yIiwidGlwIiwiY29udGFpbmVyIiwiJHRpcCIsInJlbmRlckZvcm0iLCJub2NoYW5nZSIsInJlYXNvbiIsInNldFBvc2l0aW9uIiwicmVuZGVyaW5nIiwicmVzaXplIiwicmVuZGVyZWQiLCJjbG9zZUFsbCIsImlubmVyU2hvdyIsImhhc0NsYXNzIiwiaW5uZXJIaWRlIiwidG9nZ2xlIiwic2V0Q29udGFpbmVyT3B0aW9uIiwiaW5uZXJEZXN0cm95Iiwib2ZmIiwicmVtb3ZlRGF0YSIsImVsIiwiJGVsIiwiZWMiLCJvbmJsdXIiLCJkYXRhS2V5IiwicGxhY2VtZW50IiwiYXV0b2hpZGUiLCJhbmltIiwiZXZlbnQiLCJzcGVjaWFsIiwiZGVzdHJveWVkIiwiaGFuZGxlciIsImluc2VydEFmdGVyIiwiRWRpdGFibGUiLCJlZGl0YWJsZSIsInNlbGVjdG9yIiwiaW5pdExpdmUiLCJoaWdobGlnaHQiLCJpc1ZhbHVlQnlUZXh0IiwiZG9BdXRvdGV4dCIsImZpbmFsaXplIiwiaHRtbDJ2YWx1ZSIsInRyaW0iLCJkaXNhYmxlZCIsImRpc3BsYXkiLCJhdXRvdGV4dCIsImRpc2FibGUiLCJlbmFibGUiLCJlbXB0eWNsYXNzIiwidHJpZ2dlciIsInZhbHVlMmh0bWxGaW5hbCIsInZhbHVlMmh0bWwiLCJoYW5kbGVFbXB0eSIsImlzRW1wdHkiLCJ0b2dnbGVEaXNhYmxlZCIsImVtcHR5dGV4dCIsInVuc2F2ZWRjbGFzcyIsInNlbnQiLCIkZSIsImJnQ29sb3IiLCJjc3MiLCJzZXRUaW1lb3V0IiwiZGF0YWtleSIsImVxIiwiY29uZmlnIiwiJGVsZW1zIiwiZXJyb3JzIiwiaXNFbXB0eU9iamVjdCIsInZhbHVlcyIsIm5vb3AiLCJBYnN0cmFjdElucHV0IiwidHBsIiwiJGNsZWFyIiwidmFsIiwiZm9jdXMiLCJjbGVhciIsInNldENsYXNzIiwiaW5wdXRjbGFzcyIsInNldEF0dHIiLCJhYnN0cmFjdGlucHV0IiwiTGlzdCIsImRlZmVycmVkIiwiRGVmZXJyZWQiLCJvblNvdXJjZVJlYWR5IiwicmVuZGVyTGlzdCIsInJlc29sdmUiLCJzb3VyY2VFcnJvciIsInByb21pc2UiLCJzb3VyY2UiLCJpc0Z1bmN0aW9uIiwic291cmNlQ2FjaGUiLCJjYWNoZUlEIiwiY2FjaGUiLCJkb1ByZXBlbmQiLCJjYWxsYmFja3MiLCJlcnJfY2FsbGJhY2tzIiwiZGF0YVR5cGUiLCJtYWtlQXJyYXkiLCJzb3VyY2VPcHRpb25zIiwicHJlcGVuZCIsInByZXBlbmREYXRhIiwiY291bnQiLCJpdGVtIiwiaXRlcmF0ZUl0ZW0iLCJsaXN0IiwiVGV4dCIsInJlbmRlckNsZWFyIiwiZ2V0IiwidG9nZ2xlQ2xlYXIiLCJhZnRlciIsImtleXVwIiwiaW5BcnJheSIsImtleUNvZGUiLCJjbGVhclRpbWVvdXQiLCJ0IiwibGVuIiwidmlzaWJsZSIsInBsYWNlaG9sZGVyIiwiVGV4dGFyZWEiLCJrZXlkb3duIiwiY3RybEtleSIsImNsb3Nlc3QiLCJyb3dzIiwidGV4dGFyZWEiLCJTZWxlY3QiLCJmaWxsSXRlbXMiLCJsYWJlbCIsIml0ZW1zIiwiQ2hlY2tsaXN0IiwiJGxhYmVsIiwiYXBwZW5kVG8iLCJzb3J0Iiwic2VwYXJhdG9yIiwicmVnIiwiUmVnRXhwIiwicHJvcCIsImoiLCJjaGVja2VkIiwiZmlsdGVyIiwiZmlyc3QiLCJjaGVja2xpc3QiLCJQYXNzd29yZCIsInBhc3N3b3JkIiwiRW1haWwiLCJlbWFpbCIsIlVybCIsIlRlbCIsInRlbCIsIk51bWJlcklucHV0IiwicmlnaHQiLCJtaW4iLCJtYXgiLCJzdGVwIiwibnVtYmVyIiwiUmFuZ2UiLCJzaWJsaW5ncyIsIlRpbWUiLCJ0aW1lIiwic2VsZWN0MiIsInRhZ3MiLCJ0ZXJtIiwicXVlcnkiLCJyZXN1bHRzIiwiY29udmVydFNvdXJjZSIsImlzTXVsdGlwbGUiLCJtdWx0aXBsZSIsImlzUmVtb3RlIiwiaWRGdW5jIiwiaWQiLCJmb3JtYXRTZWxlY3Rpb24iLCJ2aWV3c2VwYXJhdG9yIiwiZ2V0U2VwYXJhdG9yIiwiaW5pdFNlbGVjdGlvbiIsImN1c3RvbUlkIiwiY3VzdG9tVGV4dCIsImwiLCJpc0luaXRpYWwiLCJDb21ib2RhdGUiLCJjb21ib2RhdGUiLCJtYXAiLCJkYXkiLCJtb250aCIsInllYXIiLCJob3VyIiwibWludXRlIiwic2Vjb25kIiwiYW1wbSIsIiR3aWRnZXQiLCJnZXRUZW1wbGF0ZSIsImluaXRDb21ib3MiLCJnZXRWYWx1ZSIsImNoYW5nZSIsInNtYXJ0RGF5cyIsImZpbGxDb21ibyIsInIiLCJ0b2tlbiIsInN1YnN0cmluZyIsInJlcGxhY2UiLCIkYyIsIiRjb21ibyIsImYiLCJmaWxsQ29tbW9uIiwicmVsVGltZSIsImZpcnN0SXRlbSIsIm1vbWVudCIsInJlbGF0aXZlVGltZSIsImxhbmdEYXRhIiwiX3JlbGF0aXZlVGltZSIsImhlYWRlciIsInJldmVyc2UiLCJmaWxsRGF5IiwidHdvRGlnaXQiLCJpbmRleE9mIiwiZGF5c0NvdW50IiwiJG1vbnRoIiwiJHllYXIiLCJwYXJzZUludCIsImlzTmFOIiwiZGF5c0luTW9udGgiLCJsZWFkWmVybyIsImZpbGxNb250aCIsImxvbmdOYW1lcyIsInNob3J0TmFtZXMiLCJmb3JtYXQiLCJmaWxsWWVhciIsIm1heFllYXIiLCJtaW5ZZWFyIiwieWVhckRlc2NlbmRpbmciLCJmaWxsSG91ciIsImgxMiIsImgyNCIsImZpbGxNaW51dGUiLCJtaW51dGVTdGVwIiwiZmlsbFNlY29uZCIsInNlY29uZFN0ZXAiLCJmaWxsQW1wbSIsImFtcG1MIiwiYW1wbVUiLCJkdCIsIm5vdFNlbGVjdGVkIiwiZGVmIiwiJGFtcG0iLCJpc1ZhbGlkIiwiZ2V0TmVhcmVzdCIsIiRzZWxlY3QiLCJkZWx0YSIsIm9wdCIsIm9wdFZhbHVlIiwiZGlzdGFuY2UiLCJNYXRoIiwiYWJzIiwicm91bmRUaW1lIiwiZXJyb3JDbGFzcyIsImJvcmRlckNvbG9yIiwiZCIsInNoaWZ0Iiwidmlld2Zvcm1hdCIsInBJbml0SW5wdXQiLCJlbXB0eUlucHV0Q2xhc3MiLCJkZWZhdWx0Q2xhc3MiLCJzdGR0eXBlcyIsImNsYXNzZXMiLCJwb3BvdmVyIiwiREVGQVVMVFMiLCJjb250ZW50IiwiYXV0b1Rva2VuIiwiYXV0b1BsYWNlIiwidGVzdCIsImdldFBvc2l0aW9uIiwiYWN0dWFsV2lkdGgiLCJvZmZzZXRXaWR0aCIsImFjdHVhbEhlaWdodCIsIm9mZnNldEhlaWdodCIsIiRwYXJlbnQiLCJvcmdQbGFjZW1lbnQiLCJkb2NTY3JvbGwiLCJzY3JvbGxUb3AiLCJwYXJlbnRXaWR0aCIsImlubmVyV2lkdGgiLCJwYXJlbnRIZWlnaHQiLCJpbm5lckhlaWdodCIsInBhcmVudExlZnQiLCJvZmZzZXQiLCJsZWZ0IiwidG9wIiwiY2FsY3VsYXRlZE9mZnNldCIsImdldENhbGN1bGF0ZWRPZmZzZXQiLCJhcHBseVBsYWNlbWVudCIsIlVUQ0RhdGUiLCJEYXRlIiwiVVRDIiwiVVRDVG9kYXkiLCJ0b2RheSIsImdldFVUQ0Z1bGxZZWFyIiwiZ2V0VVRDTW9udGgiLCJnZXRVVENEYXRlIiwiRGF0ZXBpY2tlciIsIl9wcm9jZXNzX29wdGlvbnMiLCJpc0lubGluZSIsImlzSW5wdXQiLCJjb21wb25lbnQiLCJoYXNJbnB1dCIsInBpY2tlciIsIkRQR2xvYmFsIiwiX2J1aWxkRXZlbnRzIiwiX2F0dGFjaEV2ZW50cyIsInJ0bCIsInRvZ2dsZUNsYXNzIiwidmlld01vZGUiLCJzdGFydFZpZXciLCJjYWxlbmRhcldlZWtzIiwiX2FsbG93X3VwZGF0ZSIsInNldFN0YXJ0RGF0ZSIsInN0YXJ0RGF0ZSIsInNldEVuZERhdGUiLCJlbmREYXRlIiwic2V0RGF5c09mV2Vla0Rpc2FibGVkIiwiZGF5c09mV2Vla0Rpc2FibGVkIiwiZmlsbERvdyIsImZpbGxNb250aHMiLCJ1cGRhdGUiLCJzaG93TW9kZSIsIm9wdHMiLCJfbyIsImxhbmciLCJsYW5ndWFnZSIsImRhdGVzIiwibWluVmlld01vZGUiLCJ3ZWVrU3RhcnQiLCJ3ZWVrRW5kIiwicGFyc2VGb3JtYXQiLCJJbmZpbml0eSIsInBhcnNlRGF0ZSIsIl9ldmVudHMiLCJfc2Vjb25kYXJ5RXZlbnRzIiwiX2FwcGx5RXZlbnRzIiwiZXZzIiwiZXYiLCJfdW5hcHBseUV2ZW50cyIsInBsYWNlIiwibW91c2Vkb3duIiwic2l6ZSIsIl9kZXRhY2hFdmVudHMiLCJfYXR0YWNoU2Vjb25kYXJ5RXZlbnRzIiwiX2RldGFjaFNlY29uZGFyeUV2ZW50cyIsIl90cmlnZ2VyIiwiYWx0ZGF0ZSIsImxvY2FsX2RhdGUiLCJnZXRUaW1lIiwiZ2V0VGltZXpvbmVPZmZzZXQiLCJhbHRmb3JtYXQiLCJmb3JtYXREYXRlIiwiZGV0YWNoIiwiZm9yY2VQYXJzZSIsImRhdGVwaWNrZXIiLCJnZXREYXRlIiwic2V0RGF0ZSIsInNldFVUQ0RhdGUiLCJmb3JtYXR0ZWQiLCJnZXRGb3JtYXR0ZWREYXRlIiwidXBkYXRlTmF2QXJyb3dzIiwiekluZGV4IiwiZnJvbUFyZ3MiLCJ2aWV3RGF0ZSIsImZpbGwiLCJkb3dDbnQiLCJjZWxsIiwiZGF5c01pbiIsIm1vbnRoc1Nob3J0Iiwic2V0UmFuZ2UiLCJ2YWx1ZU9mIiwiZ2V0Q2xhc3NOYW1lcyIsImNscyIsImN1cnJlbnREYXRlIiwidG9kYXlIaWdobGlnaHQiLCJnZXRGdWxsWWVhciIsImdldE1vbnRoIiwiZ2V0VVRDRGF5Iiwic3RhcnRZZWFyIiwic3RhcnRNb250aCIsImVuZFllYXIiLCJlbmRNb250aCIsInRvb2x0aXAiLCJtb250aHMiLCJ0b2RheUJ0biIsImNsZWFyQnRuIiwicHJldk1vbnRoIiwiZ2V0RGF5c0luTW9udGgiLCJuZXh0TW9udGgiLCJjbHNOYW1lIiwid3MiLCJ0aCIsInl0aCIsImNhbFdlZWsiLCJiZWZvcmUiLCJiZWZvcmVTaG93RGF5IiwiZW5hYmxlZCIsInVuaXF1ZSIsImN1cnJlbnRZZWFyIiwiZW5kIiwieWVhckNvbnQiLCJ2aXNpYmlsaXR5Iiwibm9kZU5hbWUiLCJjbGFzc05hbWUiLCJkaXIiLCJtb2RlcyIsIm5hdlN0ZXAiLCJtb3ZlTW9udGgiLCJtb3ZlWWVhciIsIl9zZXREYXRlIiwiYXV0b2Nsb3NlIiwiaW5kZXgiLCJzZXRVVENNb250aCIsInNldFVUQ0Z1bGxZZWFyIiwibmV3X2RhdGUiLCJtYWciLCJuZXdfbW9udGgiLCJkYXRlV2l0aGluUmFuZ2UiLCJkYXRlQ2hhbmdlZCIsIm5ld0RhdGUiLCJuZXdWaWV3RGF0ZSIsImtleWJvYXJkTmF2aWdhdGlvbiIsInNoaWZ0S2V5IiwiRGF0ZVJhbmdlUGlja2VyIiwiaW5wdXRzIiwianF1ZXJ5IiwiYmluZCIsImRhdGVVcGRhdGVkIiwicGlja2VycyIsInVwZGF0ZURhdGVzIiwidXBkYXRlUmFuZ2VzIiwiZHAiLCJvcHRzX2Zyb21fZWwiLCJwcmVmaXgiLCJvdXQiLCJpbmtleSIsIl8iLCJhIiwib3B0c19mcm9tX2xvY2FsZSIsImxvY2FsZV9vcHRzIiwib2xkIiwiaW50ZXJuYWxfcmV0dXJuIiwidGhpc19yZXR1cm4iLCJlbG9wdHMiLCJ4b3B0cyIsImxvY29wdHMiLCJyb3B0cyIsInRvQXJyYXkiLCJlbiIsImRheXMiLCJkYXlzU2hvcnQiLCJuYXZGbmMiLCJpc0xlYXBZZWFyIiwidmFsaWRQYXJ0cyIsIm5vbnB1bmN0dWF0aW9uIiwic2VwYXJhdG9ycyIsInBhcnRzIiwicGFydF9yZSIsInBhcnQiLCJleGVjIiwicGFyc2VkIiwic2V0dGVyc19vcmRlciIsInNldHRlcnNfbWFwIiwieXl5eSIsInl5IiwibSIsImZpbHRlcmVkIiwiZnBhcnRzIiwiY250IiwiRCIsIkREIiwiTSIsIk1NIiwidG9TdHJpbmciLCJkZCIsIm1tIiwic2VwcyIsImhlYWRUZW1wbGF0ZSIsImNvbnRUZW1wbGF0ZSIsImZvb3RUZW1wbGF0ZSIsIm5vQ29uZmxpY3QiLCJiZGF0ZXBpY2tlciIsImluaXRQaWNrZXIiLCJkcGciLCJwYXJzZWRGb3JtYXQiLCJwYXJzZWRWaWV3Rm9ybWF0IiwiY3VycmVudFRhcmdldCIsImZvcm1hdHRlZEJhY2siLCJEYXRlRmllbGQiLCJEYXRlVGltZSIsImRhdGV0aW1lcGlja2VyIiwiZm9ybWF0VHlwZSIsInRvVVRDIiwiZnJvbVVUQyIsImRhdGV0aW1lIiwiRGF0ZVRpbWVGaWVsZCIsImRhdGV0aW1lZmllbGQiXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7QUFJQTs7Ozs7Ozs7O0FBU0MsV0FBVUEsQ0FBVixFQUFhOztBQUVWLFFBQUlDLGVBQWUsU0FBZkEsWUFBZSxDQUFVQyxHQUFWLEVBQWVDLE9BQWYsRUFBd0I7QUFDdkMsYUFBS0EsT0FBTCxHQUFlSCxFQUFFSSxNQUFGLENBQVMsRUFBVCxFQUFhSixFQUFFSyxFQUFGLENBQUtDLFlBQUwsQ0FBa0JDLFFBQS9CLEVBQXlDSixPQUF6QyxDQUFmO0FBQ0EsYUFBS0ssSUFBTCxHQUFZUixFQUFFRSxHQUFGLENBQVosQ0FGdUMsQ0FFbkI7QUFDcEIsWUFBRyxDQUFDLEtBQUtDLE9BQUwsQ0FBYU0sS0FBakIsRUFBd0I7QUFDcEIsaUJBQUtOLE9BQUwsQ0FBYU0sS0FBYixHQUFxQixJQUFyQjtBQUNIO0FBQ0Q7QUFDSCxLQVBEOztBQVNBUixpQkFBYVMs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QW1CcWhCLGFBQW5CLEdBQW1DRCxhQUFuQztBQUVILENBbkVBLEVBbUVDNWtCLE9BQU9DLE1BbkVSLENBQUQiLCJmaWxlIjoiMi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qISBYLWVkaXRhYmxlIC0gdjEuNS4xIFxuKiBJbi1wbGFjZSBlZGl0aW5nIHdpdGggVHdpdHRlciBCb290c3RyYXAsIGpRdWVyeSBVSSBvciBwdXJlIGpRdWVyeVxuKiBodHRwOi8vZ2l0aHViLmNvbS92aXRhbGV0cy94LWVkaXRhYmxlXG4qIENvcHlyaWdodCAoYykgMjAxMyBWaXRhbGl5IFBvdGFwb3Y7IExpY2Vuc2VkIE1JVCAqL1xuLyoqXG5Gb3JtIHdpdGggc2luZ2xlIGlucHV0IGVsZW1lbnQsIHR3byBidXR0b25zIGFuZCB0d28gc3RhdGVzOiBub3JtYWwvbG9hZGluZy5cbkFwcGxpZWQgYXMgalF1ZXJ5IG1ldGhvZCB0byBESVYgdGFnIChub3QgdG8gZm9ybSB0YWchKS4gVGhpcyBpcyBiZWNhdXNlIGZvcm0gY2FuIGJlIGluIGxvYWRpbmcgc3RhdGUgd2hlbiBzcGlubmVyIHNob3duLlxuRWRpdGFibGVmb3JtIGlzIGxpbmtlZCB3aXRoIG9uZSBvZiBpbnB1dCB0eXBlcywgZS5nLiAndGV4dCcsICdzZWxlY3QnIGV0Yy5cblxuQGNsYXNzIGVkaXRhYmxlZm9ybVxuQHVzZXMgdGV4dFxuQHVzZXMgdGV4dGFyZWFcbioqL1xuKGZ1bmN0aW9uICgkKSB7XG5cbiAgICB2YXIgRWRpdGFibGVGb3JtID0gZnVuY3Rpb24gKGRpdiwgb3B0aW9ucykge1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgJC5mbi5lZGl0YWJsZWZvcm0uZGVmYXVsdHMsIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLiRkaXYgPSAkKGRpdik7IC8vZGl2LCBjb250YWluaW5nIGZvcm0uIE5vdCBmb3JtIHRhZy4gTm90IGVkaXRhYmxlLWVsZW1lbnQuXG4gICAgICAgIGlmKCF0aGlzLm9wdGlvbnMuc2NvcGUpIHtcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy5zY29wZSA9IHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgLy9ub3RoaW5nIHNob3duIGFmdGVyIGluaXRcbiAgICB9O1xuXG4gICAgRWRpdGFibGVGb3JtLnByb3RvdHlwZSA9IHtcbiAgICAgICAgY29uc3RydWN0b3I6IEVkaXRhYmxlRm9ybSxcbiAgICAgICAgaW5pdElucHV0OiBmdW5jdGlvbigpIHsgIC8vY2FsbGVkIG9uY2VcbiAgICAgICAgICAgIC8vdGFrZSBpbnB1dCBmcm9tIG9wdGlvbnMgKGFzIGl0IGlzIGNyZWF0ZWQgaW4gZWRpdGFibGUtZWxlbWVudClcbiAgICAgICAgICAgIHRoaXMuaW5wdXQgPSB0aGlzLm9wdGlvbnMuaW5wdXQ7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vc2V0IGluaXRpYWwgdmFsdWVcbiAgICAgICAgICAgIC8vdG9kbzogbWF5IGJlIGFkZCBjaGVjazogdHlwZW9mIHN0ciA9PT0gJ3N0cmluZycgPyBcbiAgICAgICAgICAgIHRoaXMudmFsdWUgPSB0aGlzLmlucHV0LnN0cjJ2YWx1ZSh0aGlzLm9wdGlvbnMudmFsdWUpOyBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy9wcmVyZW5kZXI6IGdldCBpbnB1dC4kaW5wdXRcbiAgICAgICAgICAgIHRoaXMuaW5wdXQucHJlcmVuZGVyKCk7XG4gICAgICAgIH0sXG4gICAgICAgIGluaXRUZW1wbGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLiRmb3JtID0gJCgkLmZuLmVkaXRhYmxlZm9ybS50ZW1wbGF0ZSk7IFxuICAgICAgICB9LFxuICAgICAgICBpbml0QnV0dG9uczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgJGJ0biA9IHRoaXMuJGZvcm0uZmluZCgnLmVkaXRhYmxlLWJ1dHRvbnMnKTtcbiAgICAgICAgICAgICRidG4uYXBwZW5kKCQuZm4uZWRpdGFibGVmb3JtLmJ1dHRvbnMpO1xuICAgICAgICAgICAgaWYodGhpcy5vcHRpb25zLnNob3didXR0b25zID09PSAnYm90dG9tJykge1xuICAgICAgICAgICAgICAgICRidG4uYWRkQ2xhc3MoJ2VkaXRhYmxlLWJ1dHRvbnMtYm90dG9tJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICBSZW5kZXJzIGVkaXRhYmxlZm9ybVxuXG4gICAgICAgIEBtZXRob2QgcmVuZGVyXG4gICAgICAgICoqLyAgICAgICAgXG4gICAgICAgIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAvL2luaXQgbG9hZGVyXG4gICAgICAgICAgICB0aGlzLiRsb2FkaW5nID0gJCgkLmZuLmVkaXRhYmxlZm9ybS5sb2FkaW5nKTsgICAgICAgIFxuICAgICAgICAgICAgdGhpcy4kZGl2LmVtcHR5KCkuYXBwZW5kKHRoaXMuJGxvYWRpbmcpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvL2luaXQgZm9ybSB0ZW1wbGF0ZSBhbmQgYnV0dG9uc1xuICAgICAgICAgICAgdGhpcy5pbml0VGVtcGxhdGUoKTtcbiAgICAgICAgICAgIGlmKHRoaXMub3B0aW9ucy5zaG93YnV0dG9ucykge1xuICAgICAgICAgICAgICAgIHRoaXMuaW5pdEJ1dHRvbnMoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kZm9ybS5maW5kKCcuZWRpdGFibGUtYnV0dG9ucycpLnJlbW92ZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvL3Nob3cgbG9hZGluZyBzdGF0ZVxuICAgICAgICAgICAgdGhpcy5zaG93TG9hZGluZygpOyAgICAgICAgICAgIFxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvL2ZsYWcgc2hvd2luZyBpcyBmb3JtIG5vdyBzYXZpbmcgdmFsdWUgdG8gc2VydmVyLiBcbiAgICAgICAgICAgIC8vSXQgaXMgbmVlZGVkIHRvIHdhaXQgd2hlbiBjbG9zaW5nIGZvcm0uXG4gICAgICAgICAgICB0aGlzLmlzU2F2aW5nID0gZmFsc2U7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8qKiAgICAgICAgXG4gICAgICAgICAgICBGaXJlZCB3aGVuIHJlbmRlcmluZyBzdGFydHNcbiAgICAgICAgICAgIEBldmVudCByZW5kZXJpbmcgXG4gICAgICAgICAgICBAcGFyYW0ge09iamVjdH0gZXZlbnQgZXZlbnQgb2JqZWN0XG4gICAgICAgICAgICAqKi8gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuJGRpdi50cmlnZ2VySGFuZGxlcigncmVuZGVyaW5nJyk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vaW5pdCBpbnB1dFxuICAgICAgICAgICAgdGhpcy5pbml0SW5wdXQoKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy9hcHBlbmQgaW5wdXQgdG8gZm9ybVxuICAgICAgICAgICAgdGhpcy4kZm9ybS5maW5kKCdkaXYuZWRpdGFibGUtaW5wdXQnKS5hcHBlbmQodGhpcy5pbnB1dC4kdHBsKTsgICAgICAgICAgICBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy9hcHBlbmQgZm9ybSB0byBjb250YWluZXJcbiAgICAgICAgICAgIHRoaXMuJGRpdi5hcHBlbmQodGhpcy4kZm9ybSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vcmVuZGVyIGlucHV0XG4gICAgICAgICAgICAkLndoZW4odGhpcy5pbnB1dC5yZW5kZXIoKSlcbiAgICAgICAgICAgIC50aGVuKCQucHJveHkoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIC8vc2V0dXAgaW5wdXQgdG8gc3VibWl0IGF1dG9tYXRpY2FsbHkgd2hlbiBubyBidXR0b25zIHNob3duXG4gICAgICAgICAgICAgICAgaWYoIXRoaXMub3B0aW9ucy5zaG93YnV0dG9ucykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmlucHV0LmF1dG9zdWJtaXQoKTsgXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvL2F0dGFjaCAnY2FuY2VsJyBoYW5kbGVyXG4gICAgICAgICAgICAgICAgdGhpcy4kZm9ybS5maW5kKCcuZWRpdGFibGUtY2FuY2VsJykuY2xpY2soJC5wcm94eSh0aGlzLmNhbmNlbCwgdGhpcykpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmKHRoaXMuaW5wdXQuZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lcnJvcih0aGlzLmlucHV0LmVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kZm9ybS5maW5kKCcuZWRpdGFibGUtc3VibWl0JykuYXR0cignZGlzYWJsZWQnLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnB1dC4kaW5wdXQuYXR0cignZGlzYWJsZWQnLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgLy9wcmV2ZW50IGZvcm0gZnJvbSBzdWJtaXR0aW5nXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJGZvcm0uc3VibWl0KGZ1bmN0aW9uKGUpeyBlLnByZXZlbnREZWZhdWx0KCk7IH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXJyb3IoZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmlucHV0LiRpbnB1dC5yZW1vdmVBdHRyKCdkaXNhYmxlZCcpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiRmb3JtLmZpbmQoJy5lZGl0YWJsZS1zdWJtaXQnKS5yZW1vdmVBdHRyKCdkaXNhYmxlZCcpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSAodGhpcy52YWx1ZSA9PT0gbnVsbCB8fCB0aGlzLnZhbHVlID09PSB1bmRlZmluZWQgfHwgdGhpcy52YWx1ZSA9PT0gJycpID8gdGhpcy5vcHRpb25zLmRlZmF1bHRWYWx1ZSA6IHRoaXMudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5wdXQudmFsdWUyaW5wdXQodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAvL2F0dGFjaCBzdWJtaXQgaGFuZGxlclxuICAgICAgICAgICAgICAgICAgICB0aGlzLiRmb3JtLnN1Ym1pdCgkLnByb3h5KHRoaXMuc3VibWl0LCB0aGlzKSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLyoqICAgICAgICBcbiAgICAgICAgICAgICAgICBGaXJlZCB3aGVuIGZvcm0gaXMgcmVuZGVyZWRcbiAgICAgICAgICAgICAgICBAZXZlbnQgcmVuZGVyZWRcbiAgICAgICAgICAgICAgICBAcGFyYW0ge09iamVjdH0gZXZlbnQgZXZlbnQgb2JqZWN0XG4gICAgICAgICAgICAgICAgKiovICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdGhpcy4kZGl2LnRyaWdnZXJIYW5kbGVyKCdyZW5kZXJlZCcpOyAgICAgICAgICAgICAgICBcblxuICAgICAgICAgICAgICAgIHRoaXMuc2hvd0Zvcm0oKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvL2NhbGwgcG9zdHJlbmRlciBtZXRob2QgdG8gcGVyZm9ybSBhY3Rpb25zIHJlcXVpcmVkIHZpc2liaWxpdHkgb2YgZm9ybVxuICAgICAgICAgICAgICAgIGlmKHRoaXMuaW5wdXQucG9zdHJlbmRlcikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmlucHV0LnBvc3RyZW5kZXIoKTtcbiAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfSwgdGhpcykpO1xuICAgICAgICB9LFxuICAgICAgICBjYW5jZWw6IGZ1bmN0aW9uKCkgeyAgIFxuICAgICAgICAgICAgLyoqICAgICAgICBcbiAgICAgICAgICAgIEZpcmVkIHdoZW4gZm9ybSB3YXMgY2FuY2VsbGVkIGJ5IHVzZXJcbiAgICAgICAgICAgIEBldmVudCBjYW5jZWwgXG4gICAgICAgICAgICBAcGFyYW0ge09iamVjdH0gZXZlbnQgZXZlbnQgb2JqZWN0XG4gICAgICAgICAgICAqKi8gICAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy4kZGl2LnRyaWdnZXJIYW5kbGVyKCdjYW5jZWwnKTtcbiAgICAgICAgfSxcbiAgICAgICAgc2hvd0xvYWRpbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHcsIGg7XG4gICAgICAgICAgICBpZih0aGlzLiRmb3JtKSB7XG4gICAgICAgICAgICAgICAgLy9zZXQgbG9hZGluZyBzaXplIGVxdWFsIHRvIGZvcm1cbiAgICAgICAgICAgICAgICB3ID0gdGhpcy4kZm9ybS5vdXRlcldpZHRoKCk7XG4gICAgICAgICAgICAgICAgaCA9IHRoaXMuJGZvcm0ub3V0ZXJIZWlnaHQoKTsgXG4gICAgICAgICAgICAgICAgaWYodykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiRsb2FkaW5nLndpZHRoKHcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZihoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJGxvYWRpbmcuaGVpZ2h0KGgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLiRmb3JtLmhpZGUoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy9zdHJldGNoIGxvYWRpbmcgdG8gZmlsbCBjb250YWluZXIgd2lkdGhcbiAgICAgICAgICAgICAgICB3ID0gdGhpcy4kbG9hZGluZy5wYXJlbnQoKS53aWR0aCgpO1xuICAgICAgICAgICAgICAgIGlmKHcpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kbG9hZGluZy53aWR0aCh3KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLiRsb2FkaW5nLnNob3coKTsgXG4gICAgICAgIH0sXG5cbiAgICAgICAgc2hvd0Zvcm06IGZ1bmN0aW9uKGFjdGl2YXRlKSB7XG4gICAgICAgICAgICB0aGlzLiRsb2FkaW5nLmhpZGUoKTtcbiAgICAgICAgICAgIHRoaXMuJGZvcm0uc2hvdygpO1xuICAgICAgICAgICAgaWYoYWN0aXZhdGUgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pbnB1dC5hY3RpdmF0ZSgpOyBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qKiAgICAgICAgXG4gICAgICAgICAgICBGaXJlZCB3aGVuIGZvcm0gaXMgc2hvd25cbiAgICAgICAgICAgIEBldmVudCBzaG93IFxuICAgICAgICAgICAgQHBhcmFtIHtPYmplY3R9IGV2ZW50IGV2ZW50IG9iamVjdFxuICAgICAgICAgICAgKiovICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuJGRpdi50cmlnZ2VySGFuZGxlcignc2hvdycpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGVycm9yOiBmdW5jdGlvbihtc2cpIHtcbiAgICAgICAgICAgIHZhciAkZ3JvdXAgPSB0aGlzLiRmb3JtLmZpbmQoJy5jb250cm9sLWdyb3VwJyksXG4gICAgICAgICAgICAgICAgJGJsb2NrID0gdGhpcy4kZm9ybS5maW5kKCcuZWRpdGFibGUtZXJyb3ItYmxvY2snKSxcbiAgICAgICAgICAgICAgICBsaW5lcztcblxuICAgICAgICAgICAgaWYobXNnID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICRncm91cC5yZW1vdmVDbGFzcygkLmZuLmVkaXRhYmxlZm9ybS5lcnJvckdyb3VwQ2xhc3MpO1xuICAgICAgICAgICAgICAgICRibG9jay5yZW1vdmVDbGFzcygkLmZuLmVkaXRhYmxlZm9ybS5lcnJvckJsb2NrQ2xhc3MpLmVtcHR5KCkuaGlkZSgpOyBcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy9jb252ZXJ0IG5ld2xpbmUgdG8gPGJyPiBmb3IgbW9yZSBwcmV0dHkgZXJyb3IgZGlzcGxheVxuICAgICAgICAgICAgICAgIGlmKG1zZykge1xuICAgICAgICAgICAgICAgICAgICBsaW5lcyA9ICgnJyttc2cpLnNwbGl0KCdcXG4nKTtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGluZXNbaV0gPSAkKCc8ZGl2PicpLnRleHQobGluZXNbaV0pLmh0bWwoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtc2cgPSBsaW5lcy5qb2luKCc8YnI+Jyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICRncm91cC5hZGRDbGFzcygkLmZuLmVkaXRhYmxlZm9ybS5lcnJvckdyb3VwQ2xhc3MpO1xuICAgICAgICAgICAgICAgICRibG9jay5hZGRDbGFzcygkLmZuLmVkaXRhYmxlZm9ybS5lcnJvckJsb2NrQ2xhc3MpLmh0bWwobXNnKS5zaG93KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgc3VibWl0OiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvL2dldCBuZXcgdmFsdWUgZnJvbSBpbnB1dFxuICAgICAgICAgICAgdmFyIG5ld1ZhbHVlID0gdGhpcy5pbnB1dC5pbnB1dDJ2YWx1ZSgpOyBcblxuICAgICAgICAgICAgLy92YWxpZGF0aW9uOiBpZiB2YWxpZGF0ZSByZXR1cm5zIHN0cmluZyBvciB0cnV0aHkgdmFsdWUgLSBtZWFucyBlcnJvclxuICAgICAgICAgICAgLy9pZiByZXR1cm5zIG9iamVjdCBsaWtlIHtuZXdWYWx1ZTogJy4uLid9ID0+IHN1Ym1pdHRlZCB2YWx1ZSBpcyByZWFzc2lnbmVkIHRvIGl0XG4gICAgICAgICAgICB2YXIgZXJyb3IgPSB0aGlzLnZhbGlkYXRlKG5ld1ZhbHVlKTtcbiAgICAgICAgICAgIGlmICgkLnR5cGUoZXJyb3IpID09PSAnb2JqZWN0JyAmJiBlcnJvci5uZXdWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgbmV3VmFsdWUgPSBlcnJvci5uZXdWYWx1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLmlucHV0LnZhbHVlMmlucHV0KG5ld1ZhbHVlKTtcbiAgICAgICAgICAgICAgICBpZih0eXBlb2YgZXJyb3IubXNnID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVycm9yKGVycm9yLm1zZyk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2hvd0Zvcm0oKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVycm9yKGVycm9yKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNob3dGb3JtKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfSBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy9pZiB2YWx1ZSBub3QgY2hhbmdlZCAtLT4gdHJpZ2dlciAnbm9jaGFuZ2UnIGV2ZW50IGFuZCByZXR1cm5cbiAgICAgICAgICAgIC8qanNsaW50IGVxZXE6IHRydWUqL1xuICAgICAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuc2F2ZW5vY2hhbmdlICYmIHRoaXMuaW5wdXQudmFsdWUyc3RyKG5ld1ZhbHVlKSA9PSB0aGlzLmlucHV0LnZhbHVlMnN0cih0aGlzLnZhbHVlKSkge1xuICAgICAgICAgICAgLypqc2xpbnQgZXFlcTogZmFsc2UqLyAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvKiogICAgICAgIFxuICAgICAgICAgICAgICAgIEZpcmVkIHdoZW4gdmFsdWUgbm90IGNoYW5nZWQgYnV0IGZvcm0gaXMgc3VibWl0dGVkLiBSZXF1aXJlcyBzYXZlbm9jaGFuZ2UgPSBmYWxzZS5cbiAgICAgICAgICAgICAgICBAZXZlbnQgbm9jaGFuZ2UgXG4gICAgICAgICAgICAgICAgQHBhcmFtIHtPYmplY3R9IGV2ZW50IGV2ZW50IG9iamVjdFxuICAgICAgICAgICAgICAgICoqLyAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdGhpcy4kZGl2LnRyaWdnZXJIYW5kbGVyKCdub2NoYW5nZScpOyAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH0gXG5cbiAgICAgICAgICAgIC8vY29udmVydCB2YWx1ZSBmb3Igc3VibWl0dGluZyB0byBzZXJ2ZXJcbiAgICAgICAgICAgIHZhciBzdWJtaXRWYWx1ZSA9IHRoaXMuaW5wdXQudmFsdWUyc3VibWl0KG5ld1ZhbHVlKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5pc1NhdmluZyA9IHRydWU7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vc2VuZGluZyBkYXRhIHRvIHNlcnZlclxuICAgICAgICAgICAgJC53aGVuKHRoaXMuc2F2ZShzdWJtaXRWYWx1ZSkpXG4gICAgICAgICAgICAuZG9uZSgkLnByb3h5KGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pc1NhdmluZyA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgLy9ydW4gc3VjY2VzcyBjYWxsYmFja1xuICAgICAgICAgICAgICAgIHZhciByZXMgPSB0eXBlb2YgdGhpcy5vcHRpb25zLnN1Y2Nlc3MgPT09ICdmdW5jdGlvbicgPyB0aGlzLm9wdGlvbnMuc3VjY2Vzcy5jYWxsKHRoaXMub3B0aW9ucy5zY29wZSwgcmVzcG9uc2UsIG5ld1ZhbHVlKSA6IG51bGw7XG5cbiAgICAgICAgICAgICAgICAvL2lmIHN1Y2Nlc3MgY2FsbGJhY2sgcmV0dXJucyBmYWxzZSAtLT4ga2VlcCBmb3JtIG9wZW4gYW5kIGRvIG5vdCBhY3RpdmF0ZSBpbnB1dFxuICAgICAgICAgICAgICAgIGlmKHJlcyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lcnJvcihmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2hvd0Zvcm0oZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy9pZiBzdWNjZXNzIGNhbGxiYWNrIHJldHVybnMgc3RyaW5nIC0tPiAga2VlcCBmb3JtIG9wZW4sIHNob3cgZXJyb3IgYW5kIGFjdGl2YXRlIGlucHV0ICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYodHlwZW9mIHJlcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lcnJvcihyZXMpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNob3dGb3JtKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvL2lmIHN1Y2Nlc3MgY2FsbGJhY2sgcmV0dXJucyBvYmplY3QgbGlrZSB7bmV3VmFsdWU6IDxzb21ldGhpbmc+fSAtLT4gdXNlIHRoYXQgdmFsdWUgaW5zdGVhZCBvZiBzdWJtaXR0ZWRcbiAgICAgICAgICAgICAgICAvL2l0IGlzIHVzZWZ1bGwgaWYgeW91IHdhbnQgdG8gY2huYWdlIHZhbHVlIGluIHVybC1mdW5jdGlvblxuICAgICAgICAgICAgICAgIGlmKHJlcyAmJiB0eXBlb2YgcmVzID09PSAnb2JqZWN0JyAmJiByZXMuaGFzT3duUHJvcGVydHkoJ25ld1ZhbHVlJykpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3VmFsdWUgPSByZXMubmV3VmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy9jbGVhciBlcnJvciBtZXNzYWdlXG4gICAgICAgICAgICAgICAgdGhpcy5lcnJvcihmYWxzZSk7ICAgXG4gICAgICAgICAgICAgICAgdGhpcy52YWx1ZSA9IG5ld1ZhbHVlO1xuICAgICAgICAgICAgICAgIC8qKiAgICAgICAgXG4gICAgICAgICAgICAgICAgRmlyZWQgd2hlbiBmb3JtIGlzIHN1Ym1pdHRlZFxuICAgICAgICAgICAgICAgIEBldmVudCBzYXZlIFxuICAgICAgICAgICAgICAgIEBwYXJhbSB7T2JqZWN0fSBldmVudCBldmVudCBvYmplY3RcbiAgICAgICAgICAgICAgICBAcGFyYW0ge09iamVjdH0gcGFyYW1zIGFkZGl0aW9uYWwgcGFyYW1zXG4gICAgICAgICAgICAgICAgQHBhcmFtIHttaXhlZH0gcGFyYW1zLm5ld1ZhbHVlIHJhdyBuZXcgdmFsdWVcbiAgICAgICAgICAgICAgICBAcGFyYW0ge21peGVkfSBwYXJhbXMuc3VibWl0VmFsdWUgc3VibWl0dGVkIHZhbHVlIGFzIHN0cmluZ1xuICAgICAgICAgICAgICAgIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXMucmVzcG9uc2UgYWpheCByZXNwb25zZVxuXG4gICAgICAgICAgICAgICAgQGV4YW1wbGVcbiAgICAgICAgICAgICAgICAkKCcjZm9ybS1kaXYnKS5vbignc2F2ZScpLCBmdW5jdGlvbihlLCBwYXJhbXMpe1xuICAgICAgICAgICAgICAgICAgICBpZihwYXJhbXMubmV3VmFsdWUgPT09ICd1c2VybmFtZScpIHsuLi59XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgKiovXG4gICAgICAgICAgICAgICAgdGhpcy4kZGl2LnRyaWdnZXJIYW5kbGVyKCdzYXZlJywge25ld1ZhbHVlOiBuZXdWYWx1ZSwgc3VibWl0VmFsdWU6IHN1Ym1pdFZhbHVlLCByZXNwb25zZTogcmVzcG9uc2V9KTtcbiAgICAgICAgICAgIH0sIHRoaXMpKVxuICAgICAgICAgICAgLmZhaWwoJC5wcm94eShmdW5jdGlvbih4aHIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmlzU2F2aW5nID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICB2YXIgbXNnO1xuICAgICAgICAgICAgICAgIGlmKHR5cGVvZiB0aGlzLm9wdGlvbnMuZXJyb3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgbXNnID0gdGhpcy5vcHRpb25zLmVycm9yLmNhbGwodGhpcy5vcHRpb25zLnNjb3BlLCB4aHIsIG5ld1ZhbHVlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBtc2cgPSB0eXBlb2YgeGhyID09PSAnc3RyaW5nJyA/IHhociA6IHhoci5yZXNwb25zZVRleHQgfHwgeGhyLnN0YXR1c1RleHQgfHwgJ1Vua25vd24gZXJyb3IhJztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLmVycm9yKG1zZyk7XG4gICAgICAgICAgICAgICAgdGhpcy5zaG93Rm9ybSgpO1xuICAgICAgICAgICAgfSwgdGhpcykpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHNhdmU6IGZ1bmN0aW9uKHN1Ym1pdFZhbHVlKSB7XG4gICAgICAgICAgICAvL3RyeSBwYXJzZSBjb21wb3NpdGUgcGsgZGVmaW5lZCBhcyBqc29uIHN0cmluZyBpbiBkYXRhLXBrIFxuICAgICAgICAgICAgdGhpcy5vcHRpb25zLnBrID0gJC5mbi5lZGl0YWJsZXV0aWxzLnRyeVBhcnNlSnNvbih0aGlzLm9wdGlvbnMucGssIHRydWUpOyBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdmFyIHBrID0gKHR5cGVvZiB0aGlzLm9wdGlvbnMucGsgPT09ICdmdW5jdGlvbicpID8gdGhpcy5vcHRpb25zLnBrLmNhbGwodGhpcy5vcHRpb25zLnNjb3BlKSA6IHRoaXMub3B0aW9ucy5wayxcbiAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgIHNlbmQgb24gc2VydmVyIGluIGZvbGxvd2luZyBjYXNlczpcbiAgICAgICAgICAgICAgMS4gdXJsIGlzIGZ1bmN0aW9uXG4gICAgICAgICAgICAgIDIuIHVybCBpcyBzdHJpbmcgQU5EIChwayBkZWZpbmVkIE9SIHNlbmQgb3B0aW9uID0gYWx3YXlzKSBcbiAgICAgICAgICAgICovXG4gICAgICAgICAgICBzZW5kID0gISEodHlwZW9mIHRoaXMub3B0aW9ucy51cmwgPT09ICdmdW5jdGlvbicgfHwgKHRoaXMub3B0aW9ucy51cmwgJiYgKCh0aGlzLm9wdGlvbnMuc2VuZCA9PT0gJ2Fsd2F5cycpIHx8ICh0aGlzLm9wdGlvbnMuc2VuZCA9PT0gJ2F1dG8nICYmIHBrICE9PSBudWxsICYmIHBrICE9PSB1bmRlZmluZWQpKSkpLFxuICAgICAgICAgICAgcGFyYW1zO1xuXG4gICAgICAgICAgICBpZiAoc2VuZCkgeyAvL3NlbmQgdG8gc2VydmVyXG4gICAgICAgICAgICAgICAgdGhpcy5zaG93TG9hZGluZygpO1xuXG4gICAgICAgICAgICAgICAgLy9zdGFuZGFyZCBwYXJhbXNcbiAgICAgICAgICAgICAgICBwYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IHRoaXMub3B0aW9ucy5uYW1lIHx8ICcnLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogc3VibWl0VmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIHBrOiBwayBcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgLy9hZGRpdGlvbmFsIHBhcmFtc1xuICAgICAgICAgICAgICAgIGlmKHR5cGVvZiB0aGlzLm9wdGlvbnMucGFyYW1zID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcmFtcyA9IHRoaXMub3B0aW9ucy5wYXJhbXMuY2FsbCh0aGlzLm9wdGlvbnMuc2NvcGUsIHBhcmFtcyk7ICBcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvL3RyeSBwYXJzZSBqc29uIGluIHNpbmdsZSBxdW90ZXMgKGZyb20gZGF0YS1wYXJhbXMgYXR0cmlidXRlKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMucGFyYW1zID0gJC5mbi5lZGl0YWJsZXV0aWxzLnRyeVBhcnNlSnNvbih0aGlzLm9wdGlvbnMucGFyYW1zLCB0cnVlKTsgICBcbiAgICAgICAgICAgICAgICAgICAgJC5leHRlbmQocGFyYW1zLCB0aGlzLm9wdGlvbnMucGFyYW1zKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZih0eXBlb2YgdGhpcy5vcHRpb25zLnVybCA9PT0gJ2Z1bmN0aW9uJykgeyAvL3VzZXIncyBmdW5jdGlvblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLnVybC5jYWxsKHRoaXMub3B0aW9ucy5zY29wZSwgcGFyYW1zKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgeyAgXG4gICAgICAgICAgICAgICAgICAgIC8vc2VuZCBhamF4IHRvIHNlcnZlciBhbmQgcmV0dXJuIGRlZmVycmVkIG9iamVjdFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJC5hamF4KCQuZXh0ZW5kKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybCAgICAgOiB0aGlzLm9wdGlvbnMudXJsLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSAgICA6IHBhcmFtcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUgICAgOiAnUE9TVCdcbiAgICAgICAgICAgICAgICAgICAgfSwgdGhpcy5vcHRpb25zLmFqYXhPcHRpb25zKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LCBcblxuICAgICAgICB2YWxpZGF0ZTogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gdGhpcy52YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5vcHRpb25zLnZhbGlkYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy52YWxpZGF0ZS5jYWxsKHRoaXMub3B0aW9ucy5zY29wZSwgdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIG9wdGlvbjogZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgICAgICAgaWYoa2V5IGluIHRoaXMub3B0aW9ucykge1xuICAgICAgICAgICAgICAgIHRoaXMub3B0aW9uc1trZXldID0gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmKGtleSA9PT0gJ3ZhbHVlJykge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0VmFsdWUodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvL2RvIG5vdCBwYXNzIG9wdGlvbiB0byBpbnB1dCBhcyBpdCBpcyBwYXNzZWQgaW4gZWRpdGFibGUtZWxlbWVudFxuICAgICAgICB9LFxuXG4gICAgICAgIHNldFZhbHVlOiBmdW5jdGlvbih2YWx1ZSwgY29udmVydFN0cikge1xuICAgICAgICAgICAgaWYoY29udmVydFN0cikge1xuICAgICAgICAgICAgICAgIHRoaXMudmFsdWUgPSB0aGlzLmlucHV0LnN0cjJ2YWx1ZSh2YWx1ZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy9pZiBmb3JtIGlzIHZpc2libGUsIHVwZGF0ZSBpbnB1dFxuICAgICAgICAgICAgaWYodGhpcy4kZm9ybSAmJiB0aGlzLiRmb3JtLmlzKCc6dmlzaWJsZScpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pbnB1dC52YWx1ZTJpbnB1dCh0aGlzLnZhbHVlKTtcbiAgICAgICAgICAgIH0gICAgICAgICAgICBcbiAgICAgICAgfSAgICAgICAgICAgICAgIFxuICAgIH07XG5cbiAgICAvKlxuICAgIEluaXRpYWxpemUgZWRpdGFibGVmb3JtLiBBcHBsaWVkIHRvIGpRdWVyeSBvYmplY3QuXG5cbiAgICBAbWV0aG9kICQoKS5lZGl0YWJsZWZvcm0ob3B0aW9ucylcbiAgICBAcGFyYW1zIHtPYmplY3R9IG9wdGlvbnNcbiAgICBAZXhhbXBsZVxuICAgIHZhciAkZm9ybSA9ICQoJyZsdDtkaXYmZ3Q7JykuZWRpdGFibGVmb3JtKHtcbiAgICAgICAgdHlwZTogJ3RleHQnLFxuICAgICAgICBuYW1lOiAndXNlcm5hbWUnLFxuICAgICAgICB1cmw6ICcvcG9zdCcsXG4gICAgICAgIHZhbHVlOiAndml0YWxpeSdcbiAgICB9KTtcblxuICAgIC8vdG8gZGlzcGxheSBmb3JtIHlvdSBzaG91bGQgY2FsbCAncmVuZGVyJyBtZXRob2RcbiAgICAkZm9ybS5lZGl0YWJsZWZvcm0oJ3JlbmRlcicpOyAgICAgXG4gICAgKi9cbiAgICAkLmZuLmVkaXRhYmxlZm9ybSA9IGZ1bmN0aW9uIChvcHRpb24pIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyICR0aGlzID0gJCh0aGlzKSwgXG4gICAgICAgICAgICBkYXRhID0gJHRoaXMuZGF0YSgnZWRpdGFibGVmb3JtJyksIFxuICAgICAgICAgICAgb3B0aW9ucyA9IHR5cGVvZiBvcHRpb24gPT09ICdvYmplY3QnICYmIG9wdGlvbjsgXG4gICAgICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICAgICAgICAkdGhpcy5kYXRhKCdlZGl0YWJsZWZvcm0nLCAoZGF0YSA9IG5ldyBFZGl0YWJsZUZvcm0odGhpcywgb3B0aW9ucykpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBvcHRpb24gPT09ICdzdHJpbmcnKSB7IC8vY2FsbCBtZXRob2QgXG4gICAgICAgICAgICAgICAgZGF0YVtvcHRpb25dLmFwcGx5KGRhdGEsIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3MsIDEpKTtcbiAgICAgICAgICAgIH0gXG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvL2tlZXAgbGluayB0byBjb25zdHJ1Y3RvciB0byBhbGxvdyBpbmhlcml0YW5jZVxuICAgICQuZm4uZWRpdGFibGVmb3JtLkNvbnN0cnVjdG9yID0gRWRpdGFibGVGb3JtOyAgICBcblxuICAgIC8vZGVmYXVsdHNcbiAgICAkLmZuLmVkaXRhYmxlZm9ybS5kZWZhdWx0cyA9IHtcbiAgICAgICAgLyogc2VlIGFsc28gZGVmYXVsdHMgZm9yIGlucHV0ICovXG5cbiAgICAgICAgLyoqXG4gICAgICAgIFR5cGUgb2YgaW5wdXQuIENhbiBiZSA8Y29kZT50ZXh0fHRleHRhcmVhfHNlbGVjdHxkYXRlfGNoZWNrbGlzdDwvY29kZT5cblxuICAgICAgICBAcHJvcGVydHkgdHlwZSBcbiAgICAgICAgQHR5cGUgc3RyaW5nXG4gICAgICAgIEBkZWZhdWx0ICd0ZXh0J1xuICAgICAgICAqKi9cbiAgICAgICAgdHlwZTogJ3RleHQnLFxuICAgICAgICAvKipcbiAgICAgICAgVXJsIGZvciBzdWJtaXQsIGUuZy4gPGNvZGU+Jy9wb3N0JzwvY29kZT4gIFxuICAgICAgICBJZiBmdW5jdGlvbiAtIGl0IHdpbGwgYmUgY2FsbGVkIGluc3RlYWQgb2YgYWpheC4gRnVuY3Rpb24gc2hvdWxkIHJldHVybiBkZWZlcnJlZCBvYmplY3QgdG8gcnVuIGZhaWwvZG9uZSBjYWxsYmFja3MuXG5cbiAgICAgICAgQHByb3BlcnR5IHVybCBcbiAgICAgICAgQHR5cGUgc3RyaW5nfGZ1bmN0aW9uXG4gICAgICAgIEBkZWZhdWx0IG51bGxcbiAgICAgICAgQGV4YW1wbGVcbiAgICAgICAgdXJsOiBmdW5jdGlvbihwYXJhbXMpIHtcbiAgICAgICAgICAgIHZhciBkID0gbmV3ICQuRGVmZXJyZWQ7XG4gICAgICAgICAgICBpZihwYXJhbXMudmFsdWUgPT09ICdhYmMnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGQucmVqZWN0KCdlcnJvciBtZXNzYWdlJyk7IC8vcmV0dXJuaW5nIGVycm9yIHZpYSBkZWZlcnJlZCBvYmplY3RcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy9hc3luYyBzYXZpbmcgZGF0YSBpbiBqcyBtb2RlbFxuICAgICAgICAgICAgICAgIHNvbWVNb2RlbC5hc3luY1NhdmVNZXRob2Qoe1xuICAgICAgICAgICAgICAgICAgIC4uLiwgXG4gICAgICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgICBkLnJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7IFxuICAgICAgICAgICAgICAgIHJldHVybiBkLnByb21pc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBcbiAgICAgICAgKiovICAgICAgICBcbiAgICAgICAgdXJsOm51bGwsXG4gICAgICAgIC8qKlxuICAgICAgICBBZGRpdGlvbmFsIHBhcmFtcyBmb3Igc3VibWl0LiBJZiBkZWZpbmVkIGFzIDxjb2RlPm9iamVjdDwvY29kZT4gLSBpdCBpcyAqKmFwcGVuZGVkKiogdG8gb3JpZ2luYWwgYWpheCBkYXRhIChwaywgbmFtZSBhbmQgdmFsdWUpLiAgXG4gICAgICAgIElmIGRlZmluZWQgYXMgPGNvZGU+ZnVuY3Rpb248L2NvZGU+IC0gcmV0dXJuZWQgb2JqZWN0ICoqb3ZlcndyaXRlcyoqIG9yaWdpbmFsIGFqYXggZGF0YS5cbiAgICAgICAgQGV4YW1wbGVcbiAgICAgICAgcGFyYW1zOiBmdW5jdGlvbihwYXJhbXMpIHtcbiAgICAgICAgICAgIC8vb3JpZ2luYWxseSBwYXJhbXMgY29udGFpbiBwaywgbmFtZSBhbmQgdmFsdWVcbiAgICAgICAgICAgIHBhcmFtcy5hID0gMTtcbiAgICAgICAgICAgIHJldHVybiBwYXJhbXM7XG4gICAgICAgIH1cblxuICAgICAgICBAcHJvcGVydHkgcGFyYW1zIFxuICAgICAgICBAdHlwZSBvYmplY3R8ZnVuY3Rpb25cbiAgICAgICAgQGRlZmF1bHQgbnVsbFxuICAgICAgICAqKi8gICAgICAgICAgXG4gICAgICAgIHBhcmFtczpudWxsLFxuICAgICAgICAvKipcbiAgICAgICAgTmFtZSBvZiBmaWVsZC4gV2lsbCBiZSBzdWJtaXR0ZWQgb24gc2VydmVyLiBDYW4gYmUgdGFrZW4gZnJvbSA8Y29kZT5pZDwvY29kZT4gYXR0cmlidXRlXG5cbiAgICAgICAgQHByb3BlcnR5IG5hbWUgXG4gICAgICAgIEB0eXBlIHN0cmluZ1xuICAgICAgICBAZGVmYXVsdCBudWxsXG4gICAgICAgICoqLyAgICAgICAgIFxuICAgICAgICBuYW1lOiBudWxsLFxuICAgICAgICAvKipcbiAgICAgICAgUHJpbWFyeSBrZXkgb2YgZWRpdGFibGUgb2JqZWN0IChlLmcuIHJlY29yZCBpZCBpbiBkYXRhYmFzZSkuIEZvciBjb21wb3NpdGUga2V5cyB1c2Ugb2JqZWN0LCBlLmcuIDxjb2RlPntpZDogMSwgbGFuZzogJ2VuJ308L2NvZGU+LlxuICAgICAgICBDYW4gYmUgY2FsY3VsYXRlZCBkeW5hbWljYWxseSB2aWEgZnVuY3Rpb24uXG5cbiAgICAgICAgQHByb3BlcnR5IHBrIFxuICAgICAgICBAdHlwZSBzdHJpbmd8b2JqZWN0fGZ1bmN0aW9uXG4gICAgICAgIEBkZWZhdWx0IG51bGxcbiAgICAgICAgKiovICAgICAgICAgXG4gICAgICAgIHBrOiBudWxsLFxuICAgICAgICAvKipcbiAgICAgICAgSW5pdGlhbCB2YWx1ZS4gSWYgbm90IGRlZmluZWQgLSB3aWxsIGJlIHRha2VuIGZyb20gZWxlbWVudCdzIGNvbnRlbnQuXG4gICAgICAgIEZvciBfX3NlbGVjdF9fIHR5cGUgc2hvdWxkIGJlIGRlZmluZWQgKGFzIGl0IGlzIElEIG9mIHNob3duIHRleHQpLlxuXG4gICAgICAgIEBwcm9wZXJ0eSB2YWx1ZSBcbiAgICAgICAgQHR5cGUgc3RyaW5nfG9iamVjdFxuICAgICAgICBAZGVmYXVsdCBudWxsXG4gICAgICAgICoqLyAgICAgICAgXG4gICAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgICAvKipcbiAgICAgICAgVmFsdWUgdGhhdCB3aWxsIGJlIGRpc3BsYXllZCBpbiBpbnB1dCBpZiBvcmlnaW5hbCBmaWVsZCB2YWx1ZSBpcyBlbXB0eSAoYG51bGx8dW5kZWZpbmVkfCcnYCkuXG5cbiAgICAgICAgQHByb3BlcnR5IGRlZmF1bHRWYWx1ZSBcbiAgICAgICAgQHR5cGUgc3RyaW5nfG9iamVjdFxuICAgICAgICBAZGVmYXVsdCBudWxsXG4gICAgICAgIEBzaW5jZSAxLjQuNlxuICAgICAgICAqKi8gICAgICAgIFxuICAgICAgICBkZWZhdWx0VmFsdWU6IG51bGwsXG4gICAgICAgIC8qKlxuICAgICAgICBTdHJhdGVneSBmb3Igc2VuZGluZyBkYXRhIG9uIHNlcnZlci4gQ2FuIGJlIGBhdXRvfGFsd2F5c3xuZXZlcmAuXG4gICAgICAgIFdoZW4gJ2F1dG8nIGRhdGEgd2lsbCBiZSBzZW50IG9uIHNlcnZlciAqKm9ubHkgaWYgcGsgYW5kIHVybCBkZWZpbmVkKiosIG90aGVyd2lzZSBuZXcgdmFsdWUgd2lsbCBiZSBzdG9yZWQgbG9jYWxseS5cblxuICAgICAgICBAcHJvcGVydHkgc2VuZCBcbiAgICAgICAgQHR5cGUgc3RyaW5nXG4gICAgICAgIEBkZWZhdWx0ICdhdXRvJ1xuICAgICAgICAqKi8gICAgICAgICAgXG4gICAgICAgIHNlbmQ6ICdhdXRvJywgXG4gICAgICAgIC8qKlxuICAgICAgICBGdW5jdGlvbiBmb3IgY2xpZW50LXNpZGUgdmFsaWRhdGlvbi4gSWYgcmV0dXJucyBzdHJpbmcgLSBtZWFucyB2YWxpZGF0aW9uIG5vdCBwYXNzZWQgYW5kIHN0cmluZyBzaG93ZWQgYXMgZXJyb3IuXG4gICAgICAgIFNpbmNlIDEuNS4xIHlvdSBjYW4gbW9kaWZ5IHN1Ym1pdHRlZCB2YWx1ZSBieSByZXR1cm5pbmcgb2JqZWN0IGZyb20gYHZhbGlkYXRlYDogXG4gICAgICAgIGB7bmV3VmFsdWU6ICcuLi4nfWAgb3IgYHtuZXdWYWx1ZTogJy4uLicsIG1zZzogJy4uLid9YFxuXG4gICAgICAgIEBwcm9wZXJ0eSB2YWxpZGF0ZSBcbiAgICAgICAgQHR5cGUgZnVuY3Rpb25cbiAgICAgICAgQGRlZmF1bHQgbnVsbFxuICAgICAgICBAZXhhbXBsZVxuICAgICAgICB2YWxpZGF0ZTogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIGlmKCQudHJpbSh2YWx1ZSkgPT0gJycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1RoaXMgZmllbGQgaXMgcmVxdWlyZWQnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgICoqLyAgICAgICAgIFxuICAgICAgICB2YWxpZGF0ZTogbnVsbCxcbiAgICAgICAgLyoqXG4gICAgICAgIFN1Y2Nlc3MgY2FsbGJhY2suIENhbGxlZCB3aGVuIHZhbHVlIHN1Y2Nlc3NmdWxseSBzZW50IG9uIHNlcnZlciBhbmQgKipyZXNwb25zZSBzdGF0dXMgPSAyMDAqKi4gIFxuICAgICAgICBVc2VmdWxsIHRvIHdvcmsgd2l0aCBqc29uIHJlc3BvbnNlLiBGb3IgZXhhbXBsZSwgaWYgeW91ciBiYWNrZW5kIHJlc3BvbnNlIGNhbiBiZSA8Y29kZT57c3VjY2VzczogdHJ1ZX08L2NvZGU+XG4gICAgICAgIG9yIDxjb2RlPntzdWNjZXNzOiBmYWxzZSwgbXNnOiBcInNlcnZlciBlcnJvclwifTwvY29kZT4geW91IGNhbiBjaGVjayBpdCBpbnNpZGUgdGhpcyBjYWxsYmFjay4gIFxuICAgICAgICBJZiBpdCByZXR1cm5zICoqc3RyaW5nKiogLSBtZWFucyBlcnJvciBvY2N1cmVkIGFuZCBzdHJpbmcgaXMgc2hvd24gYXMgZXJyb3IgbWVzc2FnZS4gIFxuICAgICAgICBJZiBpdCByZXR1cm5zICoqb2JqZWN0IGxpa2UqKiA8Y29kZT57bmV3VmFsdWU6ICZsdDtzb21ldGhpbmcmZ3Q7fTwvY29kZT4gLSBpdCBvdmVyd3JpdGVzIHZhbHVlLCBzdWJtaXR0ZWQgYnkgdXNlci4gIFxuICAgICAgICBPdGhlcndpc2UgbmV3VmFsdWUgc2ltcGx5IHJlbmRlcmVkIGludG8gZWxlbWVudC5cbiAgICAgICAgXG4gICAgICAgIEBwcm9wZXJ0eSBzdWNjZXNzIFxuICAgICAgICBAdHlwZSBmdW5jdGlvblxuICAgICAgICBAZGVmYXVsdCBudWxsXG4gICAgICAgIEBleGFtcGxlXG4gICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKHJlc3BvbnNlLCBuZXdWYWx1ZSkge1xuICAgICAgICAgICAgaWYoIXJlc3BvbnNlLnN1Y2Nlc3MpIHJldHVybiByZXNwb25zZS5tc2c7XG4gICAgICAgIH1cbiAgICAgICAgKiovICAgICAgICAgIFxuICAgICAgICBzdWNjZXNzOiBudWxsLFxuICAgICAgICAvKipcbiAgICAgICAgRXJyb3IgY2FsbGJhY2suIENhbGxlZCB3aGVuIHJlcXVlc3QgZmFpbGVkIChyZXNwb25zZSBzdGF0dXMgIT0gMjAwKS4gIFxuICAgICAgICBVc2VmdWxsIHdoZW4geW91IHdhbnQgdG8gcGFyc2UgZXJyb3IgcmVzcG9uc2UgYW5kIGRpc3BsYXkgYSBjdXN0b20gbWVzc2FnZS5cbiAgICAgICAgTXVzdCByZXR1cm4gKipzdHJpbmcqKiAtIHRoZSBtZXNzYWdlIHRvIGJlIGRpc3BsYXllZCBpbiB0aGUgZXJyb3IgYmxvY2suXG4gICAgICAgICAgICAgICAgXG4gICAgICAgIEBwcm9wZXJ0eSBlcnJvciBcbiAgICAgICAgQHR5cGUgZnVuY3Rpb25cbiAgICAgICAgQGRlZmF1bHQgbnVsbFxuICAgICAgICBAc2luY2UgMS40LjRcbiAgICAgICAgQGV4YW1wbGVcbiAgICAgICAgZXJyb3I6IGZ1bmN0aW9uKHJlc3BvbnNlLCBuZXdWYWx1ZSkge1xuICAgICAgICAgICAgaWYocmVzcG9uc2Uuc3RhdHVzID09PSA1MDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1NlcnZpY2UgdW5hdmFpbGFibGUuIFBsZWFzZSB0cnkgbGF0ZXIuJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLnJlc3BvbnNlVGV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAqKi8gICAgICAgICAgXG4gICAgICAgIGVycm9yOiBudWxsLFxuICAgICAgICAvKipcbiAgICAgICAgQWRkaXRpb25hbCBvcHRpb25zIGZvciBzdWJtaXQgYWpheCByZXF1ZXN0LlxuICAgICAgICBMaXN0IG9mIHZhbHVlczogaHR0cDovL2FwaS5qcXVlcnkuY29tL2pRdWVyeS5hamF4XG4gICAgICAgIFxuICAgICAgICBAcHJvcGVydHkgYWpheE9wdGlvbnMgXG4gICAgICAgIEB0eXBlIG9iamVjdFxuICAgICAgICBAZGVmYXVsdCBudWxsXG4gICAgICAgIEBzaW5jZSAxLjEuMSAgICAgICAgXG4gICAgICAgIEBleGFtcGxlIFxuICAgICAgICBhamF4T3B0aW9uczoge1xuICAgICAgICAgICAgdHlwZTogJ3B1dCcsXG4gICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nXG4gICAgICAgIH0gICAgICAgIFxuICAgICAgICAqKi8gICAgICAgIFxuICAgICAgICBhamF4T3B0aW9uczogbnVsbCxcbiAgICAgICAgLyoqXG4gICAgICAgIFdoZXJlIHRvIHNob3cgYnV0dG9uczogbGVmdCh0cnVlKXxib3R0b218ZmFsc2UgIFxuICAgICAgICBGb3JtIHdpdGhvdXQgYnV0dG9ucyBpcyBhdXRvLXN1Ym1pdHRlZC5cblxuICAgICAgICBAcHJvcGVydHkgc2hvd2J1dHRvbnMgXG4gICAgICAgIEB0eXBlIGJvb2xlYW58c3RyaW5nXG4gICAgICAgIEBkZWZhdWx0IHRydWVcbiAgICAgICAgQHNpbmNlIDEuMS4xXG4gICAgICAgICoqLyAgICAgICAgIFxuICAgICAgICBzaG93YnV0dG9uczogdHJ1ZSxcbiAgICAgICAgLyoqXG4gICAgICAgIFNjb3BlIGZvciBjYWxsYmFjayBtZXRob2RzIChzdWNjZXNzLCB2YWxpZGF0ZSkuICBcbiAgICAgICAgSWYgPGNvZGU+bnVsbDwvY29kZT4gbWVhbnMgZWRpdGFibGVmb3JtIGluc3RhbmNlIGl0c2VsZi4gXG5cbiAgICAgICAgQHByb3BlcnR5IHNjb3BlIFxuICAgICAgICBAdHlwZSBET01FbGVtZW50fG9iamVjdFxuICAgICAgICBAZGVmYXVsdCBudWxsXG4gICAgICAgIEBzaW5jZSAxLjIuMFxuICAgICAgICBAcHJpdmF0ZVxuICAgICAgICAqKi8gICAgICAgICAgICBcbiAgICAgICAgc2NvcGU6IG51bGwsXG4gICAgICAgIC8qKlxuICAgICAgICBXaGV0aGVyIHRvIHNhdmUgb3IgY2FuY2VsIHZhbHVlIHdoZW4gaXQgd2FzIG5vdCBjaGFuZ2VkIGJ1dCBmb3JtIHdhcyBzdWJtaXR0ZWRcblxuICAgICAgICBAcHJvcGVydHkgc2F2ZW5vY2hhbmdlIFxuICAgICAgICBAdHlwZSBib29sZWFuXG4gICAgICAgIEBkZWZhdWx0IGZhbHNlXG4gICAgICAgIEBzaW5jZSAxLjIuMFxuICAgICAgICAqKi9cbiAgICAgICAgc2F2ZW5vY2hhbmdlOiBmYWxzZVxuICAgIH07ICAgXG5cbiAgICAvKlxuICAgIE5vdGU6IGZvbGxvd2luZyBwYXJhbXMgY291bGQgcmVkZWZpbmVkIGluIGVuZ2luZTogYm9vdHN0cmFwIG9yIGpxdWVyeXVpOlxuICAgIENsYXNzZXMgJ2NvbnRyb2wtZ3JvdXAnIGFuZCAnZWRpdGFibGUtZXJyb3ItYmxvY2snIG11c3QgYWx3YXlzIHByZXNlbnQhXG4gICAgKi8gICAgICBcbiAgICAkLmZuLmVkaXRhYmxlZm9ybS50ZW1wbGF0ZSA9ICc8Zm9ybSBjbGFzcz1cImZvcm0taW5saW5lIGVkaXRhYmxlZm9ybVwiPicrXG4gICAgJzxkaXYgY2xhc3M9XCJjb250cm9sLWdyb3VwXCI+JyArIFxuICAgICc8ZGl2PjxkaXYgY2xhc3M9XCJlZGl0YWJsZS1pbnB1dFwiPjwvZGl2PjxkaXYgY2xhc3M9XCJlZGl0YWJsZS1idXR0b25zXCI+PC9kaXY+PC9kaXY+JytcbiAgICAnPGRpdiBjbGFzcz1cImVkaXRhYmxlLWVycm9yLWJsb2NrXCI+PC9kaXY+JyArIFxuICAgICc8L2Rpdj4nICsgXG4gICAgJzwvZm9ybT4nO1xuXG4gICAgLy9sb2FkaW5nIGRpdlxuICAgICQuZm4uZWRpdGFibGVmb3JtLmxvYWRpbmcgPSAnPGRpdiBjbGFzcz1cImVkaXRhYmxlZm9ybS1sb2FkaW5nXCI+PC9kaXY+JztcblxuICAgIC8vYnV0dG9uc1xuICAgICQuZm4uZWRpdGFibGVmb3JtLmJ1dHRvbnMgPSAnPGJ1dHRvbiB0eXBlPVwic3VibWl0XCIgY2xhc3M9XCJlZGl0YWJsZS1zdWJtaXRcIj5vazwvYnV0dG9uPicrXG4gICAgJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiZWRpdGFibGUtY2FuY2VsXCI+Y2FuY2VsPC9idXR0b24+JzsgICAgICBcblxuICAgIC8vZXJyb3IgY2xhc3MgYXR0YWNoZWQgdG8gY29udHJvbC1ncm91cFxuICAgICQuZm4uZWRpdGFibGVmb3JtLmVycm9yR3JvdXBDbGFzcyA9IG51bGw7ICBcblxuICAgIC8vZXJyb3IgY2xhc3MgYXR0YWNoZWQgdG8gZWRpdGFibGUtZXJyb3ItYmxvY2tcbiAgICAkLmZuLmVkaXRhYmxlZm9ybS5lcnJvckJsb2NrQ2xhc3MgPSAnZWRpdGFibGUtZXJyb3InO1xuICAgIFxuICAgIC8vZW5naW5lXG4gICAgJC5mbi5lZGl0YWJsZWZvcm0uZW5naW5lID0gJ2pxdWVyeSc7XG59KHdpbmRvdy5qUXVlcnkpKTtcblxuLyoqXG4qIEVkaXRhYmxlRm9ybSB1dGlsaXRlc1xuKi9cbihmdW5jdGlvbiAoJCkge1xuXG4gICAgLy91dGlsc1xuICAgICQuZm4uZWRpdGFibGV1dGlscyA9IHtcbiAgICAgICAgLyoqXG4gICAgICAgICogY2xhc3NpYyBKUyBpbmhlcml0YW5jZSBmdW5jdGlvblxuICAgICAgICAqLyAgXG4gICAgICAgIGluaGVyaXQ6IGZ1bmN0aW9uIChDaGlsZCwgUGFyZW50KSB7XG4gICAgICAgICAgICB2YXIgRiA9IGZ1bmN0aW9uKCkgeyB9O1xuICAgICAgICAgICAgRi5wcm90b3R5cGUgPSBQYXJlbnQucHJvdG90eXBlO1xuICAgICAgICAgICAgQ2hpbGQucHJvdG90eXBlID0gbmV3IEYoKTtcbiAgICAgICAgICAgIENoaWxkLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IENoaWxkO1xuICAgICAgICAgICAgQ2hpbGQuc3VwZXJjbGFzcyA9IFBhcmVudC5wcm90b3R5cGU7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICogc2V0IGNhcmV0IHBvc2l0aW9uIGluIGlucHV0XG4gICAgICAgICogc2VlIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNDk5MTI2L2pxdWVyeS1zZXQtY3Vyc29yLXBvc2l0aW9uLWluLXRleHQtYXJlYVxuICAgICAgICAqLyAgICAgICAgXG4gICAgICAgIHNldEN1cnNvclBvc2l0aW9uOiBmdW5jdGlvbihlbGVtLCBwb3MpIHtcbiAgICAgICAgICAgIGlmIChlbGVtLnNldFNlbGVjdGlvblJhbmdlKSB7XG4gICAgICAgICAgICAgICAgZWxlbS5zZXRTZWxlY3Rpb25SYW5nZShwb3MsIHBvcyk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGVsZW0uY3JlYXRlVGV4dFJhbmdlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJhbmdlID0gZWxlbS5jcmVhdGVUZXh0UmFuZ2UoKTtcbiAgICAgICAgICAgICAgICByYW5nZS5jb2xsYXBzZSh0cnVlKTtcbiAgICAgICAgICAgICAgICByYW5nZS5tb3ZlRW5kKCdjaGFyYWN0ZXInLCBwb3MpO1xuICAgICAgICAgICAgICAgIHJhbmdlLm1vdmVTdGFydCgnY2hhcmFjdGVyJywgcG9zKTtcbiAgICAgICAgICAgICAgICByYW5nZS5zZWxlY3QoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgKiBmdW5jdGlvbiB0byBwYXJzZSBKU09OIGluICpzaW5nbGUqIHF1b3Rlcy4gKGpxdWVyeSBhdXRvbWF0aWNhbGx5IHBhcnNlIG9ubHkgZG91YmxlIHF1b3RlcylcbiAgICAgICAgKiBUaGF0IGFsbG93cyBzdWNoIGNvZGUgYXM6IDxhIGRhdGEtc291cmNlPVwieydhJzogJ2InLCAnYyc6ICdkJ31cIj5cbiAgICAgICAgKiBzYWZlID0gdHJ1ZSAtLT4gbWVhbnMgbm8gZXhjZXB0aW9uIHdpbGwgYmUgdGhyb3duXG4gICAgICAgICogZm9yIGRldGFpbHMgc2VlIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNzQxMDM0OC9ob3ctdG8tc2V0LWpzb24tZm9ybWF0LXRvLWh0bWw1LWRhdGEtYXR0cmlidXRlcy1pbi10aGUtanF1ZXJ5XG4gICAgICAgICovXG4gICAgICAgIHRyeVBhcnNlSnNvbjogZnVuY3Rpb24ocywgc2FmZSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBzID09PSAnc3RyaW5nJyAmJiBzLmxlbmd0aCAmJiBzLm1hdGNoKC9eW1xce1xcW10uKltcXH1cXF1dJC8pKSB7XG4gICAgICAgICAgICAgICAgaWYgKHNhZmUpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qanNsaW50IGV2aWw6IHRydWUqL1xuICAgICAgICAgICAgICAgICAgICAgICAgcyA9IChuZXcgRnVuY3Rpb24oJ3JldHVybiAnICsgcykpKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvKmpzbGludCBldmlsOiBmYWxzZSovXG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHM7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvKmpzbGludCBldmlsOiB0cnVlKi9cbiAgICAgICAgICAgICAgICAgICAgcyA9IChuZXcgRnVuY3Rpb24oJ3JldHVybiAnICsgcykpKCk7XG4gICAgICAgICAgICAgICAgICAgIC8qanNsaW50IGV2aWw6IGZhbHNlKi9cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcztcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgKiBzbGljZSBvYmplY3QgYnkgc3BlY2lmaWVkIGtleXNcbiAgICAgICAgKi9cbiAgICAgICAgc2xpY2VPYmo6IGZ1bmN0aW9uKG9iaiwga2V5cywgY2FzZVNlbnNpdGl2ZSAvKiBkZWZhdWx0OiBmYWxzZSAqLykge1xuICAgICAgICAgICAgdmFyIGtleSwga2V5TG93ZXIsIG5ld09iaiA9IHt9O1xuXG4gICAgICAgICAgICBpZiAoISQuaXNBcnJheShrZXlzKSB8fCAha2V5cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3T2JqO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgICAgICAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgICAgICAgICBuZXdPYmpba2V5XSA9IG9ialtrZXldO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmKGNhc2VTZW5zaXRpdmUgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy93aGVuIGdldHRpbmcgZGF0YS0qIGF0dHJpYnV0ZXMgdmlhICQuZGF0YSgpIGl0J3MgY29udmVydGVkIHRvIGxvd2VyY2FzZS5cbiAgICAgICAgICAgICAgICAvL2RldGFpbHM6IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNzYwMjU2NS91c2luZy1kYXRhLWF0dHJpYnV0ZXMtd2l0aC1qcXVlcnlcbiAgICAgICAgICAgICAgICAvL3dvcmthcm91bmQgaXMgY29kZSBiZWxvdy5cbiAgICAgICAgICAgICAgICBrZXlMb3dlciA9IGtleS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoa2V5TG93ZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgIG5ld09ialtrZXldID0gb2JqW2tleUxvd2VyXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBuZXdPYmo7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLypcbiAgICAgICAgZXhjbHVkZSBjb21wbGV4IG9iamVjdHMgZnJvbSAkLmRhdGEoKSBiZWZvcmUgcGFzcyB0byBjb25maWdcbiAgICAgICAgKi9cbiAgICAgICAgZ2V0Q29uZmlnRGF0YTogZnVuY3Rpb24oJGVsZW1lbnQpIHtcbiAgICAgICAgICAgIHZhciBkYXRhID0ge307XG4gICAgICAgICAgICAkLmVhY2goJGVsZW1lbnQuZGF0YSgpLCBmdW5jdGlvbihrLCB2KSB7XG4gICAgICAgICAgICAgICAgaWYodHlwZW9mIHYgIT09ICdvYmplY3QnIHx8ICh2ICYmIHR5cGVvZiB2ID09PSAnb2JqZWN0JyAmJiAodi5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0IHx8IHYuY29uc3RydWN0b3IgPT09IEFycmF5KSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YVtrXSA9IHY7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKlxuICAgICAgICAgcmV0dXJucyBrZXlzIG9mIG9iamVjdFxuICAgICAgICAqL1xuICAgICAgICBvYmplY3RLZXlzOiBmdW5jdGlvbihvKSB7XG4gICAgICAgICAgICBpZiAoT2JqZWN0LmtleXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gT2JqZWN0LmtleXMobyk7ICBcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKG8gIT09IE9iamVjdChvKSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3Qua2V5cyBjYWxsZWQgb24gYSBub24tb2JqZWN0Jyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBrPVtdLCBwO1xuICAgICAgICAgICAgICAgIGZvciAocCBpbiBvKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobyxwKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgay5wdXNoKHApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgIC8qKlxuICAgICAgICBtZXRob2QgdG8gZXNjYXBlIGh0bWwuXG4gICAgICAgKiovXG4gICAgICAgZXNjYXBlOiBmdW5jdGlvbihzdHIpIHtcbiAgICAgICAgICAgcmV0dXJuICQoJzxkaXY+JykudGV4dChzdHIpLmh0bWwoKTtcbiAgICAgICB9LFxuICAgICAgIFxuICAgICAgIC8qXG4gICAgICAgIHJldHVybnMgYXJyYXkgaXRlbXMgZnJvbSBzb3VyY2VEYXRhIGhhdmluZyB2YWx1ZSBwcm9wZXJ0eSBlcXVhbCBvciBpbkFycmF5IG9mICd2YWx1ZSdcbiAgICAgICAqL1xuICAgICAgIGl0ZW1zQnlWYWx1ZTogZnVuY3Rpb24odmFsdWUsIHNvdXJjZURhdGEsIHZhbHVlUHJvcCkge1xuICAgICAgICAgICBpZighc291cmNlRGF0YSB8fCB2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICAgICB9XG4gICAgICAgICAgIFxuICAgICAgICAgICBpZiAodHlwZW9mKHZhbHVlUHJvcCkgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgdmFyIGlkS2V5ID0gdmFsdWVQcm9wIHx8ICd2YWx1ZSc7XG4gICAgICAgICAgICAgICB2YWx1ZVByb3AgPSBmdW5jdGlvbiAoZSkgeyByZXR1cm4gZVtpZEtleV07IH07XG4gICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgdmFyIGlzVmFsQXJyYXkgPSAkLmlzQXJyYXkodmFsdWUpLFxuICAgICAgICAgICByZXN1bHQgPSBbXSwgXG4gICAgICAgICAgIHRoYXQgPSB0aGlzO1xuXG4gICAgICAgICAgICQuZWFjaChzb3VyY2VEYXRhLCBmdW5jdGlvbihpLCBvKSB7XG4gICAgICAgICAgICAgICBpZihvLmNoaWxkcmVuKSB7XG4gICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0LmNvbmNhdCh0aGF0Lml0ZW1zQnlWYWx1ZSh2YWx1ZSwgby5jaGlsZHJlbiwgdmFsdWVQcm9wKSk7XG4gICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgIC8qanNsaW50IGVxZXE6IHRydWUqL1xuICAgICAgICAgICAgICAgICAgIGlmKGlzVmFsQXJyYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgaWYoJC5ncmVwKHZhbHVlLCBmdW5jdGlvbih2KXsgIHJldHVybiB2ID09IChvICYmIHR5cGVvZiBvID09PSAnb2JqZWN0JyA/IHZhbHVlUHJvcChvKSA6IG8pOyB9KS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKG8pOyBcbiAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgIHZhciBpdGVtVmFsdWUgPSAobyAmJiAodHlwZW9mIG8gPT09ICdvYmplY3QnKSkgPyB2YWx1ZVByb3AobykgOiBvO1xuICAgICAgICAgICAgICAgICAgICAgICBpZih2YWx1ZSA9PSBpdGVtVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKG8pOyBcbiAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAvKmpzbGludCBlcWVxOiBmYWxzZSovXG4gICAgICAgICAgICAgICB9XG4gICAgICAgICAgIH0pO1xuICAgICAgICAgICBcbiAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICB9LFxuICAgICAgIFxuICAgICAgIC8qXG4gICAgICAgUmV0dXJucyBpbnB1dCBieSBvcHRpb25zOiB0eXBlLCBtb2RlLiBcbiAgICAgICAqL1xuICAgICAgIGNyZWF0ZUlucHV0OiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICAgICAgIHZhciBUeXBlQ29uc3RydWN0b3IsIHR5cGVPcHRpb25zLCBpbnB1dCxcbiAgICAgICAgICAgdHlwZSA9IG9wdGlvbnMudHlwZTtcblxuICAgICAgICAgICAvL2BkYXRlYCBpcyBzb21lIGtpbmQgb2YgdmlydHVhbCB0eXBlIHRoYXQgaXMgdHJhbnNmb3JtZWQgdG8gb25lIG9mIGV4YWN0IHR5cGVzXG4gICAgICAgICAgIC8vZGVwZW5kaW5nIG9uIG1vZGUgYW5kIGNvcmUgbGliXG4gICAgICAgICAgIGlmKHR5cGUgPT09ICdkYXRlJykge1xuICAgICAgICAgICAgICAgLy9pbmxpbmVcbiAgICAgICAgICAgICAgIGlmKG9wdGlvbnMubW9kZSA9PT0gJ2lubGluZScpIHtcbiAgICAgICAgICAgICAgICAgICBpZigkLmZuLmVkaXRhYmxldHlwZXMuZGF0ZWZpZWxkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgIHR5cGUgPSAnZGF0ZWZpZWxkJztcbiAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYoJC5mbi5lZGl0YWJsZXR5cGVzLmRhdGV1aWZpZWxkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgIHR5cGUgPSAnZGF0ZXVpZmllbGQnO1xuICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgIC8vcG9wdXBcbiAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgaWYoJC5mbi5lZGl0YWJsZXR5cGVzLmRhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgdHlwZSA9ICdkYXRlJztcbiAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYoJC5mbi5lZGl0YWJsZXR5cGVzLmRhdGV1aSkge1xuICAgICAgICAgICAgICAgICAgICAgICB0eXBlID0gJ2RhdGV1aSc7XG4gICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAvL2lmIHR5cGUgc3RpbGwgYGRhdGVgIGFuZCBub3QgZXhpc3QgaW4gdHlwZXMsIHJlcGxhY2Ugd2l0aCBgY29tYm9kYXRlYCB0aGF0IGlzIGJhc2UgaW5wdXRcbiAgICAgICAgICAgICAgIGlmKHR5cGUgPT09ICdkYXRlJyAmJiAhJC5mbi5lZGl0YWJsZXR5cGVzLmRhdGUpIHtcbiAgICAgICAgICAgICAgICAgICB0eXBlID0gJ2NvbWJvZGF0ZSc7XG4gICAgICAgICAgICAgICB9IFxuICAgICAgICAgICB9XG4gICAgICAgICAgIFxuICAgICAgICAgICAvL2BkYXRldGltZWAgc2hvdWxkIGJlIGRhdGV0aW1lZmllbGQgaW4gJ2lubGluZScgbW9kZVxuICAgICAgICAgICBpZih0eXBlID09PSAnZGF0ZXRpbWUnICYmIG9wdGlvbnMubW9kZSA9PT0gJ2lubGluZScpIHtcbiAgICAgICAgICAgICB0eXBlID0gJ2RhdGV0aW1lZmllbGQnOyAgXG4gICAgICAgICAgIH0gICAgICAgICAgIFxuXG4gICAgICAgICAgIC8vY2hhbmdlIHd5c2lodG1sNSB0byB0ZXh0YXJlYSBmb3IganF1ZXJ5IFVJIGFuZCBwbGFpbiB2ZXJzaW9uc1xuICAgICAgICAgICBpZih0eXBlID09PSAnd3lzaWh0bWw1JyAmJiAhJC5mbi5lZGl0YWJsZXR5cGVzW3R5cGVdKSB7XG4gICAgICAgICAgICAgICB0eXBlID0gJ3RleHRhcmVhJztcbiAgICAgICAgICAgfVxuXG4gICAgICAgICAgIC8vY3JlYXRlIGlucHV0IG9mIHNwZWNpZmllZCB0eXBlLiBJbnB1dCB3aWxsIGJlIHVzZWQgZm9yIGNvbnZlcnRpbmcgdmFsdWUsIG5vdCBpbiBmb3JtXG4gICAgICAgICAgIGlmKHR5cGVvZiAkLmZuLmVkaXRhYmxldHlwZXNbdHlwZV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgIFR5cGVDb25zdHJ1Y3RvciA9ICQuZm4uZWRpdGFibGV0eXBlc1t0eXBlXTtcbiAgICAgICAgICAgICAgIHR5cGVPcHRpb25zID0gdGhpcy5zbGljZU9iaihvcHRpb25zLCB0aGlzLm9iamVjdEtleXMoVHlwZUNvbnN0cnVjdG9yLmRlZmF1bHRzKSk7XG4gICAgICAgICAgICAgICBpbnB1dCA9IG5ldyBUeXBlQ29uc3RydWN0b3IodHlwZU9wdGlvbnMpO1xuICAgICAgICAgICAgICAgcmV0dXJuIGlucHV0O1xuICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgJC5lcnJvcignVW5rbm93biB0eXBlOiAnKyB0eXBlKTtcbiAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsgXG4gICAgICAgICAgIH0gIFxuICAgICAgIH0sXG4gICAgICAgXG4gICAgICAgLy9zZWUgaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy83MjY0ODk5L2RldGVjdC1jc3MtdHJhbnNpdGlvbnMtdXNpbmctamF2YXNjcmlwdC1hbmQtd2l0aG91dC1tb2Rlcm5penJcbiAgICAgICBzdXBwb3J0c1RyYW5zaXRpb25zOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgIHZhciBiID0gZG9jdW1lbnQuYm9keSB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsXG4gICAgICAgICAgICAgICBzID0gYi5zdHlsZSxcbiAgICAgICAgICAgICAgIHAgPSAndHJhbnNpdGlvbicsXG4gICAgICAgICAgICAgICB2ID0gWydNb3onLCAnV2Via2l0JywgJ0todG1sJywgJ08nLCAnbXMnXTtcbiAgICAgICAgICAgICAgIFxuICAgICAgICAgICBpZih0eXBlb2Ygc1twXSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgIHJldHVybiB0cnVlOyBcbiAgICAgICAgICAgfVxuXG4gICAgICAgICAgIC8vIFRlc3RzIGZvciB2ZW5kb3Igc3BlY2lmaWMgcHJvcFxuICAgICAgICAgICBwID0gcC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHAuc3Vic3RyKDEpO1xuICAgICAgICAgICBmb3IodmFyIGk9MDsgaTx2Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICBpZih0eXBlb2Ygc1t2W2ldICsgcF0gPT09ICdzdHJpbmcnKSB7IFxuICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOyBcbiAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgfVxuICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgfSAgICAgICAgICAgIFxuICAgICAgIFxuICAgIH07ICAgICAgXG59KHdpbmRvdy5qUXVlcnkpKTtcblxuLyoqXG5BdHRhY2hlcyBzdGFuZC1hbG9uZSBjb250YWluZXIgd2l0aCBlZGl0YWJsZS1mb3JtIHRvIEhUTUwgZWxlbWVudC4gRWxlbWVudCBpcyB1c2VkIG9ubHkgZm9yIHBvc2l0aW9uaW5nLCB2YWx1ZSBpcyBub3Qgc3RvcmVkIGFueXdoZXJlLjxicj5cblRoaXMgbWV0aG9kIGFwcGxpZWQgaW50ZXJuYWxseSBpbiA8Y29kZT4kKCkuZWRpdGFibGUoKTwvY29kZT4uIFlvdSBzaG91bGQgc3Vic2NyaWJlIG9uIGl0J3MgZXZlbnRzIChzYXZlIC8gY2FuY2VsKSB0byBnZXQgcHJvZml0IG9mIGl0Ljxicj5cbkZpbmFsIHJlYWxpemF0aW9uIGNhbiBiZSBkaWZmZXJlbnQ6IGJvb3RzdHJhcC1wb3BvdmVyLCBqcXVlcnl1aS10b29sdGlwLCBwb3NoeXRpcCwgaW5saW5lLWRpdi4gSXQgZGVwZW5kcyBvbiB3aGljaCBqcyBmaWxlIHlvdSBpbmNsdWRlLjxicj5cbkFwcGxpZWQgYXMgalF1ZXJ5IG1ldGhvZC5cblxuQGNsYXNzIGVkaXRhYmxlQ29udGFpbmVyXG5AdXNlcyBlZGl0YWJsZWZvcm1cbioqL1xuKGZ1bmN0aW9uICgkKSB7XG5cbiAgICB2YXIgUG9wdXAgPSBmdW5jdGlvbiAoZWxlbWVudCwgb3B0aW9ucykge1xuICAgICAgICB0aGlzLmluaXQoZWxlbWVudCwgb3B0aW9ucyk7XG4gICAgfTtcbiAgICBcbiAgICB2YXIgSW5saW5lID0gZnVuY3Rpb24gKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5pbml0KGVsZW1lbnQsIG9wdGlvbnMpO1xuICAgIH07ICAgIFxuXG4gICAgLy9tZXRob2RzXG4gICAgUG9wdXAucHJvdG90eXBlID0ge1xuICAgICAgICBjb250YWluZXJOYW1lOiBudWxsLCAvL21ldGhvZCB0byBjYWxsIGNvbnRhaW5lciBvbiBlbGVtZW50XG4gICAgICAgIGNvbnRhaW5lckRhdGFOYW1lOiBudWxsLCAvL29iamVjdCBuYW1lIGluIGVsZW1lbnQncyAuZGF0YSgpXG4gICAgICAgIGlubmVyQ3NzOiBudWxsLCAvL3RiZCBpbiBjaGlsZCBjbGFzc1xuICAgICAgICBjb250YWluZXJDbGFzczogJ2VkaXRhYmxlLWNvbnRhaW5lciBlZGl0YWJsZS1wb3B1cCcsIC8vY3NzIGNsYXNzIGFwcGxpZWQgdG8gY29udGFpbmVyIGVsZW1lbnRcbiAgICAgICAgZGVmYXVsdHM6IHt9LCAvL2NvbnRhaW5lciBpdHNlbGYgZGVmYXVsdHNcbiAgICAgICAgXG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHRoaXMuJGVsZW1lbnQgPSAkKGVsZW1lbnQpO1xuICAgICAgICAgICAgLy9zaW5jZSAxLjQuMSBjb250YWluZXIgZG8gbm90IHVzZSBkYXRhLSogZGlyZWN0bHkgYXMgdGhleSBhbHJlYWR5IG1lcmdlZCBpbnRvIG9wdGlvbnMuXG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgJC5mbi5lZGl0YWJsZUNvbnRhaW5lci5kZWZhdWx0cywgb3B0aW9ucyk7ICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLnNwbGl0T3B0aW9ucygpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvL3NldCBzY29wZSBvZiBmb3JtIGNhbGxiYWNrcyB0byBlbGVtZW50XG4gICAgICAgICAgICB0aGlzLmZvcm1PcHRpb25zLnNjb3BlID0gdGhpcy4kZWxlbWVudFswXTsgXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuaW5pdENvbnRhaW5lcigpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvL2ZsYWcgdG8gaGlkZSBjb250YWluZXIsIHdoZW4gc2F2aW5nIHZhbHVlIHdpbGwgZmluaXNoXG4gICAgICAgICAgICB0aGlzLmRlbGF5ZWRIaWRlID0gZmFsc2U7XG5cbiAgICAgICAgICAgIC8vYmluZCAnZGVzdHJveWVkJyBsaXN0ZW5lciB0byBkZXN0cm95IGNvbnRhaW5lciB3aGVuIGVsZW1lbnQgaXMgcmVtb3ZlZCBmcm9tIGRvbVxuICAgICAgICAgICAgdGhpcy4kZWxlbWVudC5vbignZGVzdHJveWVkJywgJC5wcm94eShmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIHRoaXMuZGVzdHJveSgpO1xuICAgICAgICAgICAgfSwgdGhpcykpOyBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy9hdHRhY2ggZG9jdW1lbnQgaGFuZGxlciB0byBjbG9zZSBjb250YWluZXJzIG9uIGNsaWNrIC8gZXNjYXBlXG4gICAgICAgICAgICBpZighJChkb2N1bWVudCkuZGF0YSgnZWRpdGFibGUtaGFuZGxlcnMtYXR0YWNoZWQnKSkge1xuICAgICAgICAgICAgICAgIC8vY2xvc2UgYWxsIG9uIGVzY2FwZVxuICAgICAgICAgICAgICAgICQoZG9jdW1lbnQpLm9uKCdrZXl1cC5lZGl0YWJsZScsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlLndoaWNoID09PSAyNykge1xuICAgICAgICAgICAgICAgICAgICAgICAgJCgnLmVkaXRhYmxlLW9wZW4nKS5lZGl0YWJsZUNvbnRhaW5lcignaGlkZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy90b2RvOiByZXR1cm4gZm9jdXMgb24gZWxlbWVudCBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgLy9jbG9zZSBjb250YWluZXJzIHdoZW4gY2xpY2sgb3V0c2lkZSBcbiAgICAgICAgICAgICAgICAvLyhtb3VzZWRvd24gY291bGQgYmUgYmV0dGVyIHRoYW4gY2xpY2ssIGl0IGNsb3NlcyBldmVyeXRoaW5nIGFsc28gb24gZHJhZyBkcm9wKVxuICAgICAgICAgICAgICAgICQoZG9jdW1lbnQpLm9uKCdjbGljay5lZGl0YWJsZScsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyICR0YXJnZXQgPSAkKGUudGFyZ2V0KSwgaSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2x1ZGVfY2xhc3NlcyA9IFsnLmVkaXRhYmxlLWNvbnRhaW5lcicsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcudWktZGF0ZXBpY2tlci1oZWFkZXInLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnLmRhdGVwaWNrZXInLCAvL2luIGlubGluZSBtb2RlIGRhdGVwaWNrZXIgaXMgcmVuZGVyZWQgaW50byBib2R5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJy5tb2RhbC1iYWNrZHJvcCcsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcuYm9vdHN0cmFwLXd5c2lodG1sNS1pbnNlcnQtaW1hZ2UtbW9kYWwnLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnLmJvb3RzdHJhcC13eXNpaHRtbDUtaW5zZXJ0LWxpbmstbW9kYWwnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIC8vY2hlY2sgaWYgZWxlbWVudCBpcyBkZXRhY2hlZC4gSXQgb2NjdXJzIHdoZW4gY2xpY2tpbmcgaW4gYm9vdHN0cmFwIGRhdGVwaWNrZXJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEkLmNvbnRhaW5zKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCwgZS50YXJnZXQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy9mb3Igc29tZSByZWFzb24gRkYgMjAgZ2VuZXJhdGVzIGV4dHJhIGV2ZW50IChjbGljaykgaW4gc2VsZWN0MiB3aWRnZXQgd2l0aCBlLnRhcmdldCA9IGRvY3VtZW50XG4gICAgICAgICAgICAgICAgICAgIC8vd2UgbmVlZCB0byBmaWx0ZXIgaXQgdmlhIGNvbnN0cnVjdGlvbiBiZWxvdy4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS92aXRhbGV0cy94LWVkaXRhYmxlL2lzc3Vlcy8xOTlcbiAgICAgICAgICAgICAgICAgICAgLy9Qb3NzaWJseSByZWxhdGVkIHRvIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTAxMTk3OTMvd2h5LWRvZXMtZmlyZWZveC1yZWFjdC1kaWZmZXJlbnRseS1mcm9tLXdlYmtpdC1hbmQtaWUtdG8tY2xpY2stZXZlbnQtb24tc2VsZWNcbiAgICAgICAgICAgICAgICAgICAgaWYoJHRhcmdldC5pcyhkb2N1bWVudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOyBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgLy9pZiBjbGljayBpbnNpZGUgb25lIG9mIGV4Y2x1ZGUgY2xhc3NlcyAtLT4gbm8gbm90aGluZ1xuICAgICAgICAgICAgICAgICAgICBmb3IoaT0wOyBpPGV4Y2x1ZGVfY2xhc3Nlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCR0YXJnZXQuaXMoZXhjbHVkZV9jbGFzc2VzW2ldKSB8fCAkdGFyZ2V0LnBhcmVudHMoZXhjbHVkZV9jbGFzc2VzW2ldKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAvL2Nsb3NlIGFsbCBvcGVuIGNvbnRhaW5lcnMgKGV4Y2VwdCBvbmUgLSB0YXJnZXQpXG4gICAgICAgICAgICAgICAgICAgIFBvcHVwLnByb3RvdHlwZS5jbG9zZU90aGVycyhlLnRhcmdldCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgJChkb2N1bWVudCkuZGF0YSgnZWRpdGFibGUtaGFuZGxlcnMtYXR0YWNoZWQnLCB0cnVlKTtcbiAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgfSxcblxuICAgICAgICAvL3NwbGl0IG9wdGlvbnMgb24gY29udGFpbmVyT3B0aW9ucyBhbmQgZm9ybU9wdGlvbnNcbiAgICAgICAgc3BsaXRPcHRpb25zOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuY29udGFpbmVyT3B0aW9ucyA9IHt9O1xuICAgICAgICAgICAgdGhpcy5mb3JtT3B0aW9ucyA9IHt9O1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZighJC5mblt0aGlzLmNvbnRhaW5lck5hbWVdKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHRoaXMuY29udGFpbmVyTmFtZSArICcgbm90IGZvdW5kLiBIYXZlIHlvdSBpbmNsdWRlZCBjb3JyZXNwb25kaW5nIGpzIGZpbGU/Jyk7ICAgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8va2V5cyBkZWZpbmVkIGluIGNvbnRhaW5lciBkZWZhdWx0cyBnbyB0byBjb250YWluZXIsIG90aGVycyBnbyB0byBmb3JtXG4gICAgICAgICAgICBmb3IodmFyIGsgaW4gdGhpcy5vcHRpb25zKSB7XG4gICAgICAgICAgICAgIGlmKGsgaW4gdGhpcy5kZWZhdWx0cykge1xuICAgICAgICAgICAgICAgICB0aGlzLmNvbnRhaW5lck9wdGlvbnNba10gPSB0aGlzLm9wdGlvbnNba107XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgIHRoaXMuZm9ybU9wdGlvbnNba10gPSB0aGlzLm9wdGlvbnNba107XG4gICAgICAgICAgICAgIH0gXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICAvKlxuICAgICAgICBSZXR1cm5zIGpxdWVyeSBvYmplY3Qgb2YgY29udGFpbmVyXG4gICAgICAgIEBtZXRob2QgdGlwKClcbiAgICAgICAgKi8gICAgICAgICBcbiAgICAgICAgdGlwOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnRhaW5lcigpID8gdGhpcy5jb250YWluZXIoKS4kdGlwIDogbnVsbDtcbiAgICAgICAgfSxcblxuICAgICAgICAvKiByZXR1cm5zIGNvbnRhaW5lciBvYmplY3QgKi9cbiAgICAgICAgY29udGFpbmVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBjb250YWluZXI7XG4gICAgICAgICAgICAvL2ZpcnN0LCB0cnkgZ2V0IGl0IGJ5IGBjb250YWluZXJEYXRhTmFtZWBcbiAgICAgICAgICAgIGlmKHRoaXMuY29udGFpbmVyRGF0YU5hbWUpIHtcbiAgICAgICAgICAgICAgICBpZihjb250YWluZXIgPSB0aGlzLiRlbGVtZW50LmRhdGEodGhpcy5jb250YWluZXJEYXRhTmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRhaW5lcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvL3NlY29uZCwgdHJ5IGBjb250YWluZXJOYW1lYFxuICAgICAgICAgICAgY29udGFpbmVyID0gdGhpcy4kZWxlbWVudC5kYXRhKHRoaXMuY29udGFpbmVyTmFtZSk7XG4gICAgICAgICAgICByZXR1cm4gY29udGFpbmVyO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qIGNhbGwgbmF0aXZlIG1ldGhvZCBvZiB1bmRlcmx5aW5nIGNvbnRhaW5lciwgZS5nLiB0aGlzLiRlbGVtZW50LnBvcG92ZXIoJ21ldGhvZCcpICovIFxuICAgICAgICBjYWxsOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuJGVsZW1lbnRbdGhpcy5jb250YWluZXJOYW1lXS5hcHBseSh0aGlzLiRlbGVtZW50LCBhcmd1bWVudHMpOyBcbiAgICAgICAgfSwgICAgICAgIFxuICAgICAgICBcbiAgICAgICAgaW5pdENvbnRhaW5lcjogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIHRoaXMuY2FsbCh0aGlzLmNvbnRhaW5lck9wdGlvbnMpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlbmRlckZvcm06IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy4kZm9ybVxuICAgICAgICAgICAgLmVkaXRhYmxlZm9ybSh0aGlzLmZvcm1PcHRpb25zKVxuICAgICAgICAgICAgLm9uKHtcbiAgICAgICAgICAgICAgICBzYXZlOiAkLnByb3h5KHRoaXMuc2F2ZSwgdGhpcyksIC8vY2xpY2sgb24gc3VibWl0IGJ1dHRvbiAodmFsdWUgY2hhbmdlZClcbiAgICAgICAgICAgICAgICBub2NoYW5nZTogJC5wcm94eShmdW5jdGlvbigpeyB0aGlzLmhpZGUoJ25vY2hhbmdlJyk7IH0sIHRoaXMpLCAvL2NsaWNrIG9uIHN1Ym1pdCBidXR0b24gKHZhbHVlIE5PVCBjaGFuZ2VkKSAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBjYW5jZWw6ICQucHJveHkoZnVuY3Rpb24oKXsgdGhpcy5oaWRlKCdjYW5jZWwnKTsgfSwgdGhpcyksIC8vY2xpY2sgb24gY2FsY2VsIGJ1dHRvblxuICAgICAgICAgICAgICAgIHNob3c6ICQucHJveHkoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmKHRoaXMuZGVsYXllZEhpZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaGlkZSh0aGlzLmRlbGF5ZWRIaWRlLnJlYXNvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRlbGF5ZWRIaWRlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFBvc2l0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LCB0aGlzKSwgLy9yZS1wb3NpdGlvbiBjb250YWluZXIgZXZlcnkgdGltZSBmb3JtIGlzIHNob3duIChvY2N1cnMgZWFjaCB0aW1lIGFmdGVyIGxvYWRpbmcgc3RhdGUpXG4gICAgICAgICAgICAgICAgcmVuZGVyaW5nOiAkLnByb3h5KHRoaXMuc2V0UG9zaXRpb24sIHRoaXMpLCAvL3RoaXMgYWxsb3dzIHRvIHBsYWNlIGNvbnRhaW5lciBjb3JyZWN0bHkgd2hlbiBsb2FkaW5nIHNob3duXG4gICAgICAgICAgICAgICAgcmVzaXplOiAkLnByb3h5KHRoaXMuc2V0UG9zaXRpb24sIHRoaXMpLCAvL3RoaXMgYWxsb3dzIHRvIHJlLXBvc2l0aW9uIGNvbnRhaW5lciB3aGVuIGZvcm0gc2l6ZSBpcyBjaGFuZ2VkIFxuICAgICAgICAgICAgICAgIHJlbmRlcmVkOiAkLnByb3h5KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgIC8qKiAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIEZpcmVkIHdoZW4gY29udGFpbmVyIGlzIHNob3duIGFuZCBmb3JtIGlzIHJlbmRlcmVkIChmb3Igc2VsZWN0IHdpbGwgd2FpdCBmb3IgbG9hZGluZyBkcm9wZG93biBvcHRpb25zKS4gIFxuICAgICAgICAgICAgICAgICAgICAqKk5vdGU6KiogQm9vdHN0cmFwIHBvcG92ZXIgaGFzIG93biBgc2hvd25gIGV2ZW50IHRoYXQgbm93IGNhbm5vdCBiZSBzZXBhcmF0ZWQgZnJvbSB4LWVkaXRhYmxlJ3Mgb25lLlxuICAgICAgICAgICAgICAgICAgICBUaGUgd29ya2Fyb3VuZCBpcyB0byBjaGVjayBgYXJndW1lbnRzLmxlbmd0aGAgdGhhdCBpcyBhbHdheXMgYDJgIGZvciB4LWVkaXRhYmxlLiAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgQGV2ZW50IHNob3duIFxuICAgICAgICAgICAgICAgICAgICBAcGFyYW0ge09iamVjdH0gZXZlbnQgZXZlbnQgb2JqZWN0XG4gICAgICAgICAgICAgICAgICAgIEBleGFtcGxlXG4gICAgICAgICAgICAgICAgICAgICQoJyN1c2VybmFtZScpLm9uKCdzaG93bicsIGZ1bmN0aW9uKGUsIGVkaXRhYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlZGl0YWJsZS5pbnB1dC4kaW5wdXQudmFsKCdvdmVyd3JpdGluZyB2YWx1ZSBvZiBpbnB1dC4uJyk7XG4gICAgICAgICAgICAgICAgICAgIH0pOyAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAqKi8gICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAgICAgICBUT0RPOiBhZGRlZCBzZWNvbmQgcGFyYW0gbWFpbmx5IHRvIGRpc3Rpbmd1aXNoIGZyb20gYm9vdHN0cmFwJ3Mgc2hvd24gZXZlbnQuIEl0J3MgYSBob3RmaXggdGhhdCB3aWxsIGJlIHNvbHZlZCBpbiBmdXR1cmUgdmVyc2lvbnMgdmlhIG5hbWVzcGFjZWQgZXZlbnRzLiAgXG4gICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlckhhbmRsZXIoJ3Nob3duJywgJCh0aGlzLm9wdGlvbnMuc2NvcGUpLmRhdGEoJ2VkaXRhYmxlJykpOyBcbiAgICAgICAgICAgICAgICB9LCB0aGlzKSBcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuZWRpdGFibGVmb3JtKCdyZW5kZXInKTtcbiAgICAgICAgfSwgICAgICAgIFxuXG4gICAgICAgIC8qKlxuICAgICAgICBTaG93cyBjb250YWluZXIgd2l0aCBmb3JtXG4gICAgICAgIEBtZXRob2Qgc2hvdygpXG4gICAgICAgIEBwYXJhbSB7Ym9vbGVhbn0gY2xvc2VBbGwgV2hldGhlciB0byBjbG9zZSBhbGwgb3RoZXIgZWRpdGFibGUgY29udGFpbmVycyB3aGVuIHNob3dpbmcgdGhpcyBvbmUuIERlZmF1bHQgdHJ1ZS5cbiAgICAgICAgKiovXG4gICAgICAgIC8qIE5vdGU6IHBvc2h5dGlwIG93ZXJ3cml0ZXMgdGhpcyBtZXRob2QgdG90YWxseSEgKi8gICAgICAgICAgXG4gICAgICAgIHNob3c6IGZ1bmN0aW9uIChjbG9zZUFsbCkge1xuICAgICAgICAgICAgdGhpcy4kZWxlbWVudC5hZGRDbGFzcygnZWRpdGFibGUtb3BlbicpO1xuICAgICAgICAgICAgaWYoY2xvc2VBbGwgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgLy9jbG9zZSBhbGwgb3BlbiBjb250YWluZXJzIChleGNlcHQgdGhpcylcbiAgICAgICAgICAgICAgICB0aGlzLmNsb3NlT3RoZXJzKHRoaXMuJGVsZW1lbnRbMF0pOyAgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vc2hvdyBjb250YWluZXIgaXRzZWxmXG4gICAgICAgICAgICB0aGlzLmlubmVyU2hvdygpO1xuICAgICAgICAgICAgdGhpcy50aXAoKS5hZGRDbGFzcyh0aGlzLmNvbnRhaW5lckNsYXNzKTtcblxuICAgICAgICAgICAgLypcbiAgICAgICAgICAgIEN1cnJlbnRseSwgZm9ybSBpcyByZS1yZW5kZXJlZCBvbiBldmVyeSBzaG93LiBcbiAgICAgICAgICAgIFRoZSBtYWluIHJlYXNvbiBpcyB0aGF0IHdlIGRvbnQga25vdywgd2hhdCB3aWxsIGNvbnRhaW5lciBkbyB3aXRoIGNvbnRlbnQgd2hlbiBjbG9zZWQ6XG4gICAgICAgICAgICByZW1vdmUoKSwgZGV0YWNoKCkgb3IganVzdCBoaWRlKCkgLSBpdCBkZXBlbmRzIG9uIGNvbnRhaW5lci5cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgRGV0YWNoaW5nIGZvcm0gaXRzZWxmIGJlZm9yZSBoaWRlIGFuZCByZS1pbnNlcnQgYmVmb3JlIHNob3cgaXMgZ29vZCBzb2x1dGlvbiwgXG4gICAgICAgICAgICBidXQgdmlzdWFsbHkgaXQgbG9va3MgdWdseSAtLT4gY29udGFpbmVyIGNoYW5nZXMgc2l6ZSBiZWZvcmUgaGlkZS4gIFxuICAgICAgICAgICAgKi8gICAgICAgICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vaWYgZm9ybSBhbHJlYWR5IGV4aXN0IC0gZGVsZXRlIHByZXZpb3VzIGRhdGEgXG4gICAgICAgICAgICBpZih0aGlzLiRmb3JtKSB7XG4gICAgICAgICAgICAgICAgLy90b2RvOiBkZXN0cm95IHByZXYgZGF0YSFcbiAgICAgICAgICAgICAgICAvL3RoaXMuJGZvcm0uZGVzdHJveSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLiRmb3JtID0gJCgnPGRpdj4nKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy9pbnNlcnQgZm9ybSBpbnRvIGNvbnRhaW5lciBib2R5XG4gICAgICAgICAgICBpZih0aGlzLnRpcCgpLmlzKHRoaXMuaW5uZXJDc3MpKSB7XG4gICAgICAgICAgICAgICAgLy9mb3IgaW5saW5lIGNvbnRhaW5lclxuICAgICAgICAgICAgICAgIHRoaXMudGlwKCkuYXBwZW5kKHRoaXMuJGZvcm0pOyBcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy50aXAoKS5maW5kKHRoaXMuaW5uZXJDc3MpLmFwcGVuZCh0aGlzLiRmb3JtKTtcbiAgICAgICAgICAgIH0gXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vcmVuZGVyIGZvcm1cbiAgICAgICAgICAgIHRoaXMucmVuZGVyRm9ybSgpO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICBIaWRlcyBjb250YWluZXIgd2l0aCBmb3JtXG4gICAgICAgIEBtZXRob2QgaGlkZSgpXG4gICAgICAgIEBwYXJhbSB7c3RyaW5nfSByZWFzb24gUmVhc29uIGNhdXNlZCBoaWRpbmcuIENhbiBiZSA8Y29kZT5zYXZlfGNhbmNlbHxvbmJsdXJ8bm9jaGFuZ2V8dW5kZWZpbmVkICg9bWFudWFsKTwvY29kZT5cbiAgICAgICAgKiovICAgICAgICAgXG4gICAgICAgIGhpZGU6IGZ1bmN0aW9uKHJlYXNvbikgeyAgXG4gICAgICAgICAgICBpZighdGhpcy50aXAoKSB8fCAhdGhpcy50aXAoKS5pcygnOnZpc2libGUnKSB8fCAhdGhpcy4kZWxlbWVudC5oYXNDbGFzcygnZWRpdGFibGUtb3BlbicpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvL2lmIGZvcm0gaXMgc2F2aW5nIHZhbHVlLCBzY2hlZHVsZSBoaWRlXG4gICAgICAgICAgICBpZih0aGlzLiRmb3JtLmRhdGEoJ2VkaXRhYmxlZm9ybScpLmlzU2F2aW5nKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kZWxheWVkSGlkZSA9IHtyZWFzb246IHJlYXNvbn07XG4gICAgICAgICAgICAgICAgcmV0dXJuOyAgICBcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kZWxheWVkSGlkZSA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKCdlZGl0YWJsZS1vcGVuJyk7ICAgXG4gICAgICAgICAgICB0aGlzLmlubmVySGlkZSgpO1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgIEZpcmVkIHdoZW4gY29udGFpbmVyIHdhcyBoaWRkZW4uIEl0IG9jY3VycyBvbiBib3RoIHNhdmUgb3IgY2FuY2VsLiAgXG4gICAgICAgICAgICAqKk5vdGU6KiogQm9vdHN0cmFwIHBvcG92ZXIgaGFzIG93biBgaGlkZGVuYCBldmVudCB0aGF0IG5vdyBjYW5ub3QgYmUgc2VwYXJhdGVkIGZyb20geC1lZGl0YWJsZSdzIG9uZS5cbiAgICAgICAgICAgIFRoZSB3b3JrYXJvdW5kIGlzIHRvIGNoZWNrIGBhcmd1bWVudHMubGVuZ3RoYCB0aGF0IGlzIGFsd2F5cyBgMmAgZm9yIHgtZWRpdGFibGUuIFxuXG4gICAgICAgICAgICBAZXZlbnQgaGlkZGVuIFxuICAgICAgICAgICAgQHBhcmFtIHtvYmplY3R9IGV2ZW50IGV2ZW50IG9iamVjdFxuICAgICAgICAgICAgQHBhcmFtIHtzdHJpbmd9IHJlYXNvbiBSZWFzb24gY2F1c2VkIGhpZGluZy4gQ2FuIGJlIDxjb2RlPnNhdmV8Y2FuY2VsfG9uYmx1cnxub2NoYW5nZXxtYW51YWw8L2NvZGU+XG4gICAgICAgICAgICBAZXhhbXBsZVxuICAgICAgICAgICAgJCgnI3VzZXJuYW1lJykub24oJ2hpZGRlbicsIGZ1bmN0aW9uKGUsIHJlYXNvbikge1xuICAgICAgICAgICAgICAgIGlmKHJlYXNvbiA9PT0gJ3NhdmUnIHx8IHJlYXNvbiA9PT0gJ2NhbmNlbCcpIHtcbiAgICAgICAgICAgICAgICAgICAgLy9hdXRvLW9wZW4gbmV4dCBlZGl0YWJsZVxuICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmNsb3Nlc3QoJ3RyJykubmV4dCgpLmZpbmQoJy5lZGl0YWJsZScpLmVkaXRhYmxlKCdzaG93Jyk7XG4gICAgICAgICAgICAgICAgfSBcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgKiovXG4gICAgICAgICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXJIYW5kbGVyKCdoaWRkZW4nLCByZWFzb24gfHwgJ21hbnVhbCcpOyAgIFxuICAgICAgICB9LFxuXG4gICAgICAgIC8qIGludGVybmFsIHNob3cgbWV0aG9kLiBUbyBiZSBvdmVyd3JpdHRlbiBpbiBjaGlsZCBjbGFzc2VzICovXG4gICAgICAgIGlubmVyU2hvdzogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgIFxuICAgICAgICB9LCAgICAgICAgXG5cbiAgICAgICAgLyogaW50ZXJuYWwgaGlkZSBtZXRob2QuIFRvIGJlIG92ZXJ3cml0dGVuIGluIGNoaWxkIGNsYXNzZXMgKi9cbiAgICAgICAgaW5uZXJIaWRlOiBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIC8qKlxuICAgICAgICBUb2dnbGVzIGNvbnRhaW5lciB2aXNpYmlsaXR5IChzaG93IC8gaGlkZSlcbiAgICAgICAgQG1ldGhvZCB0b2dnbGUoKVxuICAgICAgICBAcGFyYW0ge2Jvb2xlYW59IGNsb3NlQWxsIFdoZXRoZXIgdG8gY2xvc2UgYWxsIG90aGVyIGVkaXRhYmxlIGNvbnRhaW5lcnMgd2hlbiBzaG93aW5nIHRoaXMgb25lLiBEZWZhdWx0IHRydWUuXG4gICAgICAgICoqLyAgICAgICAgICBcbiAgICAgICAgdG9nZ2xlOiBmdW5jdGlvbihjbG9zZUFsbCkge1xuICAgICAgICAgICAgaWYodGhpcy5jb250YWluZXIoKSAmJiB0aGlzLnRpcCgpICYmIHRoaXMudGlwKCkuaXMoJzp2aXNpYmxlJykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zaG93KGNsb3NlQWxsKTtcbiAgICAgICAgICAgIH0gXG4gICAgICAgIH0sXG5cbiAgICAgICAgLypcbiAgICAgICAgVXBkYXRlcyB0aGUgcG9zaXRpb24gb2YgY29udGFpbmVyIHdoZW4gY29udGVudCBjaGFuZ2VkLlxuICAgICAgICBAbWV0aG9kIHNldFBvc2l0aW9uKClcbiAgICAgICAgKi8gICAgICAgXG4gICAgICAgIHNldFBvc2l0aW9uOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIC8vdGJkIGluIGNoaWxkIGNsYXNzXG4gICAgICAgIH0sXG5cbiAgICAgICAgc2F2ZTogZnVuY3Rpb24oZSwgcGFyYW1zKSB7XG4gICAgICAgICAgICAvKiogICAgICAgIFxuICAgICAgICAgICAgRmlyZWQgd2hlbiBuZXcgdmFsdWUgd2FzIHN1Ym1pdHRlZC4gWW91IGNhbiB1c2UgPGNvZGU+JCh0aGlzKS5kYXRhKCdlZGl0YWJsZUNvbnRhaW5lcicpPC9jb2RlPiBpbnNpZGUgaGFuZGxlciB0byBhY2Nlc3MgdG8gZWRpdGFibGVDb250YWluZXIgaW5zdGFuY2VcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgQGV2ZW50IHNhdmUgXG4gICAgICAgICAgICBAcGFyYW0ge09iamVjdH0gZXZlbnQgZXZlbnQgb2JqZWN0XG4gICAgICAgICAgICBAcGFyYW0ge09iamVjdH0gcGFyYW1zIGFkZGl0aW9uYWwgcGFyYW1zXG4gICAgICAgICAgICBAcGFyYW0ge21peGVkfSBwYXJhbXMubmV3VmFsdWUgc3VibWl0dGVkIHZhbHVlXG4gICAgICAgICAgICBAcGFyYW0ge09iamVjdH0gcGFyYW1zLnJlc3BvbnNlIGFqYXggcmVzcG9uc2VcbiAgICAgICAgICAgIEBleGFtcGxlXG4gICAgICAgICAgICAkKCcjdXNlcm5hbWUnKS5vbignc2F2ZScsIGZ1bmN0aW9uKGUsIHBhcmFtcykge1xuICAgICAgICAgICAgICAgIC8vYXNzdW1pbmcgc2VydmVyIHJlc3BvbnNlOiAne3N1Y2Nlc3M6IHRydWV9J1xuICAgICAgICAgICAgICAgIHZhciBwayA9ICQodGhpcykuZGF0YSgnZWRpdGFibGVDb250YWluZXInKS5vcHRpb25zLnBrO1xuICAgICAgICAgICAgICAgIGlmKHBhcmFtcy5yZXNwb25zZSAmJiBwYXJhbXMucmVzcG9uc2Uuc3VjY2Vzcykge1xuICAgICAgICAgICAgICAgICAgICBhbGVydCgndmFsdWU6ICcgKyBwYXJhbXMubmV3VmFsdWUgKyAnIHdpdGggcGs6ICcgKyBwayArICcgc2F2ZWQhJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYWxlcnQoJ2Vycm9yIScpOyBcbiAgICAgICAgICAgICAgICB9IFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAqKi8gICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXJIYW5kbGVyKCdzYXZlJywgcGFyYW1zKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy9oaWRlIG11c3QgYmUgYWZ0ZXIgdHJpZ2dlciwgYXMgc2F2aW5nIHZhbHVlIG1heSByZXF1aXJlIG1ldGhvZHMgb2YgcGx1Z2luLCBhcHBsaWVkIHRvIGlucHV0XG4gICAgICAgICAgICB0aGlzLmhpZGUoJ3NhdmUnKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgU2V0cyBuZXcgb3B0aW9uXG4gICAgICAgIFxuICAgICAgICBAbWV0aG9kIG9wdGlvbihrZXksIHZhbHVlKVxuICAgICAgICBAcGFyYW0ge3N0cmluZ30ga2V5IFxuICAgICAgICBAcGFyYW0ge21peGVkfSB2YWx1ZSBcbiAgICAgICAgKiovICAgICAgICAgXG4gICAgICAgIG9wdGlvbjogZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgIGlmKGtleSBpbiB0aGlzLmNvbnRhaW5lck9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRhaW5lck9wdGlvbnNba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0Q29udGFpbmVyT3B0aW9uKGtleSwgdmFsdWUpOyBcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5mb3JtT3B0aW9uc1trZXldID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgaWYodGhpcy4kZm9ybSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiRmb3JtLmVkaXRhYmxlZm9ybSgnb3B0aW9uJywga2V5LCB2YWx1ZSk7ICBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICBzZXRDb250YWluZXJPcHRpb246IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuY2FsbCgnb3B0aW9uJywga2V5LCB2YWx1ZSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgIERlc3Ryb3lzIHRoZSBjb250YWluZXIgaW5zdGFuY2VcbiAgICAgICAgQG1ldGhvZCBkZXN0cm95KClcbiAgICAgICAgKiovICAgICAgICBcbiAgICAgICAgZGVzdHJveTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgICAgICAgIHRoaXMuaW5uZXJEZXN0cm95KCk7XG4gICAgICAgICAgICB0aGlzLiRlbGVtZW50Lm9mZignZGVzdHJveWVkJyk7XG4gICAgICAgICAgICB0aGlzLiRlbGVtZW50LnJlbW92ZURhdGEoJ2VkaXRhYmxlQ29udGFpbmVyJyk7XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICAvKiB0byBiZSBvdmVyd3JpdHRlbiBpbiBjaGlsZCBjbGFzc2VzICovXG4gICAgICAgIGlubmVyRGVzdHJveTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgfSwgXG4gICAgICAgIFxuICAgICAgICAvKlxuICAgICAgICBDbG9zZXMgb3RoZXIgY29udGFpbmVycyBleGNlcHQgb25lIHJlbGF0ZWQgdG8gcGFzc2VkIGVsZW1lbnQuIFxuICAgICAgICBPdGhlciBjb250YWluZXJzIGNhbiBiZSBjYW5jZWxsZWQgb3Igc3VibWl0dGVkIChkZXBlbmRzIG9uIG9uYmx1ciBvcHRpb24pXG4gICAgICAgICovXG4gICAgICAgIGNsb3NlT3RoZXJzOiBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICAgICAgICAkKCcuZWRpdGFibGUtb3BlbicpLmVhY2goZnVuY3Rpb24oaSwgZWwpe1xuICAgICAgICAgICAgICAgIC8vZG8gbm90aGluZyB3aXRoIHBhc3NlZCBlbGVtZW50IGFuZCBpdCdzIGNoaWxkcmVuXG4gICAgICAgICAgICAgICAgaWYoZWwgPT09IGVsZW1lbnQgfHwgJChlbCkuZmluZChlbGVtZW50KS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vb3RoZXJ3aXNlIGNhbmNlbCBvciBzdWJtaXQgYWxsIG9wZW4gY29udGFpbmVycyBcbiAgICAgICAgICAgICAgICB2YXIgJGVsID0gJChlbCksXG4gICAgICAgICAgICAgICAgZWMgPSAkZWwuZGF0YSgnZWRpdGFibGVDb250YWluZXInKTtcblxuICAgICAgICAgICAgICAgIGlmKCFlYykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47ICBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYoZWMub3B0aW9ucy5vbmJsdXIgPT09ICdjYW5jZWwnKSB7XG4gICAgICAgICAgICAgICAgICAgICRlbC5kYXRhKCdlZGl0YWJsZUNvbnRhaW5lcicpLmhpZGUoJ29uYmx1cicpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZihlYy5vcHRpb25zLm9uYmx1ciA9PT0gJ3N1Ym1pdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgJGVsLmRhdGEoJ2VkaXRhYmxlQ29udGFpbmVyJykudGlwKCkuZmluZCgnZm9ybScpLnN1Ym1pdCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICAvKipcbiAgICAgICAgQWN0aXZhdGVzIGlucHV0IG9mIHZpc2libGUgY29udGFpbmVyIChlLmcuIHNldCBmb2N1cylcbiAgICAgICAgQG1ldGhvZCBhY3RpdmF0ZSgpXG4gICAgICAgICoqLyAgICAgICAgIFxuICAgICAgICBhY3RpdmF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZih0aGlzLnRpcCAmJiB0aGlzLnRpcCgpLmlzKCc6dmlzaWJsZScpICYmIHRoaXMuJGZvcm0pIHtcbiAgICAgICAgICAgICAgIHRoaXMuJGZvcm0uZGF0YSgnZWRpdGFibGVmb3JtJykuaW5wdXQuYWN0aXZhdGUoKTsgXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gXG5cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgalF1ZXJ5IG1ldGhvZCB0byBpbml0aWFsaXplIGVkaXRhYmxlQ29udGFpbmVyLlxuICAgIFxuICAgIEBtZXRob2QgJCgpLmVkaXRhYmxlQ29udGFpbmVyKG9wdGlvbnMpXG4gICAgQHBhcmFtcyB7T2JqZWN0fSBvcHRpb25zXG4gICAgQGV4YW1wbGVcbiAgICAkKCcjZWRpdCcpLmVkaXRhYmxlQ29udGFpbmVyKHtcbiAgICAgICAgdHlwZTogJ3RleHQnLFxuICAgICAgICB1cmw6ICcvcG9zdCcsXG4gICAgICAgIHBrOiAxLFxuICAgICAgICB2YWx1ZTogJ2hlbGxvJ1xuICAgIH0pO1xuICAgICoqLyAgXG4gICAgJC5mbi5lZGl0YWJsZUNvbnRhaW5lciA9IGZ1bmN0aW9uIChvcHRpb24pIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyICR0aGlzID0gJCh0aGlzKSxcbiAgICAgICAgICAgIGRhdGFLZXkgPSAnZWRpdGFibGVDb250YWluZXInLCBcbiAgICAgICAgICAgIGRhdGEgPSAkdGhpcy5kYXRhKGRhdGFLZXkpLFxuICAgICAgICAgICAgb3B0aW9ucyA9IHR5cGVvZiBvcHRpb24gPT09ICdvYmplY3QnICYmIG9wdGlvbixcbiAgICAgICAgICAgIENvbnN0cnVjdG9yID0gKG9wdGlvbnMubW9kZSA9PT0gJ2lubGluZScpID8gSW5saW5lIDogUG9wdXA7ICAgICAgICAgICAgIFxuXG4gICAgICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICAgICAgICAkdGhpcy5kYXRhKGRhdGFLZXksIChkYXRhID0gbmV3IENvbnN0cnVjdG9yKHRoaXMsIG9wdGlvbnMpKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb3B0aW9uID09PSAnc3RyaW5nJykgeyAvL2NhbGwgbWV0aG9kIFxuICAgICAgICAgICAgICAgIGRhdGFbb3B0aW9uXS5hcHBseShkYXRhLCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmdzLCAxKSk7XG4gICAgICAgICAgICB9ICAgICAgICAgICAgXG4gICAgICAgIH0pO1xuICAgIH07ICAgICBcblxuICAgIC8vc3RvcmUgY29uc3RydWN0b3JzXG4gICAgJC5mbi5lZGl0YWJsZUNvbnRhaW5lci5Qb3B1cCA9IFBvcHVwO1xuICAgICQuZm4uZWRpdGFibGVDb250YWluZXIuSW5saW5lID0gSW5saW5lO1xuXG4gICAgLy9kZWZhdWx0c1xuICAgICQuZm4uZWRpdGFibGVDb250YWluZXIuZGVmYXVsdHMgPSB7XG4gICAgICAgIC8qKlxuICAgICAgICBJbml0aWFsIHZhbHVlIG9mIGZvcm0gaW5wdXRcblxuICAgICAgICBAcHJvcGVydHkgdmFsdWUgXG4gICAgICAgIEB0eXBlIG1peGVkXG4gICAgICAgIEBkZWZhdWx0IG51bGxcbiAgICAgICAgQHByaXZhdGVcbiAgICAgICAgKiovICAgICAgICBcbiAgICAgICAgdmFsdWU6IG51bGwsXG4gICAgICAgIC8qKlxuICAgICAgICBQbGFjZW1lbnQgb2YgY29udGFpbmVyIHJlbGF0aXZlIHRvIGVsZW1lbnQuIENhbiBiZSA8Y29kZT50b3B8cmlnaHR8Ym90dG9tfGxlZnQ8L2NvZGU+LiBOb3QgdXNlZCBmb3IgaW5saW5lIGNvbnRhaW5lci5cblxuICAgICAgICBAcHJvcGVydHkgcGxhY2VtZW50IFxuICAgICAgICBAdHlwZSBzdHJpbmdcbiAgICAgICAgQGRlZmF1bHQgJ3RvcCdcbiAgICAgICAgKiovICAgICAgICBcbiAgICAgICAgcGxhY2VtZW50OiAndG9wJyxcbiAgICAgICAgLyoqXG4gICAgICAgIFdoZXRoZXIgdG8gaGlkZSBjb250YWluZXIgb24gc2F2ZS9jYW5jZWwuXG5cbiAgICAgICAgQHByb3BlcnR5IGF1dG9oaWRlIFxuICAgICAgICBAdHlwZSBib29sZWFuXG4gICAgICAgIEBkZWZhdWx0IHRydWVcbiAgICAgICAgQHByaXZhdGUgXG4gICAgICAgICoqLyAgICAgICAgXG4gICAgICAgIGF1dG9oaWRlOiB0cnVlLFxuICAgICAgICAvKipcbiAgICAgICAgQWN0aW9uIHdoZW4gdXNlciBjbGlja3Mgb3V0c2lkZSB0aGUgY29udGFpbmVyLiBDYW4gYmUgPGNvZGU+Y2FuY2VsfHN1Ym1pdHxpZ25vcmU8L2NvZGU+LiAgXG4gICAgICAgIFNldHRpbmcgPGNvZGU+aWdub3JlPC9jb2RlPiBhbGxvd3MgdG8gaGF2ZSBzZXZlcmFsIGNvbnRhaW5lcnMgb3Blbi4gXG5cbiAgICAgICAgQHByb3BlcnR5IG9uYmx1ciBcbiAgICAgICAgQHR5cGUgc3RyaW5nXG4gICAgICAgIEBkZWZhdWx0ICdjYW5jZWwnXG4gICAgICAgIEBzaW5jZSAxLjEuMVxuICAgICAgICAqKi8gICAgICAgIFxuICAgICAgICBvbmJsdXI6ICdjYW5jZWwnLFxuICAgICAgICBcbiAgICAgICAgLyoqXG4gICAgICAgIEFuaW1hdGlvbiBzcGVlZCAoaW5saW5lIG1vZGUgb25seSlcbiAgICAgICAgQHByb3BlcnR5IGFuaW0gXG4gICAgICAgIEB0eXBlIHN0cmluZ1xuICAgICAgICBAZGVmYXVsdCBmYWxzZVxuICAgICAgICAqKi8gICAgICAgIFxuICAgICAgICBhbmltOiBmYWxzZSxcbiAgICAgICAgXG4gICAgICAgIC8qKlxuICAgICAgICBNb2RlIG9mIGVkaXRhYmxlLCBjYW4gYmUgYHBvcHVwYCBvciBgaW5saW5lYCBcbiAgICAgICAgXG4gICAgICAgIEBwcm9wZXJ0eSBtb2RlIFxuICAgICAgICBAdHlwZSBzdHJpbmcgICAgICAgICBcbiAgICAgICAgQGRlZmF1bHQgJ3BvcHVwJ1xuICAgICAgICBAc2luY2UgMS40LjAgICAgICAgIFxuICAgICAgICAqKi8gICAgICAgIFxuICAgICAgICBtb2RlOiAncG9wdXAnICAgICAgICBcbiAgICB9O1xuXG4gICAgLyogXG4gICAgKiB3b3JrYXJvdW5kIHRvIGhhdmUgJ2Rlc3Ryb3llZCcgZXZlbnQgdG8gZGVzdHJveSBwb3BvdmVyIHdoZW4gZWxlbWVudCBpcyBkZXN0cm95ZWRcbiAgICAqIHNlZSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzIyMDA0OTQvanF1ZXJ5LXRyaWdnZXItZXZlbnQtd2hlbi1hbi1lbGVtZW50LWlzLXJlbW92ZWQtZnJvbS10aGUtZG9tXG4gICAgKi9cbiAgICBqUXVlcnkuZXZlbnQuc3BlY2lhbC5kZXN0cm95ZWQgPSB7XG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24obykge1xuICAgICAgICAgICAgaWYgKG8uaGFuZGxlcikge1xuICAgICAgICAgICAgICAgIG8uaGFuZGxlcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTsgICAgXG5cbn0od2luZG93LmpRdWVyeSkpO1xuXG4vKipcbiogRWRpdGFibGUgSW5saW5lIFxuKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiovXG4oZnVuY3Rpb24gKCQpIHtcblxuICAgIC8vY29weSBwcm90b3R5cGUgZnJvbSBFZGl0YWJsZUNvbnRhaW5lclxuICAgIC8vZXh0ZW5kIG1ldGhvZHNcbiAgICAkLmV4dGVuZCgkLmZuLmVkaXRhYmxlQ29udGFpbmVyLklubGluZS5wcm90b3R5cGUsICQuZm4uZWRpdGFibGVDb250YWluZXIuUG9wdXAucHJvdG90eXBlLCB7XG4gICAgICAgIGNvbnRhaW5lck5hbWU6ICdlZGl0YWJsZWZvcm0nLFxuICAgICAgICBpbm5lckNzczogJy5lZGl0YWJsZS1pbmxpbmUnLFxuICAgICAgICBjb250YWluZXJDbGFzczogJ2VkaXRhYmxlLWNvbnRhaW5lciBlZGl0YWJsZS1pbmxpbmUnLCAvL2NzcyBjbGFzcyBhcHBsaWVkIHRvIGNvbnRhaW5lciBlbGVtZW50XG4gICAgICAgICAgICAgICAgIFxuICAgICAgICBpbml0Q29udGFpbmVyOiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgLy9jb250YWluZXIgaXMgPHNwYW4+IGVsZW1lbnRcbiAgICAgICAgICAgIHRoaXMuJHRpcCA9ICQoJzxzcGFuPjwvc3Bhbj4nKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy9jb252ZXJ0IGFuaW0gdG8gbWlsaXNlY29uZHMgKGludClcbiAgICAgICAgICAgIGlmKCF0aGlzLm9wdGlvbnMuYW5pbSkge1xuICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5hbmltID0gMDtcbiAgICAgICAgICAgIH0gICAgICAgICBcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIHNwbGl0T3B0aW9uczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAvL2FsbCBvcHRpb25zIGFyZSBwYXNzZWQgdG8gZm9ybVxuICAgICAgICAgICAgdGhpcy5jb250YWluZXJPcHRpb25zID0ge307XG4gICAgICAgICAgICB0aGlzLmZvcm1PcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgdGlwOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgcmV0dXJuIHRoaXMuJHRpcDsgXG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICBpbm5lclNob3c6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMuJGVsZW1lbnQuaGlkZSgpO1xuICAgICAgICAgICAgdGhpcy50aXAoKS5pbnNlcnRBZnRlcih0aGlzLiRlbGVtZW50KS5zaG93KCk7XG4gICAgICAgIH0sIFxuICAgICAgICBcbiAgICAgICAgaW5uZXJIaWRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLiR0aXAuaGlkZSh0aGlzLm9wdGlvbnMuYW5pbSwgJC5wcm94eShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiRlbGVtZW50LnNob3coKTtcbiAgICAgICAgICAgICAgICB0aGlzLmlubmVyRGVzdHJveSgpO1xuICAgICAgICAgICAgfSwgdGhpcykpOyBcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIGlubmVyRGVzdHJveTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZih0aGlzLnRpcCgpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50aXAoKS5lbXB0eSgpLnJlbW92ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IFxuICAgIH0pO1xuXG59KHdpbmRvdy5qUXVlcnkpKTtcbi8qKlxuTWFrZXMgZWRpdGFibGUgYW55IEhUTUwgZWxlbWVudCBvbiB0aGUgcGFnZS4gQXBwbGllZCBhcyBqUXVlcnkgbWV0aG9kLlxuXG5AY2xhc3MgZWRpdGFibGVcbkB1c2VzIGVkaXRhYmxlQ29udGFpbmVyXG4qKi9cbihmdW5jdGlvbiAoJCkge1xuXG4gICAgdmFyIEVkaXRhYmxlID0gZnVuY3Rpb24gKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy4kZWxlbWVudCA9ICQoZWxlbWVudCk7XG4gICAgICAgIC8vZGF0YS0qIGhhcyBtb3JlIHByaW9yaXR5IG92ZXIganMgb3B0aW9uczogYmVjYXVzZSBkeW5hbWljYWxseSBjcmVhdGVkIGVsZW1lbnRzIG1heSBjaGFuZ2UgZGF0YS0qIFxuICAgICAgICB0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgJC5mbi5lZGl0YWJsZS5kZWZhdWx0cywgb3B0aW9ucywgJC5mbi5lZGl0YWJsZXV0aWxzLmdldENvbmZpZ0RhdGEodGhpcy4kZWxlbWVudCkpOyAgXG4gICAgICAgIGlmKHRoaXMub3B0aW9ucy5zZWxlY3Rvcikge1xuICAgICAgICAgICAgdGhpcy5pbml0TGl2ZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5pbml0KCk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vY2hlY2sgZm9yIHRyYW5zaXRpb24gc3VwcG9ydFxuICAgICAgICBpZih0aGlzLm9wdGlvbnMuaGlnaGxpZ2h0ICYmICEkLmZuLmVkaXRhYmxldXRpbHMuc3VwcG9ydHNUcmFuc2l0aW9ucygpKSB7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMuaGlnaGxpZ2h0ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgRWRpdGFibGUucHJvdG90eXBlID0ge1xuICAgICAgICBjb25zdHJ1Y3RvcjogRWRpdGFibGUsIFxuICAgICAgICBpbml0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgaXNWYWx1ZUJ5VGV4dCA9IGZhbHNlLCBcbiAgICAgICAgICAgICAgICBkb0F1dG90ZXh0LCBmaW5hbGl6ZTtcblxuICAgICAgICAgICAgLy9uYW1lXG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMubmFtZSA9IHRoaXMub3B0aW9ucy5uYW1lIHx8IHRoaXMuJGVsZW1lbnQuYXR0cignaWQnKTtcbiAgICAgICAgICAgICBcbiAgICAgICAgICAgIC8vY3JlYXRlIGlucHV0IG9mIHNwZWNpZmllZCB0eXBlLiBJbnB1dCBuZWVkZWQgYWxyZWFkeSBoZXJlIHRvIGNvbnZlcnQgdmFsdWUgZm9yIGluaXRpYWwgZGlzcGxheSAoZS5nLiBzaG93IHRleHQgYnkgaWQgZm9yIHNlbGVjdClcbiAgICAgICAgICAgIC8vYWxzbyB3ZSBzZXQgc2NvcGUgb3B0aW9uIHRvIGhhdmUgYWNjZXNzIHRvIGVsZW1lbnQgaW5zaWRlIGlucHV0IHNwZWNpZmljIGNhbGxiYWNrcyAoZS4gZy4gc291cmNlIGFzIGZ1bmN0aW9uKVxuICAgICAgICAgICAgdGhpcy5vcHRpb25zLnNjb3BlID0gdGhpcy4kZWxlbWVudFswXTsgXG4gICAgICAgICAgICB0aGlzLmlucHV0ID0gJC5mbi5lZGl0YWJsZXV0aWxzLmNyZWF0ZUlucHV0KHRoaXMub3B0aW9ucyk7XG4gICAgICAgICAgICBpZighdGhpcy5pbnB1dCkge1xuICAgICAgICAgICAgICAgIHJldHVybjsgXG4gICAgICAgICAgICB9ICAgICAgICAgICAgXG5cbiAgICAgICAgICAgIC8vc2V0IHZhbHVlIGZyb20gc2V0dGluZ3Mgb3IgYnkgZWxlbWVudCdzIHRleHRcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMudmFsdWUgPT09IHVuZGVmaW5lZCB8fCB0aGlzLm9wdGlvbnMudmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnZhbHVlID0gdGhpcy5pbnB1dC5odG1sMnZhbHVlKCQudHJpbSh0aGlzLiRlbGVtZW50Lmh0bWwoKSkpO1xuICAgICAgICAgICAgICAgIGlzVmFsdWVCeVRleHQgPSB0cnVlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvKlxuICAgICAgICAgICAgICAgICAgdmFsdWUgY2FuIGJlIHN0cmluZyB3aGVuIHJlY2VpdmVkIGZyb20gJ2RhdGEtdmFsdWUnIGF0dHJpYnV0ZVxuICAgICAgICAgICAgICAgICAgZm9yIGNvbXBsZXh0IG9iamVjdHMgdmFsdWUgY2FuIGJlIHNldCBhcyBqc29uIHN0cmluZyBpbiBkYXRhLXZhbHVlIGF0dHJpYnV0ZSwgXG4gICAgICAgICAgICAgICAgICBlLmcuIGRhdGEtdmFsdWU9XCJ7Y2l0eTogJ01vc2NvdycsIHN0cmVldDogJ0xlbmluYSd9XCJcbiAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy52YWx1ZSA9ICQuZm4uZWRpdGFibGV1dGlscy50cnlQYXJzZUpzb24odGhpcy5vcHRpb25zLnZhbHVlLCB0cnVlKTsgXG4gICAgICAgICAgICAgICAgaWYodHlwZW9mIHRoaXMub3B0aW9ucy52YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy52YWx1ZSA9IHRoaXMuaW5wdXQuc3RyMnZhbHVlKHRoaXMub3B0aW9ucy52YWx1ZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy52YWx1ZSA9IHRoaXMub3B0aW9ucy52YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vYWRkICdlZGl0YWJsZScgY2xhc3MgdG8gZXZlcnkgZWRpdGFibGUgZWxlbWVudFxuICAgICAgICAgICAgdGhpcy4kZWxlbWVudC5hZGRDbGFzcygnZWRpdGFibGUnKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy9zcGVjaWZpY2FsbHkgZm9yIFwidGV4dGFyZWFcIiBhZGQgY2xhc3MgLmVkaXRhYmxlLXByZS13cmFwcGVkIHRvIGtlZXAgbGluZWJyZWFrc1xuICAgICAgICAgICAgaWYodGhpcy5pbnB1dC50eXBlID09PSAndGV4dGFyZWEnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kZWxlbWVudC5hZGRDbGFzcygnZWRpdGFibGUtcHJlLXdyYXBwZWQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy9hdHRhY2ggaGFuZGxlciBhY3RpdmF0aW5nIGVkaXRhYmxlLiBJbiBkaXNhYmxlZCBtb2RlIGl0IGp1c3QgcHJldmVudCBkZWZhdWx0IGFjdGlvbiAodXNlZnVsIGZvciBsaW5rcylcbiAgICAgICAgICAgIGlmKHRoaXMub3B0aW9ucy50b2dnbGUgIT09ICdtYW51YWwnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kZWxlbWVudC5hZGRDbGFzcygnZWRpdGFibGUtY2xpY2snKTtcbiAgICAgICAgICAgICAgICB0aGlzLiRlbGVtZW50Lm9uKHRoaXMub3B0aW9ucy50b2dnbGUgKyAnLmVkaXRhYmxlJywgJC5wcm94eShmdW5jdGlvbihlKXtcbiAgICAgICAgICAgICAgICAgICAgLy9wcmV2ZW50IGZvbGxvd2luZyBsaW5rIGlmIGVkaXRhYmxlIGVuYWJsZWRcbiAgICAgICAgICAgICAgICAgICAgaWYoIXRoaXMub3B0aW9ucy5kaXNhYmxlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAvL3N0b3AgcHJvcGFnYXRpb24gbm90IHJlcXVpcmVkIGJlY2F1c2UgaW4gZG9jdW1lbnQgY2xpY2sgaGFuZGxlciBpdCBjaGVja3MgZXZlbnQgdGFyZ2V0XG4gICAgICAgICAgICAgICAgICAgIC8vZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGlmKHRoaXMub3B0aW9ucy50b2dnbGUgPT09ICdtb3VzZWVudGVyJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy9mb3IgaG92ZXIgb25seSBzaG93IGNvbnRhaW5lclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zaG93KCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL3doZW4gdG9nZ2xlPSdjbGljaycgd2Ugc2hvdWxkIG5vdCBjbG9zZSBhbGwgb3RoZXIgY29udGFpbmVycyBhcyB0aGV5IHdpbGwgYmUgY2xvc2VkIGF1dG9tYXRpY2FsbHkgaW4gZG9jdW1lbnQgY2xpY2sgbGlzdGVuZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjbG9zZUFsbCA9ICh0aGlzLm9wdGlvbnMudG9nZ2xlICE9PSAnY2xpY2snKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudG9nZ2xlKGNsb3NlQWxsKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sIHRoaXMpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kZWxlbWVudC5hdHRyKCd0YWJpbmRleCcsIC0xKTsgLy9kbyBub3Qgc3RvcCBmb2N1cyBvbiBlbGVtZW50IHdoZW4gdG9nZ2xlZCBtYW51YWxseVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvL2lmIGRpc3BsYXkgaXMgZnVuY3Rpb24gaXQncyBmYXIgbW9yZSBjb252aW5pZW50IHRvIGhhdmUgYXV0b3RleHQgPSBhbHdheXMgdG8gcmVuZGVyIGNvcnJlY3RseSBvbiBpbml0XG4gICAgICAgICAgICAvL3NlZSBodHRwczovL2dpdGh1Yi5jb20vdml0YWxldHMveC1lZGl0YWJsZS15aWkvaXNzdWVzLzM0XG4gICAgICAgICAgICBpZih0eXBlb2YgdGhpcy5vcHRpb25zLmRpc3BsYXkgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMuYXV0b3RleHQgPSAnYWx3YXlzJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy9jaGVjayBjb25kaXRpb25zIGZvciBhdXRvdGV4dDpcbiAgICAgICAgICAgIHN3aXRjaCh0aGlzLm9wdGlvbnMuYXV0b3RleHQpIHtcbiAgICAgICAgICAgICAgY2FzZSAnYWx3YXlzJzpcbiAgICAgICAgICAgICAgIGRvQXV0b3RleHQgPSB0cnVlO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAnYXV0byc6XG4gICAgICAgICAgICAgICAgLy9pZiBlbGVtZW50IHRleHQgaXMgZW1wdHkgYW5kIHZhbHVlIGlzIGRlZmluZWQgYW5kIHZhbHVlIG5vdCBnZW5lcmF0ZWQgYnkgdGV4dCAtLT4gcnVuIGF1dG90ZXh0XG4gICAgICAgICAgICAgICAgZG9BdXRvdGV4dCA9ICEkLnRyaW0odGhpcy4kZWxlbWVudC50ZXh0KCkpLmxlbmd0aCAmJiB0aGlzLnZhbHVlICE9PSBudWxsICYmIHRoaXMudmFsdWUgIT09IHVuZGVmaW5lZCAmJiAhaXNWYWx1ZUJ5VGV4dDtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICBkb0F1dG90ZXh0ID0gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vZGVwZW5kaW5nIG9uIGF1dG90ZXh0IHJ1biByZW5kZXIoKSBvciBqdXN0IGZpbmlsaXplIGluaXRcbiAgICAgICAgICAgICQud2hlbihkb0F1dG90ZXh0ID8gdGhpcy5yZW5kZXIoKSA6IHRydWUpLnRoZW4oJC5wcm94eShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBpZih0aGlzLm9wdGlvbnMuZGlzYWJsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXNhYmxlKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbmFibGUoKTsgXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgLyoqICAgICAgICBcbiAgICAgICAgICAgICAgIEZpcmVkIHdoZW4gZWxlbWVudCB3YXMgaW5pdGlhbGl6ZWQgYnkgYCQoKS5lZGl0YWJsZSgpYCBtZXRob2QuIFxuICAgICAgICAgICAgICAgUGxlYXNlIG5vdGUgdGhhdCB5b3Ugc2hvdWxkIHNldHVwIGBpbml0YCBoYW5kbGVyICoqYmVmb3JlKiogYXBwbHlpbmcgYGVkaXRhYmxlYC4gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgIEBldmVudCBpbml0IFxuICAgICAgICAgICAgICAgQHBhcmFtIHtPYmplY3R9IGV2ZW50IGV2ZW50IG9iamVjdFxuICAgICAgICAgICAgICAgQHBhcmFtIHtPYmplY3R9IGVkaXRhYmxlIGVkaXRhYmxlIGluc3RhbmNlIChhcyBoZXJlIGl0IGNhbm5vdCBhY2Nlc3NlZCB2aWEgZGF0YSgnZWRpdGFibGUnKSlcbiAgICAgICAgICAgICAgIEBzaW5jZSAxLjIuMFxuICAgICAgICAgICAgICAgQGV4YW1wbGVcbiAgICAgICAgICAgICAgICQoJyN1c2VybmFtZScpLm9uKCdpbml0JywgZnVuY3Rpb24oZSwgZWRpdGFibGUpIHtcbiAgICAgICAgICAgICAgICAgICBhbGVydCgnaW5pdGlhbGl6ZWQgJyArIGVkaXRhYmxlLm9wdGlvbnMubmFtZSk7XG4gICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICQoJyN1c2VybmFtZScpLmVkaXRhYmxlKCk7XG4gICAgICAgICAgICAgICAqKi8gICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXJIYW5kbGVyKCdpbml0JywgdGhpcyk7XG4gICAgICAgICAgICB9LCB0aGlzKSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLypcbiAgICAgICAgIEluaXRpYWxpemVzIHBhcmVudCBlbGVtZW50IGZvciBsaXZlIGVkaXRhYmxlcyBcbiAgICAgICAgKi9cbiAgICAgICAgaW5pdExpdmU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAvL3N0b3JlIHNlbGVjdG9yIFxuICAgICAgICAgICB2YXIgc2VsZWN0b3IgPSB0aGlzLm9wdGlvbnMuc2VsZWN0b3I7XG4gICAgICAgICAgIC8vbW9kaWZ5IG9wdGlvbnMgZm9yIGNoaWxkIGVsZW1lbnRzXG4gICAgICAgICAgIHRoaXMub3B0aW9ucy5zZWxlY3RvciA9IGZhbHNlOyBcbiAgICAgICAgICAgdGhpcy5vcHRpb25zLmF1dG90ZXh0ID0gJ25ldmVyJztcbiAgICAgICAgICAgLy9saXN0ZW4gdG9nZ2xlIGV2ZW50c1xuICAgICAgICAgICB0aGlzLiRlbGVtZW50Lm9uKHRoaXMub3B0aW9ucy50b2dnbGUgKyAnLmVkaXRhYmxlJywgc2VsZWN0b3IsICQucHJveHkoZnVuY3Rpb24oZSl7XG4gICAgICAgICAgICAgICB2YXIgJHRhcmdldCA9ICQoZS50YXJnZXQpO1xuICAgICAgICAgICAgICAgaWYoISR0YXJnZXQuZGF0YSgnZWRpdGFibGUnKSkge1xuICAgICAgICAgICAgICAgICAgIC8vaWYgZGVsZWdhdGVkIGVsZW1lbnQgaW5pdGlhbGx5IGVtcHR5LCB3ZSBuZWVkIHRvIGNsZWFyIGl0J3MgdGV4dCAodGhhdCB3YXMgbWFudWFsbHkgc2V0IHRvIGBlbXB0eWAgYnkgdXNlcilcbiAgICAgICAgICAgICAgICAgICAvL3NlZSBodHRwczovL2dpdGh1Yi5jb20vdml0YWxldHMveC1lZGl0YWJsZS9pc3N1ZXMvMTM3IFxuICAgICAgICAgICAgICAgICAgIGlmKCR0YXJnZXQuaGFzQ2xhc3ModGhpcy5vcHRpb25zLmVtcHR5Y2xhc3MpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgJHRhcmdldC5lbXB0eSgpO1xuICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAkdGFyZ2V0LmVkaXRhYmxlKHRoaXMub3B0aW9ucykudHJpZ2dlcihlKTtcbiAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgfSwgdGhpcykpOyBcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIC8qXG4gICAgICAgIFJlbmRlcnMgdmFsdWUgaW50byBlbGVtZW50J3MgdGV4dC5cbiAgICAgICAgQ2FuIGNhbGwgY3VzdG9tIGRpc3BsYXkgbWV0aG9kIGZyb20gb3B0aW9ucy5cbiAgICAgICAgQ2FuIHJldHVybiBkZWZlcnJlZCBvYmplY3QuXG4gICAgICAgIEBtZXRob2QgcmVuZGVyKClcbiAgICAgICAgQHBhcmFtIHttaXhlZH0gcmVzcG9uc2Ugc2VydmVyIHJlc3BvbnNlIChpZiBleGlzdCkgdG8gcGFzcyBpbnRvIGRpc3BsYXkgZnVuY3Rpb25cbiAgICAgICAgKi8gICAgICAgICAgXG4gICAgICAgIHJlbmRlcjogZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAgIC8vZG8gbm90IGRpc3BsYXkgYW55dGhpbmdcbiAgICAgICAgICAgIGlmKHRoaXMub3B0aW9ucy5kaXNwbGF5ID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy9pZiBpbnB1dCBoYXMgYHZhbHVlMmh0bWxGaW5hbGAgbWV0aG9kLCB3ZSBwYXNzIGNhbGxiYWNrIGluIHRoaXJkIHBhcmFtIHRvIGJlIGNhbGxlZCB3aGVuIHNvdXJjZSBpcyBsb2FkZWRcbiAgICAgICAgICAgIGlmKHRoaXMuaW5wdXQudmFsdWUyaHRtbEZpbmFsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaW5wdXQudmFsdWUyaHRtbCh0aGlzLnZhbHVlLCB0aGlzLiRlbGVtZW50WzBdLCB0aGlzLm9wdGlvbnMuZGlzcGxheSwgcmVzcG9uc2UpOyBcbiAgICAgICAgICAgIC8vaWYgZGlzcGxheSBtZXRob2QgZGVmaW5lZCAtLT4gdXNlIGl0ICAgIFxuICAgICAgICAgICAgfSBlbHNlIGlmKHR5cGVvZiB0aGlzLm9wdGlvbnMuZGlzcGxheSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMuZGlzcGxheS5jYWxsKHRoaXMuJGVsZW1lbnRbMF0sIHRoaXMudmFsdWUsIHJlc3BvbnNlKTtcbiAgICAgICAgICAgIC8vZWxzZSB1c2UgaW5wdXQncyBvcmlnaW5hbCB2YWx1ZTJodG1sKCkgbWV0aG9kICAgIFxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5pbnB1dC52YWx1ZTJodG1sKHRoaXMudmFsdWUsIHRoaXMuJGVsZW1lbnRbMF0pOyBcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIC8qKlxuICAgICAgICBFbmFibGVzIGVkaXRhYmxlXG4gICAgICAgIEBtZXRob2QgZW5hYmxlKClcbiAgICAgICAgKiovICAgICAgICAgIFxuICAgICAgICBlbmFibGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zLmRpc2FibGVkID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKCdlZGl0YWJsZS1kaXNhYmxlZCcpO1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVFbXB0eSh0aGlzLmlzRW1wdHkpO1xuICAgICAgICAgICAgaWYodGhpcy5vcHRpb25zLnRvZ2dsZSAhPT0gJ21hbnVhbCcpIHtcbiAgICAgICAgICAgICAgICBpZih0aGlzLiRlbGVtZW50LmF0dHIoJ3RhYmluZGV4JykgPT09ICctMScpIHsgICAgXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJGVsZW1lbnQucmVtb3ZlQXR0cigndGFiaW5kZXgnKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIC8qKlxuICAgICAgICBEaXNhYmxlcyBlZGl0YWJsZVxuICAgICAgICBAbWV0aG9kIGRpc2FibGUoKVxuICAgICAgICAqKi8gICAgICAgICBcbiAgICAgICAgZGlzYWJsZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMuZGlzYWJsZWQgPSB0cnVlOyBcbiAgICAgICAgICAgIHRoaXMuaGlkZSgpOyAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLiRlbGVtZW50LmFkZENsYXNzKCdlZGl0YWJsZS1kaXNhYmxlZCcpO1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVFbXB0eSh0aGlzLmlzRW1wdHkpO1xuICAgICAgICAgICAgLy9kbyBub3Qgc3RvcCBmb2N1cyBvbiB0aGlzIGVsZW1lbnRcbiAgICAgICAgICAgIHRoaXMuJGVsZW1lbnQuYXR0cigndGFiaW5kZXgnLCAtMSk7ICAgICAgICAgICAgICAgIFxuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgLyoqXG4gICAgICAgIFRvZ2dsZXMgZW5hYmxlZCAvIGRpc2FibGVkIHN0YXRlIG9mIGVkaXRhYmxlIGVsZW1lbnRcbiAgICAgICAgQG1ldGhvZCB0b2dnbGVEaXNhYmxlZCgpXG4gICAgICAgICoqLyAgICAgICAgIFxuICAgICAgICB0b2dnbGVEaXNhYmxlZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZih0aGlzLm9wdGlvbnMuZGlzYWJsZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVuYWJsZSgpO1xuICAgICAgICAgICAgfSBlbHNlIHsgXG4gICAgICAgICAgICAgICAgdGhpcy5kaXNhYmxlKCk7IFxuICAgICAgICAgICAgfVxuICAgICAgICB9LCAgXG4gICAgICAgIFxuICAgICAgICAvKipcbiAgICAgICAgU2V0cyBuZXcgb3B0aW9uXG4gICAgICAgIFxuICAgICAgICBAbWV0aG9kIG9wdGlvbihrZXksIHZhbHVlKVxuICAgICAgICBAcGFyYW0ge3N0cmluZ3xvYmplY3R9IGtleSBvcHRpb24gbmFtZSBvciBvYmplY3Qgd2l0aCBzZXZlcmFsIG9wdGlvbnNcbiAgICAgICAgQHBhcmFtIHttaXhlZH0gdmFsdWUgb3B0aW9uIG5ldyB2YWx1ZVxuICAgICAgICBAZXhhbXBsZVxuICAgICAgICAkKCcuZWRpdGFibGUnKS5lZGl0YWJsZSgnb3B0aW9uJywgJ3BrJywgMik7XG4gICAgICAgICoqLyAgICAgICAgICBcbiAgICAgICAgb3B0aW9uOiBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgICAgICAgICAvL3NldCBvcHRpb24ocykgYnkgb2JqZWN0XG4gICAgICAgICAgICBpZihrZXkgJiYgdHlwZW9mIGtleSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICQuZWFjaChrZXksICQucHJveHkoZnVuY3Rpb24oaywgdil7XG4gICAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbigkLnRyaW0oayksIHYpOyBcbiAgICAgICAgICAgICAgIH0sIHRoaXMpKTsgXG4gICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vc2V0IG9wdGlvbiBieSBzdHJpbmcgICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLm9wdGlvbnNba2V5XSA9IHZhbHVlOyAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vZGlzYWJsZWRcbiAgICAgICAgICAgIGlmKGtleSA9PT0gJ2Rpc2FibGVkJykge1xuICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlID8gdGhpcy5kaXNhYmxlKCkgOiB0aGlzLmVuYWJsZSgpO1xuICAgICAgICAgICAgfSBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy92YWx1ZVxuICAgICAgICAgICAgaWYoa2V5ID09PSAndmFsdWUnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRWYWx1ZSh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vdHJhbnNmZXIgbmV3IG9wdGlvbiB0byBjb250YWluZXIhIFxuICAgICAgICAgICAgaWYodGhpcy5jb250YWluZXIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRhaW5lci5vcHRpb24oa2V5LCB2YWx1ZSk7ICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICBcbiAgICAgICAgICAgIC8vcGFzcyBvcHRpb24gdG8gaW5wdXQgZGlyZWN0bHkgKGFzIGl0IHBvaW50cyB0byB0aGUgc2FtZSBpbiBmb3JtKVxuICAgICAgICAgICAgaWYodGhpcy5pbnB1dC5vcHRpb24pIHtcbiAgICAgICAgICAgICAgICB0aGlzLmlucHV0Lm9wdGlvbihrZXksIHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICB9LCAgICAgICAgICAgICAgXG4gICAgICAgIFxuICAgICAgICAvKlxuICAgICAgICAqIHNldCBlbXB0eXRleHQgaWYgZWxlbWVudCBpcyBlbXB0eVxuICAgICAgICAqL1xuICAgICAgICBoYW5kbGVFbXB0eTogZnVuY3Rpb24gKGlzRW1wdHkpIHtcbiAgICAgICAgICAgIC8vZG8gbm90IGhhbmRsZSBlbXB0eSBpZiB3ZSBkbyBub3QgZGlzcGxheSBhbnl0aGluZ1xuICAgICAgICAgICAgaWYodGhpcy5vcHRpb25zLmRpc3BsYXkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKiBcbiAgICAgICAgICAgIGlzRW1wdHkgbWF5IGJlIHNldCBkaXJlY3RseSBhcyBwYXJhbSBvZiBtZXRob2QuXG4gICAgICAgICAgICBJdCBpcyByZXF1aXJlZCB3aGVuIHdlIGVuYWJsZS9kaXNhYmxlIGZpZWxkIGFuZCBjYW4ndCByZWx5IG9uIGNvbnRlbnQgXG4gICAgICAgICAgICBhcyBub2RlIGNvbnRlbnQgaXMgdGV4dDogXCJFbXB0eVwiIHRoYXQgaXMgbm90IGVtcHR5ICUpXG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgaWYoaXNFbXB0eSAhPT0gdW5kZWZpbmVkKSB7IFxuICAgICAgICAgICAgICAgIHRoaXMuaXNFbXB0eSA9IGlzRW1wdHk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vZGV0ZWN0IGVtcHR5XG4gICAgICAgICAgICAgICAgLy9mb3Igc29tZSBpbnB1dHMgd2UgbmVlZCBtb3JlIHNtYXJ0IGNoZWNrXG4gICAgICAgICAgICAgICAgLy9lLmcuIHd5c2lodG1sNSBtYXkgaGF2ZSA8YnI+LCA8cD48L3A+LCA8aW1nPlxuICAgICAgICAgICAgICAgIGlmKHR5cGVvZih0aGlzLmlucHV0LmlzRW1wdHkpID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXNFbXB0eSA9IHRoaXMuaW5wdXQuaXNFbXB0eSh0aGlzLiRlbGVtZW50KTsgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXNFbXB0eSA9ICQudHJpbSh0aGlzLiRlbGVtZW50Lmh0bWwoKSkgPT09ICcnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gICAgICAgICAgIFxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvL2VtcHR5dGV4dCBzaG93biBvbmx5IGZvciBlbmFibGVkXG4gICAgICAgICAgICBpZighdGhpcy5vcHRpb25zLmRpc2FibGVkKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNFbXB0eSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiRlbGVtZW50Lmh0bWwodGhpcy5vcHRpb25zLmVtcHR5dGV4dCk7XG4gICAgICAgICAgICAgICAgICAgIGlmKHRoaXMub3B0aW9ucy5lbXB0eWNsYXNzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiRlbGVtZW50LmFkZENsYXNzKHRoaXMub3B0aW9ucy5lbXB0eWNsYXNzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZih0aGlzLm9wdGlvbnMuZW1wdHljbGFzcykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5lbXB0eWNsYXNzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vYmVsb3cgcmVxdWlyZWQgaWYgZWxlbWVudCBkaXNhYmxlIHByb3BlcnR5IHdhcyBjaGFuZ2VkXG4gICAgICAgICAgICAgICAgaWYodGhpcy5pc0VtcHR5KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJGVsZW1lbnQuZW1wdHkoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYodGhpcy5vcHRpb25zLmVtcHR5Y2xhc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJGVsZW1lbnQucmVtb3ZlQ2xhc3ModGhpcy5vcHRpb25zLmVtcHR5Y2xhc3MpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LCAgICAgICAgXG4gICAgICAgIFxuICAgICAgICAvKipcbiAgICAgICAgU2hvd3MgY29udGFpbmVyIHdpdGggZm9ybVxuICAgICAgICBAbWV0aG9kIHNob3coKVxuICAgICAgICBAcGFyYW0ge2Jvb2xlYW59IGNsb3NlQWxsIFdoZXRoZXIgdG8gY2xvc2UgYWxsIG90aGVyIGVkaXRhYmxlIGNvbnRhaW5lcnMgd2hlbiBzaG93aW5nIHRoaXMgb25lLiBEZWZhdWx0IHRydWUuXG4gICAgICAgICoqLyAgXG4gICAgICAgIHNob3c6IGZ1bmN0aW9uIChjbG9zZUFsbCkge1xuICAgICAgICAgICAgaWYodGhpcy5vcHRpb25zLmRpc2FibGVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvL2luaXQgZWRpdGFibGVDb250YWluZXI6IHBvcG92ZXIsIHRvb2x0aXAsIGlubGluZSwgZXRjLi5cbiAgICAgICAgICAgIGlmKCF0aGlzLmNvbnRhaW5lcikge1xuICAgICAgICAgICAgICAgIHZhciBjb250YWluZXJPcHRpb25zID0gJC5leHRlbmQoe30sIHRoaXMub3B0aW9ucywge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdGhpcy52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgaW5wdXQ6IHRoaXMuaW5wdXQgLy9wYXNzIGlucHV0IHRvIGZvcm0gKGFzIGl0IGlzIGFscmVhZHkgY3JlYXRlZClcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLiRlbGVtZW50LmVkaXRhYmxlQ29udGFpbmVyKGNvbnRhaW5lck9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIC8vbGlzdGVuIGBzYXZlYCBldmVudCBcbiAgICAgICAgICAgICAgICB0aGlzLiRlbGVtZW50Lm9uKFwic2F2ZS5pbnRlcm5hbFwiLCAkLnByb3h5KHRoaXMuc2F2ZSwgdGhpcykpO1xuICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyID0gdGhpcy4kZWxlbWVudC5kYXRhKCdlZGl0YWJsZUNvbnRhaW5lcicpOyBcbiAgICAgICAgICAgIH0gZWxzZSBpZih0aGlzLmNvbnRhaW5lci50aXAoKS5pcygnOnZpc2libGUnKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH0gICAgICBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy9zaG93IGNvbnRhaW5lclxuICAgICAgICAgICAgdGhpcy5jb250YWluZXIuc2hvdyhjbG9zZUFsbCk7XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICAvKipcbiAgICAgICAgSGlkZXMgY29udGFpbmVyIHdpdGggZm9ybVxuICAgICAgICBAbWV0aG9kIGhpZGUoKVxuICAgICAgICAqKi8gICAgICAgXG4gICAgICAgIGhpZGU6IGZ1bmN0aW9uICgpIHsgICBcbiAgICAgICAgICAgIGlmKHRoaXMuY29udGFpbmVyKSB7ICBcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRhaW5lci5oaWRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICAvKipcbiAgICAgICAgVG9nZ2xlcyBjb250YWluZXIgdmlzaWJpbGl0eSAoc2hvdyAvIGhpZGUpXG4gICAgICAgIEBtZXRob2QgdG9nZ2xlKClcbiAgICAgICAgQHBhcmFtIHtib29sZWFufSBjbG9zZUFsbCBXaGV0aGVyIHRvIGNsb3NlIGFsbCBvdGhlciBlZGl0YWJsZSBjb250YWluZXJzIHdoZW4gc2hvd2luZyB0aGlzIG9uZS4gRGVmYXVsdCB0cnVlLlxuICAgICAgICAqKi8gIFxuICAgICAgICB0b2dnbGU6IGZ1bmN0aW9uKGNsb3NlQWxsKSB7XG4gICAgICAgICAgICBpZih0aGlzLmNvbnRhaW5lciAmJiB0aGlzLmNvbnRhaW5lci50aXAoKS5pcygnOnZpc2libGUnKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNob3coY2xvc2VBbGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgLypcbiAgICAgICAgKiBjYWxsZWQgd2hlbiBmb3JtIHdhcyBzdWJtaXR0ZWRcbiAgICAgICAgKi8gICAgICAgICAgXG4gICAgICAgIHNhdmU6IGZ1bmN0aW9uKGUsIHBhcmFtcykge1xuICAgICAgICAgICAgLy9tYXJrIGVsZW1lbnQgd2l0aCB1bnNhdmVkIGNsYXNzIGlmIG5lZWRlZFxuICAgICAgICAgICAgaWYodGhpcy5vcHRpb25zLnVuc2F2ZWRjbGFzcykge1xuICAgICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAgIEFkZCB1bnNhdmVkIGNzcyB0byBlbGVtZW50IGlmOlxuICAgICAgICAgICAgICAgICAgLSB1cmwgaXMgbm90IHVzZXIncyBmdW5jdGlvbiBcbiAgICAgICAgICAgICAgICAgIC0gdmFsdWUgd2FzIG5vdCBzZW50IHRvIHNlcnZlclxuICAgICAgICAgICAgICAgICAgLSBwYXJhbXMucmVzcG9uc2UgPT09IHVuZGVmaW5lZCwgdGhhdCBtZWFucyBkYXRhIHdhcyBub3Qgc2VudFxuICAgICAgICAgICAgICAgICAgLSB2YWx1ZSBjaGFuZ2VkIFxuICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgdmFyIHNlbnQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBzZW50ID0gc2VudCB8fCB0eXBlb2YgdGhpcy5vcHRpb25zLnVybCA9PT0gJ2Z1bmN0aW9uJztcbiAgICAgICAgICAgICAgICBzZW50ID0gc2VudCB8fCB0aGlzLm9wdGlvbnMuZGlzcGxheSA9PT0gZmFsc2U7IFxuICAgICAgICAgICAgICAgIHNlbnQgPSBzZW50IHx8IHBhcmFtcy5yZXNwb25zZSAhPT0gdW5kZWZpbmVkOyBcbiAgICAgICAgICAgICAgICBzZW50ID0gc2VudCB8fCAodGhpcy5pbnB1dC52YWx1ZTJzdHIodGhpcy52YWx1ZSkgIT09IHRoaXMuaW5wdXQudmFsdWUyc3RyKHBhcmFtcy5uZXdWYWx1ZSkpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmKHNlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kZWxlbWVudC5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMudW5zYXZlZGNsYXNzKTsgXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kZWxlbWVudC5hZGRDbGFzcyh0aGlzLm9wdGlvbnMudW5zYXZlZGNsYXNzKTsgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy9oaWdobGlnaHQgd2hlbiBzYXZpbmdcbiAgICAgICAgICAgIGlmKHRoaXMub3B0aW9ucy5oaWdobGlnaHQpIHtcbiAgICAgICAgICAgICAgICB2YXIgJGUgPSB0aGlzLiRlbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICBiZ0NvbG9yID0gJGUuY3NzKCdiYWNrZ3JvdW5kLWNvbG9yJyk7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICRlLmNzcygnYmFja2dyb3VuZC1jb2xvcicsIHRoaXMub3B0aW9ucy5oaWdobGlnaHQpO1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgaWYoYmdDb2xvciA9PT0gJ3RyYW5zcGFyZW50Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYmdDb2xvciA9ICcnOyBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAkZS5jc3MoJ2JhY2tncm91bmQtY29sb3InLCBiZ0NvbG9yKTtcbiAgICAgICAgICAgICAgICAgICAgJGUuYWRkQ2xhc3MoJ2VkaXRhYmxlLWJnLXRyYW5zaXRpb24nKTtcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAgICAkZS5yZW1vdmVDbGFzcygnZWRpdGFibGUtYmctdHJhbnNpdGlvbicpOyAgXG4gICAgICAgICAgICAgICAgICAgIH0sIDE3MDApO1xuICAgICAgICAgICAgICAgIH0sIDEwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy9zZXQgbmV3IHZhbHVlXG4gICAgICAgICAgICB0aGlzLnNldFZhbHVlKHBhcmFtcy5uZXdWYWx1ZSwgZmFsc2UsIHBhcmFtcy5yZXNwb25zZSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8qKiAgICAgICAgXG4gICAgICAgICAgICBGaXJlZCB3aGVuIG5ldyB2YWx1ZSB3YXMgc3VibWl0dGVkLiBZb3UgY2FuIHVzZSA8Y29kZT4kKHRoaXMpLmRhdGEoJ2VkaXRhYmxlJyk8L2NvZGU+IHRvIGFjY2VzcyB0byBlZGl0YWJsZSBpbnN0YW5jZVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBAZXZlbnQgc2F2ZSBcbiAgICAgICAgICAgIEBwYXJhbSB7T2JqZWN0fSBldmVudCBldmVudCBvYmplY3RcbiAgICAgICAgICAgIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXMgYWRkaXRpb25hbCBwYXJhbXNcbiAgICAgICAgICAgIEBwYXJhbSB7bWl4ZWR9IHBhcmFtcy5uZXdWYWx1ZSBzdWJtaXR0ZWQgdmFsdWVcbiAgICAgICAgICAgIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXMucmVzcG9uc2UgYWpheCByZXNwb25zZVxuICAgICAgICAgICAgQGV4YW1wbGVcbiAgICAgICAgICAgICQoJyN1c2VybmFtZScpLm9uKCdzYXZlJywgZnVuY3Rpb24oZSwgcGFyYW1zKSB7XG4gICAgICAgICAgICAgICAgYWxlcnQoJ1NhdmVkIHZhbHVlOiAnICsgcGFyYW1zLm5ld1ZhbHVlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgKiovXG4gICAgICAgICAgICAvL2V2ZW50IGl0c2VsZiBpcyB0cmlnZ2VyZWQgYnkgZWRpdGFibGVDb250YWluZXIuIERlc2NyaXB0aW9uIGhlcmUgaXMgb25seSBmb3IgZG9jdW1lbnRhdGlvbiAgICAgICAgICAgICAgXG4gICAgICAgIH0sXG5cbiAgICAgICAgdmFsaWRhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5vcHRpb25zLnZhbGlkYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy52YWxpZGF0ZS5jYWxsKHRoaXMsIHRoaXMudmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgLyoqXG4gICAgICAgIFNldHMgbmV3IHZhbHVlIG9mIGVkaXRhYmxlXG4gICAgICAgIEBtZXRob2Qgc2V0VmFsdWUodmFsdWUsIGNvbnZlcnRTdHIpXG4gICAgICAgIEBwYXJhbSB7bWl4ZWR9IHZhbHVlIG5ldyB2YWx1ZSBcbiAgICAgICAgQHBhcmFtIHtib29sZWFufSBjb252ZXJ0U3RyIHdoZXRoZXIgdG8gY29udmVydCB2YWx1ZSBmcm9tIHN0cmluZyB0byBpbnRlcm5hbCBmb3JtYXRcbiAgICAgICAgKiovICAgICAgICAgXG4gICAgICAgIHNldFZhbHVlOiBmdW5jdGlvbih2YWx1ZSwgY29udmVydFN0ciwgcmVzcG9uc2UpIHtcbiAgICAgICAgICAgIGlmKGNvbnZlcnRTdHIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnZhbHVlID0gdGhpcy5pbnB1dC5zdHIydmFsdWUodmFsdWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZih0aGlzLmNvbnRhaW5lcikge1xuICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLm9wdGlvbigndmFsdWUnLCB0aGlzLnZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICQud2hlbih0aGlzLnJlbmRlcihyZXNwb25zZSkpXG4gICAgICAgICAgICAudGhlbigkLnByb3h5KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlRW1wdHkoKTtcbiAgICAgICAgICAgIH0sIHRoaXMpKTtcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIC8qKlxuICAgICAgICBBY3RpdmF0ZXMgaW5wdXQgb2YgdmlzaWJsZSBjb250YWluZXIgKGUuZy4gc2V0IGZvY3VzKVxuICAgICAgICBAbWV0aG9kIGFjdGl2YXRlKClcbiAgICAgICAgKiovICAgICAgICAgXG4gICAgICAgIGFjdGl2YXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmKHRoaXMuY29udGFpbmVyKSB7XG4gICAgICAgICAgICAgICB0aGlzLmNvbnRhaW5lci5hY3RpdmF0ZSgpOyBcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIC8qKlxuICAgICAgICBSZW1vdmVzIGVkaXRhYmxlIGZlYXR1cmUgZnJvbSBlbGVtZW50XG4gICAgICAgIEBtZXRob2QgZGVzdHJveSgpXG4gICAgICAgICoqLyAgICAgICAgXG4gICAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5kaXNhYmxlKCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmKHRoaXMuY29udGFpbmVyKSB7XG4gICAgICAgICAgICAgICB0aGlzLmNvbnRhaW5lci5kZXN0cm95KCk7IFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLmlucHV0LmRlc3Ryb3koKTtcblxuICAgICAgICAgICAgaWYodGhpcy5vcHRpb25zLnRvZ2dsZSAhPT0gJ21hbnVhbCcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKCdlZGl0YWJsZS1jbGljaycpO1xuICAgICAgICAgICAgICAgIHRoaXMuJGVsZW1lbnQub2ZmKHRoaXMub3B0aW9ucy50b2dnbGUgKyAnLmVkaXRhYmxlJyk7XG4gICAgICAgICAgICB9IFxuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLiRlbGVtZW50Lm9mZihcInNhdmUuaW50ZXJuYWxcIik7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuJGVsZW1lbnQucmVtb3ZlQ2xhc3MoJ2VkaXRhYmxlIGVkaXRhYmxlLW9wZW4gZWRpdGFibGUtZGlzYWJsZWQnKTtcbiAgICAgICAgICAgIHRoaXMuJGVsZW1lbnQucmVtb3ZlRGF0YSgnZWRpdGFibGUnKTtcbiAgICAgICAgfSAgICAgICAgXG4gICAgfTtcblxuICAgIC8qIEVESVRBQkxFIFBMVUdJTiBERUZJTklUSU9OXG4gICAgKiA9PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG4gICAgLyoqXG4gICAgalF1ZXJ5IG1ldGhvZCB0byBpbml0aWFsaXplIGVkaXRhYmxlIGVsZW1lbnQuXG4gICAgXG4gICAgQG1ldGhvZCAkKCkuZWRpdGFibGUob3B0aW9ucylcbiAgICBAcGFyYW1zIHtPYmplY3R9IG9wdGlvbnNcbiAgICBAZXhhbXBsZVxuICAgICQoJyN1c2VybmFtZScpLmVkaXRhYmxlKHtcbiAgICAgICAgdHlwZTogJ3RleHQnLFxuICAgICAgICB1cmw6ICcvcG9zdCcsXG4gICAgICAgIHBrOiAxXG4gICAgfSk7XG4gICAgKiovXG4gICAgJC5mbi5lZGl0YWJsZSA9IGZ1bmN0aW9uIChvcHRpb24pIHtcbiAgICAgICAgLy9zcGVjaWFsIEFQSSBtZXRob2RzIHJldHVybmluZyBub24tanF1ZXJ5IG9iamVjdFxuICAgICAgICB2YXIgcmVzdWx0ID0ge30sIGFyZ3MgPSBhcmd1bWVudHMsIGRhdGFrZXkgPSAnZWRpdGFibGUnO1xuICAgICAgICBzd2l0Y2ggKG9wdGlvbikge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICBSdW5zIGNsaWVudC1zaWRlIHZhbGlkYXRpb24gZm9yIGFsbCBtYXRjaGVkIGVkaXRhYmxlc1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBAbWV0aG9kIHZhbGlkYXRlKClcbiAgICAgICAgICAgIEByZXR1cm5zIHtPYmplY3R9IHZhbGlkYXRpb24gZXJyb3JzIG1hcFxuICAgICAgICAgICAgQGV4YW1wbGVcbiAgICAgICAgICAgICQoJyN1c2VybmFtZSwgI2Z1bGxuYW1lJykuZWRpdGFibGUoJ3ZhbGlkYXRlJyk7XG4gICAgICAgICAgICAvLyBwb3NzaWJsZSByZXN1bHQ6XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHVzZXJuYW1lOiBcInVzZXJuYW1lIGlzIHJlcXVpcmVkXCIsXG4gICAgICAgICAgICAgIGZ1bGxuYW1lOiBcImZ1bGxuYW1lIHNob3VsZCBiZSBtaW5pbXVtIDMgbGV0dGVycyBsZW5ndGhcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgKiovXG4gICAgICAgICAgICBjYXNlICd2YWxpZGF0ZSc6XG4gICAgICAgICAgICAgICAgdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyICR0aGlzID0gJCh0aGlzKSwgZGF0YSA9ICR0aGlzLmRhdGEoZGF0YWtleSksIGVycm9yO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YSAmJiAoZXJyb3IgPSBkYXRhLnZhbGlkYXRlKCkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRbZGF0YS5vcHRpb25zLm5hbWVdID0gZXJyb3I7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgUmV0dXJucyBjdXJyZW50IHZhbHVlcyBvZiBlZGl0YWJsZSBlbGVtZW50cy4gICBcbiAgICAgICAgICAgIE5vdGUgdGhhdCBpdCByZXR1cm5zIGFuICoqb2JqZWN0Kiogd2l0aCBuYW1lLXZhbHVlIHBhaXJzLCBub3QgYSB2YWx1ZSBpdHNlbGYuIEl0IGFsbG93cyB0byBnZXQgZGF0YSBmcm9tIHNldmVyYWwgZWxlbWVudHMuICAgIFxuICAgICAgICAgICAgSWYgdmFsdWUgb2Ygc29tZSBlZGl0YWJsZSBpcyBgbnVsbGAgb3IgYHVuZGVmaW5lZGAgaXQgaXMgZXhjbHVkZWQgZnJvbSByZXN1bHQgb2JqZWN0LlxuICAgICAgICAgICAgV2hlbiBwYXJhbSBgaXNTaW5nbGVgIGlzIHNldCB0byAqKnRydWUqKiAtIGl0IGlzIHN1cHBvc2VkIHlvdSBoYXZlIHNpbmdsZSBlbGVtZW50IGFuZCB3aWxsIHJldHVybiB2YWx1ZSBvZiBlZGl0YWJsZSBpbnN0ZWFkIG9mIG9iamVjdC4gICBcbiAgICAgICAgICAgICBcbiAgICAgICAgICAgIEBtZXRob2QgZ2V0VmFsdWUoKVxuICAgICAgICAgICAgQHBhcmFtIHtib29sfSBpc1NpbmdsZSB3aGV0aGVyIHRvIHJldHVybiBqdXN0IHZhbHVlIG9mIHNpbmdsZSBlbGVtZW50XG4gICAgICAgICAgICBAcmV0dXJucyB7T2JqZWN0fSBvYmplY3Qgb2YgZWxlbWVudCBuYW1lcyBhbmQgdmFsdWVzXG4gICAgICAgICAgICBAZXhhbXBsZVxuICAgICAgICAgICAgJCgnI3VzZXJuYW1lLCAjZnVsbG5hbWUnKS5lZGl0YWJsZSgnZ2V0VmFsdWUnKTtcbiAgICAgICAgICAgIC8vcmVzdWx0OlxuICAgICAgICAgICAge1xuICAgICAgICAgICAgdXNlcm5hbWU6IFwic3VwZXJ1c2VyXCIsXG4gICAgICAgICAgICBmdWxsbmFtZTogXCJKb2huXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vaXNTaW5nbGUgPSB0cnVlXG4gICAgICAgICAgICAkKCcjdXNlcm5hbWUnKS5lZGl0YWJsZSgnZ2V0VmFsdWUnLCB0cnVlKTtcbiAgICAgICAgICAgIC8vcmVzdWx0IFwic3VwZXJ1c2VyXCIgXG4gICAgICAgICAgICAqKi9cbiAgICAgICAgICAgIGNhc2UgJ2dldFZhbHVlJzpcbiAgICAgICAgICAgICAgICBpZihhcmd1bWVudHMubGVuZ3RoID09PSAyICYmIGFyZ3VtZW50c1sxXSA9PT0gdHJ1ZSkgeyAvL2lzU2luZ2xlID0gdHJ1ZVxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSB0aGlzLmVxKDApLmRhdGEoZGF0YWtleSkudmFsdWU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciAkdGhpcyA9ICQodGhpcyksIGRhdGEgPSAkdGhpcy5kYXRhKGRhdGFrZXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEgJiYgZGF0YS52YWx1ZSAhPT0gdW5kZWZpbmVkICYmIGRhdGEudmFsdWUgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRbZGF0YS5vcHRpb25zLm5hbWVdID0gZGF0YS5pbnB1dC52YWx1ZTJzdWJtaXQoZGF0YS52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgVGhpcyBtZXRob2QgY29sbGVjdHMgdmFsdWVzIGZyb20gc2V2ZXJhbCBlZGl0YWJsZSBlbGVtZW50cyBhbmQgc3VibWl0IHRoZW0gYWxsIHRvIHNlcnZlci4gICBcbiAgICAgICAgICAgIEludGVybmFsbHkgaXQgcnVucyBjbGllbnQtc2lkZSB2YWxpZGF0aW9uIGZvciBhbGwgZmllbGRzIGFuZCBzdWJtaXRzIG9ubHkgaW4gY2FzZSBvZiBzdWNjZXNzLiAgXG4gICAgICAgICAgICBTZWUgPGEgaHJlZj1cIiNuZXdyZWNvcmRcIj5jcmVhdGluZyBuZXcgcmVjb3JkczwvYT4gZm9yIGRldGFpbHMuICBcbiAgICAgICAgICAgIFNpbmNlIDEuNS4xIGBzdWJtaXRgIGNhbiBiZSBhcHBsaWVkIHRvIHNpbmdsZSBlbGVtZW50IHRvIHNlbmQgZGF0YSBwcm9ncmFtbWF0aWNhbGx5LiBJbiB0aGF0IGNhc2VcbiAgICAgICAgICAgIGB1cmxgLCBgc3VjY2Vzc2AgYW5kIGBlcnJvcmAgaXMgdGFrZW4gZnJvbSBpbml0aWFsIG9wdGlvbnMgYW5kIHlvdSBjYW4ganVzdCBjYWxsIGAkKCcjdXNlcm5hbWUnKS5lZGl0YWJsZSgnc3VibWl0JylgLiBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgQG1ldGhvZCBzdWJtaXQob3B0aW9ucylcbiAgICAgICAgICAgIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIFxuICAgICAgICAgICAgQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMudXJsIHVybCB0byBzdWJtaXQgZGF0YSBcbiAgICAgICAgICAgIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zLmRhdGEgYWRkaXRpb25hbCBkYXRhIHRvIHN1Ym1pdFxuICAgICAgICAgICAgQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMuYWpheE9wdGlvbnMgYWRkaXRpb25hbCBhamF4IG9wdGlvbnNcbiAgICAgICAgICAgIEBwYXJhbSB7ZnVuY3Rpb259IG9wdGlvbnMuZXJyb3Iob2JqKSBlcnJvciBoYW5kbGVyIFxuICAgICAgICAgICAgQHBhcmFtIHtmdW5jdGlvbn0gb3B0aW9ucy5zdWNjZXNzKG9iaixjb25maWcpIHN1Y2Nlc3MgaGFuZGxlclxuICAgICAgICAgICAgQHJldHVybnMge09iamVjdH0galF1ZXJ5IG9iamVjdFxuICAgICAgICAgICAgKiovXG4gICAgICAgICAgICBjYXNlICdzdWJtaXQnOiAgLy9jb2xsZWN0cyB2YWx1ZSwgdmFsaWRhdGUgYW5kIHN1Ym1pdCB0byBzZXJ2ZXIgZm9yIGNyZWF0aW5nIG5ldyByZWNvcmRcbiAgICAgICAgICAgICAgICB2YXIgY29uZmlnID0gYXJndW1lbnRzWzFdIHx8IHt9LFxuICAgICAgICAgICAgICAgICRlbGVtcyA9IHRoaXMsXG4gICAgICAgICAgICAgICAgZXJyb3JzID0gdGhpcy5lZGl0YWJsZSgndmFsaWRhdGUnKTtcblxuICAgICAgICAgICAgICAgIC8vIHZhbGlkYXRpb24gb2tcbiAgICAgICAgICAgICAgICBpZigkLmlzRW1wdHlPYmplY3QoZXJyb3JzKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYWpheE9wdGlvbnMgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyBmb3Igc2luZ2xlIGVsZW1lbnQgdXNlIHVybCwgc3VjY2VzcyBldGMgZnJvbSBvcHRpb25zXG4gICAgICAgICAgICAgICAgICAgIGlmKCRlbGVtcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlZGl0YWJsZSA9ICRlbGVtcy5kYXRhKCdlZGl0YWJsZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy9zdGFuZGFyZCBwYXJhbXNcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogZWRpdGFibGUub3B0aW9ucy5uYW1lIHx8ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBlZGl0YWJsZS5pbnB1dC52YWx1ZTJzdWJtaXQoZWRpdGFibGUudmFsdWUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBrOiAodHlwZW9mIGVkaXRhYmxlLm9wdGlvbnMucGsgPT09ICdmdW5jdGlvbicpID8gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVkaXRhYmxlLm9wdGlvbnMucGsuY2FsbChlZGl0YWJsZS5vcHRpb25zLnNjb3BlKSA6IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlZGl0YWJsZS5vcHRpb25zLnBrIFxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy9hZGRpdGlvbmFsIHBhcmFtc1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYodHlwZW9mIGVkaXRhYmxlLm9wdGlvbnMucGFyYW1zID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zID0gZWRpdGFibGUub3B0aW9ucy5wYXJhbXMuY2FsbChlZGl0YWJsZS5vcHRpb25zLnNjb3BlLCBwYXJhbXMpOyAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vdHJ5IHBhcnNlIGpzb24gaW4gc2luZ2xlIHF1b3RlcyAoZnJvbSBkYXRhLXBhcmFtcyBhdHRyaWJ1dGUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWRpdGFibGUub3B0aW9ucy5wYXJhbXMgPSAkLmZuLmVkaXRhYmxldXRpbHMudHJ5UGFyc2VKc29uKGVkaXRhYmxlLm9wdGlvbnMucGFyYW1zLCB0cnVlKTsgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmV4dGVuZChwYXJhbXMsIGVkaXRhYmxlLm9wdGlvbnMucGFyYW1zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgYWpheE9wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBlZGl0YWJsZS5vcHRpb25zLnVybCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBwYXJhbXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ1BPU1QnICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHVzZSBzdWNjZXNzIC8gZXJyb3IgZnJvbSBvcHRpb25zIFxuICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnLnN1Y2Nlc3MgPSBjb25maWcuc3VjY2VzcyB8fCBlZGl0YWJsZS5vcHRpb25zLnN1Y2Nlc3M7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25maWcuZXJyb3IgPSBjb25maWcuZXJyb3IgfHwgZWRpdGFibGUub3B0aW9ucy5lcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyBtdWx0aXBsZSBlbGVtZW50c1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlcyA9IHRoaXMuZWRpdGFibGUoJ2dldFZhbHVlJyk7IFxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBhamF4T3B0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IGNvbmZpZy51cmwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogdmFsdWVzLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnUE9TVCdcbiAgICAgICAgICAgICAgICAgICAgICAgIH07ICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgIFxuXG4gICAgICAgICAgICAgICAgICAgIC8vIGFqYXggc3VjY2VzcyBjYWxsYWJjayAocmVzcG9uc2UgMjAwIE9LKVxuICAgICAgICAgICAgICAgICAgICBhamF4T3B0aW9ucy5zdWNjZXNzID0gdHlwZW9mIGNvbmZpZy5zdWNjZXNzID09PSAnZnVuY3Rpb24nID8gZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWcuc3VjY2Vzcy5jYWxsKCRlbGVtcywgcmVzcG9uc2UsIGNvbmZpZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IDogJC5ub29wO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyBhamF4IGVycm9yIGNhbGxhYmNrXG4gICAgICAgICAgICAgICAgICAgIGFqYXhPcHRpb25zLmVycm9yID0gdHlwZW9mIGNvbmZpZy5lcnJvciA9PT0gJ2Z1bmN0aW9uJyA/IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWcuZXJyb3IuYXBwbHkoJGVsZW1zLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSA6ICQubm9vcDtcbiAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIC8vIGV4dGVuZCBhamF4T3B0aW9ucyAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYoY29uZmlnLmFqYXhPcHRpb25zKSB7IFxuICAgICAgICAgICAgICAgICAgICAgICAgJC5leHRlbmQoYWpheE9wdGlvbnMsIGNvbmZpZy5hamF4T3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIC8vIGV4dHJhIGRhdGEgXG4gICAgICAgICAgICAgICAgICAgIGlmKGNvbmZpZy5kYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkLmV4dGVuZChhamF4T3B0aW9ucy5kYXRhLCBjb25maWcuZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIC8vIHBlcmZvcm0gYWpheCByZXF1ZXN0XG4gICAgICAgICAgICAgICAgICAgICQuYWpheChhamF4T3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHsgLy9jbGllbnQtc2lkZSB2YWxpZGF0aW9uIGVycm9yXG4gICAgICAgICAgICAgICAgICAgIGlmKHR5cGVvZiBjb25maWcuZXJyb3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZy5lcnJvci5jYWxsKCRlbGVtcywgZXJyb3JzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgLy9yZXR1cm4ganF1ZXJ5IG9iamVjdFxuICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciAkdGhpcyA9ICQodGhpcyksIFxuICAgICAgICAgICAgICAgIGRhdGEgPSAkdGhpcy5kYXRhKGRhdGFrZXkpLCBcbiAgICAgICAgICAgICAgICBvcHRpb25zID0gdHlwZW9mIG9wdGlvbiA9PT0gJ29iamVjdCcgJiYgb3B0aW9uO1xuXG4gICAgICAgICAgICAvL2ZvciBkZWxlZ2F0ZWQgdGFyZ2V0cyBkbyBub3Qgc3RvcmUgYGVkaXRhYmxlYCBvYmplY3QgZm9yIGVsZW1lbnRcbiAgICAgICAgICAgIC8vaXQncyBhbGxvd3Mgc2V2ZXJhbCBkaWZmZXJlbnQgc2VsZWN0b3JzLlxuICAgICAgICAgICAgLy9zZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS92aXRhbGV0cy94LWVkaXRhYmxlL2lzc3Vlcy8zMTIgICAgXG4gICAgICAgICAgICBpZihvcHRpb25zICYmIG9wdGlvbnMuc2VsZWN0b3IpIHtcbiAgICAgICAgICAgICAgICBkYXRhID0gbmV3IEVkaXRhYmxlKHRoaXMsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIHJldHVybjsgXG4gICAgICAgICAgICB9ICAgIFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICAgICAgICAkdGhpcy5kYXRhKGRhdGFrZXksIChkYXRhID0gbmV3IEVkaXRhYmxlKHRoaXMsIG9wdGlvbnMpKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb3B0aW9uID09PSAnc3RyaW5nJykgeyAvL2NhbGwgbWV0aG9kIFxuICAgICAgICAgICAgICAgIGRhdGFbb3B0aW9uXS5hcHBseShkYXRhLCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmdzLCAxKSk7XG4gICAgICAgICAgICB9IFxuICAgICAgICB9KTtcbiAgICB9OyAgICBcbiAgICAgICAgICAgIFxuXG4gICAgJC5mbi5lZGl0YWJsZS5kZWZhdWx0cyA9IHtcbiAgICAgICAgLyoqXG4gICAgICAgIFR5cGUgb2YgaW5wdXQuIENhbiBiZSA8Y29kZT50ZXh0fHRleHRhcmVhfHNlbGVjdHxkYXRlfGNoZWNrbGlzdDwvY29kZT4gYW5kIG1vcmVcblxuICAgICAgICBAcHJvcGVydHkgdHlwZSBcbiAgICAgICAgQHR5cGUgc3RyaW5nXG4gICAgICAgIEBkZWZhdWx0ICd0ZXh0J1xuICAgICAgICAqKi9cbiAgICAgICAgdHlwZTogJ3RleHQnLCAgICAgICAgXG4gICAgICAgIC8qKlxuICAgICAgICBTZXRzIGRpc2FibGVkIHN0YXRlIG9mIGVkaXRhYmxlXG5cbiAgICAgICAgQHByb3BlcnR5IGRpc2FibGVkIFxuICAgICAgICBAdHlwZSBib29sZWFuXG4gICAgICAgIEBkZWZhdWx0IGZhbHNlXG4gICAgICAgICoqLyAgICAgICAgIFxuICAgICAgICBkaXNhYmxlZDogZmFsc2UsXG4gICAgICAgIC8qKlxuICAgICAgICBIb3cgdG8gdG9nZ2xlIGVkaXRhYmxlLiBDYW4gYmUgPGNvZGU+Y2xpY2t8ZGJsY2xpY2t8bW91c2VlbnRlcnxtYW51YWw8L2NvZGU+LiAgIFxuICAgICAgICBXaGVuIHNldCB0byA8Y29kZT5tYW51YWw8L2NvZGU+IHlvdSBzaG91bGQgbWFudWFsbHkgY2FsbCA8Y29kZT5zaG93L2hpZGU8L2NvZGU+IG1ldGhvZHMgb2YgZWRpdGFibGUuICAgIFxuICAgICAgICAqKk5vdGUqKjogaWYgeW91IGNhbGwgPGNvZGU+c2hvdzwvY29kZT4gb3IgPGNvZGU+dG9nZ2xlPC9jb2RlPiBpbnNpZGUgKipjbGljayoqIGhhbmRsZXIgb2Ygc29tZSBET00gZWxlbWVudCwgXG4gICAgICAgIHlvdSBuZWVkIHRvIGFwcGx5IDxjb2RlPmUuc3RvcFByb3BhZ2F0aW9uKCk8L2NvZGU+IGJlY2F1c2UgY29udGFpbmVycyBhcmUgYmVpbmcgY2xvc2VkIG9uIGFueSBjbGljayBvbiBkb2N1bWVudC5cbiAgICAgICAgXG4gICAgICAgIEBleGFtcGxlXG4gICAgICAgICQoJyNlZGl0LWJ1dHRvbicpLmNsaWNrKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAkKCcjdXNlcm5hbWUnKS5lZGl0YWJsZSgndG9nZ2xlJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIEBwcm9wZXJ0eSB0b2dnbGUgXG4gICAgICAgIEB0eXBlIHN0cmluZ1xuICAgICAgICBAZGVmYXVsdCAnY2xpY2snXG4gICAgICAgICoqLyAgICAgICAgICBcbiAgICAgICAgdG9nZ2xlOiAnY2xpY2snLFxuICAgICAgICAvKipcbiAgICAgICAgVGV4dCBzaG93biB3aGVuIGVsZW1lbnQgaXMgZW1wdHkuXG5cbiAgICAgICAgQHByb3BlcnR5IGVtcHR5dGV4dCBcbiAgICAgICAgQHR5cGUgc3RyaW5nXG4gICAgICAgIEBkZWZhdWx0ICdFbXB0eSdcbiAgICAgICAgKiovICAgICAgICAgXG4gICAgICAgIGVtcHR5dGV4dDogJ0VtcHR5JyxcbiAgICAgICAgLyoqXG4gICAgICAgIEFsbG93cyB0byBhdXRvbWF0aWNhbGx5IHNldCBlbGVtZW50J3MgdGV4dCBiYXNlZCBvbiBpdCdzIHZhbHVlLiBDYW4gYmUgPGNvZGU+YXV0b3xhbHdheXN8bmV2ZXI8L2NvZGU+LiBVc2VmdWwgZm9yIHNlbGVjdCBhbmQgZGF0ZS5cbiAgICAgICAgRm9yIGV4YW1wbGUsIGlmIGRyb3Bkb3duIGxpc3QgaXMgPGNvZGU+ezE6ICdhJywgMjogJ2InfTwvY29kZT4gYW5kIGVsZW1lbnQncyB2YWx1ZSBzZXQgdG8gPGNvZGU+MTwvY29kZT4sIGl0J3MgaHRtbCB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgc2V0IHRvIDxjb2RlPidhJzwvY29kZT4uICBcbiAgICAgICAgPGNvZGU+YXV0bzwvY29kZT4gLSB0ZXh0IHdpbGwgYmUgYXV0b21hdGljYWxseSBzZXQgb25seSBpZiBlbGVtZW50IGlzIGVtcHR5LiAgXG4gICAgICAgIDxjb2RlPmFsd2F5c3xuZXZlcjwvY29kZT4gLSBhbHdheXMobmV2ZXIpIHRyeSB0byBzZXQgZWxlbWVudCdzIHRleHQuXG5cbiAgICAgICAgQHByb3BlcnR5IGF1dG90ZXh0IFxuICAgICAgICBAdHlwZSBzdHJpbmdcbiAgICAgICAgQGRlZmF1bHQgJ2F1dG8nXG4gICAgICAgICoqLyAgICAgICAgICBcbiAgICAgICAgYXV0b3RleHQ6ICdhdXRvJywgXG4gICAgICAgIC8qKlxuICAgICAgICBJbml0aWFsIHZhbHVlIG9mIGlucHV0LiBJZiBub3Qgc2V0LCB0YWtlbiBmcm9tIGVsZW1lbnQncyB0ZXh0LiAgXG4gICAgICAgIE5vdGUsIHRoYXQgaWYgZWxlbWVudCdzIHRleHQgaXMgZW1wdHkgLSB0ZXh0IGlzIGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVkIGZyb20gdmFsdWUgYW5kIGNhbiBiZSBjdXN0b21pemVkIChzZWUgYGF1dG90ZXh0YCBvcHRpb24pLiAgXG4gICAgICAgIEZvciBleGFtcGxlLCB0byBkaXNwbGF5IGN1cnJlbmN5IHNpZ246XG4gICAgICAgIEBleGFtcGxlXG4gICAgICAgIDxhIGlkPVwicHJpY2VcIiBkYXRhLXR5cGU9XCJ0ZXh0XCIgZGF0YS12YWx1ZT1cIjEwMFwiPjwvYT5cbiAgICAgICAgPHNjcmlwdD5cbiAgICAgICAgJCgnI3ByaWNlJykuZWRpdGFibGUoe1xuICAgICAgICAgICAgLi4uXG4gICAgICAgICAgICBkaXNwbGF5OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgICAkKHRoaXMpLnRleHQodmFsdWUgKyAnJCcpO1xuICAgICAgICAgICAgfSBcbiAgICAgICAgfSkgXG4gICAgICAgIDwvc2NyaXB0PlxuICAgICAgICAgICAgICAgIFxuICAgICAgICBAcHJvcGVydHkgdmFsdWUgXG4gICAgICAgIEB0eXBlIG1peGVkXG4gICAgICAgIEBkZWZhdWx0IGVsZW1lbnQncyB0ZXh0XG4gICAgICAgICoqL1xuICAgICAgICB2YWx1ZTogbnVsbCxcbiAgICAgICAgLyoqXG4gICAgICAgIENhbGxiYWNrIHRvIHBlcmZvcm0gY3VzdG9tIGRpc3BsYXlpbmcgb2YgdmFsdWUgaW4gZWxlbWVudCdzIHRleHQuICBcbiAgICAgICAgSWYgYG51bGxgLCBkZWZhdWx0IGlucHV0J3MgZGlzcGxheSB1c2VkLiAgXG4gICAgICAgIElmIGBmYWxzZWAsIG5vIGRpc3BsYXlpbmcgbWV0aG9kcyB3aWxsIGJlIGNhbGxlZCwgZWxlbWVudCdzIHRleHQgd2lsbCBuZXZlciBjaGFuZ2UuICBcbiAgICAgICAgUnVucyB1bmRlciBlbGVtZW50J3Mgc2NvcGUuICBcbiAgICAgICAgXyoqUGFyYW1ldGVyczoqKl8gIFxuICAgICAgICBcbiAgICAgICAgKiBgdmFsdWVgIGN1cnJlbnQgdmFsdWUgdG8gYmUgZGlzcGxheWVkXG4gICAgICAgICogYHJlc3BvbnNlYCBzZXJ2ZXIgcmVzcG9uc2UgKGlmIGRpc3BsYXkgY2FsbGVkIGFmdGVyIGFqYXggc3VibWl0KSwgc2luY2UgMS40LjBcbiAgICAgICAgIFxuICAgICAgICBGb3IgX2lucHV0cyB3aXRoIHNvdXJjZV8gKHNlbGVjdCwgY2hlY2tsaXN0KSBwYXJhbWV0ZXJzIGFyZSBkaWZmZXJlbnQ6ICBcbiAgICAgICAgICBcbiAgICAgICAgKiBgdmFsdWVgIGN1cnJlbnQgdmFsdWUgdG8gYmUgZGlzcGxheWVkXG4gICAgICAgICogYHNvdXJjZURhdGFgIGFycmF5IG9mIGl0ZW1zIGZvciBjdXJyZW50IGlucHV0IChlLmcuIGRyb3Bkb3duIGl0ZW1zKSBcbiAgICAgICAgKiBgcmVzcG9uc2VgIHNlcnZlciByZXNwb25zZSAoaWYgZGlzcGxheSBjYWxsZWQgYWZ0ZXIgYWpheCBzdWJtaXQpLCBzaW5jZSAxLjQuMFxuICAgICAgICAgICAgICAgICAgXG4gICAgICAgIFRvIGdldCBjdXJyZW50bHkgc2VsZWN0ZWQgaXRlbXMgdXNlIGAkLmZuLmVkaXRhYmxldXRpbHMuaXRlbXNCeVZhbHVlKHZhbHVlLCBzb3VyY2VEYXRhKWAuXG4gICAgICAgIFxuICAgICAgICBAcHJvcGVydHkgZGlzcGxheSBcbiAgICAgICAgQHR5cGUgZnVuY3Rpb258Ym9vbGVhblxuICAgICAgICBAZGVmYXVsdCBudWxsXG4gICAgICAgIEBzaW5jZSAxLjIuMFxuICAgICAgICBAZXhhbXBsZVxuICAgICAgICBkaXNwbGF5OiBmdW5jdGlvbih2YWx1ZSwgc291cmNlRGF0YSkge1xuICAgICAgICAgICAvL2Rpc3BsYXkgY2hlY2tsaXN0IGFzIGNvbW1hLXNlcGFyYXRlZCB2YWx1ZXNcbiAgICAgICAgICAgdmFyIGh0bWwgPSBbXSxcbiAgICAgICAgICAgICAgIGNoZWNrZWQgPSAkLmZuLmVkaXRhYmxldXRpbHMuaXRlbXNCeVZhbHVlKHZhbHVlLCBzb3VyY2VEYXRhKTtcbiAgICAgICAgICAgICAgIFxuICAgICAgICAgICBpZihjaGVja2VkLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgJC5lYWNoKGNoZWNrZWQsIGZ1bmN0aW9uKGksIHYpIHsgaHRtbC5wdXNoKCQuZm4uZWRpdGFibGV1dGlscy5lc2NhcGUodi50ZXh0KSk7IH0pO1xuICAgICAgICAgICAgICAgJCh0aGlzKS5odG1sKGh0bWwuam9pbignLCAnKSk7XG4gICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAkKHRoaXMpLmVtcHR5KCk7IFxuICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgKiovICAgICAgICAgIFxuICAgICAgICBkaXNwbGF5OiBudWxsLFxuICAgICAgICAvKipcbiAgICAgICAgQ3NzIGNsYXNzIGFwcGxpZWQgd2hlbiBlZGl0YWJsZSB0ZXh0IGlzIGVtcHR5LlxuXG4gICAgICAgIEBwcm9wZXJ0eSBlbXB0eWNsYXNzIFxuICAgICAgICBAdHlwZSBzdHJpbmdcbiAgICAgICAgQHNpbmNlIDEuNC4xICAgICAgICBcbiAgICAgICAgQGRlZmF1bHQgZWRpdGFibGUtZW1wdHlcbiAgICAgICAgKiovICAgICAgICBcbiAgICAgICAgZW1wdHljbGFzczogJ2VkaXRhYmxlLWVtcHR5JyxcbiAgICAgICAgLyoqXG4gICAgICAgIENzcyBjbGFzcyBhcHBsaWVkIHdoZW4gdmFsdWUgd2FzIHN0b3JlZCBidXQgbm90IHNlbnQgdG8gc2VydmVyIChgcGtgIGlzIGVtcHR5IG9yIGBzZW5kID0gJ25ldmVyJ2ApLiAgXG4gICAgICAgIFlvdSBtYXkgc2V0IGl0IHRvIGBudWxsYCBpZiB5b3Ugd29yayB3aXRoIGVkaXRhYmxlcyBsb2NhbGx5IGFuZCBzdWJtaXQgdGhlbSB0b2dldGhlci4gIFxuXG4gICAgICAgIEBwcm9wZXJ0eSB1bnNhdmVkY2xhc3MgXG4gICAgICAgIEB0eXBlIHN0cmluZ1xuICAgICAgICBAc2luY2UgMS40LjEgICAgICAgIFxuICAgICAgICBAZGVmYXVsdCBlZGl0YWJsZS11bnNhdmVkXG4gICAgICAgICoqLyAgICAgICAgXG4gICAgICAgIHVuc2F2ZWRjbGFzczogJ2VkaXRhYmxlLXVuc2F2ZWQnLFxuICAgICAgICAvKipcbiAgICAgICAgSWYgc2VsZWN0b3IgaXMgcHJvdmlkZWQsIGVkaXRhYmxlIHdpbGwgYmUgZGVsZWdhdGVkIHRvIHRoZSBzcGVjaWZpZWQgdGFyZ2V0cy4gIFxuICAgICAgICBVc2VmdWxsIGZvciBkeW5hbWljYWxseSBnZW5lcmF0ZWQgRE9NIGVsZW1lbnRzLiAgXG4gICAgICAgICoqUGxlYXNlIG5vdGUqKiwgdGhhdCBkZWxlZ2F0ZWQgdGFyZ2V0cyBjYW4ndCBiZSBpbml0aWFsaXplZCB3aXRoIGBlbXB0eXRleHRgIGFuZCBgYXV0b3RleHRgIG9wdGlvbnMsIFxuICAgICAgICBhcyB0aGV5IGFjdHVhbGx5IGJlY29tZSBlZGl0YWJsZSBvbmx5IGFmdGVyIGZpcnN0IGNsaWNrLiAgXG4gICAgICAgIFlvdSBzaG91bGQgbWFudWFsbHkgc2V0IGNsYXNzIGBlZGl0YWJsZS1jbGlja2AgdG8gdGhlc2UgZWxlbWVudHMuICBcbiAgICAgICAgQWxzbywgaWYgZWxlbWVudCBvcmlnaW5hbGx5IGVtcHR5IHlvdSBzaG91bGQgYWRkIGNsYXNzIGBlZGl0YWJsZS1lbXB0eWAsIHNldCBgZGF0YS12YWx1ZT1cIlwiYCBhbmQgd3JpdGUgZW1wdHl0ZXh0IGludG8gZWxlbWVudDpcblxuICAgICAgICBAcHJvcGVydHkgc2VsZWN0b3IgXG4gICAgICAgIEB0eXBlIHN0cmluZ1xuICAgICAgICBAc2luY2UgMS40LjEgICAgICAgIFxuICAgICAgICBAZGVmYXVsdCBudWxsXG4gICAgICAgIEBleGFtcGxlXG4gICAgICAgIDxkaXYgaWQ9XCJ1c2VyXCI+XG4gICAgICAgICAgPCEtLSBlbXB0eSAtLT5cbiAgICAgICAgICA8YSBocmVmPVwiI1wiIGRhdGEtbmFtZT1cInVzZXJuYW1lXCIgZGF0YS10eXBlPVwidGV4dFwiIGNsYXNzPVwiZWRpdGFibGUtY2xpY2sgZWRpdGFibGUtZW1wdHlcIiBkYXRhLXZhbHVlPVwiXCIgdGl0bGU9XCJVc2VybmFtZVwiPkVtcHR5PC9hPlxuICAgICAgICAgIDwhLS0gbm9uLWVtcHR5IC0tPlxuICAgICAgICAgIDxhIGhyZWY9XCIjXCIgZGF0YS1uYW1lPVwiZ3JvdXBcIiBkYXRhLXR5cGU9XCJzZWxlY3RcIiBkYXRhLXNvdXJjZT1cIi9ncm91cHNcIiBkYXRhLXZhbHVlPVwiMVwiIGNsYXNzPVwiZWRpdGFibGUtY2xpY2tcIiB0aXRsZT1cIkdyb3VwXCI+T3BlcmF0b3I8L2E+XG4gICAgICAgIDwvZGl2PiAgICAgXG4gICAgICAgIFxuICAgICAgICA8c2NyaXB0PlxuICAgICAgICAkKCcjdXNlcicpLmVkaXRhYmxlKHtcbiAgICAgICAgICAgIHNlbGVjdG9yOiAnYScsXG4gICAgICAgICAgICB1cmw6ICcvcG9zdCcsXG4gICAgICAgICAgICBwazogMVxuICAgICAgICB9KTtcbiAgICAgICAgPC9zY3JpcHQ+XG4gICAgICAgICoqLyAgICAgICAgIFxuICAgICAgICBzZWxlY3RvcjogbnVsbCxcbiAgICAgICAgLyoqXG4gICAgICAgIENvbG9yIHVzZWQgdG8gaGlnaGxpZ2h0IGVsZW1lbnQgYWZ0ZXIgdXBkYXRlLiBJbXBsZW1lbnRlZCB2aWEgQ1NTMyB0cmFuc2l0aW9uLCB3b3JrcyBpbiBtb2Rlcm4gYnJvd3NlcnMuXG4gICAgICAgIFxuICAgICAgICBAcHJvcGVydHkgaGlnaGxpZ2h0IFxuICAgICAgICBAdHlwZSBzdHJpbmd8Ym9vbGVhblxuICAgICAgICBAc2luY2UgMS40LjUgICAgICAgIFxuICAgICAgICBAZGVmYXVsdCAjRkZGRjgwIFxuICAgICAgICAqKi9cbiAgICAgICAgaGlnaGxpZ2h0OiAnI0ZGRkY4MCdcbiAgICB9O1xuICAgIFxufSh3aW5kb3cualF1ZXJ5KSk7XG5cbi8qKlxuQWJzdHJhY3RJbnB1dCAtIGJhc2UgY2xhc3MgZm9yIGFsbCBlZGl0YWJsZSBpbnB1dHMuXG5JdCBkZWZpbmVzIGludGVyZmFjZSB0byBiZSBpbXBsZW1lbnRlZCBieSBhbnkgaW5wdXQgdHlwZS5cblRvIGNyZWF0ZSB5b3VyIG93biBpbnB1dCB5b3UgY2FuIGluaGVyaXQgZnJvbSB0aGlzIGNsYXNzLlxuXG5AY2xhc3MgYWJzdHJhY3RpbnB1dFxuKiovXG4oZnVuY3Rpb24gKCQpIHtcblxuICAgIC8vdHlwZXNcbiAgICAkLmZuLmVkaXRhYmxldHlwZXMgPSB7fTtcblxuICAgIHZhciBBYnN0cmFjdElucHV0ID0gZnVuY3Rpb24gKCkgeyB9O1xuXG4gICAgQWJzdHJhY3RJbnB1dC5wcm90b3R5cGUgPSB7XG4gICAgICAgLyoqXG4gICAgICAgIEluaXRpYWxpemVzIGlucHV0XG5cbiAgICAgICAgQG1ldGhvZCBpbml0KCkgXG4gICAgICAgICoqL1xuICAgICAgIGluaXQ6IGZ1bmN0aW9uKHR5cGUsIG9wdGlvbnMsIGRlZmF1bHRzKSB7XG4gICAgICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgICAgICAgIHRoaXMub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBkZWZhdWx0cywgb3B0aW9ucyk7XG4gICAgICAgfSxcblxuICAgICAgIC8qXG4gICAgICAgdGhpcyBtZXRob2QgY2FsbGVkIGJlZm9yZSByZW5kZXIgdG8gaW5pdCAkdHBsIHRoYXQgaXMgaW5zZXJ0ZWQgaW4gRE9NXG4gICAgICAgKi9cbiAgICAgICBwcmVyZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICB0aGlzLiR0cGwgPSAkKHRoaXMub3B0aW9ucy50cGwpOyAvL3dob2xlIHRwbCBhcyBqcXVlcnkgb2JqZWN0ICAgIFxuICAgICAgICAgICB0aGlzLiRpbnB1dCA9IHRoaXMuJHRwbDsgICAgICAgICAvL2NvbnRyb2wgaXRzZWxmLCBjYW4gYmUgY2hhbmdlZCBpbiByZW5kZXIgbWV0aG9kXG4gICAgICAgICAgIHRoaXMuJGNsZWFyID0gbnVsbDsgICAgICAgICAgICAgIC8vY2xlYXIgYnV0dG9uXG4gICAgICAgICAgIHRoaXMuZXJyb3IgPSBudWxsOyAgICAgICAgICAgICAgIC8vZXJyb3IgbWVzc2FnZSwgaWYgaW5wdXQgY2Fubm90IGJlIHJlbmRlcmVkICAgICAgICAgICBcbiAgICAgICB9LFxuICAgICAgIFxuICAgICAgIC8qKlxuICAgICAgICBSZW5kZXJzIGlucHV0IGZyb20gdHBsLiBDYW4gcmV0dXJuIGpRdWVyeSBkZWZlcnJlZCBvYmplY3QuXG4gICAgICAgIENhbiBiZSBvdmVyd3JpdHRlbiBpbiBjaGlsZCBvYmplY3RzXG5cbiAgICAgICAgQG1ldGhvZCByZW5kZXIoKVxuICAgICAgICoqL1xuICAgICAgIHJlbmRlcjogZnVuY3Rpb24oKSB7XG5cbiAgICAgICB9LCBcblxuICAgICAgIC8qKlxuICAgICAgICBTZXRzIGVsZW1lbnQncyBodG1sIGJ5IHZhbHVlLiBcblxuICAgICAgICBAbWV0aG9kIHZhbHVlMmh0bWwodmFsdWUsIGVsZW1lbnQpXG4gICAgICAgIEBwYXJhbSB7bWl4ZWR9IHZhbHVlXG4gICAgICAgIEBwYXJhbSB7RE9NRWxlbWVudH0gZWxlbWVudFxuICAgICAgICoqL1xuICAgICAgIHZhbHVlMmh0bWw6IGZ1bmN0aW9uKHZhbHVlLCBlbGVtZW50KSB7XG4gICAgICAgICAgICQoZWxlbWVudClbdGhpcy5vcHRpb25zLmVzY2FwZSA/ICd0ZXh0JyA6ICdodG1sJ10oJC50cmltKHZhbHVlKSk7XG4gICAgICAgfSxcblxuICAgICAgIC8qKlxuICAgICAgICBDb252ZXJ0cyBlbGVtZW50J3MgaHRtbCB0byB2YWx1ZVxuXG4gICAgICAgIEBtZXRob2QgaHRtbDJ2YWx1ZShodG1sKVxuICAgICAgICBAcGFyYW0ge3N0cmluZ30gaHRtbFxuICAgICAgICBAcmV0dXJucyB7bWl4ZWR9XG4gICAgICAgKiovXG4gICAgICAgaHRtbDJ2YWx1ZTogZnVuY3Rpb24oaHRtbCkge1xuICAgICAgICAgICByZXR1cm4gJCgnPGRpdj4nKS5odG1sKGh0bWwpLnRleHQoKTtcbiAgICAgICB9LFxuXG4gICAgICAgLyoqXG4gICAgICAgIENvbnZlcnRzIHZhbHVlIHRvIHN0cmluZyAoZm9yIGludGVybmFsIGNvbXBhcmUpLiBGb3Igc3VibWl0dGluZyB0byBzZXJ2ZXIgdXNlZCB2YWx1ZTJzdWJtaXQoKS5cblxuICAgICAgICBAbWV0aG9kIHZhbHVlMnN0cih2YWx1ZSkgXG4gICAgICAgIEBwYXJhbSB7bWl4ZWR9IHZhbHVlXG4gICAgICAgIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICAgKiovXG4gICAgICAgdmFsdWUyc3RyOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgfSwgXG5cbiAgICAgICAvKipcbiAgICAgICAgQ29udmVydHMgc3RyaW5nIHJlY2VpdmVkIGZyb20gc2VydmVyIGludG8gdmFsdWUuIFVzdWFsbHkgZnJvbSBgZGF0YS12YWx1ZWAgYXR0cmlidXRlLlxuXG4gICAgICAgIEBtZXRob2Qgc3RyMnZhbHVlKHN0cilcbiAgICAgICAgQHBhcmFtIHtzdHJpbmd9IHN0clxuICAgICAgICBAcmV0dXJucyB7bWl4ZWR9XG4gICAgICAgKiovXG4gICAgICAgc3RyMnZhbHVlOiBmdW5jdGlvbihzdHIpIHtcbiAgICAgICAgICAgcmV0dXJuIHN0cjtcbiAgICAgICB9LCBcbiAgICAgICBcbiAgICAgICAvKipcbiAgICAgICAgQ29udmVydHMgdmFsdWUgZm9yIHN1Ym1pdHRpbmcgdG8gc2VydmVyLiBSZXN1bHQgY2FuIGJlIHN0cmluZyBvciBvYmplY3QuXG5cbiAgICAgICAgQG1ldGhvZCB2YWx1ZTJzdWJtaXQodmFsdWUpIFxuICAgICAgICBAcGFyYW0ge21peGVkfSB2YWx1ZVxuICAgICAgICBAcmV0dXJucyB7bWl4ZWR9XG4gICAgICAgKiovXG4gICAgICAgdmFsdWUyc3VibWl0OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgfSxcblxuICAgICAgIC8qKlxuICAgICAgICBTZXRzIHZhbHVlIG9mIGlucHV0LlxuXG4gICAgICAgIEBtZXRob2QgdmFsdWUyaW5wdXQodmFsdWUpIFxuICAgICAgICBAcGFyYW0ge21peGVkfSB2YWx1ZVxuICAgICAgICoqL1xuICAgICAgIHZhbHVlMmlucHV0OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICB0aGlzLiRpbnB1dC52YWwodmFsdWUpO1xuICAgICAgIH0sXG5cbiAgICAgICAvKipcbiAgICAgICAgUmV0dXJucyB2YWx1ZSBvZiBpbnB1dC4gVmFsdWUgY2FuIGJlIG9iamVjdCAoZS5nLiBkYXRlcGlja2VyKVxuXG4gICAgICAgIEBtZXRob2QgaW5wdXQydmFsdWUoKSBcbiAgICAgICAqKi9cbiAgICAgICBpbnB1dDJ2YWx1ZTogZnVuY3Rpb24oKSB7IFxuICAgICAgICAgICByZXR1cm4gdGhpcy4kaW5wdXQudmFsKCk7XG4gICAgICAgfSwgXG5cbiAgICAgICAvKipcbiAgICAgICAgQWN0aXZhdGVzIGlucHV0LiBGb3IgdGV4dCBpdCBzZXRzIGZvY3VzLlxuXG4gICAgICAgIEBtZXRob2QgYWN0aXZhdGUoKSBcbiAgICAgICAqKi9cbiAgICAgICBhY3RpdmF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgIGlmKHRoaXMuJGlucHV0LmlzKCc6dmlzaWJsZScpKSB7XG4gICAgICAgICAgICAgICB0aGlzLiRpbnB1dC5mb2N1cygpO1xuICAgICAgICAgICB9XG4gICAgICAgfSxcblxuICAgICAgIC8qKlxuICAgICAgICBDcmVhdGVzIGlucHV0LlxuXG4gICAgICAgIEBtZXRob2QgY2xlYXIoKSBcbiAgICAgICAqKi8gICAgICAgIFxuICAgICAgIGNsZWFyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgdGhpcy4kaW5wdXQudmFsKG51bGwpO1xuICAgICAgIH0sXG5cbiAgICAgICAvKipcbiAgICAgICAgbWV0aG9kIHRvIGVzY2FwZSBodG1sLlxuICAgICAgICoqL1xuICAgICAgIGVzY2FwZTogZnVuY3Rpb24oc3RyKSB7XG4gICAgICAgICAgIHJldHVybiAkKCc8ZGl2PicpLnRleHQoc3RyKS5odG1sKCk7XG4gICAgICAgfSxcbiAgICAgICBcbiAgICAgICAvKipcbiAgICAgICAgYXR0YWNoIGhhbmRsZXIgdG8gYXV0b21hdGljYWxseSBzdWJtaXQgZm9ybSB3aGVuIHZhbHVlIGNoYW5nZWQgKHVzZWZ1bCB3aGVuIGJ1dHRvbnMgbm90IHNob3duKVxuICAgICAgICoqL1xuICAgICAgIGF1dG9zdWJtaXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBcbiAgICAgICB9LFxuICAgICAgIFxuICAgICAgIC8qKlxuICAgICAgIEFkZGl0aW9uYWwgYWN0aW9ucyB3aGVuIGRlc3Ryb3lpbmcgZWxlbWVudCBcbiAgICAgICAqKi9cbiAgICAgICBkZXN0cm95OiBmdW5jdGlvbigpIHtcbiAgICAgICB9LFxuXG4gICAgICAgLy8gLS0tLS0tLS0gaGVscGVyIGZ1bmN0aW9ucyAtLS0tLS0tLVxuICAgICAgIHNldENsYXNzOiBmdW5jdGlvbigpIHsgICAgICAgICAgXG4gICAgICAgICAgIGlmKHRoaXMub3B0aW9ucy5pbnB1dGNsYXNzKSB7XG4gICAgICAgICAgICAgICB0aGlzLiRpbnB1dC5hZGRDbGFzcyh0aGlzLm9wdGlvbnMuaW5wdXRjbGFzcyk7IFxuICAgICAgICAgICB9IFxuICAgICAgIH0sXG5cbiAgICAgICBzZXRBdHRyOiBmdW5jdGlvbihhdHRyKSB7XG4gICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnNbYXR0cl0gIT09IHVuZGVmaW5lZCAmJiB0aGlzLm9wdGlvbnNbYXR0cl0gIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgIHRoaXMuJGlucHV0LmF0dHIoYXR0ciwgdGhpcy5vcHRpb25zW2F0dHJdKTtcbiAgICAgICAgICAgfSBcbiAgICAgICB9LFxuICAgICAgIFxuICAgICAgIG9wdGlvbjogZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zW2tleV0gPSB2YWx1ZTtcbiAgICAgICB9XG4gICAgICAgXG4gICAgfTtcbiAgICAgICAgXG4gICAgQWJzdHJhY3RJbnB1dC5kZWZhdWx0cyA9IHsgIFxuICAgICAgICAvKipcbiAgICAgICAgSFRNTCB0ZW1wbGF0ZSBvZiBpbnB1dC4gTm9ybWFsbHkgeW91IHNob3VsZCBub3QgY2hhbmdlIGl0LlxuXG4gICAgICAgIEBwcm9wZXJ0eSB0cGwgXG4gICAgICAgIEB0eXBlIHN0cmluZ1xuICAgICAgICBAZGVmYXVsdCAnJ1xuICAgICAgICAqKi8gICBcbiAgICAgICAgdHBsOiAnJyxcbiAgICAgICAgLyoqXG4gICAgICAgIENTUyBjbGFzcyBhdXRvbWF0aWNhbGx5IGFwcGxpZWQgdG8gaW5wdXRcbiAgICAgICAgXG4gICAgICAgIEBwcm9wZXJ0eSBpbnB1dGNsYXNzIFxuICAgICAgICBAdHlwZSBzdHJpbmdcbiAgICAgICAgQGRlZmF1bHQgbnVsbFxuICAgICAgICAqKi8gICAgICAgICBcbiAgICAgICAgaW5wdXRjbGFzczogbnVsbCxcbiAgICAgICAgXG4gICAgICAgIC8qKlxuICAgICAgICBJZiBgdHJ1ZWAgLSBodG1sIHdpbGwgYmUgZXNjYXBlZCBpbiBjb250ZW50IG9mIGVsZW1lbnQgdmlhICQudGV4dCgpIG1ldGhvZC4gIFxuICAgICAgICBJZiBgZmFsc2VgIC0gaHRtbCB3aWxsIG5vdCBiZSBlc2NhcGVkLCAkLmh0bWwoKSB1c2VkLiAgXG4gICAgICAgIFdoZW4geW91IHVzZSBvd24gYGRpc3BsYXlgIGZ1bmN0aW9uLCB0aGlzIG9wdGlvbiBvYnZpb3NseSBoYXMgbm8gZWZmZWN0LlxuICAgICAgICBcbiAgICAgICAgQHByb3BlcnR5IGVzY2FwZSBcbiAgICAgICAgQHR5cGUgYm9vbGVhblxuICAgICAgICBAc2luY2UgMS41LjBcbiAgICAgICAgQGRlZmF1bHQgdHJ1ZVxuICAgICAgICAqKi8gICAgICAgICBcbiAgICAgICAgZXNjYXBlOiB0cnVlLFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAvL3Njb3BlIGZvciBleHRlcm5hbCBtZXRob2RzIChlLmcuIHNvdXJjZSBkZWZpbmVkIGFzIGZ1bmN0aW9uKVxuICAgICAgICAvL2ZvciBpbnRlcm5hbCB1c2Ugb25seVxuICAgICAgICBzY29wZTogbnVsbCxcbiAgICAgICAgXG4gICAgICAgIC8vbmVlZCB0byByZS1kZWNsYXJlIHNob3didXR0b25zIGhlcmUgdG8gZ2V0IGl0J3MgdmFsdWUgZnJvbSBjb21tb24gY29uZmlnIChwYXNzZWQgb25seSBvcHRpb25zIGV4aXN0aW5nIGluIGRlZmF1bHRzKVxuICAgICAgICBzaG93YnV0dG9uczogdHJ1ZSBcbiAgICB9O1xuICAgIFxuICAgICQuZXh0ZW5kKCQuZm4uZWRpdGFibGV0eXBlcywge2Fic3RyYWN0aW5wdXQ6IEFic3RyYWN0SW5wdXR9KTtcbiAgICAgICAgXG59KHdpbmRvdy5qUXVlcnkpKTtcblxuLyoqXG5MaXN0IC0gYWJzdHJhY3QgY2xhc3MgZm9yIGlucHV0cyB0aGF0IGhhdmUgc291cmNlIG9wdGlvbiBsb2FkZWQgZnJvbSBqcyBhcnJheSBvciB2aWEgYWpheFxuXG5AY2xhc3MgbGlzdFxuQGV4dGVuZHMgYWJzdHJhY3RpbnB1dFxuKiovXG4oZnVuY3Rpb24gKCQpIHtcblxuICAgIHZhciBMaXN0ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICBcbiAgICB9O1xuXG4gICAgJC5mbi5lZGl0YWJsZXV0aWxzLmluaGVyaXQoTGlzdCwgJC5mbi5lZGl0YWJsZXR5cGVzLmFic3RyYWN0aW5wdXQpO1xuXG4gICAgJC5leHRlbmQoTGlzdC5wcm90b3R5cGUsIHtcbiAgICAgICAgcmVuZGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgZGVmZXJyZWQgPSAkLkRlZmVycmVkKCk7XG5cbiAgICAgICAgICAgIHRoaXMuZXJyb3IgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5vblNvdXJjZVJlYWR5KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlckxpc3QoKTtcbiAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKCk7XG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lcnJvciA9IHRoaXMub3B0aW9ucy5zb3VyY2VFcnJvcjtcbiAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2UoKTtcbiAgICAgICAgfSxcblxuICAgICAgICBodG1sMnZhbHVlOiBmdW5jdGlvbiAoaHRtbCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7IC8vY2FuJ3Qgc2V0IHZhbHVlIGJ5IHRleHRcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIHZhbHVlMmh0bWw6IGZ1bmN0aW9uICh2YWx1ZSwgZWxlbWVudCwgZGlzcGxheSwgcmVzcG9uc2UpIHtcbiAgICAgICAgICAgIHZhciBkZWZlcnJlZCA9ICQuRGVmZXJyZWQoKSxcbiAgICAgICAgICAgICAgICBzdWNjZXNzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBpZih0eXBlb2YgZGlzcGxheSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy9jdXN0b20gZGlzcGxheSBtZXRob2RcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXkuY2FsbChlbGVtZW50LCB2YWx1ZSwgdGhpcy5zb3VyY2VEYXRhLCByZXNwb25zZSk7IFxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy52YWx1ZTJodG1sRmluYWwodmFsdWUsIGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoKTtcbiAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vZm9yIG51bGwgdmFsdWUganVzdCBjYWxsIHN1Y2Nlc3Mgd2l0aG91dCBsb2FkaW5nIHNvdXJjZVxuICAgICAgICAgICAgaWYodmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgIHN1Y2Nlc3MuY2FsbCh0aGlzKTsgICBcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICB0aGlzLm9uU291cmNlUmVhZHkoc3VjY2VzcywgZnVuY3Rpb24gKCkgeyBkZWZlcnJlZC5yZXNvbHZlKCk7IH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZSgpO1xuICAgICAgICB9LCAgXG5cbiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLSBhZGRpdGlvbmFsIGZ1bmN0aW9ucyAtLS0tLS0tLS0tLS1cblxuICAgICAgICBvblNvdXJjZVJlYWR5OiBmdW5jdGlvbiAoc3VjY2VzcywgZXJyb3IpIHtcbiAgICAgICAgICAgIC8vcnVuIHNvdXJjZSBpZiBpdCBmdW5jdGlvblxuICAgICAgICAgICAgdmFyIHNvdXJjZTtcbiAgICAgICAgICAgIGlmICgkLmlzRnVuY3Rpb24odGhpcy5vcHRpb25zLnNvdXJjZSkpIHtcbiAgICAgICAgICAgICAgICBzb3VyY2UgPSB0aGlzLm9wdGlvbnMuc291cmNlLmNhbGwodGhpcy5vcHRpb25zLnNjb3BlKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNvdXJjZURhdGEgPSBudWxsO1xuICAgICAgICAgICAgICAgIC8vbm90ZTogaWYgZnVuY3Rpb24gcmV0dXJucyB0aGUgc2FtZSBzb3VyY2UgYXMgVVJMIC0gc291cmNlRGF0YSB3aWxsIGJlIHRha2VuIGZyb20gY2FoY2UgYW5kIG5vIGV4dHJhIHJlcXVlc3QgcGVyZm9ybWVkXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNvdXJjZSA9IHRoaXMub3B0aW9ucy5zb3VyY2U7XG4gICAgICAgICAgICB9ICAgICAgICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vaWYgYWxscmVhZHkgbG9hZGVkIGp1c3QgY2FsbCBzdWNjZXNzXG4gICAgICAgICAgICBpZih0aGlzLm9wdGlvbnMuc291cmNlQ2FjaGUgJiYgJC5pc0FycmF5KHRoaXMuc291cmNlRGF0YSkpIHtcbiAgICAgICAgICAgICAgICBzdWNjZXNzLmNhbGwodGhpcyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuOyBcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy90cnkgcGFyc2UganNvbiBpbiBzaW5nbGUgcXVvdGVzIChmb3IgZG91YmxlIHF1b3RlcyBqcXVlcnkgZG9lcyBhdXRvbWF0aWNhbGx5KVxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBzb3VyY2UgPSAkLmZuLmVkaXRhYmxldXRpbHMudHJ5UGFyc2VKc29uKHNvdXJjZSwgZmFsc2UpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIGVycm9yLmNhbGwodGhpcyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvL2xvYWRpbmcgZnJvbSB1cmxcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc291cmNlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIC8vdHJ5IHRvIGdldCBzb3VyY2VEYXRhIGZyb20gY2FjaGVcbiAgICAgICAgICAgICAgICBpZih0aGlzLm9wdGlvbnMuc291cmNlQ2FjaGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNhY2hlSUQgPSBzb3VyY2UsXG4gICAgICAgICAgICAgICAgICAgIGNhY2hlO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICghJChkb2N1bWVudCkuZGF0YShjYWNoZUlEKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJChkb2N1bWVudCkuZGF0YShjYWNoZUlELCB7fSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2FjaGUgPSAkKGRvY3VtZW50KS5kYXRhKGNhY2hlSUQpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vY2hlY2sgZm9yIGNhY2hlZCBkYXRhXG4gICAgICAgICAgICAgICAgICAgIGlmIChjYWNoZS5sb2FkaW5nID09PSBmYWxzZSAmJiBjYWNoZS5zb3VyY2VEYXRhKSB7IC8vdGFrZSBzb3VyY2UgZnJvbSBjYWNoZVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zb3VyY2VEYXRhID0gY2FjaGUuc291cmNlRGF0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZG9QcmVwZW5kKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzLmNhbGwodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY2FjaGUubG9hZGluZyA9PT0gdHJ1ZSkgeyAvL2NhY2hlIGlzIGxvYWRpbmcsIHB1dCBjYWxsYmFjayBpbiBzdGFjayB0byBiZSBjYWxsZWQgbGF0ZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlLmNhbGxiYWNrcy5wdXNoKCQucHJveHkoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc291cmNlRGF0YSA9IGNhY2hlLnNvdXJjZURhdGE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kb1ByZXBlbmQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzLmNhbGwodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCB0aGlzKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vYWxzbyBjb2xsZWN0aW5nIGVycm9yIGNhbGxiYWNrc1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGUuZXJyX2NhbGxiYWNrcy5wdXNoKCQucHJveHkoZXJyb3IsIHRoaXMpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsgLy9ubyBjYWNoZSB5ZXQsIGFjdGl2YXRlIGl0XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWNoZS5sb2FkaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlLmNhbGxiYWNrcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGUuZXJyX2NhbGxiYWNrcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vYWpheE9wdGlvbnMgZm9yIHNvdXJjZS4gQ2FuIGJlIG92ZXJ3cml0dGVuIGJ0IG9wdGlvbnMuc291cmNlT3B0aW9uc1xuICAgICAgICAgICAgICAgIHZhciBhamF4T3B0aW9ucyA9ICQuZXh0ZW5kKHtcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBzb3VyY2UsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdnZXQnLFxuICAgICAgICAgICAgICAgICAgICBjYWNoZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsXG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6ICQucHJveHkoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGNhY2hlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGUubG9hZGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zb3VyY2VEYXRhID0gdGhpcy5tYWtlQXJyYXkoZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZigkLmlzQXJyYXkodGhpcy5zb3VyY2VEYXRhKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGNhY2hlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vc3RvcmUgcmVzdWx0IGluIGNhY2hlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlLnNvdXJjZURhdGEgPSB0aGlzLnNvdXJjZURhdGE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vcnVuIHN1Y2Nlc3MgY2FsbGJhY2tzIGZvciBvdGhlciBmaWVsZHMgd2FpdGluZyBmb3IgdGhpcyBzb3VyY2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJC5lYWNoKGNhY2hlLmNhbGxiYWNrcywgZnVuY3Rpb24gKCkgeyB0aGlzLmNhbGwoKTsgfSk7IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRvUHJlcGVuZCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3MuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihjYWNoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3J1biBlcnJvciBjYWxsYmFja3MgZm9yIG90aGVyIGZpZWxkcyB3YWl0aW5nIGZvciB0aGlzIHNvdXJjZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2goY2FjaGUuZXJyX2NhbGxiYWNrcywgZnVuY3Rpb24gKCkgeyB0aGlzLmNhbGwoKTsgfSk7IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSwgdGhpcyksXG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiAkLnByb3h5KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yLmNhbGwodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZihjYWNoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWNoZS5sb2FkaW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vcnVuIGVycm9yIGNhbGxiYWNrcyBmb3Igb3RoZXIgZmllbGRzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICQuZWFjaChjYWNoZS5lcnJfY2FsbGJhY2tzLCBmdW5jdGlvbiAoKSB7IHRoaXMuY2FsbCgpOyB9KTsgXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sIHRoaXMpXG4gICAgICAgICAgICAgICAgfSwgdGhpcy5vcHRpb25zLnNvdXJjZU9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vbG9hZGluZyBzb3VyY2VEYXRhIGZyb20gc2VydmVyXG4gICAgICAgICAgICAgICAgJC5hamF4KGFqYXhPcHRpb25zKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH0gZWxzZSB7IC8vb3B0aW9ucyBhcyBqc29uL2FycmF5XG4gICAgICAgICAgICAgICAgdGhpcy5zb3VyY2VEYXRhID0gdGhpcy5tYWtlQXJyYXkoc291cmNlKTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYoJC5pc0FycmF5KHRoaXMuc291cmNlRGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kb1ByZXBlbmQoKTtcbiAgICAgICAgICAgICAgICAgICAgc3VjY2Vzcy5jYWxsKHRoaXMpOyAgIFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGVycm9yLmNhbGwodGhpcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIGRvUHJlcGVuZDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYodGhpcy5vcHRpb25zLnByZXBlbmQgPT09IG51bGwgfHwgdGhpcy5vcHRpb25zLnByZXBlbmQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHJldHVybjsgIFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZighJC5pc0FycmF5KHRoaXMucHJlcGVuZERhdGEpKSB7XG4gICAgICAgICAgICAgICAgLy9ydW4gcHJlcGVuZCBpZiBpdCBpcyBmdW5jdGlvbiAob25jZSlcbiAgICAgICAgICAgICAgICBpZiAoJC5pc0Z1bmN0aW9uKHRoaXMub3B0aW9ucy5wcmVwZW5kKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMucHJlcGVuZCA9IHRoaXMub3B0aW9ucy5wcmVwZW5kLmNhbGwodGhpcy5vcHRpb25zLnNjb3BlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vdHJ5IHBhcnNlIGpzb24gaW4gc2luZ2xlIHF1b3Rlc1xuICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5wcmVwZW5kID0gJC5mbi5lZGl0YWJsZXV0aWxzLnRyeVBhcnNlSnNvbih0aGlzLm9wdGlvbnMucHJlcGVuZCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy9jb252ZXJ0IHByZXBlbmQgZnJvbSBzdHJpbmcgdG8gb2JqZWN0XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLm9wdGlvbnMucHJlcGVuZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLnByZXBlbmQgPSB7Jyc6IHRoaXMub3B0aW9ucy5wcmVwZW5kfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdGhpcy5wcmVwZW5kRGF0YSA9IHRoaXMubWFrZUFycmF5KHRoaXMub3B0aW9ucy5wcmVwZW5kKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYoJC5pc0FycmF5KHRoaXMucHJlcGVuZERhdGEpICYmICQuaXNBcnJheSh0aGlzLnNvdXJjZURhdGEpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zb3VyY2VEYXRhID0gdGhpcy5wcmVwZW5kRGF0YS5jb25jYXQodGhpcy5zb3VyY2VEYXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICAvKlxuICAgICAgICAgcmVuZGVycyBpbnB1dCBsaXN0XG4gICAgICAgICovXG4gICAgICAgIHJlbmRlckxpc3Q6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgLy8gdGhpcyBtZXRob2Qgc2hvdWxkIGJlIG92ZXJ3cml0dGVuIGluIGNoaWxkIGNsYXNzXG4gICAgICAgIH0sXG4gICAgICAgXG4gICAgICAgICAvKlxuICAgICAgICAgc2V0IGVsZW1lbnQncyBodG1sIGJ5IHZhbHVlXG4gICAgICAgICovXG4gICAgICAgIHZhbHVlMmh0bWxGaW5hbDogZnVuY3Rpb24odmFsdWUsIGVsZW1lbnQpIHtcbiAgICAgICAgICAgIC8vIHRoaXMgbWV0aG9kIHNob3VsZCBiZSBvdmVyd3JpdHRlbiBpbiBjaGlsZCBjbGFzc1xuICAgICAgICB9LCAgICAgICAgXG5cbiAgICAgICAgLyoqXG4gICAgICAgICogY29udmVydCBkYXRhIHRvIGFycmF5IHN1aXRhYmxlIGZvciBzb3VyY2VEYXRhLCBlLmcuIFt7dmFsdWU6IDEsIHRleHQ6ICdhYmMnfSwgey4uLn1dXG4gICAgICAgICovXG4gICAgICAgIG1ha2VBcnJheTogZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgdmFyIGNvdW50LCBvYmosIHJlc3VsdCA9IFtdLCBpdGVtLCBpdGVyYXRlSXRlbTtcbiAgICAgICAgICAgIGlmKCFkYXRhIHx8IHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsOyBcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYoJC5pc0FycmF5KGRhdGEpKSB7IC8vYXJyYXlcbiAgICAgICAgICAgICAgICAvKiBcbiAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiB0byBpdGVyYXRlIGluc2lkZSBpdGVtIG9mIGFycmF5IGlmIGl0ZW0gaXMgb2JqZWN0LlxuICAgICAgICAgICAgICAgICAgIENhY2x1bGF0ZXMgY291bnQgb2Yga2V5cyBpbiBpdGVtIGFuZCBzdG9yZSBpbiBvYmouIFxuICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgaXRlcmF0ZUl0ZW0gPSBmdW5jdGlvbiAoaywgdikge1xuICAgICAgICAgICAgICAgICAgICBvYmogPSB7dmFsdWU6IGssIHRleHQ6IHZ9O1xuICAgICAgICAgICAgICAgICAgICBpZihjb3VudCsrID49IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsvLyBleGl0IGZyb20gYGVhY2hgIGlmIGl0ZW0gaGFzIG1vcmUgdGhhbiBvbmUga2V5LlxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGl0ZW0gPSBkYXRhW2ldOyBcbiAgICAgICAgICAgICAgICAgICAgaWYodHlwZW9mIGl0ZW0gPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb3VudCA9IDA7IC8vY291bnQgb2Yga2V5cyBpbnNpZGUgaXRlbVxuICAgICAgICAgICAgICAgICAgICAgICAgJC5lYWNoKGl0ZW0sIGl0ZXJhdGVJdGVtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vY2FzZTogW3t2YWwxOiAndGV4dDEnfSwge3ZhbDI6ICd0ZXh0Mn0gLi4uXVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoY291bnQgPT09IDEpIHsgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gob2JqKTsgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9jYXNlOiBbe3ZhbHVlOiAxLCB0ZXh0OiAndGV4dDEnfSwge3ZhbHVlOiAyLCB0ZXh0OiAndGV4dDInfSwgLi4uXVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmKGNvdW50ID4gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vcmVtb3ZlZCBjaGVjayBvZiBleGlzdGFuY2U6IGl0ZW0uaGFzT3duUHJvcGVydHkoJ3ZhbHVlJykgJiYgaXRlbS5oYXNPd25Qcm9wZXJ0eSgndGV4dCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoaXRlbS5jaGlsZHJlbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmNoaWxkcmVuID0gdGhpcy5tYWtlQXJyYXkoaXRlbS5jaGlsZHJlbik7ICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGl0ZW0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy9jYXNlOiBbJ3RleHQxJywgJ3RleHQyJyAuLi5dXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh7dmFsdWU6IGl0ZW0sIHRleHQ6IGl0ZW19KTsgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgeyAgLy9jYXNlOiB7dmFsMTogJ3RleHQxJywgdmFsMjogJ3RleHQyLCAuLi59XG4gICAgICAgICAgICAgICAgJC5lYWNoKGRhdGEsIGZ1bmN0aW9uIChrLCB2KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHt2YWx1ZTogaywgdGV4dDogdn0pO1xuICAgICAgICAgICAgICAgIH0pOyAgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgb3B0aW9uOiBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnNba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgaWYoa2V5ID09PSAnc291cmNlJykge1xuICAgICAgICAgICAgICAgIHRoaXMuc291cmNlRGF0YSA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZihrZXkgPT09ICdwcmVwZW5kJykge1xuICAgICAgICAgICAgICAgIHRoaXMucHJlcGVuZERhdGEgPSBudWxsO1xuICAgICAgICAgICAgfSAgICAgICAgICAgIFxuICAgICAgICB9ICAgICAgICBcblxuICAgIH0pOyAgICAgIFxuXG4gICAgTGlzdC5kZWZhdWx0cyA9ICQuZXh0ZW5kKHt9LCAkLmZuLmVkaXRhYmxldHlwZXMuYWJzdHJhY3RpbnB1dC5kZWZhdWx0cywge1xuICAgICAgICAvKipcbiAgICAgICAgU291cmNlIGRhdGEgZm9yIGxpc3QuICBcbiAgICAgICAgSWYgKiphcnJheSoqIC0gaXQgc2hvdWxkIGJlIGluIGZvcm1hdDogYFt7dmFsdWU6IDEsIHRleHQ6IFwidGV4dDFcIn0sIHt2YWx1ZTogMiwgdGV4dDogXCJ0ZXh0MlwifSwgLi4uXWAgIFxuICAgICAgICBGb3IgY29tcGFiaWxpdHksIG9iamVjdCBmb3JtYXQgaXMgYWxzbyBzdXBwb3J0ZWQ6IGB7XCIxXCI6IFwidGV4dDFcIiwgXCIyXCI6IFwidGV4dDJcIiAuLi59YCBidXQgaXQgZG9lcyBub3QgZ3VhcmFudGVlIGVsZW1lbnRzIG9yZGVyLlxuICAgICAgICBcbiAgICAgICAgSWYgKipzdHJpbmcqKiAtIGNvbnNpZGVyZWQgYWpheCB1cmwgdG8gbG9hZCBpdGVtcy4gSW4gdGhhdCBjYXNlIHJlc3VsdHMgd2lsbCBiZSBjYWNoZWQgZm9yIGZpZWxkcyB3aXRoIHRoZSBzYW1lIHNvdXJjZSBhbmQgbmFtZS4gU2VlIGFsc28gYHNvdXJjZUNhY2hlYCBvcHRpb24uXG4gICAgICAgICAgXG4gICAgICAgIElmICoqZnVuY3Rpb24qKiwgaXQgc2hvdWxkIHJldHVybiBkYXRhIGluIGZvcm1hdCBhYm92ZSAoc2luY2UgMS40LjApLlxuICAgICAgICBcbiAgICAgICAgU2luY2UgMS40LjEga2V5IGBjaGlsZHJlbmAgc3VwcG9ydGVkIHRvIHJlbmRlciBPUFRHUk9VUCAoZm9yICoqc2VsZWN0KiogaW5wdXQgb25seSkuICBcbiAgICAgICAgYFt7dGV4dDogXCJncm91cDFcIiwgY2hpbGRyZW46IFt7dmFsdWU6IDEsIHRleHQ6IFwidGV4dDFcIn0sIHt2YWx1ZTogMiwgdGV4dDogXCJ0ZXh0MlwifV19LCAuLi5dYCBcblxuXHRcdFxuICAgICAgICBAcHJvcGVydHkgc291cmNlIFxuICAgICAgICBAdHlwZSBzdHJpbmcgfCBhcnJheSB8IG9iamVjdCB8IGZ1bmN0aW9uXG4gICAgICAgIEBkZWZhdWx0IG51bGxcbiAgICAgICAgKiovICAgICAgICAgXG4gICAgICAgIHNvdXJjZTogbnVsbCwgXG4gICAgICAgIC8qKlxuICAgICAgICBEYXRhIGF1dG9tYXRpY2FsbHkgcHJlcGVuZGVkIHRvIHRoZSBiZWdpbm5pbmcgb2YgZHJvcGRvd24gbGlzdC5cbiAgICAgICAgXG4gICAgICAgIEBwcm9wZXJ0eSBwcmVwZW5kIFxuICAgICAgICBAdHlwZSBzdHJpbmcgfCBhcnJheSB8IG9iamVjdCB8IGZ1bmN0aW9uXG4gICAgICAgIEBkZWZhdWx0IGZhbHNlXG4gICAgICAgICoqLyAgICAgICAgIFxuICAgICAgICBwcmVwZW5kOiBmYWxzZSxcbiAgICAgICAgLyoqXG4gICAgICAgIEVycm9yIG1lc3NhZ2Ugd2hlbiBsaXN0IGNhbm5vdCBiZSBsb2FkZWQgKGUuZy4gYWpheCBlcnJvcilcbiAgICAgICAgXG4gICAgICAgIEBwcm9wZXJ0eSBzb3VyY2VFcnJvciBcbiAgICAgICAgQHR5cGUgc3RyaW5nXG4gICAgICAgIEBkZWZhdWx0IEVycm9yIHdoZW4gbG9hZGluZyBsaXN0XG4gICAgICAgICoqLyAgICAgICAgICBcbiAgICAgICAgc291cmNlRXJyb3I6ICdFcnJvciB3aGVuIGxvYWRpbmcgbGlzdCcsXG4gICAgICAgIC8qKlxuICAgICAgICBpZiA8Y29kZT50cnVlPC9jb2RlPiBhbmQgc291cmNlIGlzICoqc3RyaW5nIHVybCoqIC0gcmVzdWx0cyB3aWxsIGJlIGNhY2hlZCBmb3IgZmllbGRzIHdpdGggdGhlIHNhbWUgc291cmNlLiAgICBcbiAgICAgICAgVXNlZnVsbCBmb3IgZWRpdGFibGUgY29sdW1uIGluIGdyaWQgdG8gcHJldmVudCBleHRyYSByZXF1ZXN0cy5cbiAgICAgICAgXG4gICAgICAgIEBwcm9wZXJ0eSBzb3VyY2VDYWNoZSBcbiAgICAgICAgQHR5cGUgYm9vbGVhblxuICAgICAgICBAZGVmYXVsdCB0cnVlXG4gICAgICAgIEBzaW5jZSAxLjIuMFxuICAgICAgICAqKi8gICAgICAgIFxuICAgICAgICBzb3VyY2VDYWNoZTogdHJ1ZSxcbiAgICAgICAgLyoqXG4gICAgICAgIEFkZGl0aW9uYWwgYWpheCBvcHRpb25zIHRvIGJlIHVzZWQgaW4gJC5hamF4KCkgd2hlbiBsb2FkaW5nIGxpc3QgZnJvbSBzZXJ2ZXIuXG4gICAgICAgIFVzZWZ1bCB0byBzZW5kIGV4dHJhIHBhcmFtZXRlcnMgKGBkYXRhYCBrZXkpIG9yIGNoYW5nZSByZXF1ZXN0IG1ldGhvZCAoYHR5cGVgIGtleSkuXG4gICAgICAgIFxuICAgICAgICBAcHJvcGVydHkgc291cmNlT3B0aW9ucyBcbiAgICAgICAgQHR5cGUgb2JqZWN0fGZ1bmN0aW9uXG4gICAgICAgIEBkZWZhdWx0IG51bGxcbiAgICAgICAgQHNpbmNlIDEuNS4wXG4gICAgICAgICoqLyAgICAgICAgXG4gICAgICAgIHNvdXJjZU9wdGlvbnM6IG51bGxcbiAgICB9KTtcblxuICAgICQuZm4uZWRpdGFibGV0eXBlcy5saXN0ID0gTGlzdDsgICAgICBcblxufSh3aW5kb3cualF1ZXJ5KSk7XG5cbi8qKlxuVGV4dCBpbnB1dFxuXG5AY2xhc3MgdGV4dFxuQGV4dGVuZHMgYWJzdHJhY3RpbnB1dFxuQGZpbmFsXG5AZXhhbXBsZVxuPGEgaHJlZj1cIiNcIiBpZD1cInVzZXJuYW1lXCIgZGF0YS10eXBlPVwidGV4dFwiIGRhdGEtcGs9XCIxXCI+YXdlc29tZTwvYT5cbjxzY3JpcHQ+XG4kKGZ1bmN0aW9uKCl7XG4gICAgJCgnI3VzZXJuYW1lJykuZWRpdGFibGUoe1xuICAgICAgICB1cmw6ICcvcG9zdCcsXG4gICAgICAgIHRpdGxlOiAnRW50ZXIgdXNlcm5hbWUnXG4gICAgfSk7XG59KTtcbjwvc2NyaXB0PlxuKiovXG4oZnVuY3Rpb24gKCQpIHtcblxuICAgIHZhciBUZXh0ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5pbml0KCd0ZXh0Jywgb3B0aW9ucywgVGV4dC5kZWZhdWx0cyk7XG4gICAgfTtcblxuICAgICQuZm4uZWRpdGFibGV1dGlscy5pbmhlcml0KFRleHQsICQuZm4uZWRpdGFibGV0eXBlcy5hYnN0cmFjdGlucHV0KTtcblxuICAgICQuZXh0ZW5kKFRleHQucHJvdG90eXBlLCB7XG4gICAgICAgIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgIHRoaXMucmVuZGVyQ2xlYXIoKTtcbiAgICAgICAgICAgdGhpcy5zZXRDbGFzcygpO1xuICAgICAgICAgICB0aGlzLnNldEF0dHIoJ3BsYWNlaG9sZGVyJyk7XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICBhY3RpdmF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZih0aGlzLiRpbnB1dC5pcygnOnZpc2libGUnKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuJGlucHV0LmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgJC5mbi5lZGl0YWJsZXV0aWxzLnNldEN1cnNvclBvc2l0aW9uKHRoaXMuJGlucHV0LmdldCgwKSwgdGhpcy4kaW5wdXQudmFsKCkubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICBpZih0aGlzLnRvZ2dsZUNsZWFyKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudG9nZ2xlQ2xlYXIoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICAvL3JlbmRlciBjbGVhciBidXR0b25cbiAgICAgICAgcmVuZGVyQ2xlYXI6ICBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5jbGVhcikge1xuICAgICAgICAgICAgICAgdGhpcy4kY2xlYXIgPSAkKCc8c3BhbiBjbGFzcz1cImVkaXRhYmxlLWNsZWFyLXhcIj48L3NwYW4+Jyk7XG4gICAgICAgICAgICAgICB0aGlzLiRpbnB1dC5hZnRlcih0aGlzLiRjbGVhcilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLmNzcygncGFkZGluZy1yaWdodCcsIDI0KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAua2V5dXAoJC5wcm94eShmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2Fycm93cywgZW50ZXIsIHRhYiwgZXRjXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZih+JC5pbkFycmF5KGUua2V5Q29kZSwgWzQwLDM4LDksMTMsMjddKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQudG9nZ2xlQ2xlYXIoZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCAxMDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHRoaXMpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAucGFyZW50KCkuY3NzKCdwb3NpdGlvbicsICdyZWxhdGl2ZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgIHRoaXMuJGNsZWFyLmNsaWNrKCQucHJveHkodGhpcy5jbGVhciwgdGhpcykpOyAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgIH0gICAgICAgICAgICBcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIHBvc3RyZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgLypcbiAgICAgICAgICAgIC8vbm93IGBjbGVhcmAgaXMgcG9zaXRpb25lZCB2aWEgY3NzXG4gICAgICAgICAgICBpZih0aGlzLiRjbGVhcikge1xuICAgICAgICAgICAgICAgIC8vY2FuIHBvc2l0aW9uIGNsZWFyIGJ1dHRvbiBvbmx5IGhlcmUsIHdoZW4gZm9ybSBpcyBzaG93biBhbmQgaGVpZ2h0IGNhbiBiZSBjYWxjdWxhdGVkXG4vLyAgICAgICAgICAgICAgICB2YXIgaCA9IHRoaXMuJGlucHV0Lm91dGVySGVpZ2h0KHRydWUpIHx8IDIwLFxuICAgICAgICAgICAgICAgIHZhciBoID0gdGhpcy4kY2xlYXIucGFyZW50KCkuaGVpZ2h0KCksXG4gICAgICAgICAgICAgICAgICAgIGRlbHRhID0gKGggLSB0aGlzLiRjbGVhci5oZWlnaHQoKSkgLyAyO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvL3RoaXMuJGNsZWFyLmNzcyh7Ym90dG9tOiBkZWx0YSwgcmlnaHQ6IGRlbHRhfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAqLyBcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIC8vc2hvdyAvIGhpZGUgY2xlYXIgYnV0dG9uXG4gICAgICAgIHRvZ2dsZUNsZWFyOiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICBpZighdGhpcy4kY2xlYXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZhciBsZW4gPSB0aGlzLiRpbnB1dC52YWwoKS5sZW5ndGgsXG4gICAgICAgICAgICAgICAgdmlzaWJsZSA9IHRoaXMuJGNsZWFyLmlzKCc6dmlzaWJsZScpO1xuICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIGlmKGxlbiAmJiAhdmlzaWJsZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuJGNsZWFyLnNob3coKTtcbiAgICAgICAgICAgIH0gXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmKCFsZW4gJiYgdmlzaWJsZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuJGNsZWFyLmhpZGUoKTtcbiAgICAgICAgICAgIH0gXG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICBjbGVhcjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgIHRoaXMuJGNsZWFyLmhpZGUoKTtcbiAgICAgICAgICAgdGhpcy4kaW5wdXQudmFsKCcnKS5mb2N1cygpO1xuICAgICAgICB9ICAgICAgICAgIFxuICAgIH0pO1xuXG4gICAgVGV4dC5kZWZhdWx0cyA9ICQuZXh0ZW5kKHt9LCAkLmZuLmVkaXRhYmxldHlwZXMuYWJzdHJhY3RpbnB1dC5kZWZhdWx0cywge1xuICAgICAgICAvKipcbiAgICAgICAgQHByb3BlcnR5IHRwbCBcbiAgICAgICAgQGRlZmF1bHQgPGlucHV0IHR5cGU9XCJ0ZXh0XCI+XG4gICAgICAgICoqLyAgICAgICAgIFxuICAgICAgICB0cGw6ICc8aW5wdXQgdHlwZT1cInRleHRcIj4nLFxuICAgICAgICAvKipcbiAgICAgICAgUGxhY2Vob2xkZXIgYXR0cmlidXRlIG9mIGlucHV0LiBTaG93biB3aGVuIGlucHV0IGlzIGVtcHR5LlxuXG4gICAgICAgIEBwcm9wZXJ0eSBwbGFjZWhvbGRlciBcbiAgICAgICAgQHR5cGUgc3RyaW5nXG4gICAgICAgIEBkZWZhdWx0IG51bGxcbiAgICAgICAgKiovICAgICAgICAgICAgIFxuICAgICAgICBwbGFjZWhvbGRlcjogbnVsbCxcbiAgICAgICAgXG4gICAgICAgIC8qKlxuICAgICAgICBXaGV0aGVyIHRvIHNob3cgYGNsZWFyYCBidXR0b24gXG4gICAgICAgIFxuICAgICAgICBAcHJvcGVydHkgY2xlYXIgXG4gICAgICAgIEB0eXBlIGJvb2xlYW5cbiAgICAgICAgQGRlZmF1bHQgdHJ1ZSAgICAgICAgXG4gICAgICAgICoqL1xuICAgICAgICBjbGVhcjogdHJ1ZVxuICAgIH0pO1xuXG4gICAgJC5mbi5lZGl0YWJsZXR5cGVzLnRleHQgPSBUZXh0O1xuXG59KHdpbmRvdy5qUXVlcnkpKTtcblxuLyoqXG5UZXh0YXJlYSBpbnB1dFxuXG5AY2xhc3MgdGV4dGFyZWFcbkBleHRlbmRzIGFic3RyYWN0aW5wdXRcbkBmaW5hbFxuQGV4YW1wbGVcbjxhIGhyZWY9XCIjXCIgaWQ9XCJjb21tZW50c1wiIGRhdGEtdHlwZT1cInRleHRhcmVhXCIgZGF0YS1waz1cIjFcIj5hd2Vzb21lIGNvbW1lbnQhPC9hPlxuPHNjcmlwdD5cbiQoZnVuY3Rpb24oKXtcbiAgICAkKCcjY29tbWVudHMnKS5lZGl0YWJsZSh7XG4gICAgICAgIHVybDogJy9wb3N0JyxcbiAgICAgICAgdGl0bGU6ICdFbnRlciBjb21tZW50cycsXG4gICAgICAgIHJvd3M6IDEwXG4gICAgfSk7XG59KTtcbjwvc2NyaXB0PlxuKiovXG4oZnVuY3Rpb24gKCQpIHtcblxuICAgIHZhciBUZXh0YXJlYSA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuaW5pdCgndGV4dGFyZWEnLCBvcHRpb25zLCBUZXh0YXJlYS5kZWZhdWx0cyk7XG4gICAgfTtcblxuICAgICQuZm4uZWRpdGFibGV1dGlscy5pbmhlcml0KFRleHRhcmVhLCAkLmZuLmVkaXRhYmxldHlwZXMuYWJzdHJhY3RpbnB1dCk7XG5cbiAgICAkLmV4dGVuZChUZXh0YXJlYS5wcm90b3R5cGUsIHtcbiAgICAgICAgcmVuZGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLnNldENsYXNzKCk7XG4gICAgICAgICAgICB0aGlzLnNldEF0dHIoJ3BsYWNlaG9sZGVyJyk7XG4gICAgICAgICAgICB0aGlzLnNldEF0dHIoJ3Jvd3MnKTsgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy9jdHJsICsgZW50ZXJcbiAgICAgICAgICAgIHRoaXMuJGlucHV0LmtleWRvd24oZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoZS5jdHJsS2V5ICYmIGUud2hpY2ggPT09IDEzKSB7XG4gICAgICAgICAgICAgICAgICAgICQodGhpcykuY2xvc2VzdCgnZm9ybScpLnN1Ym1pdCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAvL3VzaW5nIGB3aGl0ZS1zcGFjZTogcHJlLXdyYXBgIHNvbHZlcyBcXG4gIDwtLT4gQlIgY29udmVyc2lvbiB2ZXJ5IGVsZWdhbnQhXG4gICAgICAgLyogXG4gICAgICAgdmFsdWUyaHRtbDogZnVuY3Rpb24odmFsdWUsIGVsZW1lbnQpIHtcbiAgICAgICAgICAgIHZhciBodG1sID0gJycsIGxpbmVzO1xuICAgICAgICAgICAgaWYodmFsdWUpIHtcbiAgICAgICAgICAgICAgICBsaW5lcyA9IHZhbHVlLnNwbGl0KFwiXFxuXCIpO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgbGluZXNbaV0gPSAkKCc8ZGl2PicpLnRleHQobGluZXNbaV0pLmh0bWwoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaHRtbCA9IGxpbmVzLmpvaW4oJzxicj4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICQoZWxlbWVudCkuaHRtbChodG1sKTtcbiAgICAgICAgfSxcbiAgICAgICBcbiAgICAgICAgaHRtbDJ2YWx1ZTogZnVuY3Rpb24oaHRtbCkge1xuICAgICAgICAgICAgaWYoIWh0bWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciByZWdleCA9IG5ldyBSZWdFeHAoU3RyaW5nLmZyb21DaGFyQ29kZSgxMCksICdnJyk7XG4gICAgICAgICAgICB2YXIgbGluZXMgPSBodG1sLnNwbGl0KC88YnJcXHMqXFwvPz4vaSk7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRleHQgPSAkKCc8ZGl2PicpLmh0bWwobGluZXNbaV0pLnRleHQoKTtcblxuICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBuZXdsaW5lIGNoYXJhY3RlcnMgKFxcbikgdG8gYXZvaWQgdGhlbSBiZWluZyBjb252ZXJ0ZWQgYnkgdmFsdWUyaHRtbCgpIG1ldGhvZFxuICAgICAgICAgICAgICAgIC8vIHRodXMgYWRkaW5nIGV4dHJhIDxicj4gdGFnc1xuICAgICAgICAgICAgICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UocmVnZXgsICcnKTtcblxuICAgICAgICAgICAgICAgIGxpbmVzW2ldID0gdGV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBsaW5lcy5qb2luKFwiXFxuXCIpO1xuICAgICAgICB9LFxuICAgICAgICAgKi9cbiAgICAgICAgYWN0aXZhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgJC5mbi5lZGl0YWJsZXR5cGVzLnRleHQucHJvdG90eXBlLmFjdGl2YXRlLmNhbGwodGhpcyk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIFRleHRhcmVhLmRlZmF1bHRzID0gJC5leHRlbmQoe30sICQuZm4uZWRpdGFibGV0eXBlcy5hYnN0cmFjdGlucHV0LmRlZmF1bHRzLCB7XG4gICAgICAgIC8qKlxuICAgICAgICBAcHJvcGVydHkgdHBsXG4gICAgICAgIEBkZWZhdWx0IDx0ZXh0YXJlYT48L3RleHRhcmVhPlxuICAgICAgICAqKi9cbiAgICAgICAgdHBsOic8dGV4dGFyZWE+PC90ZXh0YXJlYT4nLFxuICAgICAgICAvKipcbiAgICAgICAgQHByb3BlcnR5IGlucHV0Y2xhc3NcbiAgICAgICAgQGRlZmF1bHQgaW5wdXQtbGFyZ2VcbiAgICAgICAgKiovXG4gICAgICAgIGlucHV0Y2xhc3M6ICdpbnB1dC1sYXJnZScsXG4gICAgICAgIC8qKlxuICAgICAgICBQbGFjZWhvbGRlciBhdHRyaWJ1dGUgb2YgaW5wdXQuIFNob3duIHdoZW4gaW5wdXQgaXMgZW1wdHkuXG5cbiAgICAgICAgQHByb3BlcnR5IHBsYWNlaG9sZGVyXG4gICAgICAgIEB0eXBlIHN0cmluZ1xuICAgICAgICBAZGVmYXVsdCBudWxsXG4gICAgICAgICoqL1xuICAgICAgICBwbGFjZWhvbGRlcjogbnVsbCxcbiAgICAgICAgLyoqXG4gICAgICAgIE51bWJlciBvZiByb3dzIGluIHRleHRhcmVhXG5cbiAgICAgICAgQHByb3BlcnR5IHJvd3NcbiAgICAgICAgQHR5cGUgaW50ZWdlclxuICAgICAgICBAZGVmYXVsdCA3XG4gICAgICAgICoqLyAgICAgICAgXG4gICAgICAgIHJvd3M6IDcgICAgICAgIFxuICAgIH0pO1xuXG4gICAgJC5mbi5lZGl0YWJsZXR5cGVzLnRleHRhcmVhID0gVGV4dGFyZWE7XG5cbn0od2luZG93LmpRdWVyeSkpO1xuXG4vKipcblNlbGVjdCAoZHJvcGRvd24pXG5cbkBjbGFzcyBzZWxlY3RcbkBleHRlbmRzIGxpc3RcbkBmaW5hbFxuQGV4YW1wbGVcbjxhIGhyZWY9XCIjXCIgaWQ9XCJzdGF0dXNcIiBkYXRhLXR5cGU9XCJzZWxlY3RcIiBkYXRhLXBrPVwiMVwiIGRhdGEtdXJsPVwiL3Bvc3RcIiBkYXRhLXRpdGxlPVwiU2VsZWN0IHN0YXR1c1wiPjwvYT5cbjxzY3JpcHQ+XG4kKGZ1bmN0aW9uKCl7XG4gICAgJCgnI3N0YXR1cycpLmVkaXRhYmxlKHtcbiAgICAgICAgdmFsdWU6IDIsICAgIFxuICAgICAgICBzb3VyY2U6IFtcbiAgICAgICAgICAgICAge3ZhbHVlOiAxLCB0ZXh0OiAnQWN0aXZlJ30sXG4gICAgICAgICAgICAgIHt2YWx1ZTogMiwgdGV4dDogJ0Jsb2NrZWQnfSxcbiAgICAgICAgICAgICAge3ZhbHVlOiAzLCB0ZXh0OiAnRGVsZXRlZCd9XG4gICAgICAgICAgIF1cbiAgICB9KTtcbn0pO1xuPC9zY3JpcHQ+XG4qKi9cbihmdW5jdGlvbiAoJCkge1xuICAgIDtcbiAgICBcbiAgICB2YXIgU2VsZWN0ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5pbml0KCdzZWxlY3QnLCBvcHRpb25zLCBTZWxlY3QuZGVmYXVsdHMpO1xuICAgIH07XG5cbiAgICAkLmZuLmVkaXRhYmxldXRpbHMuaW5oZXJpdChTZWxlY3QsICQuZm4uZWRpdGFibGV0eXBlcy5saXN0KTtcblxuICAgICQuZXh0ZW5kKFNlbGVjdC5wcm90b3R5cGUsIHtcbiAgICAgICAgcmVuZGVyTGlzdDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLiRpbnB1dC5lbXB0eSgpO1xuXG4gICAgICAgICAgICB2YXIgZmlsbEl0ZW1zID0gZnVuY3Rpb24oJGVsLCBkYXRhKSB7XG4gICAgICAgICAgICAgICAgdmFyIGF0dHI7XG4gICAgICAgICAgICAgICAgaWYoJC5pc0FycmF5KGRhdGEpKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvcih2YXIgaT0wOyBpPGRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHIgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGRhdGFbaV0uY2hpbGRyZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyLmxhYmVsID0gZGF0YVtpXS50ZXh0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRlbC5hcHBlbmQoZmlsbEl0ZW1zKCQoJzxvcHRncm91cD4nLCBhdHRyKSwgZGF0YVtpXS5jaGlsZHJlbikpOyBcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0ci52YWx1ZSA9IGRhdGFbaV0udmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoZGF0YVtpXS5kaXNhYmxlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyLmRpc2FibGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGVsLmFwcGVuZCgkKCc8b3B0aW9uPicsIGF0dHIpLnRleHQoZGF0YVtpXS50ZXh0KSk7IFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiAkZWw7XG4gICAgICAgICAgICB9OyAgICAgICAgXG5cbiAgICAgICAgICAgIGZpbGxJdGVtcyh0aGlzLiRpbnB1dCwgdGhpcy5zb3VyY2VEYXRhKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5zZXRDbGFzcygpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvL2VudGVyIHN1Ym1pdFxuICAgICAgICAgICAgdGhpcy4kaW5wdXQub24oJ2tleWRvd24uZWRpdGFibGUnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIGlmIChlLndoaWNoID09PSAxMykge1xuICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmNsb3Nlc3QoJ2Zvcm0nKS5zdWJtaXQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTsgICAgICAgICAgICBcbiAgICAgICAgfSxcbiAgICAgICBcbiAgICAgICAgdmFsdWUyaHRtbEZpbmFsOiBmdW5jdGlvbih2YWx1ZSwgZWxlbWVudCkge1xuICAgICAgICAgICAgdmFyIHRleHQgPSAnJywgXG4gICAgICAgICAgICAgICAgaXRlbXMgPSAkLmZuLmVkaXRhYmxldXRpbHMuaXRlbXNCeVZhbHVlKHZhbHVlLCB0aGlzLnNvdXJjZURhdGEpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYoaXRlbXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdGV4dCA9IGl0ZW1zWzBdLnRleHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vJChlbGVtZW50KS50ZXh0KHRleHQpO1xuICAgICAgICAgICAgJC5mbi5lZGl0YWJsZXR5cGVzLmFic3RyYWN0aW5wdXQucHJvdG90eXBlLnZhbHVlMmh0bWwuY2FsbCh0aGlzLCB0ZXh0LCBlbGVtZW50KTtcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIGF1dG9zdWJtaXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy4kaW5wdXQub2ZmKCdrZXlkb3duLmVkaXRhYmxlJykub24oJ2NoYW5nZS5lZGl0YWJsZScsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgJCh0aGlzKS5jbG9zZXN0KCdmb3JtJykuc3VibWl0KCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0pOyAgICAgIFxuXG4gICAgU2VsZWN0LmRlZmF1bHRzID0gJC5leHRlbmQoe30sICQuZm4uZWRpdGFibGV0eXBlcy5saXN0LmRlZmF1bHRzLCB7XG4gICAgICAgIC8qKlxuICAgICAgICBAcHJvcGVydHkgdHBsIFxuICAgICAgICBAZGVmYXVsdCA8c2VsZWN0Pjwvc2VsZWN0PlxuICAgICAgICAqKi8gICAgICAgICBcbiAgICAgICAgdHBsOic8c2VsZWN0Pjwvc2VsZWN0PidcbiAgICB9KTtcblxuICAgICQuZm4uZWRpdGFibGV0eXBlcy5zZWxlY3QgPSBTZWxlY3Q7ICAgICAgXG5cbn0od2luZG93LmpRdWVyeSkpO1xuXG4vKipcbkxpc3Qgb2YgY2hlY2tib3hlcy4gXG5JbnRlcm5hbGx5IHZhbHVlIHN0b3JlZCBhcyBqYXZhc2NyaXB0IGFycmF5IG9mIHZhbHVlcy5cblxuQGNsYXNzIGNoZWNrbGlzdFxuQGV4dGVuZHMgbGlzdFxuQGZpbmFsXG5AZXhhbXBsZVxuPGEgaHJlZj1cIiNcIiBpZD1cIm9wdGlvbnNcIiBkYXRhLXR5cGU9XCJjaGVja2xpc3RcIiBkYXRhLXBrPVwiMVwiIGRhdGEtdXJsPVwiL3Bvc3RcIiBkYXRhLXRpdGxlPVwiU2VsZWN0IG9wdGlvbnNcIj48L2E+XG48c2NyaXB0PlxuJChmdW5jdGlvbigpe1xuICAgICQoJyNvcHRpb25zJykuZWRpdGFibGUoe1xuICAgICAgICB2YWx1ZTogWzIsIDNdLCAgICBcbiAgICAgICAgc291cmNlOiBbXG4gICAgICAgICAgICAgIHt2YWx1ZTogMSwgdGV4dDogJ29wdGlvbjEnfSxcbiAgICAgICAgICAgICAge3ZhbHVlOiAyLCB0ZXh0OiAnb3B0aW9uMid9LFxuICAgICAgICAgICAgICB7dmFsdWU6IDMsIHRleHQ6ICdvcHRpb24zJ31cbiAgICAgICAgICAgXVxuICAgIH0pO1xufSk7XG48L3NjcmlwdD5cbioqL1xuKGZ1bmN0aW9uICgkKSB7XG4gICAgO1xuICAgIFxuICAgIHZhciBDaGVja2xpc3QgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICB0aGlzLmluaXQoJ2NoZWNrbGlzdCcsIG9wdGlvbnMsIENoZWNrbGlzdC5kZWZhdWx0cyk7XG4gICAgfTtcblxuICAgICQuZm4uZWRpdGFibGV1dGlscy5pbmhlcml0KENoZWNrbGlzdCwgJC5mbi5lZGl0YWJsZXR5cGVzLmxpc3QpO1xuXG4gICAgJC5leHRlbmQoQ2hlY2tsaXN0LnByb3RvdHlwZSwge1xuICAgICAgICByZW5kZXJMaXN0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciAkbGFiZWwsICRkaXY7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuJHRwbC5lbXB0eSgpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZighJC5pc0FycmF5KHRoaXMuc291cmNlRGF0YSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvcih2YXIgaT0wOyBpPHRoaXMuc291cmNlRGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICRsYWJlbCA9ICQoJzxsYWJlbD4nKS5hcHBlbmQoJCgnPGlucHV0PicsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnY2hlY2tib3gnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLnNvdXJjZURhdGFbaV0udmFsdWUgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8c3Bhbj4nKS50ZXh0KCcgJyt0aGlzLnNvdXJjZURhdGFbaV0udGV4dCkpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICQoJzxkaXY+JykuYXBwZW5kKCRsYWJlbCkuYXBwZW5kVG8odGhpcy4kdHBsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy4kaW5wdXQgPSB0aGlzLiR0cGwuZmluZCgnaW5wdXRbdHlwZT1cImNoZWNrYm94XCJdJyk7XG4gICAgICAgICAgICB0aGlzLnNldENsYXNzKCk7XG4gICAgICAgIH0sXG4gICAgICAgXG4gICAgICAgdmFsdWUyc3RyOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICByZXR1cm4gJC5pc0FycmF5KHZhbHVlKSA/IHZhbHVlLnNvcnQoKS5qb2luKCQudHJpbSh0aGlzLm9wdGlvbnMuc2VwYXJhdG9yKSkgOiAnJztcbiAgICAgICB9LCAgXG4gICAgICAgXG4gICAgICAgLy9wYXJzZSBzZXBhcmF0ZWQgc3RyaW5nXG4gICAgICAgIHN0cjJ2YWx1ZTogZnVuY3Rpb24oc3RyKSB7XG4gICAgICAgICAgIHZhciByZWcsIHZhbHVlID0gbnVsbDtcbiAgICAgICAgICAgaWYodHlwZW9mIHN0ciA9PT0gJ3N0cmluZycgJiYgc3RyLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgcmVnID0gbmV3IFJlZ0V4cCgnXFxcXHMqJyskLnRyaW0odGhpcy5vcHRpb25zLnNlcGFyYXRvcikrJ1xcXFxzKicpO1xuICAgICAgICAgICAgICAgdmFsdWUgPSBzdHIuc3BsaXQocmVnKTtcbiAgICAgICAgICAgfSBlbHNlIGlmKCQuaXNBcnJheShzdHIpKSB7XG4gICAgICAgICAgICAgICB2YWx1ZSA9IHN0cjsgXG4gICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICB2YWx1ZSA9IFtzdHJdO1xuICAgICAgICAgICB9XG4gICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfSwgICAgICAgXG4gICAgICAgXG4gICAgICAgLy9zZXQgY2hlY2tlZCBvbiByZXF1aXJlZCBjaGVja2JveGVzXG4gICAgICAgdmFsdWUyaW5wdXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLiRpbnB1dC5wcm9wKCdjaGVja2VkJywgZmFsc2UpO1xuICAgICAgICAgICAgaWYoJC5pc0FycmF5KHZhbHVlKSAmJiB2YWx1ZS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgIHRoaXMuJGlucHV0LmVhY2goZnVuY3Rpb24oaSwgZWwpIHtcbiAgICAgICAgICAgICAgICAgICB2YXIgJGVsID0gJChlbCk7XG4gICAgICAgICAgICAgICAgICAgLy8gY2Fubm90IHVzZSAkLmluQXJyYXkgYXMgaXQgcGVyZm9ybXMgc3RyaWN0IGNvbXBhcmlzb25cbiAgICAgICAgICAgICAgICAgICAkLmVhY2godmFsdWUsIGZ1bmN0aW9uKGosIHZhbCl7XG4gICAgICAgICAgICAgICAgICAgICAgIC8qanNsaW50IGVxZXE6IHRydWUqL1xuICAgICAgICAgICAgICAgICAgICAgICBpZigkZWwudmFsKCkgPT0gdmFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgIC8qanNsaW50IGVxZXE6IGZhbHNlKi8gICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICRlbC5wcm9wKCdjaGVja2VkJywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgIH0pOyBcbiAgICAgICAgICAgIH0gIFxuICAgICAgICB9LCAgXG4gICAgICAgIFxuICAgICAgIGlucHV0MnZhbHVlOiBmdW5jdGlvbigpIHsgXG4gICAgICAgICAgIHZhciBjaGVja2VkID0gW107XG4gICAgICAgICAgIHRoaXMuJGlucHV0LmZpbHRlcignOmNoZWNrZWQnKS5lYWNoKGZ1bmN0aW9uKGksIGVsKSB7XG4gICAgICAgICAgICAgICBjaGVja2VkLnB1c2goJChlbCkudmFsKCkpO1xuICAgICAgICAgICB9KTtcbiAgICAgICAgICAgcmV0dXJuIGNoZWNrZWQ7XG4gICAgICAgfSwgICAgICAgICAgICBcbiAgICAgICAgICBcbiAgICAgICAvL2NvbGxlY3QgdGV4dCBvZiBjaGVja2VkIGJveGVzXG4gICAgICAgIHZhbHVlMmh0bWxGaW5hbDogZnVuY3Rpb24odmFsdWUsIGVsZW1lbnQpIHtcbiAgICAgICAgICAgdmFyIGh0bWwgPSBbXSxcbiAgICAgICAgICAgICAgIGNoZWNrZWQgPSAkLmZuLmVkaXRhYmxldXRpbHMuaXRlbXNCeVZhbHVlKHZhbHVlLCB0aGlzLnNvdXJjZURhdGEpLFxuICAgICAgICAgICAgICAgZXNjYXBlID0gdGhpcy5vcHRpb25zLmVzY2FwZTtcbiAgICAgICAgICAgICAgIFxuICAgICAgICAgICBpZihjaGVja2VkLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgJC5lYWNoKGNoZWNrZWQsIGZ1bmN0aW9uKGksIHYpIHtcbiAgICAgICAgICAgICAgICAgICB2YXIgdGV4dCA9IGVzY2FwZSA/ICQuZm4uZWRpdGFibGV1dGlscy5lc2NhcGUodi50ZXh0KSA6IHYudGV4dDsgXG4gICAgICAgICAgICAgICAgICAgaHRtbC5wdXNoKHRleHQpOyBcbiAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgJChlbGVtZW50KS5odG1sKGh0bWwuam9pbignPGJyPicpKTtcbiAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICQoZWxlbWVudCkuZW1wdHkoKTsgXG4gICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgYWN0aXZhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICB0aGlzLiRpbnB1dC5maXJzdCgpLmZvY3VzKCk7XG4gICAgICAgfSxcbiAgICAgICBcbiAgICAgICBhdXRvc3VibWl0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgdGhpcy4kaW5wdXQub24oJ2tleWRvd24nLCBmdW5jdGlvbihlKXtcbiAgICAgICAgICAgICAgIGlmIChlLndoaWNoID09PSAxMykge1xuICAgICAgICAgICAgICAgICAgICQodGhpcykuY2xvc2VzdCgnZm9ybScpLnN1Ym1pdCgpO1xuICAgICAgICAgICAgICAgfVxuICAgICAgICAgICB9KTtcbiAgICAgICB9XG4gICAgfSk7ICAgICAgXG5cbiAgICBDaGVja2xpc3QuZGVmYXVsdHMgPSAkLmV4dGVuZCh7fSwgJC5mbi5lZGl0YWJsZXR5cGVzLmxpc3QuZGVmYXVsdHMsIHtcbiAgICAgICAgLyoqXG4gICAgICAgIEBwcm9wZXJ0eSB0cGwgXG4gICAgICAgIEBkZWZhdWx0IDxkaXY+PC9kaXY+XG4gICAgICAgICoqLyAgICAgICAgIFxuICAgICAgICB0cGw6JzxkaXYgY2xhc3M9XCJlZGl0YWJsZS1jaGVja2xpc3RcIj48L2Rpdj4nLFxuICAgICAgICBcbiAgICAgICAgLyoqXG4gICAgICAgIEBwcm9wZXJ0eSBpbnB1dGNsYXNzIFxuICAgICAgICBAdHlwZSBzdHJpbmdcbiAgICAgICAgQGRlZmF1bHQgbnVsbFxuICAgICAgICAqKi8gICAgICAgICBcbiAgICAgICAgaW5wdXRjbGFzczogbnVsbCwgICAgICAgIFxuICAgICAgICBcbiAgICAgICAgLyoqXG4gICAgICAgIFNlcGFyYXRvciBvZiB2YWx1ZXMgd2hlbiByZWFkaW5nIGZyb20gYGRhdGEtdmFsdWVgIGF0dHJpYnV0ZVxuXG4gICAgICAgIEBwcm9wZXJ0eSBzZXBhcmF0b3IgXG4gICAgICAgIEB0eXBlIHN0cmluZ1xuICAgICAgICBAZGVmYXVsdCAnLCdcbiAgICAgICAgKiovICAgICAgICAgXG4gICAgICAgIHNlcGFyYXRvcjogJywnXG4gICAgfSk7XG5cbiAgICAkLmZuLmVkaXRhYmxldHlwZXMuY2hlY2tsaXN0ID0gQ2hlY2tsaXN0OyAgICAgIFxuXG59KHdpbmRvdy5qUXVlcnkpKTtcblxuLyoqXG5IVE1MNSBpbnB1dCB0eXBlcy5cbkZvbGxvd2luZyB0eXBlcyBhcmUgc3VwcG9ydGVkOlxuXG4qIHBhc3N3b3JkXG4qIGVtYWlsXG4qIHVybFxuKiB0ZWxcbiogbnVtYmVyXG4qIHJhbmdlXG4qIHRpbWVcblxuTGVhcm4gbW9yZSBhYm91dCBodG1sNSBpbnB1dHM6ICBcbmh0dHA6Ly93d3cudzMub3JnL3dpa2kvSFRNTDVfZm9ybV9hZGRpdGlvbnMgIFxuVG8gY2hlY2sgYnJvd3NlciBjb21wYXRpYmlsaXR5IHBsZWFzZSBzZWU6ICBcbmh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvSFRNTC9FbGVtZW50L0lucHV0XG4gICAgICAgICAgICBcbkBjbGFzcyBodG1sNXR5cGVzIFxuQGV4dGVuZHMgdGV4dFxuQGZpbmFsXG5Ac2luY2UgMS4zLjBcbkBleGFtcGxlXG48YSBocmVmPVwiI1wiIGlkPVwiZW1haWxcIiBkYXRhLXR5cGU9XCJlbWFpbFwiIGRhdGEtcGs9XCIxXCI+YWRtaW5AZXhhbXBsZS5jb208L2E+XG48c2NyaXB0PlxuJChmdW5jdGlvbigpe1xuICAgICQoJyNlbWFpbCcpLmVkaXRhYmxlKHtcbiAgICAgICAgdXJsOiAnL3Bvc3QnLFxuICAgICAgICB0aXRsZTogJ0VudGVyIGVtYWlsJ1xuICAgIH0pO1xufSk7XG48L3NjcmlwdD5cbioqL1xuXG4vKipcbkBwcm9wZXJ0eSB0cGwgXG5AZGVmYXVsdCBkZXBlbmRzIG9uIHR5cGVcbioqLyBcblxuLypcblBhc3N3b3JkXG4qL1xuKGZ1bmN0aW9uICgkKSB7XG4gICAgO1xuICAgIFxuICAgIHZhciBQYXNzd29yZCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuaW5pdCgncGFzc3dvcmQnLCBvcHRpb25zLCBQYXNzd29yZC5kZWZhdWx0cyk7XG4gICAgfTtcbiAgICAkLmZuLmVkaXRhYmxldXRpbHMuaW5oZXJpdChQYXNzd29yZCwgJC5mbi5lZGl0YWJsZXR5cGVzLnRleHQpO1xuICAgICQuZXh0ZW5kKFBhc3N3b3JkLnByb3RvdHlwZSwge1xuICAgICAgIC8vZG8gbm90IGRpc3BsYXkgcGFzc3dvcmQsIHNob3cgJ1toaWRkZW5dJyBpbnN0ZWFkXG4gICAgICAgdmFsdWUyaHRtbDogZnVuY3Rpb24odmFsdWUsIGVsZW1lbnQpIHtcbiAgICAgICAgICAgaWYodmFsdWUpIHtcbiAgICAgICAgICAgICAgICQoZWxlbWVudCkudGV4dCgnW2hpZGRlbl0nKTtcbiAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICQoZWxlbWVudCkuZW1wdHkoKTsgXG4gICAgICAgICAgIH1cbiAgICAgICB9LFxuICAgICAgIC8vYXMgcGFzc3dvcmQgbm90IGRpc3BsYXllZCwgc2hvdWxkIG5vdCBzZXQgdmFsdWUgYnkgaHRtbFxuICAgICAgIGh0bWwydmFsdWU6IGZ1bmN0aW9uKGh0bWwpIHtcbiAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgfSAgICAgICBcbiAgICB9KTsgICAgXG4gICAgUGFzc3dvcmQuZGVmYXVsdHMgPSAkLmV4dGVuZCh7fSwgJC5mbi5lZGl0YWJsZXR5cGVzLnRleHQuZGVmYXVsdHMsIHtcbiAgICAgICAgdHBsOiAnPGlucHV0IHR5cGU9XCJwYXNzd29yZFwiPidcbiAgICB9KTtcbiAgICAkLmZuLmVkaXRhYmxldHlwZXMucGFzc3dvcmQgPSBQYXNzd29yZDtcbn0od2luZG93LmpRdWVyeSkpO1xuXG5cbi8qXG5FbWFpbFxuKi9cbihmdW5jdGlvbiAoJCkge1xuICAgIDtcbiAgICBcbiAgICB2YXIgRW1haWwgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICB0aGlzLmluaXQoJ2VtYWlsJywgb3B0aW9ucywgRW1haWwuZGVmYXVsdHMpO1xuICAgIH07XG4gICAgJC5mbi5lZGl0YWJsZXV0aWxzLmluaGVyaXQoRW1haWwsICQuZm4uZWRpdGFibGV0eXBlcy50ZXh0KTtcbiAgICBFbWFpbC5kZWZhdWx0cyA9ICQuZXh0ZW5kKHt9LCAkLmZuLmVkaXRhYmxldHlwZXMudGV4dC5kZWZhdWx0cywge1xuICAgICAgICB0cGw6ICc8aW5wdXQgdHlwZT1cImVtYWlsXCI+J1xuICAgIH0pO1xuICAgICQuZm4uZWRpdGFibGV0eXBlcy5lbWFpbCA9IEVtYWlsO1xufSh3aW5kb3cualF1ZXJ5KSk7XG5cblxuLypcblVybFxuKi9cbihmdW5jdGlvbiAoJCkge1xuICAgIDtcbiAgICBcbiAgICB2YXIgVXJsID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5pbml0KCd1cmwnLCBvcHRpb25zLCBVcmwuZGVmYXVsdHMpO1xuICAgIH07XG4gICAgJC5mbi5lZGl0YWJsZXV0aWxzLmluaGVyaXQoVXJsLCAkLmZuLmVkaXRhYmxldHlwZXMudGV4dCk7XG4gICAgVXJsLmRlZmF1bHRzID0gJC5leHRlbmQoe30sICQuZm4uZWRpdGFibGV0eXBlcy50ZXh0LmRlZmF1bHRzLCB7XG4gICAgICAgIHRwbDogJzxpbnB1dCB0eXBlPVwidXJsXCI+J1xuICAgIH0pO1xuICAgICQuZm4uZWRpdGFibGV0eXBlcy51cmwgPSBVcmw7XG59KHdpbmRvdy5qUXVlcnkpKTtcblxuXG4vKlxuVGVsXG4qL1xuKGZ1bmN0aW9uICgkKSB7XG4gICAgO1xuICAgIFxuICAgIHZhciBUZWwgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICB0aGlzLmluaXQoJ3RlbCcsIG9wdGlvbnMsIFRlbC5kZWZhdWx0cyk7XG4gICAgfTtcbiAgICAkLmZuLmVkaXRhYmxldXRpbHMuaW5oZXJpdChUZWwsICQuZm4uZWRpdGFibGV0eXBlcy50ZXh0KTtcbiAgICBUZWwuZGVmYXVsdHMgPSAkLmV4dGVuZCh7fSwgJC5mbi5lZGl0YWJsZXR5cGVzLnRleHQuZGVmYXVsdHMsIHtcbiAgICAgICAgdHBsOiAnPGlucHV0IHR5cGU9XCJ0ZWxcIj4nXG4gICAgfSk7XG4gICAgJC5mbi5lZGl0YWJsZXR5cGVzLnRlbCA9IFRlbDtcbn0od2luZG93LmpRdWVyeSkpO1xuXG5cbi8qXG5OdW1iZXJcbiovXG4oZnVuY3Rpb24gKCQpIHtcbiAgICA7XG4gICAgXG4gICAgdmFyIE51bWJlcklucHV0ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5pbml0KCdudW1iZXInLCBvcHRpb25zLCBOdW1iZXJJbnB1dC5kZWZhdWx0cyk7XG4gICAgfTtcbiAgICAkLmZuLmVkaXRhYmxldXRpbHMuaW5oZXJpdChOdW1iZXJJbnB1dCwgJC5mbi5lZGl0YWJsZXR5cGVzLnRleHQpO1xuICAgICQuZXh0ZW5kKE51bWJlcklucHV0LnByb3RvdHlwZSwge1xuICAgICAgICAgcmVuZGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBOdW1iZXJJbnB1dC5zdXBlcmNsYXNzLnJlbmRlci5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5zZXRBdHRyKCdtaW4nKTtcbiAgICAgICAgICAgIHRoaXMuc2V0QXR0cignbWF4Jyk7XG4gICAgICAgICAgICB0aGlzLnNldEF0dHIoJ3N0ZXAnKTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9zdHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZih0aGlzLiRjbGVhcikge1xuICAgICAgICAgICAgICAgIC8vaW5jcmVhc2UgcmlnaHQgZmZzZXQgIGZvciB1cC9kb3duIGFycm93c1xuICAgICAgICAgICAgICAgIHRoaXMuJGNsZWFyLmNzcyh7cmlnaHQ6IDI0fSk7XG4gICAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICAvL2NhbiBwb3NpdGlvbiBjbGVhciBidXR0b24gb25seSBoZXJlLCB3aGVuIGZvcm0gaXMgc2hvd24gYW5kIGhlaWdodCBjYW4gYmUgY2FsY3VsYXRlZFxuICAgICAgICAgICAgICAgIHZhciBoID0gdGhpcy4kaW5wdXQub3V0ZXJIZWlnaHQodHJ1ZSkgfHwgMjAsXG4gICAgICAgICAgICAgICAgICAgIGRlbHRhID0gKGggLSB0aGlzLiRjbGVhci5oZWlnaHQoKSkgLyAyO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vYWRkIDEycHggdG8gb2Zmc2V0IHJpZ2h0IGZvciB1cC9kb3duIGFycm93cyAgICBcbiAgICAgICAgICAgICAgICB0aGlzLiRjbGVhci5jc3Moe3RvcDogZGVsdGEsIHJpZ2h0OiBkZWx0YSArIDE2fSk7XG4gICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIH0gXG4gICAgICAgIH0gICAgICAgIFxuICAgIH0pOyAgICAgXG4gICAgTnVtYmVySW5wdXQuZGVmYXVsdHMgPSAkLmV4dGVuZCh7fSwgJC5mbi5lZGl0YWJsZXR5cGVzLnRleHQuZGVmYXVsdHMsIHtcbiAgICAgICAgdHBsOiAnPGlucHV0IHR5cGU9XCJudW1iZXJcIj4nLFxuICAgICAgICBpbnB1dGNsYXNzOiAnaW5wdXQtbWluaScsXG4gICAgICAgIG1pbjogbnVsbCxcbiAgICAgICAgbWF4OiBudWxsLFxuICAgICAgICBzdGVwOiBudWxsXG4gICAgfSk7XG4gICAgJC5mbi5lZGl0YWJsZXR5cGVzLm51bWJlciA9IE51bWJlcklucHV0O1xufSh3aW5kb3cualF1ZXJ5KSk7XG5cblxuLypcblJhbmdlIChpbmhlcml0IGZyb20gbnVtYmVyKVxuKi9cbihmdW5jdGlvbiAoJCkge1xuICAgIDtcbiAgICBcbiAgICB2YXIgUmFuZ2UgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICB0aGlzLmluaXQoJ3JhbmdlJywgb3B0aW9ucywgUmFuZ2UuZGVmYXVsdHMpO1xuICAgIH07XG4gICAgJC5mbi5lZGl0YWJsZXV0aWxzLmluaGVyaXQoUmFuZ2UsICQuZm4uZWRpdGFibGV0eXBlcy5udW1iZXIpO1xuICAgICQuZXh0ZW5kKFJhbmdlLnByb3RvdHlwZSwge1xuICAgICAgICByZW5kZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMuJGlucHV0ID0gdGhpcy4kdHBsLmZpbHRlcignaW5wdXQnKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5zZXRDbGFzcygpO1xuICAgICAgICAgICAgdGhpcy5zZXRBdHRyKCdtaW4nKTtcbiAgICAgICAgICAgIHRoaXMuc2V0QXR0cignbWF4Jyk7XG4gICAgICAgICAgICB0aGlzLnNldEF0dHIoJ3N0ZXAnKTsgICAgICAgICAgIFxuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLiRpbnB1dC5vbignaW5wdXQnLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICQodGhpcykuc2libGluZ3MoJ291dHB1dCcpLnRleHQoJCh0aGlzKS52YWwoKSk7IFxuICAgICAgICAgICAgfSk7ICBcbiAgICAgICAgfSxcbiAgICAgICAgYWN0aXZhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy4kaW5wdXQuZm9jdXMoKTtcbiAgICAgICAgfSAgICAgICAgIFxuICAgIH0pO1xuICAgIFJhbmdlLmRlZmF1bHRzID0gJC5leHRlbmQoe30sICQuZm4uZWRpdGFibGV0eXBlcy5udW1iZXIuZGVmYXVsdHMsIHtcbiAgICAgICAgdHBsOiAnPGlucHV0IHR5cGU9XCJyYW5nZVwiPjxvdXRwdXQgc3R5bGU9XCJ3aWR0aDogMzBweDsgZGlzcGxheTogaW5saW5lLWJsb2NrXCI+PC9vdXRwdXQ+JyxcbiAgICAgICAgaW5wdXRjbGFzczogJ2lucHV0LW1lZGl1bSdcbiAgICB9KTtcbiAgICAkLmZuLmVkaXRhYmxldHlwZXMucmFuZ2UgPSBSYW5nZTtcbn0od2luZG93LmpRdWVyeSkpO1xuXG4vKlxuVGltZVxuKi9cbihmdW5jdGlvbiAoJCkge1xuICAgIDtcblxuICAgIHZhciBUaW1lID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5pbml0KCd0aW1lJywgb3B0aW9ucywgVGltZS5kZWZhdWx0cyk7XG4gICAgfTtcbiAgICAvL2luaGVyaXQgZnJvbSBhYnN0cmFjdCwgYXMgaW5oZXJpdGFuY2UgZnJvbSB0ZXh0IGdpdmVzIHNlbGVjdGlvbiBlcnJvci5cbiAgICAkLmZuLmVkaXRhYmxldXRpbHMuaW5oZXJpdChUaW1lLCAkLmZuLmVkaXRhYmxldHlwZXMuYWJzdHJhY3RpbnB1dCk7XG4gICAgJC5leHRlbmQoVGltZS5wcm90b3R5cGUsIHtcbiAgICAgICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgdGhpcy5zZXRDbGFzcygpO1xuICAgICAgICB9ICAgICAgICBcbiAgICB9KTtcbiAgICBUaW1lLmRlZmF1bHRzID0gJC5leHRlbmQoe30sICQuZm4uZWRpdGFibGV0eXBlcy5hYnN0cmFjdGlucHV0LmRlZmF1bHRzLCB7XG4gICAgICAgIHRwbDogJzxpbnB1dCB0eXBlPVwidGltZVwiPidcbiAgICB9KTtcbiAgICAkLmZuLmVkaXRhYmxldHlwZXMudGltZSA9IFRpbWU7XG59KHdpbmRvdy5qUXVlcnkpKTtcblxuLyoqXG5TZWxlY3QyIGlucHV0LiBCYXNlZCBvbiBhbWF6aW5nIHdvcmsgb2YgSWdvciBWYXluYmVyZyBodHRwczovL2dpdGh1Yi5jb20vaXZheW5iZXJnL3NlbGVjdDIuICBcblBsZWFzZSBzZWUgW29yaWdpbmFsIHNlbGVjdDIgZG9jc10oaHR0cDovL2l2YXluYmVyZy5naXRodWIuY29tL3NlbGVjdDIpIGZvciBkZXRhaWxlZCBkZXNjcmlwdGlvbiBhbmQgb3B0aW9ucy4gIFxuIFxuWW91IHNob3VsZCBtYW51YWxseSBkb3dubG9hZCBhbmQgaW5jbHVkZSBzZWxlY3QyIGRpc3RyaWJ1dGl2ZTogIFxuXG4gICAgPGxpbmsgaHJlZj1cInNlbGVjdDIvc2VsZWN0Mi5jc3NcIiByZWw9XCJzdHlsZXNoZWV0XCIgdHlwZT1cInRleHQvY3NzXCI+PC9saW5rPiAgXG4gICAgPHNjcmlwdCBzcmM9XCJzZWxlY3QyL3NlbGVjdDIuanNcIj48L3NjcmlwdD4gIFxuICAgIFxuVG8gbWFrZSBpdCAqKmJvb3RzdHJhcC1zdHlsZWQqKiB5b3UgY2FuIHVzZSBjc3MgZnJvbSBbaGVyZV0oaHR0cHM6Ly9naXRodWIuY29tL3QwbS9zZWxlY3QyLWJvb3RzdHJhcC1jc3MpOiBcblxuICAgIDxsaW5rIGhyZWY9XCJzZWxlY3QyLWJvb3RzdHJhcC5jc3NcIiByZWw9XCJzdHlsZXNoZWV0XCIgdHlwZT1cInRleHQvY3NzXCI+PC9saW5rPiAgICBcbiAgICBcbioqTm90ZToqKiBjdXJyZW50bHkgYGF1dG90ZXh0YCBmZWF0dXJlIGRvZXMgbm90IHdvcmsgZm9yIHNlbGVjdDIgd2l0aCBgYWpheGAgcmVtb3RlIHNvdXJjZS4gICAgXG5Zb3UgbmVlZCBpbml0aWFsbHkgcHV0IGJvdGggYGRhdGEtdmFsdWVgIGFuZCBlbGVtZW50J3MgdGV4dCB5b3VzZWxmOiAgICBcblxuICAgIDxhIGhyZWY9XCIjXCIgZGF0YS10eXBlPVwic2VsZWN0MlwiIGRhdGEtdmFsdWU9XCIxXCI+VGV4dDE8L2E+XG4gICAgXG4gICAgXG5AY2xhc3Mgc2VsZWN0MlxuQGV4dGVuZHMgYWJzdHJhY3RpbnB1dFxuQHNpbmNlIDEuNC4xXG5AZmluYWxcbkBleGFtcGxlXG48YSBocmVmPVwiI1wiIGlkPVwiY291bnRyeVwiIGRhdGEtdHlwZT1cInNlbGVjdDJcIiBkYXRhLXBrPVwiMVwiIGRhdGEtdmFsdWU9XCJydVwiIGRhdGEtdXJsPVwiL3Bvc3RcIiBkYXRhLXRpdGxlPVwiU2VsZWN0IGNvdW50cnlcIj48L2E+XG48c2NyaXB0PlxuJChmdW5jdGlvbigpe1xuICAgIC8vbG9jYWwgc291cmNlXG4gICAgJCgnI2NvdW50cnknKS5lZGl0YWJsZSh7XG4gICAgICAgIHNvdXJjZTogW1xuICAgICAgICAgICAgICB7aWQ6ICdnYicsIHRleHQ6ICdHcmVhdCBCcml0YWluJ30sXG4gICAgICAgICAgICAgIHtpZDogJ3VzJywgdGV4dDogJ1VuaXRlZCBTdGF0ZXMnfSxcbiAgICAgICAgICAgICAge2lkOiAncnUnLCB0ZXh0OiAnUnVzc2lhJ31cbiAgICAgICAgICAgXSxcbiAgICAgICAgc2VsZWN0Mjoge1xuICAgICAgICAgICBtdWx0aXBsZTogdHJ1ZVxuICAgICAgICB9XG4gICAgfSk7XG4gICAgLy9yZW1vdGUgc291cmNlIChzaW1wbGUpXG4gICAgJCgnI2NvdW50cnknKS5lZGl0YWJsZSh7XG4gICAgICAgIHNvdXJjZTogJy9nZXRDb3VudHJpZXMnLFxuICAgICAgICBzZWxlY3QyOiB7XG4gICAgICAgICAgICBwbGFjZWhvbGRlcjogJ1NlbGVjdCBDb3VudHJ5JyxcbiAgICAgICAgICAgIG1pbmltdW1JbnB1dExlbmd0aDogMVxuICAgICAgICB9XG4gICAgfSk7XG4gICAgLy9yZW1vdGUgc291cmNlIChhZHZhbmNlZClcbiAgICAkKCcjY291bnRyeScpLmVkaXRhYmxlKHtcbiAgICAgICAgc2VsZWN0Mjoge1xuICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICdTZWxlY3QgQ291bnRyeScsXG4gICAgICAgICAgICBhbGxvd0NsZWFyOiB0cnVlLFxuICAgICAgICAgICAgbWluaW11bUlucHV0TGVuZ3RoOiAzLFxuICAgICAgICAgICAgaWQ6IGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW0uQ291bnRyeUlkO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGFqYXg6IHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvZ2V0Q291bnRyaWVzJyxcbiAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nLFxuICAgICAgICAgICAgICAgIGRhdGE6IGZ1bmN0aW9uICh0ZXJtLCBwYWdlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IHF1ZXJ5OiB0ZXJtIH07XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICByZXN1bHRzOiBmdW5jdGlvbiAoZGF0YSwgcGFnZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4geyByZXN1bHRzOiBkYXRhIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZvcm1hdFJlc3VsdDogZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXRlbS5Db3VudHJ5TmFtZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmb3JtYXRTZWxlY3Rpb246IGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW0uQ291bnRyeU5hbWU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaW5pdFNlbGVjdGlvbjogZnVuY3Rpb24gKGVsZW1lbnQsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICQuZ2V0KCcvZ2V0Q291bnRyeUJ5SWQnLCB7IHF1ZXJ5OiBlbGVtZW50LnZhbCgpIH0sIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGRhdGEpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBcbiAgICAgICAgfSAgXG4gICAgfSk7XG59KTtcbjwvc2NyaXB0PlxuKiovXG4oZnVuY3Rpb24gKCQpIHtcbiAgICA7XG4gICAgXG4gICAgdmFyIENvbnN0cnVjdG9yID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5pbml0KCdzZWxlY3QyJywgb3B0aW9ucywgQ29uc3RydWN0b3IuZGVmYXVsdHMpO1xuXG4gICAgICAgIG9wdGlvbnMuc2VsZWN0MiA9IG9wdGlvbnMuc2VsZWN0MiB8fCB7fTtcblxuICAgICAgICB0aGlzLnNvdXJjZURhdGEgPSBudWxsO1xuICAgICAgICBcbiAgICAgICAgLy9wbGFjZWhvbGRlclxuICAgICAgICBpZihvcHRpb25zLnBsYWNlaG9sZGVyKSB7XG4gICAgICAgICAgICBvcHRpb25zLnNlbGVjdDIucGxhY2Vob2xkZXIgPSBvcHRpb25zLnBsYWNlaG9sZGVyO1xuICAgICAgICB9XG4gICAgICAgXG4gICAgICAgIC8vaWYgbm90IGB0YWdzYCBtb2RlLCB1c2Ugc291cmNlXG4gICAgICAgIGlmKCFvcHRpb25zLnNlbGVjdDIudGFncyAmJiBvcHRpb25zLnNvdXJjZSkge1xuICAgICAgICAgICAgdmFyIHNvdXJjZSA9IG9wdGlvbnMuc291cmNlO1xuICAgICAgICAgICAgLy9pZiBzb3VyY2UgaXMgZnVuY3Rpb24sIGNhbGwgaXQgKG9uY2UhKVxuICAgICAgICAgICAgaWYgKCQuaXNGdW5jdGlvbihvcHRpb25zLnNvdXJjZSkpIHtcbiAgICAgICAgICAgICAgICBzb3VyY2UgPSBvcHRpb25zLnNvdXJjZS5jYWxsKG9wdGlvbnMuc2NvcGUpO1xuICAgICAgICAgICAgfSAgICAgICAgICAgICAgIFxuXG4gICAgICAgICAgICBpZiAodHlwZW9mIHNvdXJjZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zLnNlbGVjdDIuYWpheCA9IG9wdGlvbnMuc2VsZWN0Mi5hamF4IHx8IHt9O1xuICAgICAgICAgICAgICAgIC8vc29tZSBkZWZhdWx0IGFqYXggcGFyYW1zXG4gICAgICAgICAgICAgICAgaWYoIW9wdGlvbnMuc2VsZWN0Mi5hamF4LmRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5zZWxlY3QyLmFqYXguZGF0YSA9IGZ1bmN0aW9uKHRlcm0pIHtyZXR1cm4geyBxdWVyeTp0ZXJtIH07fTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYoIW9wdGlvbnMuc2VsZWN0Mi5hamF4LnJlc3VsdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5zZWxlY3QyLmFqYXgucmVzdWx0cyA9IGZ1bmN0aW9uKGRhdGEpIHsgcmV0dXJuIHtyZXN1bHRzOmRhdGEgfTt9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBvcHRpb25zLnNlbGVjdDIuYWpheC51cmwgPSBzb3VyY2U7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vY2hlY2sgZm9ybWF0IGFuZCBjb252ZXJ0IHgtZWRpdGFibGUgZm9ybWF0IHRvIHNlbGVjdDIgZm9ybWF0IChpZiBuZWVkZWQpXG4gICAgICAgICAgICAgICAgdGhpcy5zb3VyY2VEYXRhID0gdGhpcy5jb252ZXJ0U291cmNlKHNvdXJjZSk7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5zZWxlY3QyLmRhdGEgPSB0aGlzLnNvdXJjZURhdGE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gXG5cbiAgICAgICAgLy9vdmVycmlkaW5nIG9iamVjdHMgaW4gY29uZmlnIChhcyBieSBkZWZhdWx0IGpRdWVyeSBleHRlbmQoKSBpcyBub3QgcmVjdXJzaXZlKVxuICAgICAgICB0aGlzLm9wdGlvbnMuc2VsZWN0MiA9ICQuZXh0ZW5kKHt9LCBDb25zdHJ1Y3Rvci5kZWZhdWx0cy5zZWxlY3QyLCBvcHRpb25zLnNlbGVjdDIpO1xuXG4gICAgICAgIC8vZGV0ZWN0IHdoZXRoZXIgaXQgaXMgbXVsdGktdmFsdWVkXG4gICAgICAgIHRoaXMuaXNNdWx0aXBsZSA9IHRoaXMub3B0aW9ucy5zZWxlY3QyLnRhZ3MgfHwgdGhpcy5vcHRpb25zLnNlbGVjdDIubXVsdGlwbGU7XG4gICAgICAgIHRoaXMuaXNSZW1vdGUgPSAoJ2FqYXgnIGluIHRoaXMub3B0aW9ucy5zZWxlY3QyKTtcblxuICAgICAgICAvL3N0b3JlIGZ1bmN0aW9uIHJldHVybmluZyBJRCBvZiBpdGVtXG4gICAgICAgIC8vc2hvdWxkIGJlIGhlcmUgYXMgdXNlZCBpbmF1dG90ZXh0IGZvciBsb2NhbCBzb3VyY2VcbiAgICAgICAgdGhpcy5pZEZ1bmMgPSB0aGlzLm9wdGlvbnMuc2VsZWN0Mi5pZDtcbiAgICAgICAgaWYgKHR5cGVvZih0aGlzLmlkRnVuYykgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgdmFyIGlkS2V5ID0gdGhpcy5pZEZ1bmMgfHwgJ2lkJztcbiAgICAgICAgICAgIHRoaXMuaWRGdW5jID0gZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGVbaWRLZXldOyB9O1xuICAgICAgICB9XG5cbiAgICAgICAgLy9zdG9yZSBmdW5jdGlvbiB0aGF0IHJlbmRlcnMgdGV4dCBpbiBzZWxlY3QyXG4gICAgICAgIHRoaXMuZm9ybWF0U2VsZWN0aW9uID0gdGhpcy5vcHRpb25zLnNlbGVjdDIuZm9ybWF0U2VsZWN0aW9uO1xuICAgICAgICBpZiAodHlwZW9mKHRoaXMuZm9ybWF0U2VsZWN0aW9uKSAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICB0aGlzLmZvcm1hdFNlbGVjdGlvbiA9IGZ1bmN0aW9uIChlKSB7IHJldHVybiBlLnRleHQ7IH07XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgJC5mbi5lZGl0YWJsZXV0aWxzLmluaGVyaXQoQ29uc3RydWN0b3IsICQuZm4uZWRpdGFibGV0eXBlcy5hYnN0cmFjdGlucHV0KTtcblxuICAgICQuZXh0ZW5kKENvbnN0cnVjdG9yLnByb3RvdHlwZSwge1xuICAgICAgICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5zZXRDbGFzcygpO1xuXG4gICAgICAgICAgICAvL2NhbiBub3QgYXBwbHkgc2VsZWN0MiBoZXJlIGFzIGl0IGNhbGxzIGluaXRTZWxlY3Rpb24gXG4gICAgICAgICAgICAvL292ZXIgaW5wdXQgdGhhdCBkb2VzIG5vdCBoYXZlIGNvcnJlY3QgdmFsdWUgeWV0LlxuICAgICAgICAgICAgLy9hcHBseSBzZWxlY3QyIG9ubHkgaW4gdmFsdWUyaW5wdXRcbiAgICAgICAgICAgIC8vdGhpcy4kaW5wdXQuc2VsZWN0Mih0aGlzLm9wdGlvbnMuc2VsZWN0Mik7XG5cbiAgICAgICAgICAgIC8vd2hlbiBkYXRhIGlzIGxvYWRlZCB2aWEgYWpheCwgd2UgbmVlZCB0byBrbm93IHdoZW4gaXQncyBkb25lIHRvIHBvcHVsYXRlIGxpc3REYXRhXG4gICAgICAgICAgICBpZih0aGlzLmlzUmVtb3RlKSB7XG4gICAgICAgICAgICAgICAgLy9saXN0ZW4gdG8gbG9hZGVkIGV2ZW50IHRvIHBvcHVsYXRlIGRhdGFcbiAgICAgICAgICAgICAgICB0aGlzLiRpbnB1dC5vbignc2VsZWN0Mi1sb2FkZWQnLCAkLnByb3h5KGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zb3VyY2VEYXRhID0gZS5pdGVtcy5yZXN1bHRzO1xuICAgICAgICAgICAgICAgIH0sIHRoaXMpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy90cmlnZ2VyIHJlc2l6ZSBvZiBlZGl0YWJsZWZvcm0gdG8gcmUtcG9zaXRpb24gY29udGFpbmVyIGluIG11bHRpLXZhbHVlZCBtb2RlXG4gICAgICAgICAgICBpZih0aGlzLmlzTXVsdGlwbGUpIHtcbiAgICAgICAgICAgICAgIHRoaXMuJGlucHV0Lm9uKCdjaGFuZ2UnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmNsb3Nlc3QoJ2Zvcm0nKS5wYXJlbnQoKS50cmlnZ2VySGFuZGxlcigncmVzaXplJyk7XG4gICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICB9LFxuXG4gICAgICAgdmFsdWUyaHRtbDogZnVuY3Rpb24odmFsdWUsIGVsZW1lbnQpIHtcbiAgICAgICAgICAgdmFyIHRleHQgPSAnJywgZGF0YSxcbiAgICAgICAgICAgICAgIHRoYXQgPSB0aGlzO1xuXG4gICAgICAgICAgIGlmKHRoaXMub3B0aW9ucy5zZWxlY3QyLnRhZ3MpIHsgLy9pbiB0YWdzIG1vZGUganVzdCBhc3NpZ24gdmFsdWVcbiAgICAgICAgICAgICAgZGF0YSA9IHZhbHVlOyBcbiAgICAgICAgICAgICAgLy9kYXRhID0gJC5mbi5lZGl0YWJsZXV0aWxzLml0ZW1zQnlWYWx1ZSh2YWx1ZSwgdGhpcy5vcHRpb25zLnNlbGVjdDIudGFncywgdGhpcy5pZEZ1bmMpO1xuICAgICAgICAgICB9IGVsc2UgaWYodGhpcy5zb3VyY2VEYXRhKSB7XG4gICAgICAgICAgICAgIGRhdGEgPSAkLmZuLmVkaXRhYmxldXRpbHMuaXRlbXNCeVZhbHVlKHZhbHVlLCB0aGlzLnNvdXJjZURhdGEsIHRoaXMuaWRGdW5jKTsgXG4gICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIC8vY2FuIG5vdCBnZXQgbGlzdCBvZiBwb3NzaWJsZSB2YWx1ZXMgXG4gICAgICAgICAgICAgIC8vKGUuZy4gYXV0b3RleHQgZm9yIHNlbGVjdDIgd2l0aCBhamF4IHNvdXJjZSlcbiAgICAgICAgICAgfVxuXG4gICAgICAgICAgIC8vZGF0YSBtYXkgYmUgYXJyYXkgKHdoZW4gbXVsdGlwbGUgdmFsdWVzIGFsbG93ZWQpXG4gICAgICAgICAgIGlmKCQuaXNBcnJheShkYXRhKSkge1xuICAgICAgICAgICAgICAgLy9jb2xsZWN0IHNlbGVjdGVkIGRhdGEgYW5kIHNob3cgd2l0aCBzZXBhcmF0b3JcbiAgICAgICAgICAgICAgIHRleHQgPSBbXTtcbiAgICAgICAgICAgICAgICQuZWFjaChkYXRhLCBmdW5jdGlvbihrLCB2KXtcbiAgICAgICAgICAgICAgICAgICB0ZXh0LnB1c2godiAmJiB0eXBlb2YgdiA9PT0gJ29iamVjdCcgPyB0aGF0LmZvcm1hdFNlbGVjdGlvbih2KSA6IHYpO1xuICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgIH0gZWxzZSBpZihkYXRhKSB7XG4gICAgICAgICAgICAgICB0ZXh0ID0gdGhhdC5mb3JtYXRTZWxlY3Rpb24oZGF0YSk7XG4gICAgICAgICAgIH1cblxuICAgICAgICAgICB0ZXh0ID0gJC5pc0FycmF5KHRleHQpID8gdGV4dC5qb2luKHRoaXMub3B0aW9ucy52aWV3c2VwYXJhdG9yKSA6IHRleHQ7XG5cbiAgICAgICAgICAgLy8kKGVsZW1lbnQpLnRleHQodGV4dCk7XG4gICAgICAgICAgIENvbnN0cnVjdG9yLnN1cGVyY2xhc3MudmFsdWUyaHRtbC5jYWxsKHRoaXMsIHRleHQsIGVsZW1lbnQpOyBcbiAgICAgICB9LFxuXG4gICAgICAgaHRtbDJ2YWx1ZTogZnVuY3Rpb24oaHRtbCkge1xuICAgICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLnNlbGVjdDIudGFncyA/IHRoaXMuc3RyMnZhbHVlKGh0bWwsIHRoaXMub3B0aW9ucy52aWV3c2VwYXJhdG9yKSA6IG51bGw7XG4gICAgICAgfSxcblxuICAgICAgIHZhbHVlMmlucHV0OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAvLyBpZiB2YWx1ZSBhcnJheSA9PiBqb2luIGl0IGFueXdheVxuICAgICAgICAgICBpZigkLmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUuam9pbih0aGlzLmdldFNlcGFyYXRvcigpKTtcbiAgICAgICAgICAgfVxuXG4gICAgICAgICAgIC8vZm9yIHJlbW90ZSBzb3VyY2UganVzdCBzZXQgdmFsdWUsIHRleHQgaXMgdXBkYXRlZCBieSBpbml0U2VsZWN0aW9uXG4gICAgICAgICAgIGlmKCF0aGlzLiRpbnB1dC5kYXRhKCdzZWxlY3QyJykpIHtcbiAgICAgICAgICAgICAgIHRoaXMuJGlucHV0LnZhbCh2YWx1ZSk7XG4gICAgICAgICAgICAgICB0aGlzLiRpbnB1dC5zZWxlY3QyKHRoaXMub3B0aW9ucy5zZWxlY3QyKTtcbiAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgIC8vc2Vjb25kIGFyZ3VtZW50IG5lZWRlZCB0byBzZXBhcmF0ZSBpbml0aWFsIGNoYW5nZSBmcm9tIHVzZXIncyBjbGljayAoZm9yIGF1dG9zdWJtaXQpICAgXG4gICAgICAgICAgICAgICB0aGlzLiRpbnB1dC52YWwodmFsdWUpLnRyaWdnZXIoJ2NoYW5nZScsIHRydWUpOyBcblxuICAgICAgICAgICAgICAgLy9VbmNhdWdodCBFcnJvcjogY2Fubm90IGNhbGwgdmFsKCkgaWYgaW5pdFNlbGVjdGlvbigpIGlzIG5vdCBkZWZpbmVkXG4gICAgICAgICAgICAgICAvL3RoaXMuJGlucHV0LnNlbGVjdDIoJ3ZhbCcsIHZhbHVlKTtcbiAgICAgICAgICAgfVxuXG4gICAgICAgICAgIC8vIGlmIGRlZmluZWQgcmVtb3RlIHNvdXJjZSBBTkQgbm8gbXVsdGlwbGUgbW9kZSBBTkQgbm8gdXNlcidzIGluaXRTZWxlY3Rpb24gcHJvdmlkZWQgLS0+IFxuICAgICAgICAgICAvLyB3ZSBzaG91bGQgc29tZWhvdyBnZXQgdGV4dCBmb3IgcHJvdmlkZWQgaWQuXG4gICAgICAgICAgIC8vIFRoZSBzb2x1dGlvbiBpcyB0byB1c2UgZWxlbWVudCdzIHRleHQgYXMgdGV4dCBmb3IgdGhhdCBpZCAoZXhjbHVkZSBlbXB0eSlcbiAgICAgICAgICAgaWYodGhpcy5pc1JlbW90ZSAmJiAhdGhpcy5pc011bHRpcGxlICYmICF0aGlzLm9wdGlvbnMuc2VsZWN0Mi5pbml0U2VsZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAvLyBjdXN0b21JZCBhbmQgY3VzdG9tVGV4dCBhcmUgbWV0aG9kcyB0byBleHRyYWN0IGBpZGAgYW5kIGB0ZXh0YCBmcm9tIGRhdGEgb2JqZWN0XG4gICAgICAgICAgICAgICAvLyB3ZSBjYW4gdXNlIHRoaXMgd29ya2Fyb3VuZCBvbmx5IGlmIHVzZXIgZGlkIG5vdCBkZWZpbmUgdGhlc2UgbWV0aG9kc1xuICAgICAgICAgICAgICAgLy8gb3RoZXJ3aXNlIHdlIGNhbnQgY29uc3RydWN0IGRhdGEgb2JqZWN0XG4gICAgICAgICAgICAgICB2YXIgY3VzdG9tSWQgPSB0aGlzLm9wdGlvbnMuc2VsZWN0Mi5pZCxcbiAgICAgICAgICAgICAgICAgICBjdXN0b21UZXh0ID0gdGhpcy5vcHRpb25zLnNlbGVjdDIuZm9ybWF0U2VsZWN0aW9uO1xuXG4gICAgICAgICAgICAgICBpZighY3VzdG9tSWQgJiYgIWN1c3RvbVRleHQpIHtcbiAgICAgICAgICAgICAgICAgICB2YXIgJGVsID0gJCh0aGlzLm9wdGlvbnMuc2NvcGUpO1xuICAgICAgICAgICAgICAgICAgIGlmICghJGVsLmRhdGEoJ2VkaXRhYmxlJykuaXNFbXB0eSkge1xuICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IHtpZDogdmFsdWUsIHRleHQ6ICRlbC50ZXh0KCl9O1xuICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiRpbnB1dC5zZWxlY3QyKCdkYXRhJywgZGF0YSk7IFxuICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgfVxuICAgICAgIH0sXG4gICAgICAgXG4gICAgICAgaW5wdXQydmFsdWU6IGZ1bmN0aW9uKCkgeyBcbiAgICAgICAgICAgcmV0dXJuIHRoaXMuJGlucHV0LnNlbGVjdDIoJ3ZhbCcpO1xuICAgICAgIH0sXG5cbiAgICAgICBzdHIydmFsdWU6IGZ1bmN0aW9uKHN0ciwgc2VwYXJhdG9yKSB7XG4gICAgICAgICAgICBpZih0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJyB8fCAhdGhpcy5pc011bHRpcGxlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0cjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc2VwYXJhdG9yID0gc2VwYXJhdG9yIHx8IHRoaXMuZ2V0U2VwYXJhdG9yKCk7XG5cbiAgICAgICAgICAgIHZhciB2YWwsIGksIGw7XG5cbiAgICAgICAgICAgIGlmIChzdHIgPT09IG51bGwgfHwgc3RyLmxlbmd0aCA8IDEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhbCA9IHN0ci5zcGxpdChzZXBhcmF0b3IpO1xuICAgICAgICAgICAgZm9yIChpID0gMCwgbCA9IHZhbC5sZW5ndGg7IGkgPCBsOyBpID0gaSArIDEpIHtcbiAgICAgICAgICAgICAgICB2YWxbaV0gPSAkLnRyaW0odmFsW2ldKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHZhbDtcbiAgICAgICB9LFxuXG4gICAgICAgIGF1dG9zdWJtaXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy4kaW5wdXQub24oJ2NoYW5nZScsIGZ1bmN0aW9uKGUsIGlzSW5pdGlhbCl7XG4gICAgICAgICAgICAgICAgaWYoIWlzSW5pdGlhbCkge1xuICAgICAgICAgICAgICAgICAgJCh0aGlzKS5jbG9zZXN0KCdmb3JtJykuc3VibWl0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0U2VwYXJhdG9yOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMuc2VsZWN0Mi5zZXBhcmF0b3IgfHwgJC5mbi5zZWxlY3QyLmRlZmF1bHRzLnNlcGFyYXRvcjtcbiAgICAgICAgfSxcblxuICAgICAgICAvKlxuICAgICAgICBDb252ZXJ0cyBzb3VyY2UgZnJvbSB4LWVkaXRhYmxlIGZvcm1hdDoge3ZhbHVlOiAxLCB0ZXh0OiBcIjFcIn0gdG9cbiAgICAgICAgc2VsZWN0MiBmb3JtYXQ6IHtpZDogMSwgdGV4dDogXCIxXCJ9XG4gICAgICAgICovXG4gICAgICAgIGNvbnZlcnRTb3VyY2U6IGZ1bmN0aW9uKHNvdXJjZSkge1xuICAgICAgICAgICAgaWYoJC5pc0FycmF5KHNvdXJjZSkgJiYgc291cmNlLmxlbmd0aCAmJiBzb3VyY2VbMF0udmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGZvcih2YXIgaSA9IDA7IGk8c291cmNlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmKHNvdXJjZVtpXS52YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VbaV0uaWQgPSBzb3VyY2VbaV0udmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgc291cmNlW2ldLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHNvdXJjZTtcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYodGhpcy4kaW5wdXQuZGF0YSgnc2VsZWN0MicpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kaW5wdXQuc2VsZWN0MignZGVzdHJveScpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgIH0pO1xuXG4gICAgQ29uc3RydWN0b3IuZGVmYXVsdHMgPSAkLmV4dGVuZCh7fSwgJC5mbi5lZGl0YWJsZXR5cGVzLmFic3RyYWN0aW5wdXQuZGVmYXVsdHMsIHtcbiAgICAgICAgLyoqXG4gICAgICAgIEBwcm9wZXJ0eSB0cGwgXG4gICAgICAgIEBkZWZhdWx0IDxpbnB1dCB0eXBlPVwiaGlkZGVuXCI+XG4gICAgICAgICoqL1xuICAgICAgICB0cGw6JzxpbnB1dCB0eXBlPVwiaGlkZGVuXCI+JyxcbiAgICAgICAgLyoqXG4gICAgICAgIENvbmZpZ3VyYXRpb24gb2Ygc2VsZWN0Mi4gW0Z1bGwgbGlzdCBvZiBvcHRpb25zXShodHRwOi8vaXZheW5iZXJnLmdpdGh1Yi5jb20vc2VsZWN0MikuXG5cbiAgICAgICAgQHByb3BlcnR5IHNlbGVjdDIgXG4gICAgICAgIEB0eXBlIG9iamVjdFxuICAgICAgICBAZGVmYXVsdCBudWxsXG4gICAgICAgICoqL1xuICAgICAgICBzZWxlY3QyOiBudWxsLFxuICAgICAgICAvKipcbiAgICAgICAgUGxhY2Vob2xkZXIgYXR0cmlidXRlIG9mIHNlbGVjdFxuXG4gICAgICAgIEBwcm9wZXJ0eSBwbGFjZWhvbGRlciBcbiAgICAgICAgQHR5cGUgc3RyaW5nXG4gICAgICAgIEBkZWZhdWx0IG51bGxcbiAgICAgICAgKiovXG4gICAgICAgIHBsYWNlaG9sZGVyOiBudWxsLFxuICAgICAgICAvKipcbiAgICAgICAgU291cmNlIGRhdGEgZm9yIHNlbGVjdC4gSXQgd2lsbCBiZSBhc3NpZ25lZCB0byBzZWxlY3QyIGBkYXRhYCBwcm9wZXJ0eSBhbmQga2VwdCBoZXJlIGp1c3QgZm9yIGNvbnZlbmllbmNlLlxuICAgICAgICBQbGVhc2Ugbm90ZSwgdGhhdCBmb3JtYXQgaXMgZGlmZmVyZW50IGZyb20gc2ltcGxlIGBzZWxlY3RgIGlucHV0OiB1c2UgJ2lkJyBpbnN0ZWFkIG9mICd2YWx1ZScuXG4gICAgICAgIEUuZy4gYFt7aWQ6IDEsIHRleHQ6IFwidGV4dDFcIn0sIHtpZDogMiwgdGV4dDogXCJ0ZXh0MlwifSwgLi4uXWAuXG5cbiAgICAgICAgQHByb3BlcnR5IHNvdXJjZSBcbiAgICAgICAgQHR5cGUgYXJyYXl8c3RyaW5nfGZ1bmN0aW9uXG4gICAgICAgIEBkZWZhdWx0IG51bGwgICAgICAgIFxuICAgICAgICAqKi9cbiAgICAgICAgc291cmNlOiBudWxsLFxuICAgICAgICAvKipcbiAgICAgICAgU2VwYXJhdG9yIHVzZWQgdG8gZGlzcGxheSB0YWdzLlxuXG4gICAgICAgIEBwcm9wZXJ0eSB2aWV3c2VwYXJhdG9yIFxuICAgICAgICBAdHlwZSBzdHJpbmdcbiAgICAgICAgQGRlZmF1bHQgJywgJyAgICAgICAgXG4gICAgICAgICoqL1xuICAgICAgICB2aWV3c2VwYXJhdG9yOiAnLCAnXG4gICAgfSk7XG5cbiAgICAkLmZuLmVkaXRhYmxldHlwZXMuc2VsZWN0MiA9IENvbnN0cnVjdG9yO1xuXG59KHdpbmRvdy5qUXVlcnkpKTtcblxuLyoqXG4qIENvbWJvZGF0ZSAtIDEuMC41XG4qIERyb3Bkb3duIGRhdGUgYW5kIHRpbWUgcGlja2VyLlxuKiBDb252ZXJ0cyB0ZXh0IGlucHV0IGludG8gZHJvcGRvd25zIHRvIHBpY2sgZGF5LCBtb250aCwgeWVhciwgaG91ciwgbWludXRlIGFuZCBzZWNvbmQuXG4qIFVzZXMgbW9tZW50anMgYXMgZGF0ZXRpbWUgbGlicmFyeSBodHRwOi8vbW9tZW50anMuY29tLlxuKiBGb3IgaTE4biBpbmNsdWRlIGNvcnJlc3BvbmRpbmcgZmlsZSBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS90aW1yd29vZC9tb21lbnQvdHJlZS9tYXN0ZXIvbGFuZyBcbipcbiogQ29uZnVzaW9uIGF0IG5vb24gYW5kIG1pZG5pZ2h0IC0gc2VlIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvMTItaG91cl9jbG9jayNDb25mdXNpb25fYXRfbm9vbl9hbmRfbWlkbmlnaHRcbiogSW4gY29tYm9kYXRlOiBcbiogMTI6MDAgcG0gLS0+IDEyOjAwICgyNC1oIGZvcm1hdCwgbWlkZGF5KVxuKiAxMjowMCBhbSAtLT4gMDA6MDAgKDI0LWggZm9ybWF0LCBtaWRuaWdodCwgc3RhcnQgb2YgZGF5KVxuKiBcbiogRGlmZmVycyBmcm9tIG1vbWVudGpzIHBhcnNlIHJ1bGVzOlxuKiAwMDowMCBwbSwgMTI6MDAgcG0gLS0+IDEyOjAwICgyNC1oIGZvcm1hdCwgZGF5IG5vdCBjaGFuZ2UpXG4qIDAwOjAwIGFtLCAxMjowMCBhbSAtLT4gMDA6MDAgKDI0LWggZm9ybWF0LCBkYXkgbm90IGNoYW5nZSlcbiogXG4qIFxuKiBBdXRob3I6IFZpdGFsaXkgUG90YXBvdlxuKiBQcm9qZWN0IHBhZ2U6IGh0dHA6Ly9naXRodWIuY29tL3ZpdGFsZXRzL2NvbWJvZGF0ZVxuKiBDb3B5cmlnaHQgKGMpIDIwMTIgVml0YWxpeSBQb3RhcG92LiBSZWxlYXNlZCB1bmRlciBNSVQgTGljZW5zZS5cbioqL1xuKGZ1bmN0aW9uICgkKSB7XG5cbiAgICB2YXIgQ29tYm9kYXRlID0gZnVuY3Rpb24gKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy4kZWxlbWVudCA9ICQoZWxlbWVudCk7XG4gICAgICAgIGlmKCF0aGlzLiRlbGVtZW50LmlzKCdpbnB1dCcpKSB7XG4gICAgICAgICAgICAkLmVycm9yKCdDb21ib2RhdGUgc2hvdWxkIGJlIGFwcGxpZWQgdG8gSU5QVVQgZWxlbWVudCcpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCAkLmZuLmNvbWJvZGF0ZS5kZWZhdWx0cywgb3B0aW9ucywgdGhpcy4kZWxlbWVudC5kYXRhKCkpO1xuICAgICAgICB0aGlzLmluaXQoKTsgIFxuICAgICB9O1xuXG4gICAgQ29tYm9kYXRlLnByb3RvdHlwZSA9IHtcbiAgICAgICAgY29uc3RydWN0b3I6IENvbWJvZGF0ZSwgXG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMubWFwID0ge1xuICAgICAgICAgICAgICAgIC8va2V5ICAgcmVnZXhwICAgIG1vbWVudC5tZXRob2RcbiAgICAgICAgICAgICAgICBkYXk6ICAgIFsnRCcsICAgICdkYXRlJ10sIFxuICAgICAgICAgICAgICAgIG1vbnRoOiAgWydNJywgICAgJ21vbnRoJ10sIFxuICAgICAgICAgICAgICAgIHllYXI6ICAgWydZJywgICAgJ3llYXInXSwgXG4gICAgICAgICAgICAgICAgaG91cjogICBbJ1tIaF0nLCAnaG91cnMnXSxcbiAgICAgICAgICAgICAgICBtaW51dGU6IFsnbScsICAgICdtaW51dGVzJ10sIFxuICAgICAgICAgICAgICAgIHNlY29uZDogWydzJywgICAgJ3NlY29uZHMnXSxcbiAgICAgICAgICAgICAgICBhbXBtOiAgIFsnW0FhXScsICcnXSBcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuJHdpZGdldCA9ICQoJzxzcGFuIGNsYXNzPVwiY29tYm9kYXRlXCI+PC9zcGFuPicpLmh0bWwodGhpcy5nZXRUZW1wbGF0ZSgpKTtcbiAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuaW5pdENvbWJvcygpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvL3VwZGF0ZSBvcmlnaW5hbCBpbnB1dCBvbiBjaGFuZ2UgXG4gICAgICAgICAgICB0aGlzLiR3aWRnZXQub24oJ2NoYW5nZScsICdzZWxlY3QnLCAkLnByb3h5KGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiRlbGVtZW50LnZhbCh0aGlzLmdldFZhbHVlKCkpLmNoYW5nZSgpO1xuICAgICAgICAgICAgICAgIC8vIHVwZGF0ZSBkYXlzIGNvdW50IGlmIG1vbnRoIG9yIHllYXIgY2hhbmdlc1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc21hcnREYXlzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICgkKGUudGFyZ2V0KS5pcygnLm1vbnRoJykgfHwgJChlLnRhcmdldCkuaXMoJy55ZWFyJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZmlsbENvbWJvKCdkYXknKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHRoaXMpKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy4kd2lkZ2V0LmZpbmQoJ3NlbGVjdCcpLmNzcygnd2lkdGgnLCAnYXV0bycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBoaWRlIG9yaWdpbmFsIGlucHV0IGFuZCBpbnNlcnQgd2lkZ2V0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLiRlbGVtZW50LmhpZGUoKS5hZnRlcih0aGlzLiR3aWRnZXQpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBzZXQgaW5pdGlhbCB2YWx1ZVxuICAgICAgICAgICAgdGhpcy5zZXRWYWx1ZSh0aGlzLiRlbGVtZW50LnZhbCgpIHx8IHRoaXMub3B0aW9ucy52YWx1ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICAvKlxuICAgICAgICAgUmVwbGFjZSB0b2tlbnMgaW4gdGVtcGxhdGUgd2l0aCA8c2VsZWN0PiBlbGVtZW50cyBcbiAgICAgICAgKi8gICAgICAgICBcbiAgICAgICAgZ2V0VGVtcGxhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHRwbCA9IHRoaXMub3B0aW9ucy50ZW1wbGF0ZTtcblxuICAgICAgICAgICAgLy9maXJzdCBwYXNzXG4gICAgICAgICAgICAkLmVhY2godGhpcy5tYXAsIGZ1bmN0aW9uKGssIHYpIHtcbiAgICAgICAgICAgICAgICB2ID0gdlswXTsgXG4gICAgICAgICAgICAgICAgdmFyIHIgPSBuZXcgUmVnRXhwKHYrJysnKSxcbiAgICAgICAgICAgICAgICAgICAgdG9rZW4gPSB2Lmxlbmd0aCA+IDEgPyB2LnN1YnN0cmluZygxLCAyKSA6IHY7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHRwbCA9IHRwbC5yZXBsYWNlKHIsICd7Jyt0b2tlbisnfScpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vcmVwbGFjZSBzcGFjZXMgd2l0aCAmbmJzcDtcbiAgICAgICAgICAgIHRwbCA9IHRwbC5yZXBsYWNlKC8gL2csICcmbmJzcDsnKTtcblxuICAgICAgICAgICAgLy9zZWNvbmQgcGFzc1xuICAgICAgICAgICAgJC5lYWNoKHRoaXMubWFwLCBmdW5jdGlvbihrLCB2KSB7XG4gICAgICAgICAgICAgICAgdiA9IHZbMF07XG4gICAgICAgICAgICAgICAgdmFyIHRva2VuID0gdi5sZW5ndGggPiAxID8gdi5zdWJzdHJpbmcoMSwgMikgOiB2O1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB0cGwgPSB0cGwucmVwbGFjZSgneycrdG9rZW4rJ30nLCAnPHNlbGVjdCBjbGFzcz1cIicraysnXCI+PC9zZWxlY3Q+Jyk7XG4gICAgICAgICAgICB9KTsgICBcblxuICAgICAgICAgICAgcmV0dXJuIHRwbDtcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIC8qXG4gICAgICAgICBJbml0aWFsaXplIGNvbWJvcyB0aGF0IHByZXNlbnRzIGluIHRlbXBsYXRlIFxuICAgICAgICAqLyAgICAgICAgXG4gICAgICAgIGluaXRDb21ib3M6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZm9yICh2YXIgayBpbiB0aGlzLm1hcCkge1xuICAgICAgICAgICAgICAgIHZhciAkYyA9IHRoaXMuJHdpZGdldC5maW5kKCcuJytrKTtcbiAgICAgICAgICAgICAgICAvLyBzZXQgcHJvcGVydGllcyBsaWtlIHRoaXMuJGRheSwgdGhpcy4kbW9udGggZXRjLlxuICAgICAgICAgICAgICAgIHRoaXNbJyQnK2tdID0gJGMubGVuZ3RoID8gJGMgOiBudWxsO1xuICAgICAgICAgICAgICAgIC8vIGZpbGwgd2l0aCBpdGVtc1xuICAgICAgICAgICAgICAgIHRoaXMuZmlsbENvbWJvKGspO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIC8qXG4gICAgICAgICBGaWxsIGNvbWJvIHdpdGggaXRlbXMgXG4gICAgICAgICovICAgICAgICBcbiAgICAgICAgZmlsbENvbWJvOiBmdW5jdGlvbihrKSB7XG4gICAgICAgICAgICB2YXIgJGNvbWJvID0gdGhpc1snJCcra107XG4gICAgICAgICAgICBpZiAoISRjb21ibykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gZGVmaW5lIG1ldGhvZCBuYW1lIHRvIGZpbGwgaXRlbXMsIGUuZyBgZmlsbERheXNgXG4gICAgICAgICAgICB2YXIgZiA9ICdmaWxsJyArIGsuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBrLnNsaWNlKDEpOyBcbiAgICAgICAgICAgIHZhciBpdGVtcyA9IHRoaXNbZl0oKTtcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9ICRjb21iby52YWwoKTtcblxuICAgICAgICAgICAgJGNvbWJvLmVtcHR5KCk7XG4gICAgICAgICAgICBmb3IodmFyIGk9MDsgaTxpdGVtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICRjb21iby5hcHBlbmQoJzxvcHRpb24gdmFsdWU9XCInK2l0ZW1zW2ldWzBdKydcIj4nK2l0ZW1zW2ldWzFdKyc8L29wdGlvbj4nKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgJGNvbWJvLnZhbCh2YWx1ZSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLypcbiAgICAgICAgIEluaXRpYWxpemUgaXRlbXMgb2YgY29tYm9zLiBIYW5kbGVzIGBmaXJzdEl0ZW1gIG9wdGlvbiBcbiAgICAgICAgKi9cbiAgICAgICAgZmlsbENvbW1vbjogZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgICAgICB2YXIgdmFsdWVzID0gW10sXG4gICAgICAgICAgICAgICAgcmVsVGltZTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIGlmKHRoaXMub3B0aW9ucy5maXJzdEl0ZW0gPT09ICduYW1lJykge1xuICAgICAgICAgICAgICAgIC8vbmVlZCBib3RoIHRvIHN1cHBvcnQgbW9tZW50IHZlciA8IDIgYW5kICA+PSAyXG4gICAgICAgICAgICAgICAgcmVsVGltZSA9IG1vbWVudC5yZWxhdGl2ZVRpbWUgfHwgbW9tZW50LmxhbmdEYXRhKCkuX3JlbGF0aXZlVGltZTsgXG4gICAgICAgICAgICAgICAgdmFyIGhlYWRlciA9IHR5cGVvZiByZWxUaW1lW2tleV0gPT09ICdmdW5jdGlvbicgPyByZWxUaW1lW2tleV0oMSwgdHJ1ZSwga2V5LCBmYWxzZSkgOiByZWxUaW1lW2tleV07XG4gICAgICAgICAgICAgICAgLy90YWtlIGxhc3QgZW50cnkgKHNlZSBtb21lbnRqcyBsYW5nIGZpbGVzIHN0cnVjdHVyZSkgXG4gICAgICAgICAgICAgICAgaGVhZGVyID0gaGVhZGVyLnNwbGl0KCcgJykucmV2ZXJzZSgpWzBdOyAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB2YWx1ZXMucHVzaChbJycsIGhlYWRlcl0pO1xuICAgICAgICAgICAgfSBlbHNlIGlmKHRoaXMub3B0aW9ucy5maXJzdEl0ZW0gPT09ICdlbXB0eScpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZXMucHVzaChbJycsICcnXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdmFsdWVzO1xuICAgICAgICB9LCAgXG5cblxuICAgICAgICAvKlxuICAgICAgICBmaWxsIGRheVxuICAgICAgICAqL1xuICAgICAgICBmaWxsRGF5OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBpdGVtcyA9IHRoaXMuZmlsbENvbW1vbignZCcpLCBuYW1lLCBpLFxuICAgICAgICAgICAgICAgIHR3b0RpZ2l0ID0gdGhpcy5vcHRpb25zLnRlbXBsYXRlLmluZGV4T2YoJ0REJykgIT09IC0xLFxuICAgICAgICAgICAgICAgIGRheXNDb3VudCA9IDMxO1xuXG4gICAgICAgICAgICAvLyBkZXRlY3QgZGF5cyBjb3VudCAoZGVwZW5kcyBvbiBtb250aCBhbmQgeWVhcilcbiAgICAgICAgICAgIC8vIG9yaWdpbmFsbHkgaHR0cHM6Ly9naXRodWIuY29tL3ZpdGFsZXRzL2NvbWJvZGF0ZS9wdWxsLzdcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc21hcnREYXlzICYmIHRoaXMuJG1vbnRoICYmIHRoaXMuJHllYXIpIHtcbiAgICAgICAgICAgICAgICB2YXIgbW9udGggPSBwYXJzZUludCh0aGlzLiRtb250aC52YWwoKSwgMTApO1xuICAgICAgICAgICAgICAgIHZhciB5ZWFyID0gcGFyc2VJbnQodGhpcy4keWVhci52YWwoKSwgMTApO1xuXG4gICAgICAgICAgICAgICAgaWYgKCFpc05hTihtb250aCkgJiYgIWlzTmFOKHllYXIpKSB7XG4gICAgICAgICAgICAgICAgICAgIGRheXNDb3VudCA9IG1vbWVudChbeWVhciwgbW9udGhdKS5kYXlzSW5Nb250aCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZm9yIChpID0gMTsgaSA8PSBkYXlzQ291bnQ7IGkrKykge1xuICAgICAgICAgICAgICAgIG5hbWUgPSB0d29EaWdpdCA/IHRoaXMubGVhZFplcm8oaSkgOiBpO1xuICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2goW2ksIG5hbWVdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBpdGVtczsgICAgICAgIFxuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgLypcbiAgICAgICAgZmlsbCBtb250aFxuICAgICAgICAqL1xuICAgICAgICBmaWxsTW9udGg6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGl0ZW1zID0gdGhpcy5maWxsQ29tbW9uKCdNJyksIG5hbWUsIGksIFxuICAgICAgICAgICAgICAgIGxvbmdOYW1lcyA9IHRoaXMub3B0aW9ucy50ZW1wbGF0ZS5pbmRleE9mKCdNTU1NJykgIT09IC0xLFxuICAgICAgICAgICAgICAgIHNob3J0TmFtZXMgPSB0aGlzLm9wdGlvbnMudGVtcGxhdGUuaW5kZXhPZignTU1NJykgIT09IC0xLFxuICAgICAgICAgICAgICAgIHR3b0RpZ2l0ID0gdGhpcy5vcHRpb25zLnRlbXBsYXRlLmluZGV4T2YoJ01NJykgIT09IC0xO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgZm9yKGk9MDsgaTw9MTE7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmKGxvbmdOYW1lcykge1xuICAgICAgICAgICAgICAgICAgICAvL3NlZSBodHRwczovL2dpdGh1Yi5jb20vdGltcndvb2QvbW9tZW50anMuY29tL3B1bGwvMzZcbiAgICAgICAgICAgICAgICAgICAgbmFtZSA9IG1vbWVudCgpLmRhdGUoMSkubW9udGgoaSkuZm9ybWF0KCdNTU1NJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmKHNob3J0TmFtZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZSA9IG1vbWVudCgpLmRhdGUoMSkubW9udGgoaSkuZm9ybWF0KCdNTU0nKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYodHdvRGlnaXQpIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZSA9IHRoaXMubGVhZFplcm8oaSsxKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBuYW1lID0gaSsxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKFtpLCBuYW1lXSk7XG4gICAgICAgICAgICB9IFxuICAgICAgICAgICAgcmV0dXJuIGl0ZW1zO1xuICAgICAgICB9LCAgXG4gICAgICAgIFxuICAgICAgICAvKlxuICAgICAgICBmaWxsIHllYXJcbiAgICAgICAgKi9cbiAgICAgICAgZmlsbFllYXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGl0ZW1zID0gW10sIG5hbWUsIGksIFxuICAgICAgICAgICAgICAgIGxvbmdOYW1lcyA9IHRoaXMub3B0aW9ucy50ZW1wbGF0ZS5pbmRleE9mKCdZWVlZJykgIT09IC0xO1xuICAgICAgICAgICBcbiAgICAgICAgICAgIGZvcihpPXRoaXMub3B0aW9ucy5tYXhZZWFyOyBpPj10aGlzLm9wdGlvbnMubWluWWVhcjsgaS0tKSB7XG4gICAgICAgICAgICAgICAgbmFtZSA9IGxvbmdOYW1lcyA/IGkgOiAoaSsnJykuc3Vic3RyaW5nKDIpO1xuICAgICAgICAgICAgICAgIGl0ZW1zW3RoaXMub3B0aW9ucy55ZWFyRGVzY2VuZGluZyA/ICdwdXNoJyA6ICd1bnNoaWZ0J10oW2ksIG5hbWVdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaXRlbXMgPSB0aGlzLmZpbGxDb21tb24oJ3knKS5jb25jYXQoaXRlbXMpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4gaXRlbXM7ICAgICAgICAgICAgICBcbiAgICAgICAgfSwgICAgXG4gICAgICAgIFxuICAgICAgICAvKlxuICAgICAgICBmaWxsIGhvdXJcbiAgICAgICAgKi9cbiAgICAgICAgZmlsbEhvdXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGl0ZW1zID0gdGhpcy5maWxsQ29tbW9uKCdoJyksIG5hbWUsIGksXG4gICAgICAgICAgICAgICAgaDEyID0gdGhpcy5vcHRpb25zLnRlbXBsYXRlLmluZGV4T2YoJ2gnKSAhPT0gLTEsXG4gICAgICAgICAgICAgICAgaDI0ID0gdGhpcy5vcHRpb25zLnRlbXBsYXRlLmluZGV4T2YoJ0gnKSAhPT0gLTEsXG4gICAgICAgICAgICAgICAgdHdvRGlnaXQgPSB0aGlzLm9wdGlvbnMudGVtcGxhdGUudG9Mb3dlckNhc2UoKS5pbmRleE9mKCdoaCcpICE9PSAtMSxcbiAgICAgICAgICAgICAgICBtaW4gPSBoMTIgPyAxIDogMCwgXG4gICAgICAgICAgICAgICAgbWF4ID0gaDEyID8gMTIgOiAyMztcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIGZvcihpPW1pbjsgaTw9bWF4OyBpKyspIHtcbiAgICAgICAgICAgICAgICBuYW1lID0gdHdvRGlnaXQgPyB0aGlzLmxlYWRaZXJvKGkpIDogaTtcbiAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKFtpLCBuYW1lXSk7XG4gICAgICAgICAgICB9IFxuICAgICAgICAgICAgcmV0dXJuIGl0ZW1zOyAgICAgICAgICAgICAgICAgXG4gICAgICAgIH0sICAgIFxuICAgICAgICBcbiAgICAgICAgLypcbiAgICAgICAgZmlsbCBtaW51dGVcbiAgICAgICAgKi9cbiAgICAgICAgZmlsbE1pbnV0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgaXRlbXMgPSB0aGlzLmZpbGxDb21tb24oJ20nKSwgbmFtZSwgaSxcbiAgICAgICAgICAgICAgICB0d29EaWdpdCA9IHRoaXMub3B0aW9ucy50ZW1wbGF0ZS5pbmRleE9mKCdtbScpICE9PSAtMTtcblxuICAgICAgICAgICAgZm9yKGk9MDsgaTw9NTk7IGkrPSB0aGlzLm9wdGlvbnMubWludXRlU3RlcCkge1xuICAgICAgICAgICAgICAgIG5hbWUgPSB0d29EaWdpdCA/IHRoaXMubGVhZFplcm8oaSkgOiBpO1xuICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2goW2ksIG5hbWVdKTtcbiAgICAgICAgICAgIH0gICAgXG4gICAgICAgICAgICByZXR1cm4gaXRlbXM7ICAgICAgICAgICAgICBcbiAgICAgICAgfSwgIFxuICAgICAgICBcbiAgICAgICAgLypcbiAgICAgICAgZmlsbCBzZWNvbmRcbiAgICAgICAgKi9cbiAgICAgICAgZmlsbFNlY29uZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgaXRlbXMgPSB0aGlzLmZpbGxDb21tb24oJ3MnKSwgbmFtZSwgaSxcbiAgICAgICAgICAgICAgICB0d29EaWdpdCA9IHRoaXMub3B0aW9ucy50ZW1wbGF0ZS5pbmRleE9mKCdzcycpICE9PSAtMTtcblxuICAgICAgICAgICAgZm9yKGk9MDsgaTw9NTk7IGkrPSB0aGlzLm9wdGlvbnMuc2Vjb25kU3RlcCkge1xuICAgICAgICAgICAgICAgIG5hbWUgPSB0d29EaWdpdCA/IHRoaXMubGVhZFplcm8oaSkgOiBpO1xuICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2goW2ksIG5hbWVdKTtcbiAgICAgICAgICAgIH0gICAgXG4gICAgICAgICAgICByZXR1cm4gaXRlbXM7ICAgICAgICAgICAgICBcbiAgICAgICAgfSwgIFxuICAgICAgICBcbiAgICAgICAgLypcbiAgICAgICAgZmlsbCBhbXBtXG4gICAgICAgICovXG4gICAgICAgIGZpbGxBbXBtOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBhbXBtTCA9IHRoaXMub3B0aW9ucy50ZW1wbGF0ZS5pbmRleE9mKCdhJykgIT09IC0xLFxuICAgICAgICAgICAgICAgIGFtcG1VID0gdGhpcy5vcHRpb25zLnRlbXBsYXRlLmluZGV4T2YoJ0EnKSAhPT0gLTEsICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaXRlbXMgPSBbXG4gICAgICAgICAgICAgICAgICAgIFsnYW0nLCBhbXBtTCA/ICdhbScgOiAnQU0nXSxcbiAgICAgICAgICAgICAgICAgICAgWydwbScsIGFtcG1MID8gJ3BtJyA6ICdQTSddXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIHJldHVybiBpdGVtczsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgfSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcblxuICAgICAgICAvKlxuICAgICAgICAgUmV0dXJucyBjdXJyZW50IGRhdGUgdmFsdWUgZnJvbSBjb21ib3MuIFxuICAgICAgICAgSWYgZm9ybWF0IG5vdCBzcGVjaWZpZWQgLSBgb3B0aW9ucy5mb3JtYXRgIHVzZWQuXG4gICAgICAgICBJZiBmb3JtYXQgPSBgbnVsbGAgLSBNb21lbnQgb2JqZWN0IHJldHVybmVkLlxuICAgICAgICAqL1xuICAgICAgICBnZXRWYWx1ZTogZnVuY3Rpb24oZm9ybWF0KSB7XG4gICAgICAgICAgICB2YXIgZHQsIHZhbHVlcyA9IHt9LCBcbiAgICAgICAgICAgICAgICB0aGF0ID0gdGhpcyxcbiAgICAgICAgICAgICAgICBub3RTZWxlY3RlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgLy9nZXR0aW5nIHNlbGVjdGVkIHZhbHVlcyAgICBcbiAgICAgICAgICAgICQuZWFjaCh0aGlzLm1hcCwgZnVuY3Rpb24oaywgdikge1xuICAgICAgICAgICAgICAgIGlmKGsgPT09ICdhbXBtJykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBkZWYgPSBrID09PSAnZGF5JyA/IDEgOiAwO1xuICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdmFsdWVzW2tdID0gdGhhdFsnJCcra10gPyBwYXJzZUludCh0aGF0WyckJytrXS52YWwoKSwgMTApIDogZGVmOyBcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZihpc05hTih2YWx1ZXNba10pKSB7XG4gICAgICAgICAgICAgICAgICAgbm90U2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsgXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vaWYgYXQgbGVhc3Qgb25lIHZpc2libGUgY29tYm8gbm90IHNlbGVjdGVkIC0gcmV0dXJuIGVtcHR5IHN0cmluZ1xuICAgICAgICAgICAgaWYobm90U2VsZWN0ZWQpIHtcbiAgICAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy9jb252ZXJ0IGhvdXJzIDEyaCAtLT4gMjRoIFxuICAgICAgICAgICAgaWYodGhpcy4kYW1wbSkge1xuICAgICAgICAgICAgICAgIC8vMTI6MDAgcG0gLS0+IDEyOjAwICgyNC1oIGZvcm1hdCwgbWlkZGF5KSwgMTI6MDAgYW0gLS0+IDAwOjAwICgyNC1oIGZvcm1hdCwgbWlkbmlnaHQsIHN0YXJ0IG9mIGRheSlcbiAgICAgICAgICAgICAgICBpZih2YWx1ZXMuaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVzLmhvdXIgPSB0aGlzLiRhbXBtLnZhbCgpID09PSAnYW0nID8gMCA6IDEyOyAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVzLmhvdXIgPSB0aGlzLiRhbXBtLnZhbCgpID09PSAnYW0nID8gdmFsdWVzLmhvdXIgOiB2YWx1ZXMuaG91cisxMjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9ICAgIFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBkdCA9IG1vbWVudChbdmFsdWVzLnllYXIsIHZhbHVlcy5tb250aCwgdmFsdWVzLmRheSwgdmFsdWVzLmhvdXIsIHZhbHVlcy5taW51dGUsIHZhbHVlcy5zZWNvbmRdKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy9oaWdobGlnaHQgaW52YWxpZCBkYXRlXG4gICAgICAgICAgICB0aGlzLmhpZ2hsaWdodChkdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIGZvcm1hdCA9IGZvcm1hdCA9PT0gdW5kZWZpbmVkID8gdGhpcy5vcHRpb25zLmZvcm1hdCA6IGZvcm1hdDtcbiAgICAgICAgICAgIGlmKGZvcm1hdCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgcmV0dXJuIGR0LmlzVmFsaWQoKSA/IGR0IDogbnVsbDsgXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgcmV0dXJuIGR0LmlzVmFsaWQoKSA/IGR0LmZvcm1hdChmb3JtYXQpIDogJyc7IFxuICAgICAgICAgICAgfSAgICAgICAgICAgXG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICBzZXRWYWx1ZTogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIGlmKCF2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdmFyIGR0ID0gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyA/IG1vbWVudCh2YWx1ZSwgdGhpcy5vcHRpb25zLmZvcm1hdCkgOiBtb21lbnQodmFsdWUpLFxuICAgICAgICAgICAgICAgIHRoYXQgPSB0aGlzLFxuICAgICAgICAgICAgICAgIHZhbHVlcyA9IHt9O1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvL2Z1bmN0aW9uIHRvIGZpbmQgbmVhcmVzdCB2YWx1ZSBpbiBzZWxlY3Qgb3B0aW9uc1xuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0TmVhcmVzdCgkc2VsZWN0LCB2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHZhciBkZWx0YSA9IHt9O1xuICAgICAgICAgICAgICAgICRzZWxlY3QuY2hpbGRyZW4oJ29wdGlvbicpLmVhY2goZnVuY3Rpb24oaSwgb3B0KXtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9wdFZhbHVlID0gJChvcHQpLmF0dHIoJ3ZhbHVlJyksXG4gICAgICAgICAgICAgICAgICAgIGRpc3RhbmNlO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmKG9wdFZhbHVlID09PSAnJykgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICBkaXN0YW5jZSA9IE1hdGguYWJzKG9wdFZhbHVlIC0gdmFsdWUpOyBcbiAgICAgICAgICAgICAgICAgICAgaWYodHlwZW9mIGRlbHRhLmRpc3RhbmNlID09PSAndW5kZWZpbmVkJyB8fCBkaXN0YW5jZSA8IGRlbHRhLmRpc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWx0YSA9IHt2YWx1ZTogb3B0VmFsdWUsIGRpc3RhbmNlOiBkaXN0YW5jZX07XG4gICAgICAgICAgICAgICAgICAgIH0gXG4gICAgICAgICAgICAgICAgfSk7IFxuICAgICAgICAgICAgICAgIHJldHVybiBkZWx0YS52YWx1ZTtcbiAgICAgICAgICAgIH0gICAgICAgICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmKGR0LmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgICAgIC8vcmVhZCB2YWx1ZXMgZnJvbSBkYXRlIG9iamVjdFxuICAgICAgICAgICAgICAgICQuZWFjaCh0aGlzLm1hcCwgZnVuY3Rpb24oaywgdikge1xuICAgICAgICAgICAgICAgICAgICBpZihrID09PSAnYW1wbScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOyBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB2YWx1ZXNba10gPSBkdFt2WzFdXSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYodGhpcy4kYW1wbSkge1xuICAgICAgICAgICAgICAgICAgICAvLzEyOjAwIHBtIC0tPiAxMjowMCAoMjQtaCBmb3JtYXQsIG1pZGRheSksIDEyOjAwIGFtIC0tPiAwMDowMCAoMjQtaCBmb3JtYXQsIG1pZG5pZ2h0LCBzdGFydCBvZiBkYXkpXG4gICAgICAgICAgICAgICAgICAgIGlmKHZhbHVlcy5ob3VyID49IDEyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXMuYW1wbSA9ICdwbSc7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZih2YWx1ZXMuaG91ciA+IDEyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzLmhvdXIgLT0gMTI7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXMuYW1wbSA9ICdhbSc7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZih2YWx1ZXMuaG91ciA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlcy5ob3VyID0gMTI7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgJC5lYWNoKHZhbHVlcywgZnVuY3Rpb24oaywgdikge1xuICAgICAgICAgICAgICAgICAgICAvL2NhbGwgdmFsKCkgZm9yIGVhY2ggZXhpc3RpbmcgY29tYm8sIGUuZy4gdGhpcy4kaG91ci52YWwoKVxuICAgICAgICAgICAgICAgICAgICBpZih0aGF0WyckJytrXSkge1xuICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGsgPT09ICdtaW51dGUnICYmIHRoYXQub3B0aW9ucy5taW51dGVTdGVwID4gMSAmJiB0aGF0Lm9wdGlvbnMucm91bmRUaW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICB2ID0gZ2V0TmVhcmVzdCh0aGF0WyckJytrXSwgdik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoayA9PT0gJ3NlY29uZCcgJiYgdGhhdC5vcHRpb25zLnNlY29uZFN0ZXAgPiAxICYmIHRoYXQub3B0aW9ucy5yb3VuZFRpbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHYgPSBnZXROZWFyZXN0KHRoYXRbJyQnK2tdLCB2KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXRbJyQnK2tdLnZhbCh2KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgLy8gdXBkYXRlIGRheXMgY291bnRcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnNtYXJ0RGF5cykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmZpbGxDb21ibygnZGF5Jyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICB0aGlzLiRlbGVtZW50LnZhbChkdC5mb3JtYXQodGhpcy5vcHRpb25zLmZvcm1hdCkpLmNoYW5nZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgLypcbiAgICAgICAgIGhpZ2hsaWdodCBjb21ib3MgaWYgZGF0ZSBpcyBpbnZhbGlkXG4gICAgICAgICovXG4gICAgICAgIGhpZ2hsaWdodDogZnVuY3Rpb24oZHQpIHtcbiAgICAgICAgICAgIGlmKCFkdC5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgICAgICBpZih0aGlzLm9wdGlvbnMuZXJyb3JDbGFzcykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiR3aWRnZXQuYWRkQ2xhc3ModGhpcy5vcHRpb25zLmVycm9yQ2xhc3MpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vc3RvcmUgb3JpZ2luYWwgYm9yZGVyIGNvbG9yXG4gICAgICAgICAgICAgICAgICAgIGlmKCF0aGlzLmJvcmRlckNvbG9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJvcmRlckNvbG9yID0gdGhpcy4kd2lkZ2V0LmZpbmQoJ3NlbGVjdCcpLmNzcygnYm9yZGVyLWNvbG9yJyk7IFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJHdpZGdldC5maW5kKCdzZWxlY3QnKS5jc3MoJ2JvcmRlci1jb2xvcicsICdyZWQnKTtcbiAgICAgICAgICAgICAgICB9IFxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZih0aGlzLm9wdGlvbnMuZXJyb3JDbGFzcykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiR3aWRnZXQucmVtb3ZlQ2xhc3ModGhpcy5vcHRpb25zLmVycm9yQ2xhc3MpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJHdpZGdldC5maW5kKCdzZWxlY3QnKS5jc3MoJ2JvcmRlci1jb2xvcicsIHRoaXMuYm9yZGVyQ29sb3IpO1xuICAgICAgICAgICAgICAgIH0gIFxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgbGVhZFplcm86IGZ1bmN0aW9uKHYpIHtcbiAgICAgICAgICAgIHJldHVybiB2IDw9IDkgPyAnMCcgKyB2IDogdjsgXG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICBkZXN0cm95OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuJHdpZGdldC5yZW1vdmUoKTtcbiAgICAgICAgICAgIHRoaXMuJGVsZW1lbnQucmVtb3ZlRGF0YSgnY29tYm9kYXRlJykuc2hvdygpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvL3RvZG86IGNsZWFyIG1ldGhvZCAgICAgICAgXG4gICAgfTtcblxuICAgICQuZm4uY29tYm9kYXRlID0gZnVuY3Rpb24gKCBvcHRpb24gKSB7XG4gICAgICAgIHZhciBkLCBhcmdzID0gQXJyYXkuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICAgICAgYXJncy5zaGlmdCgpO1xuXG4gICAgICAgIC8vZ2V0VmFsdWUgcmV0dXJucyBkYXRlIGFzIHN0cmluZyAvIG9iamVjdCAobm90IGpRdWVyeSBvYmplY3QpXG4gICAgICAgIGlmKG9wdGlvbiA9PT0gJ2dldFZhbHVlJyAmJiB0aGlzLmxlbmd0aCAmJiAoZCA9IHRoaXMuZXEoMCkuZGF0YSgnY29tYm9kYXRlJykpKSB7XG4gICAgICAgICAgcmV0dXJuIGQuZ2V0VmFsdWUuYXBwbHkoZCwgYXJncyk7XG4gICAgICAgIH0gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgJHRoaXMgPSAkKHRoaXMpLFxuICAgICAgICAgICAgZGF0YSA9ICR0aGlzLmRhdGEoJ2NvbWJvZGF0ZScpLFxuICAgICAgICAgICAgb3B0aW9ucyA9IHR5cGVvZiBvcHRpb24gPT0gJ29iamVjdCcgJiYgb3B0aW9uO1xuICAgICAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgICAgICAgJHRoaXMuZGF0YSgnY29tYm9kYXRlJywgKGRhdGEgPSBuZXcgQ29tYm9kYXRlKHRoaXMsIG9wdGlvbnMpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PSAnc3RyaW5nJyAmJiB0eXBlb2YgZGF0YVtvcHRpb25dID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICBkYXRhW29wdGlvbl0uYXBwbHkoZGF0YSwgYXJncyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07ICBcbiAgICBcbiAgICAkLmZuLmNvbWJvZGF0ZS5kZWZhdWx0cyA9IHtcbiAgICAgICAgIC8vaW4gdGhpcyBmb3JtYXQgdmFsdWUgc3RvcmVkIGluIG9yaWdpbmFsIGlucHV0XG4gICAgICAgIGZvcm1hdDogJ0RELU1NLVlZWVkgSEg6bW0nLCAgICAgIFxuICAgICAgICAvL2luIHRoaXMgZm9ybWF0IGl0ZW1zIGluIGRyb3Bkb3ducyBhcmUgZGlzcGxheWVkXG4gICAgICAgIHRlbXBsYXRlOiAnRCAvIE1NTSAvIFlZWVkgICBIIDogbW0nLFxuICAgICAgICAvL2luaXRpYWwgdmFsdWUsIGNhbiBiZSBgbmV3IERhdGUoKWAgICAgXG4gICAgICAgIHZhbHVlOiBudWxsLCAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgIG1pblllYXI6IDE5NzAsXG4gICAgICAgIG1heFllYXI6IDIwMTUsXG4gICAgICAgIHllYXJEZXNjZW5kaW5nOiB0cnVlLFxuICAgICAgICBtaW51dGVTdGVwOiA1LFxuICAgICAgICBzZWNvbmRTdGVwOiAxLFxuICAgICAgICBmaXJzdEl0ZW06ICdlbXB0eScsIC8vJ25hbWUnLCAnZW1wdHknLCAnbm9uZSdcbiAgICAgICAgZXJyb3JDbGFzczogbnVsbCxcbiAgICAgICAgcm91bmRUaW1lOiB0cnVlLCAvLyB3aGV0aGVyIHRvIHJvdW5kIG1pbnV0ZXMgYW5kIHNlY29uZHMgaWYgc3RlcCA+IDFcbiAgICAgICAgc21hcnREYXlzOiBmYWxzZSAvLyB3aGV0aGVyIGRheXMgaW4gY29tYm8gZGVwZW5kIG9uIHNlbGVjdGVkIG1vbnRoOiAzMSwgMzAsIDI4XG4gICAgfTtcblxufSh3aW5kb3cualF1ZXJ5KSk7XG4vKipcbkNvbWJvZGF0ZSBpbnB1dCAtIGRyb3Bkb3duIGRhdGUgYW5kIHRpbWUgcGlja2VyLiAgICBcbkJhc2VkIG9uIFtjb21ib2RhdGVdKGh0dHA6Ly92aXRhbGV0cy5naXRodWIuY29tL2NvbWJvZGF0ZSkgcGx1Z2luIChpbmNsdWRlZCkuIFRvIHVzZSBpdCB5b3Ugc2hvdWxkIG1hbnVhbGx5IGluY2x1ZGUgW21vbWVudGpzXShodHRwOi8vbW9tZW50anMuY29tKS5cblxuICAgIDxzY3JpcHQgc3JjPVwianMvbW9tZW50Lm1pbi5qc1wiPjwvc2NyaXB0PlxuICAgXG5BbGxvd3MgdG8gaW5wdXQ6XG5cbiogb25seSBkYXRlXG4qIG9ubHkgdGltZSBcbiogYm90aCBkYXRlIGFuZCB0aW1lICBcblxuUGxlYXNlIG5vdGUsIHRoYXQgZm9ybWF0IGlzIHRha2VuIGZyb20gbW9tZW50anMgYW5kICoqbm90IGNvbXBhdGlibGUqKiB3aXRoIGJvb3RzdHJhcC1kYXRlcGlja2VyIC8ganF1ZXJ5IFVJIGRhdGVwaWNrZXIuICBcbkludGVybmFsbHkgdmFsdWUgc3RvcmVkIGFzIGBtb21lbnRqc2Agb2JqZWN0LiBcblxuQGNsYXNzIGNvbWJvZGF0ZVxuQGV4dGVuZHMgYWJzdHJhY3RpbnB1dFxuQGZpbmFsXG5Ac2luY2UgMS40LjBcbkBleGFtcGxlXG48YSBocmVmPVwiI1wiIGlkPVwiZG9iXCIgZGF0YS10eXBlPVwiY29tYm9kYXRlXCIgZGF0YS1waz1cIjFcIiBkYXRhLXVybD1cIi9wb3N0XCIgZGF0YS12YWx1ZT1cIjE5ODQtMDUtMTVcIiBkYXRhLXRpdGxlPVwiU2VsZWN0IGRhdGVcIj48L2E+XG48c2NyaXB0PlxuJChmdW5jdGlvbigpe1xuICAgICQoJyNkb2InKS5lZGl0YWJsZSh7XG4gICAgICAgIGZvcm1hdDogJ1lZWVktTU0tREQnLCAgICBcbiAgICAgICAgdmlld2Zvcm1hdDogJ0RELk1NLllZWVknLCAgICBcbiAgICAgICAgdGVtcGxhdGU6ICdEIC8gTU1NTSAvIFlZWVknLCAgICBcbiAgICAgICAgY29tYm9kYXRlOiB7XG4gICAgICAgICAgICAgICAgbWluWWVhcjogMjAwMCxcbiAgICAgICAgICAgICAgICBtYXhZZWFyOiAyMDE1LFxuICAgICAgICAgICAgICAgIG1pbnV0ZVN0ZXA6IDFcbiAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG59KTtcbjwvc2NyaXB0PlxuKiovXG5cbi8qZ2xvYmFsIG1vbWVudCovXG5cbihmdW5jdGlvbiAoJCkge1xuICAgIDtcbiAgICBcbiAgICB2YXIgQ29uc3RydWN0b3IgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICB0aGlzLmluaXQoJ2NvbWJvZGF0ZScsIG9wdGlvbnMsIENvbnN0cnVjdG9yLmRlZmF1bHRzKTtcbiAgICAgICAgXG4gICAgICAgIC8vYnkgZGVmYXVsdCB2aWV3Zm9ybWF0IGVxdWFscyB0byBmb3JtYXRcbiAgICAgICAgaWYoIXRoaXMub3B0aW9ucy52aWV3Zm9ybWF0KSB7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMudmlld2Zvcm1hdCA9IHRoaXMub3B0aW9ucy5mb3JtYXQ7XG4gICAgICAgIH0gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgLy90cnkgcGFyc2UgY29tYm9kYXRlIGNvbmZpZyBkZWZpbmVkIGFzIGpzb24gc3RyaW5nIGluIGRhdGEtY29tYm9kYXRlXG4gICAgICAgIG9wdGlvbnMuY29tYm9kYXRlID0gJC5mbi5lZGl0YWJsZXV0aWxzLnRyeVBhcnNlSnNvbihvcHRpb25zLmNvbWJvZGF0ZSwgdHJ1ZSk7XG5cbiAgICAgICAgLy9vdmVycmlkaW5nIGNvbWJvZGF0ZSBjb25maWcgKGFzIGJ5IGRlZmF1bHQgalF1ZXJ5IGV4dGVuZCgpIGlzIG5vdCByZWN1cnNpdmUpXG4gICAgICAgIHRoaXMub3B0aW9ucy5jb21ib2RhdGUgPSAkLmV4dGVuZCh7fSwgQ29uc3RydWN0b3IuZGVmYXVsdHMuY29tYm9kYXRlLCBvcHRpb25zLmNvbWJvZGF0ZSwge1xuICAgICAgICAgICAgZm9ybWF0OiB0aGlzLm9wdGlvbnMuZm9ybWF0LFxuICAgICAgICAgICAgdGVtcGxhdGU6IHRoaXMub3B0aW9ucy50ZW1wbGF0ZVxuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgJC5mbi5lZGl0YWJsZXV0aWxzLmluaGVyaXQoQ29uc3RydWN0b3IsICQuZm4uZWRpdGFibGV0eXBlcy5hYnN0cmFjdGlucHV0KTsgICAgXG4gICAgXG4gICAgJC5leHRlbmQoQ29uc3RydWN0b3IucHJvdG90eXBlLCB7XG4gICAgICAgIHJlbmRlcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy4kaW5wdXQuY29tYm9kYXRlKHRoaXMub3B0aW9ucy5jb21ib2RhdGUpO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIGlmKCQuZm4uZWRpdGFibGVmb3JtLmVuZ2luZSA9PT0gJ2JzMycpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiRpbnB1dC5zaWJsaW5ncygpLmZpbmQoJ3NlbGVjdCcpLmFkZENsYXNzKCdmb3JtLWNvbnRyb2wnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYodGhpcy5vcHRpb25zLmlucHV0Y2xhc3MpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiRpbnB1dC5zaWJsaW5ncygpLmZpbmQoJ3NlbGVjdCcpLmFkZENsYXNzKHRoaXMub3B0aW9ucy5pbnB1dGNsYXNzKTtcbiAgICAgICAgICAgIH0gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vXCJjbGVhclwiIGxpbmtcbiAgICAgICAgICAgIC8qXG4gICAgICAgICAgICBpZih0aGlzLm9wdGlvbnMuY2xlYXIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiRjbGVhciA9ICQoJzxhIGhyZWY9XCIjXCI+PC9hPicpLmh0bWwodGhpcy5vcHRpb25zLmNsZWFyKS5jbGljaygkLnByb3h5KGZ1bmN0aW9uKGUpe1xuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgICAgICAgICAgICB9LCB0aGlzKSk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdGhpcy4kdHBsLnBhcmVudCgpLmFwcGVuZCgkKCc8ZGl2IGNsYXNzPVwiZWRpdGFibGUtY2xlYXJcIj4nKS5hcHBlbmQodGhpcy4kY2xlYXIpKTsgIFxuICAgICAgICAgICAgfSBcbiAgICAgICAgICAgICovICAgICAgICAgICAgICAgXG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICB2YWx1ZTJodG1sOiBmdW5jdGlvbih2YWx1ZSwgZWxlbWVudCkge1xuICAgICAgICAgICAgdmFyIHRleHQgPSB2YWx1ZSA/IHZhbHVlLmZvcm1hdCh0aGlzLm9wdGlvbnMudmlld2Zvcm1hdCkgOiAnJztcbiAgICAgICAgICAgIC8vJChlbGVtZW50KS50ZXh0KHRleHQpO1xuICAgICAgICAgICAgQ29uc3RydWN0b3Iuc3VwZXJjbGFzcy52YWx1ZTJodG1sLmNhbGwodGhpcywgdGV4dCwgZWxlbWVudCk7ICBcbiAgICAgICAgfSxcblxuICAgICAgICBodG1sMnZhbHVlOiBmdW5jdGlvbihodG1sKSB7XG4gICAgICAgICAgICByZXR1cm4gaHRtbCA/IG1vbWVudChodG1sLCB0aGlzLm9wdGlvbnMudmlld2Zvcm1hdCkgOiBudWxsO1xuICAgICAgICB9LCAgIFxuICAgICAgICBcbiAgICAgICAgdmFsdWUyc3RyOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlID8gdmFsdWUuZm9ybWF0KHRoaXMub3B0aW9ucy5mb3JtYXQpIDogJyc7XG4gICAgICAgfSwgXG4gICAgICAgXG4gICAgICAgc3RyMnZhbHVlOiBmdW5jdGlvbihzdHIpIHtcbiAgICAgICAgICAgcmV0dXJuIHN0ciA/IG1vbWVudChzdHIsIHRoaXMub3B0aW9ucy5mb3JtYXQpIDogbnVsbDtcbiAgICAgICB9LCBcbiAgICAgICBcbiAgICAgICB2YWx1ZTJzdWJtaXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlMnN0cih2YWx1ZSk7XG4gICAgICAgfSwgICAgICAgICAgICAgICAgICAgIFxuXG4gICAgICAgdmFsdWUyaW5wdXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgIHRoaXMuJGlucHV0LmNvbWJvZGF0ZSgnc2V0VmFsdWUnLCB2YWx1ZSk7XG4gICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgaW5wdXQydmFsdWU6IGZ1bmN0aW9uKCkgeyBcbiAgICAgICAgICAgcmV0dXJuIHRoaXMuJGlucHV0LmNvbWJvZGF0ZSgnZ2V0VmFsdWUnLCBudWxsKTtcbiAgICAgICB9LCAgICAgICBcbiAgICAgICBcbiAgICAgICBhY3RpdmF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgIHRoaXMuJGlucHV0LnNpYmxpbmdzKCcuY29tYm9kYXRlJykuZmluZCgnc2VsZWN0JykuZXEoMCkuZm9jdXMoKTtcbiAgICAgICB9LFxuICAgICAgIFxuICAgICAgIC8qXG4gICAgICAgY2xlYXI6ICBmdW5jdGlvbigpIHtcbiAgICAgICAgICB0aGlzLiRpbnB1dC5kYXRhKCdkYXRlcGlja2VyJykuZGF0ZSA9IG51bGw7XG4gICAgICAgICAgdGhpcy4kaW5wdXQuZmluZCgnLmFjdGl2ZScpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcbiAgICAgICB9LFxuICAgICAgICovXG4gICAgICAgXG4gICAgICAgYXV0b3N1Ym1pdDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgIFxuICAgICAgIH1cblxuICAgIH0pO1xuICAgIFxuICAgIENvbnN0cnVjdG9yLmRlZmF1bHRzID0gJC5leHRlbmQoe30sICQuZm4uZWRpdGFibGV0eXBlcy5hYnN0cmFjdGlucHV0LmRlZmF1bHRzLCB7XG4gICAgICAgIC8qKlxuICAgICAgICBAcHJvcGVydHkgdHBsIFxuICAgICAgICBAZGVmYXVsdCA8aW5wdXQgdHlwZT1cInRleHRcIj5cbiAgICAgICAgKiovICAgICAgICAgXG4gICAgICAgIHRwbDonPGlucHV0IHR5cGU9XCJ0ZXh0XCI+JyxcbiAgICAgICAgLyoqXG4gICAgICAgIEBwcm9wZXJ0eSBpbnB1dGNsYXNzIFxuICAgICAgICBAZGVmYXVsdCBudWxsXG4gICAgICAgICoqLyAgICAgICAgIFxuICAgICAgICBpbnB1dGNsYXNzOiBudWxsLFxuICAgICAgICAvKipcbiAgICAgICAgRm9ybWF0IHVzZWQgZm9yIHNlbmRpbmcgdmFsdWUgdG8gc2VydmVyLiBBbHNvIGFwcGxpZWQgd2hlbiBjb252ZXJ0aW5nIGRhdGUgZnJvbSA8Y29kZT5kYXRhLXZhbHVlPC9jb2RlPiBhdHRyaWJ1dGUuPGJyPlxuICAgICAgICBTZWUgbGlzdCBvZiB0b2tlbnMgaW4gW21vbWVudGpzIGRvY3NdKGh0dHA6Ly9tb21lbnRqcy5jb20vZG9jcy8jL3BhcnNpbmcvc3RyaW5nLWZvcm1hdCkgIFxuICAgICAgICBcbiAgICAgICAgQHByb3BlcnR5IGZvcm1hdCBcbiAgICAgICAgQHR5cGUgc3RyaW5nXG4gICAgICAgIEBkZWZhdWx0IFlZWVktTU0tRERcbiAgICAgICAgKiovICAgICAgICAgXG4gICAgICAgIGZvcm1hdDonWVlZWS1NTS1ERCcsXG4gICAgICAgIC8qKlxuICAgICAgICBGb3JtYXQgdXNlZCBmb3IgZGlzcGxheWluZyBkYXRlLiBBbHNvIGFwcGxpZWQgd2hlbiBjb252ZXJ0aW5nIGRhdGUgZnJvbSBlbGVtZW50J3MgdGV4dCBvbiBpbml0LiAgIFxuICAgICAgICBJZiBub3Qgc3BlY2lmaWVkIGVxdWFscyB0byBgZm9ybWF0YC5cbiAgICAgICAgXG4gICAgICAgIEBwcm9wZXJ0eSB2aWV3Zm9ybWF0IFxuICAgICAgICBAdHlwZSBzdHJpbmdcbiAgICAgICAgQGRlZmF1bHQgbnVsbFxuICAgICAgICAqKi8gICAgICAgICAgXG4gICAgICAgIHZpZXdmb3JtYXQ6IG51bGwsICAgICAgICBcbiAgICAgICAgLyoqXG4gICAgICAgIFRlbXBsYXRlIHVzZWQgZm9yIGRpc3BsYXlpbmcgZHJvcGRvd25zLlxuICAgICAgICBcbiAgICAgICAgQHByb3BlcnR5IHRlbXBsYXRlIFxuICAgICAgICBAdHlwZSBzdHJpbmdcbiAgICAgICAgQGRlZmF1bHQgRCAvIE1NTSAvIFlZWVlcbiAgICAgICAgKiovICAgICAgICAgIFxuICAgICAgICB0ZW1wbGF0ZTogJ0QgLyBNTU0gLyBZWVlZJywgIFxuICAgICAgICAvKipcbiAgICAgICAgQ29uZmlndXJhdGlvbiBvZiBjb21ib2RhdGUuXG4gICAgICAgIEZ1bGwgbGlzdCBvZiBvcHRpb25zOiBodHRwOi8vdml0YWxldHMuZ2l0aHViLmNvbS9jb21ib2RhdGUvI2RvY3NcbiAgICAgICAgXG4gICAgICAgIEBwcm9wZXJ0eSBjb21ib2RhdGUgXG4gICAgICAgIEB0eXBlIG9iamVjdFxuICAgICAgICBAZGVmYXVsdCBudWxsXG4gICAgICAgICoqL1xuICAgICAgICBjb21ib2RhdGU6IG51bGxcbiAgICAgICAgXG4gICAgICAgIC8qXG4gICAgICAgIChub3QgaW1wbGVtZW50ZWQgeWV0KVxuICAgICAgICBUZXh0IHNob3duIGFzIGNsZWFyIGRhdGUgYnV0dG9uLiBcbiAgICAgICAgSWYgPGNvZGU+ZmFsc2U8L2NvZGU+IGNsZWFyIGJ1dHRvbiB3aWxsIG5vdCBiZSByZW5kZXJlZC5cbiAgICAgICAgXG4gICAgICAgIEBwcm9wZXJ0eSBjbGVhciBcbiAgICAgICAgQHR5cGUgYm9vbGVhbnxzdHJpbmdcbiAgICAgICAgQGRlZmF1bHQgJ3ggY2xlYXInICAgICAgICAgXG4gICAgICAgICovXG4gICAgICAgIC8vY2xlYXI6ICcmdGltZXM7IGNsZWFyJ1xuICAgIH0pOyAgIFxuXG4gICAgJC5mbi5lZGl0YWJsZXR5cGVzLmNvbWJvZGF0ZSA9IENvbnN0cnVjdG9yO1xuXG59KHdpbmRvdy5qUXVlcnkpKTtcblxuLypcbkVkaXRhYmxlZm9ybSBiYXNlZCBvbiBUd2l0dGVyIEJvb3RzdHJhcCAzXG4qL1xuKGZ1bmN0aW9uICgkKSB7XG4gICAgO1xuICAgIFxuICAgIC8vc3RvcmUgcGFyZW50IG1ldGhvZHNcbiAgICB2YXIgcEluaXRJbnB1dCA9ICQuZm4uZWRpdGFibGVmb3JtLkNvbnN0cnVjdG9yLnByb3RvdHlwZS5pbml0SW5wdXQ7XG4gICAgXG4gICAgJC5leHRlbmQoJC5mbi5lZGl0YWJsZWZvcm0uQ29uc3RydWN0b3IucHJvdG90eXBlLCB7XG4gICAgICAgIGluaXRUZW1wbGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLiRmb3JtID0gJCgkLmZuLmVkaXRhYmxlZm9ybS50ZW1wbGF0ZSk7IFxuICAgICAgICAgICAgdGhpcy4kZm9ybS5maW5kKCcuY29udHJvbC1ncm91cCcpLmFkZENsYXNzKCdmb3JtLWdyb3VwJyk7XG4gICAgICAgICAgICB0aGlzLiRmb3JtLmZpbmQoJy5lZGl0YWJsZS1lcnJvci1ibG9jaycpLmFkZENsYXNzKCdoZWxwLWJsb2NrJyk7XG4gICAgICAgIH0sXG4gICAgICAgIGluaXRJbnB1dDogZnVuY3Rpb24oKSB7ICBcbiAgICAgICAgICAgIHBJbml0SW5wdXQuYXBwbHkodGhpcyk7XG5cbiAgICAgICAgICAgIC8vZm9yIGJzMyBzZXQgZGVmYXVsdCBjbGFzcyBgaW5wdXQtc21gIHRvIHN0YW5kYXJkIGlucHV0c1xuICAgICAgICAgICAgdmFyIGVtcHR5SW5wdXRDbGFzcyA9IHRoaXMuaW5wdXQub3B0aW9ucy5pbnB1dGNsYXNzID09PSBudWxsIHx8IHRoaXMuaW5wdXQub3B0aW9ucy5pbnB1dGNsYXNzID09PSBmYWxzZTtcbiAgICAgICAgICAgIHZhciBkZWZhdWx0Q2xhc3MgPSAnaW5wdXQtc20nO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvL2JzMyBhZGQgYGZvcm0tY29udHJvbGAgY2xhc3MgdG8gc3RhbmRhcmQgaW5wdXRzXG4gICAgICAgICAgICB2YXIgc3RkdHlwZXMgPSAndGV4dCxzZWxlY3QsdGV4dGFyZWEscGFzc3dvcmQsZW1haWwsdXJsLHRlbCxudW1iZXIscmFuZ2UsdGltZSx0eXBlYWhlYWRqcycuc3BsaXQoJywnKTsgXG4gICAgICAgICAgICBpZih+JC5pbkFycmF5KHRoaXMuaW5wdXQudHlwZSwgc3RkdHlwZXMpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pbnB1dC4kaW5wdXQuYWRkQ2xhc3MoJ2Zvcm0tY29udHJvbCcpO1xuICAgICAgICAgICAgICAgIGlmKGVtcHR5SW5wdXRDbGFzcykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmlucHV0Lm9wdGlvbnMuaW5wdXRjbGFzcyA9IGRlZmF1bHRDbGFzcztcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnB1dC4kaW5wdXQuYWRkQ2xhc3MoZGVmYXVsdENsYXNzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9ICAgICAgICAgICAgIFxuICAgICAgICBcbiAgICAgICAgICAgIC8vYXBwbHkgYnMzIHNpemUgY2xhc3MgYWxzbyB0byBidXR0b25zICh0byBmaXQgc2l6ZSBvZiBjb250cm9sKVxuICAgICAgICAgICAgdmFyICRidG4gPSB0aGlzLiRmb3JtLmZpbmQoJy5lZGl0YWJsZS1idXR0b25zJyk7XG4gICAgICAgICAgICB2YXIgY2xhc3NlcyA9IGVtcHR5SW5wdXRDbGFzcyA/IFtkZWZhdWx0Q2xhc3NdIDogdGhpcy5pbnB1dC5vcHRpb25zLmlucHV0Y2xhc3Muc3BsaXQoJyAnKTtcbiAgICAgICAgICAgIGZvcih2YXIgaT0wOyBpPGNsYXNzZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAvLyBgYnRuLXNtYCBpcyBkZWZhdWx0IG5vd1xuICAgICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAgaWYoY2xhc3Nlc1tpXS50b0xvd2VyQ2FzZSgpID09PSAnaW5wdXQtc20nKSB7IFxuICAgICAgICAgICAgICAgICAgICAkYnRuLmZpbmQoJ2J1dHRvbicpLmFkZENsYXNzKCdidG4tc20nKTsgIFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIGlmKGNsYXNzZXNbaV0udG9Mb3dlckNhc2UoKSA9PT0gJ2lucHV0LWxnJykge1xuICAgICAgICAgICAgICAgICAgICAkYnRuLmZpbmQoJ2J1dHRvbicpLnJlbW92ZUNsYXNzKCdidG4tc20nKS5hZGRDbGFzcygnYnRuLWxnJyk7IFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pOyAgICBcbiAgICBcbiAgICAvL2J1dHRvbnNcbiAgICAkLmZuLmVkaXRhYmxlZm9ybS5idXR0b25zID0gXG4gICAgICAnPGJ1dHRvbiB0eXBlPVwic3VibWl0XCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnkgYnRuLXNtIGVkaXRhYmxlLXN1Ym1pdFwiPicrXG4gICAgICAgICc8aSBjbGFzcz1cImZhIGZhLW9rXCI+PC9pPicrXG4gICAgICAnPC9idXR0b24+JytcbiAgICAgICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tZGVmYXVsdCBidG4tc20gZWRpdGFibGUtY2FuY2VsXCI+JytcbiAgICAgICAgJzxpIGNsYXNzPVwiZmEgZmEtcmVtb3ZlXCI+PC9pPicrXG4gICAgICAnPC9idXR0b24+JzsgICAgICAgICBcbiAgICBcbiAgICAvL2Vycm9yIGNsYXNzZXNcbiAgICAkLmZuLmVkaXRhYmxlZm9ybS5lcnJvckdyb3VwQ2xhc3MgPSAnaGFzLWVycm9yJztcbiAgICAkLmZuLmVkaXRhYmxlZm9ybS5lcnJvckJsb2NrQ2xhc3MgPSBudWxsOyAgXG4gICAgLy9lbmdpbmVcbiAgICAkLmZuLmVkaXRhYmxlZm9ybS5lbmdpbmUgPSAnYnMzJzsgIFxufSh3aW5kb3cualF1ZXJ5KSk7XG4vKipcbiogRWRpdGFibGUgUG9wb3ZlcjMgKGZvciBCb290c3RyYXAgMykgXG4qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKiByZXF1aXJlcyBib290c3RyYXAtcG9wb3Zlci5qc1xuKi9cbihmdW5jdGlvbiAoJCkge1xuICAgIDtcblxuICAgIC8vZXh0ZW5kIG1ldGhvZHNcbiAgICAkLmV4dGVuZCgkLmZuLmVkaXRhYmxlQ29udGFpbmVyLlBvcHVwLnByb3RvdHlwZSwge1xuICAgICAgICBjb250YWluZXJOYW1lOiAncG9wb3ZlcicsXG4gICAgICAgIGNvbnRhaW5lckRhdGFOYW1lOiAnYnMucG9wb3ZlcicsXG4gICAgICAgIGlubmVyQ3NzOiAnLnBvcG92ZXItY29udGVudCcsXG4gICAgICAgIGRlZmF1bHRzOiAkLmZuLnBvcG92ZXIuQ29uc3RydWN0b3IuREVGQVVMVFMsXG5cbiAgICAgICAgaW5pdENvbnRhaW5lcjogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICQuZXh0ZW5kKHRoaXMuY29udGFpbmVyT3B0aW9ucywge1xuICAgICAgICAgICAgICAgIHRyaWdnZXI6ICdtYW51YWwnLFxuICAgICAgICAgICAgICAgIHNlbGVjdG9yOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBjb250ZW50OiAnICcsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGU6IHRoaXMuZGVmYXVsdHMudGVtcGxhdGVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvL2FzIHRlbXBsYXRlIHByb3BlcnR5IGlzIHVzZWQgaW4gaW5wdXRzLCBoaWRlIGl0IGZyb20gcG9wb3ZlclxuICAgICAgICAgICAgdmFyIHQ7XG4gICAgICAgICAgICBpZih0aGlzLiRlbGVtZW50LmRhdGEoJ3RlbXBsYXRlJykpIHtcbiAgICAgICAgICAgICAgIHQgPSB0aGlzLiRlbGVtZW50LmRhdGEoJ3RlbXBsYXRlJyk7XG4gICAgICAgICAgICAgICB0aGlzLiRlbGVtZW50LnJlbW92ZURhdGEoJ3RlbXBsYXRlJyk7ICBcbiAgICAgICAgICAgIH0gXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuY2FsbCh0aGlzLmNvbnRhaW5lck9wdGlvbnMpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZih0KSB7XG4gICAgICAgICAgICAgICAvL3Jlc3RvcmUgZGF0YSgndGVtcGxhdGUnKVxuICAgICAgICAgICAgICAgdGhpcy4kZWxlbWVudC5kYXRhKCd0ZW1wbGF0ZScsIHQpOyBcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgXG4gICAgICAgIFxuICAgICAgICAvKiBzaG93ICovXG4gICAgICAgIGlubmVyU2hvdzogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5jYWxsKCdzaG93Jyk7ICAgICAgICAgICAgICAgIFxuICAgICAgICB9LCAgXG4gICAgICAgIFxuICAgICAgICAvKiBoaWRlICovXG4gICAgICAgIGlubmVySGlkZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5jYWxsKCdoaWRlJyk7ICAgICAgIFxuICAgICAgICB9LCBcbiAgICAgICAgXG4gICAgICAgIC8qIGRlc3Ryb3kgKi9cbiAgICAgICAgaW5uZXJEZXN0cm95OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuY2FsbCgnZGVzdHJveScpO1xuICAgICAgICB9LCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIHNldENvbnRhaW5lck9wdGlvbjogZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5jb250YWluZXIoKS5vcHRpb25zW2tleV0gPSB2YWx1ZTsgXG4gICAgICAgIH0sICAgICAgICAgICAgICAgXG5cbiAgICAgICAgLyoqXG4gICAgICAgICogbW92ZSBwb3BvdmVyIHRvIG5ldyBwb3NpdGlvbi4gVGhpcyBmdW5jdGlvbiBtYWlubHkgY29waWVkIGZyb20gYm9vdHN0cmFwLXBvcG92ZXIuXG4gICAgICAgICovXG4gICAgICAgIC8qanNoaW50IGxheGNvbW1hOiB0cnVlLCBlcWVxZXE6IGZhbHNlKi9cbiAgICAgICAgc2V0UG9zaXRpb246IGZ1bmN0aW9uICgpIHsgXG5cbiAgICAgICAgICAgIChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIC8qICAgIFxuICAgICAgICAgICAgICAgIHZhciAkdGlwID0gdGhpcy50aXAoKVxuICAgICAgICAgICAgICAgICwgaW5zaWRlXG4gICAgICAgICAgICAgICAgLCBwb3NcbiAgICAgICAgICAgICAgICAsIGFjdHVhbFdpZHRoXG4gICAgICAgICAgICAgICAgLCBhY3R1YWxIZWlnaHRcbiAgICAgICAgICAgICAgICAsIHBsYWNlbWVudFxuICAgICAgICAgICAgICAgICwgdHBcbiAgICAgICAgICAgICAgICAsIHRwdFxuICAgICAgICAgICAgICAgICwgdHBiXG4gICAgICAgICAgICAgICAgLCB0cGxcbiAgICAgICAgICAgICAgICAsIHRwcjtcblxuICAgICAgICAgICAgICAgIHBsYWNlbWVudCA9IHR5cGVvZiB0aGlzLm9wdGlvbnMucGxhY2VtZW50ID09PSAnZnVuY3Rpb24nID9cbiAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMucGxhY2VtZW50LmNhbGwodGhpcywgJHRpcFswXSwgdGhpcy4kZWxlbWVudFswXSkgOlxuICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5wbGFjZW1lbnQ7XG5cbiAgICAgICAgICAgICAgICBpbnNpZGUgPSAvaW4vLnRlc3QocGxhY2VtZW50KTtcbiAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICR0aXBcbiAgICAgICAgICAgICAgLy8gIC5kZXRhY2goKVxuICAgICAgICAgICAgICAvL3ZpdGFsZXRzOiByZW1vdmUgYW55IHBsYWNlbWVudCBjbGFzcyBiZWNhdXNlIG90aGVyd2lzZSB0aGV5IGRvbnQgaW5mbHVlbmNlIG9uIHJlLXBvc2l0aW9uaW5nIG9mIHZpc2libGUgcG9wb3ZlclxuICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygndG9wIHJpZ2h0IGJvdHRvbSBsZWZ0JylcbiAgICAgICAgICAgICAgICAuY3NzKHsgdG9wOiAwLCBsZWZ0OiAwLCBkaXNwbGF5OiAnYmxvY2snIH0pO1xuICAgICAgICAgICAgICAvLyAgLmluc2VydEFmdGVyKHRoaXMuJGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgcG9zID0gdGhpcy5nZXRQb3NpdGlvbihpbnNpZGUpO1xuXG4gICAgICAgICAgICAgICAgYWN0dWFsV2lkdGggPSAkdGlwWzBdLm9mZnNldFdpZHRoO1xuICAgICAgICAgICAgICAgIGFjdHVhbEhlaWdodCA9ICR0aXBbMF0ub2Zmc2V0SGVpZ2h0O1xuXG4gICAgICAgICAgICAgICAgcGxhY2VtZW50ID0gaW5zaWRlID8gcGxhY2VtZW50LnNwbGl0KCcgJylbMV0gOiBwbGFjZW1lbnQ7XG5cbiAgICAgICAgICAgICAgICB0cGIgPSB7dG9wOiBwb3MudG9wICsgcG9zLmhlaWdodCwgbGVmdDogcG9zLmxlZnQgKyBwb3Mud2lkdGggLyAyIC0gYWN0dWFsV2lkdGggLyAyfTtcbiAgICAgICAgICAgICAgICB0cHQgPSB7dG9wOiBwb3MudG9wIC0gYWN0dWFsSGVpZ2h0LCBsZWZ0OiBwb3MubGVmdCArIHBvcy53aWR0aCAvIDIgLSBhY3R1YWxXaWR0aCAvIDJ9O1xuICAgICAgICAgICAgICAgIHRwbCA9IHt0b3A6IHBvcy50b3AgKyBwb3MuaGVpZ2h0IC8gMiAtIGFjdHVhbEhlaWdodCAvIDIsIGxlZnQ6IHBvcy5sZWZ0IC0gYWN0dWFsV2lkdGh9O1xuICAgICAgICAgICAgICAgIHRwciA9IHt0b3A6IHBvcy50b3AgKyBwb3MuaGVpZ2h0IC8gMiAtIGFjdHVhbEhlaWdodCAvIDIsIGxlZnQ6IHBvcy5sZWZ0ICsgcG9zLndpZHRofTtcblxuICAgICAgICAgICAgICAgIHN3aXRjaCAocGxhY2VtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2JvdHRvbSc6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoKHRwYi50b3AgKyBhY3R1YWxIZWlnaHQpID4gKCQod2luZG93KS5zY3JvbGxUb3AoKSArICQod2luZG93KS5oZWlnaHQoKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHB0LnRvcCA+ICQod2luZG93KS5zY3JvbGxUb3AoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZW1lbnQgPSAndG9wJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCh0cHIubGVmdCArIGFjdHVhbFdpZHRoKSA8ICgkKHdpbmRvdykuc2Nyb2xsTGVmdCgpICsgJCh3aW5kb3cpLndpZHRoKCkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlbWVudCA9ICdyaWdodCc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0cGwubGVmdCA+ICQod2luZG93KS5zY3JvbGxMZWZ0KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2VtZW50ID0gJ2xlZnQnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlbWVudCA9ICdyaWdodCc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3RvcCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHB0LnRvcCA8ICQod2luZG93KS5zY3JvbGxUb3AoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgodHBiLnRvcCArIGFjdHVhbEhlaWdodCkgPCAoJCh3aW5kb3cpLnNjcm9sbFRvcCgpICsgJCh3aW5kb3cpLmhlaWdodCgpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZW1lbnQgPSAnYm90dG9tJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCh0cHIubGVmdCArIGFjdHVhbFdpZHRoKSA8ICgkKHdpbmRvdykuc2Nyb2xsTGVmdCgpICsgJCh3aW5kb3cpLndpZHRoKCkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlbWVudCA9ICdyaWdodCc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0cGwubGVmdCA+ICQod2luZG93KS5zY3JvbGxMZWZ0KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2VtZW50ID0gJ2xlZnQnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlbWVudCA9ICdyaWdodCc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2xlZnQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRwbC5sZWZ0IDwgJCh3aW5kb3cpLnNjcm9sbExlZnQoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgodHByLmxlZnQgKyBhY3R1YWxXaWR0aCkgPCAoJCh3aW5kb3cpLnNjcm9sbExlZnQoKSArICQod2luZG93KS53aWR0aCgpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZW1lbnQgPSAncmlnaHQnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHB0LnRvcCA+ICQod2luZG93KS5zY3JvbGxUb3AoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZW1lbnQgPSAndG9wJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRwdC50b3AgPiAkKHdpbmRvdykuc2Nyb2xsVG9wKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2VtZW50ID0gJ2JvdHRvbSc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2VtZW50ID0gJ3JpZ2h0JztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAncmlnaHQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCh0cHIubGVmdCArIGFjdHVhbFdpZHRoKSA+ICgkKHdpbmRvdykuc2Nyb2xsTGVmdCgpICsgJCh3aW5kb3cpLndpZHRoKCkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRwbC5sZWZ0ID4gJCh3aW5kb3cpLnNjcm9sbExlZnQoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZW1lbnQgPSAnbGVmdCc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0cHQudG9wID4gJCh3aW5kb3cpLnNjcm9sbFRvcCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlbWVudCA9ICd0b3AnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHB0LnRvcCA+ICQod2luZG93KS5zY3JvbGxUb3AoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZW1lbnQgPSAnYm90dG9tJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHBsYWNlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdib3R0b20nOlxuICAgICAgICAgICAgICAgICAgICAgICAgdHAgPSB0cGI7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAndG9wJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRwID0gdHB0O1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2xlZnQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgdHAgPSB0cGw7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAncmlnaHQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgdHAgPSB0cHI7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAkdGlwXG4gICAgICAgICAgICAgICAgLm9mZnNldCh0cClcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MocGxhY2VtZW50KVxuICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnaW4nKTtcbiAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICBcbiAgICAgICAgICAgIHZhciAkdGlwID0gdGhpcy50aXAoKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdmFyIHBsYWNlbWVudCA9IHR5cGVvZiB0aGlzLm9wdGlvbnMucGxhY2VtZW50ID09ICdmdW5jdGlvbicgP1xuICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5wbGFjZW1lbnQuY2FsbCh0aGlzLCAkdGlwWzBdLCB0aGlzLiRlbGVtZW50WzBdKSA6XG4gICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLnBsYWNlbWVudDsgICAgICAgICAgICBcblxuICAgICAgICAgICAgdmFyIGF1dG9Ub2tlbiA9IC9cXHM/YXV0bz9cXHM/L2k7XG4gICAgICAgICAgICB2YXIgYXV0b1BsYWNlID0gYXV0b1Rva2VuLnRlc3QocGxhY2VtZW50KTtcbiAgICAgICAgICAgIGlmIChhdXRvUGxhY2UpIHtcbiAgICAgICAgICAgICAgICBwbGFjZW1lbnQgPSBwbGFjZW1lbnQucmVwbGFjZShhdXRvVG9rZW4sICcnKSB8fCAndG9wJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgXG4gICAgICAgICAgICB2YXIgcG9zID0gdGhpcy5nZXRQb3NpdGlvbigpO1xuICAgICAgICAgICAgdmFyIGFjdHVhbFdpZHRoID0gJHRpcFswXS5vZmZzZXRXaWR0aDtcbiAgICAgICAgICAgIHZhciBhY3R1YWxIZWlnaHQgPSAkdGlwWzBdLm9mZnNldEhlaWdodDtcblxuICAgICAgICAgICAgaWYgKGF1dG9QbGFjZSkge1xuICAgICAgICAgICAgICAgIHZhciAkcGFyZW50ID0gdGhpcy4kZWxlbWVudC5wYXJlbnQoKTtcblxuICAgICAgICAgICAgICAgIHZhciBvcmdQbGFjZW1lbnQgPSBwbGFjZW1lbnQ7XG4gICAgICAgICAgICAgICAgdmFyIGRvY1Njcm9sbCAgICA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3AgfHwgZG9jdW1lbnQuYm9keS5zY3JvbGxUb3A7XG4gICAgICAgICAgICAgICAgdmFyIHBhcmVudFdpZHRoICA9IHRoaXMub3B0aW9ucy5jb250YWluZXIgPT0gJ2JvZHknID8gd2luZG93LmlubmVyV2lkdGggIDogJHBhcmVudC5vdXRlcldpZHRoKCk7XG4gICAgICAgICAgICAgICAgdmFyIHBhcmVudEhlaWdodCA9IHRoaXMub3B0aW9ucy5jb250YWluZXIgPT0gJ2JvZHknID8gd2luZG93LmlubmVySGVpZ2h0IDogJHBhcmVudC5vdXRlckhlaWdodCgpO1xuICAgICAgICAgICAgICAgIHZhciBwYXJlbnRMZWZ0ICAgPSB0aGlzLm9wdGlvbnMuY29udGFpbmVyID09ICdib2R5JyA/IDAgOiAkcGFyZW50Lm9mZnNldCgpLmxlZnQ7XG5cbiAgICAgICAgICAgICAgICBwbGFjZW1lbnQgPSBwbGFjZW1lbnQgPT0gJ2JvdHRvbScgJiYgcG9zLnRvcCAgICsgcG9zLmhlaWdodCAgKyBhY3R1YWxIZWlnaHQgLSBkb2NTY3JvbGwgPiBwYXJlbnRIZWlnaHQgID8gJ3RvcCcgICAgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlbWVudCA9PSAndG9wJyAgICAmJiBwb3MudG9wICAgLSBkb2NTY3JvbGwgICAtIGFjdHVhbEhlaWdodCA8IDAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnYm90dG9tJyA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2VtZW50ID09ICdyaWdodCcgICYmIHBvcy5yaWdodCArIGFjdHVhbFdpZHRoID4gcGFyZW50V2lkdGggICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICdsZWZ0JyAgIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZW1lbnQgPT0gJ2xlZnQnICAgJiYgcG9zLmxlZnQgIC0gYWN0dWFsV2lkdGggPCBwYXJlbnRMZWZ0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJ3JpZ2h0JyAgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlbWVudDtcblxuICAgICAgICAgICAgICAgICR0aXBcbiAgICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcyhvcmdQbGFjZW1lbnQpXG4gICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MocGxhY2VtZW50KTtcbiAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICB2YXIgY2FsY3VsYXRlZE9mZnNldCA9IHRoaXMuZ2V0Q2FsY3VsYXRlZE9mZnNldChwbGFjZW1lbnQsIHBvcywgYWN0dWFsV2lkdGgsIGFjdHVhbEhlaWdodCk7XG5cbiAgICAgICAgICAgIHRoaXMuYXBwbHlQbGFjZW1lbnQoY2FsY3VsYXRlZE9mZnNldCwgcGxhY2VtZW50KTsgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfSkuY2FsbCh0aGlzLmNvbnRhaW5lcigpKTtcbiAgICAgICAgICAvKmpzaGludCBsYXhjb21tYTogZmFsc2UsIGVxZXFlcTogdHJ1ZSovICBcbiAgICAgICAgfSAgICAgICAgICAgIFxuICAgIH0pO1xuXG59KHdpbmRvdy5qUXVlcnkpKTtcblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBib290c3RyYXAtZGF0ZXBpY2tlci5qc1xuICogaHR0cDovL3d3dy5leWVjb24ucm8vYm9vdHN0cmFwLWRhdGVwaWNrZXJcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29weXJpZ2h0IDIwMTIgU3RlZmFuIFBldHJlXG4gKiBJbXByb3ZlbWVudHMgYnkgQW5kcmV3IFJvd2xzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuKGZ1bmN0aW9uKCAkICkge1xuXG5cdGZ1bmN0aW9uIFVUQ0RhdGUoKXtcblx0XHRyZXR1cm4gbmV3IERhdGUoRGF0ZS5VVEMuYXBwbHkoRGF0ZSwgYXJndW1lbnRzKSk7XG5cdH1cblx0ZnVuY3Rpb24gVVRDVG9kYXkoKXtcblx0XHR2YXIgdG9kYXkgPSBuZXcgRGF0ZSgpO1xuXHRcdHJldHVybiBVVENEYXRlKHRvZGF5LmdldFVUQ0Z1bGxZZWFyKCksIHRvZGF5LmdldFVUQ01vbnRoKCksIHRvZGF5LmdldFVUQ0RhdGUoKSk7XG5cdH1cblxuXHQvLyBQaWNrZXIgb2JqZWN0XG5cblx0dmFyIERhdGVwaWNrZXIgPSBmdW5jdGlvbihlbGVtZW50LCBvcHRpb25zKSB7XG5cdFx0dmFyIHRoYXQgPSB0aGlzO1xuXG5cdFx0dGhpcy5fcHJvY2Vzc19vcHRpb25zKG9wdGlvbnMpO1xuXG5cdFx0dGhpcy5lbGVtZW50ID0gJChlbGVtZW50KTtcblx0XHR0aGlzLmlzSW5saW5lID0gZmFsc2U7XG5cdFx0dGhpcy5pc0lucHV0ID0gdGhpcy5lbGVtZW50LmlzKCdpbnB1dCcpO1xuXHRcdHRoaXMuY29tcG9uZW50ID0gdGhpcy5lbGVtZW50LmlzKCcuZGF0ZScpID8gdGhpcy5lbGVtZW50LmZpbmQoJy5hZGQtb24sIC5idG4nKSA6IGZhbHNlO1xuXHRcdHRoaXMuaGFzSW5wdXQgPSB0aGlzLmNvbXBvbmVudCAmJiB0aGlzLmVsZW1lbnQuZmluZCgnaW5wdXQnKS5sZW5ndGg7XG5cdFx0aWYodGhpcy5jb21wb25lbnQgJiYgdGhpcy5jb21wb25lbnQubGVuZ3RoID09PSAwKVxuXHRcdFx0dGhpcy5jb21wb25lbnQgPSBmYWxzZTtcblxuXHRcdHRoaXMucGlja2VyID0gJChEUEdsb2JhbC50ZW1wbGF0ZSk7XG5cdFx0dGhpcy5fYnVpbGRFdmVudHMoKTtcblx0XHR0aGlzLl9hdHRhY2hFdmVudHMoKTtcblxuXHRcdGlmKHRoaXMuaXNJbmxpbmUpIHtcblx0XHRcdHRoaXMucGlja2VyLmFkZENsYXNzKCdkYXRlcGlja2VyLWlubGluZScpLmFwcGVuZFRvKHRoaXMuZWxlbWVudCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMucGlja2VyLmFkZENsYXNzKCdkYXRlcGlja2VyLWRyb3Bkb3duIGRyb3Bkb3duLW1lbnUnKTtcblx0XHR9XG5cblx0XHRpZiAodGhpcy5vLnJ0bCl7XG5cdFx0XHR0aGlzLnBpY2tlci5hZGRDbGFzcygnZGF0ZXBpY2tlci1ydGwnKTtcblx0XHRcdHRoaXMucGlja2VyLmZpbmQoJy5wcmV2IGksIC5uZXh0IGknKVxuXHRcdFx0XHRcdFx0LnRvZ2dsZUNsYXNzKCdpY29uLWFycm93LWxlZnQgaWNvbi1hcnJvdy1yaWdodCcpO1xuXHRcdH1cblxuXG5cdFx0dGhpcy52aWV3TW9kZSA9IHRoaXMuby5zdGFydFZpZXc7XG5cblx0XHRpZiAodGhpcy5vLmNhbGVuZGFyV2Vla3MpXG5cdFx0XHR0aGlzLnBpY2tlci5maW5kKCd0Zm9vdCB0aC50b2RheScpXG5cdFx0XHRcdFx0XHQuYXR0cignY29sc3BhbicsIGZ1bmN0aW9uKGksIHZhbCl7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBwYXJzZUludCh2YWwpICsgMTtcblx0XHRcdFx0XHRcdH0pO1xuXG5cdFx0dGhpcy5fYWxsb3dfdXBkYXRlID0gZmFsc2U7XG5cblx0XHR0aGlzLnNldFN0YXJ0RGF0ZSh0aGlzLm8uc3RhcnREYXRlKTtcblx0XHR0aGlzLnNldEVuZERhdGUodGhpcy5vLmVuZERhdGUpO1xuXHRcdHRoaXMuc2V0RGF5c09mV2Vla0Rpc2FibGVkKHRoaXMuby5kYXlzT2ZXZWVrRGlzYWJsZWQpO1xuXG5cdFx0dGhpcy5maWxsRG93KCk7XG5cdFx0dGhpcy5maWxsTW9udGhzKCk7XG5cblx0XHR0aGlzLl9hbGxvd191cGRhdGUgPSB0cnVlO1xuXG5cdFx0dGhpcy51cGRhdGUoKTtcblx0XHR0aGlzLnNob3dNb2RlKCk7XG5cblx0XHRpZih0aGlzLmlzSW5saW5lKSB7XG5cdFx0XHR0aGlzLnNob3coKTtcblx0XHR9XG5cdH07XG5cblx0RGF0ZXBpY2tlci5wcm90b3R5cGUgPSB7XG5cdFx0Y29uc3RydWN0b3I6IERhdGVwaWNrZXIsXG5cblx0XHRfcHJvY2Vzc19vcHRpb25zOiBmdW5jdGlvbihvcHRzKXtcblx0XHRcdC8vIFN0b3JlIHJhdyBvcHRpb25zIGZvciByZWZlcmVuY2Vcblx0XHRcdHRoaXMuX28gPSAkLmV4dGVuZCh7fSwgdGhpcy5fbywgb3B0cyk7XG5cdFx0XHQvLyBQcm9jZXNzZWQgb3B0aW9uc1xuXHRcdFx0dmFyIG8gPSB0aGlzLm8gPSAkLmV4dGVuZCh7fSwgdGhpcy5fbyk7XG5cblx0XHRcdC8vIENoZWNrIGlmIFwiZGUtREVcIiBzdHlsZSBkYXRlIGlzIGF2YWlsYWJsZSwgaWYgbm90IGxhbmd1YWdlIHNob3VsZFxuXHRcdFx0Ly8gZmFsbGJhY2sgdG8gMiBsZXR0ZXIgY29kZSBlZyBcImRlXCJcblx0XHRcdHZhciBsYW5nID0gby5sYW5ndWFnZTtcblx0XHRcdGlmICghZGF0ZXNbbGFuZ10pIHtcblx0XHRcdFx0bGFuZyA9IGxhbmcuc3BsaXQoJy0nKVswXTtcblx0XHRcdFx0aWYgKCFkYXRlc1tsYW5nXSlcblx0XHRcdFx0XHRsYW5nID0gZGVmYXVsdHMubGFuZ3VhZ2U7XG5cdFx0XHR9XG5cdFx0XHRvLmxhbmd1YWdlID0gbGFuZztcblxuXHRcdFx0c3dpdGNoKG8uc3RhcnRWaWV3KXtcblx0XHRcdFx0Y2FzZSAyOlxuXHRcdFx0XHRjYXNlICdkZWNhZGUnOlxuXHRcdFx0XHRcdG8uc3RhcnRWaWV3ID0gMjtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAxOlxuXHRcdFx0XHRjYXNlICd5ZWFyJzpcblx0XHRcdFx0XHRvLnN0YXJ0VmlldyA9IDE7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0by5zdGFydFZpZXcgPSAwO1xuXHRcdFx0fVxuXG5cdFx0XHRzd2l0Y2ggKG8ubWluVmlld01vZGUpIHtcblx0XHRcdFx0Y2FzZSAxOlxuXHRcdFx0XHRjYXNlICdtb250aHMnOlxuXHRcdFx0XHRcdG8ubWluVmlld01vZGUgPSAxO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIDI6XG5cdFx0XHRcdGNhc2UgJ3llYXJzJzpcblx0XHRcdFx0XHRvLm1pblZpZXdNb2RlID0gMjtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRvLm1pblZpZXdNb2RlID0gMDtcblx0XHRcdH1cblxuXHRcdFx0by5zdGFydFZpZXcgPSBNYXRoLm1heChvLnN0YXJ0Vmlldywgby5taW5WaWV3TW9kZSk7XG5cblx0XHRcdG8ud2Vla1N0YXJ0ICU9IDc7XG5cdFx0XHRvLndlZWtFbmQgPSAoKG8ud2Vla1N0YXJ0ICsgNikgJSA3KTtcblxuXHRcdFx0dmFyIGZvcm1hdCA9IERQR2xvYmFsLnBhcnNlRm9ybWF0KG8uZm9ybWF0KVxuXHRcdFx0aWYgKG8uc3RhcnREYXRlICE9PSAtSW5maW5pdHkpIHtcblx0XHRcdFx0by5zdGFydERhdGUgPSBEUEdsb2JhbC5wYXJzZURhdGUoby5zdGFydERhdGUsIGZvcm1hdCwgby5sYW5ndWFnZSk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoby5lbmREYXRlICE9PSBJbmZpbml0eSkge1xuXHRcdFx0XHRvLmVuZERhdGUgPSBEUEdsb2JhbC5wYXJzZURhdGUoby5lbmREYXRlLCBmb3JtYXQsIG8ubGFuZ3VhZ2UpO1xuXHRcdFx0fVxuXG5cdFx0XHRvLmRheXNPZldlZWtEaXNhYmxlZCA9IG8uZGF5c09mV2Vla0Rpc2FibGVkfHxbXTtcblx0XHRcdGlmICghJC5pc0FycmF5KG8uZGF5c09mV2Vla0Rpc2FibGVkKSlcblx0XHRcdFx0by5kYXlzT2ZXZWVrRGlzYWJsZWQgPSBvLmRheXNPZldlZWtEaXNhYmxlZC5zcGxpdCgvWyxcXHNdKi8pO1xuXHRcdFx0by5kYXlzT2ZXZWVrRGlzYWJsZWQgPSAkLm1hcChvLmRheXNPZldlZWtEaXNhYmxlZCwgZnVuY3Rpb24gKGQpIHtcblx0XHRcdFx0cmV0dXJuIHBhcnNlSW50KGQsIDEwKTtcblx0XHRcdH0pO1xuXHRcdH0sXG5cdFx0X2V2ZW50czogW10sXG5cdFx0X3NlY29uZGFyeUV2ZW50czogW10sXG5cdFx0X2FwcGx5RXZlbnRzOiBmdW5jdGlvbihldnMpe1xuXHRcdFx0Zm9yICh2YXIgaT0wLCBlbCwgZXY7IGk8ZXZzLmxlbmd0aDsgaSsrKXtcblx0XHRcdFx0ZWwgPSBldnNbaV1bMF07XG5cdFx0XHRcdGV2ID0gZXZzW2ldWzFdO1xuXHRcdFx0XHRlbC5vbihldik7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRfdW5hcHBseUV2ZW50czogZnVuY3Rpb24oZXZzKXtcblx0XHRcdGZvciAodmFyIGk9MCwgZWwsIGV2OyBpPGV2cy5sZW5ndGg7IGkrKyl7XG5cdFx0XHRcdGVsID0gZXZzW2ldWzBdO1xuXHRcdFx0XHRldiA9IGV2c1tpXVsxXTtcblx0XHRcdFx0ZWwub2ZmKGV2KTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdF9idWlsZEV2ZW50czogZnVuY3Rpb24oKXtcblx0XHRcdGlmICh0aGlzLmlzSW5wdXQpIHsgLy8gc2luZ2xlIGlucHV0XG5cdFx0XHRcdHRoaXMuX2V2ZW50cyA9IFtcblx0XHRcdFx0XHRbdGhpcy5lbGVtZW50LCB7XG5cdFx0XHRcdFx0XHRmb2N1czogJC5wcm94eSh0aGlzLnNob3csIHRoaXMpLFxuXHRcdFx0XHRcdFx0a2V5dXA6ICQucHJveHkodGhpcy51cGRhdGUsIHRoaXMpLFxuXHRcdFx0XHRcdFx0a2V5ZG93bjogJC5wcm94eSh0aGlzLmtleWRvd24sIHRoaXMpXG5cdFx0XHRcdFx0fV1cblx0XHRcdFx0XTtcblx0XHRcdH1cblx0XHRcdGVsc2UgaWYgKHRoaXMuY29tcG9uZW50ICYmIHRoaXMuaGFzSW5wdXQpeyAvLyBjb21wb25lbnQ6IGlucHV0ICsgYnV0dG9uXG5cdFx0XHRcdHRoaXMuX2V2ZW50cyA9IFtcblx0XHRcdFx0XHQvLyBGb3IgY29tcG9uZW50cyB0aGF0IGFyZSBub3QgcmVhZG9ubHksIGFsbG93IGtleWJvYXJkIG5hdlxuXHRcdFx0XHRcdFt0aGlzLmVsZW1lbnQuZmluZCgnaW5wdXQnKSwge1xuXHRcdFx0XHRcdFx0Zm9jdXM6ICQucHJveHkodGhpcy5zaG93LCB0aGlzKSxcblx0XHRcdFx0XHRcdGtleXVwOiAkLnByb3h5KHRoaXMudXBkYXRlLCB0aGlzKSxcblx0XHRcdFx0XHRcdGtleWRvd246ICQucHJveHkodGhpcy5rZXlkb3duLCB0aGlzKVxuXHRcdFx0XHRcdH1dLFxuXHRcdFx0XHRcdFt0aGlzLmNvbXBvbmVudCwge1xuXHRcdFx0XHRcdFx0Y2xpY2s6ICQucHJveHkodGhpcy5zaG93LCB0aGlzKVxuXHRcdFx0XHRcdH1dXG5cdFx0XHRcdF07XG5cdFx0XHR9XG5cdFx0XHRlbHNlIGlmICh0aGlzLmVsZW1lbnQuaXMoJ2RpdicpKSB7ICAvLyBpbmxpbmUgZGF0ZXBpY2tlclxuXHRcdFx0XHR0aGlzLmlzSW5saW5lID0gdHJ1ZTtcblx0XHRcdH1cblx0XHRcdGVsc2Uge1xuXHRcdFx0XHR0aGlzLl9ldmVudHMgPSBbXG5cdFx0XHRcdFx0W3RoaXMuZWxlbWVudCwge1xuXHRcdFx0XHRcdFx0Y2xpY2s6ICQucHJveHkodGhpcy5zaG93LCB0aGlzKVxuXHRcdFx0XHRcdH1dXG5cdFx0XHRcdF07XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuX3NlY29uZGFyeUV2ZW50cyA9IFtcblx0XHRcdFx0W3RoaXMucGlja2VyLCB7XG5cdFx0XHRcdFx0Y2xpY2s6ICQucHJveHkodGhpcy5jbGljaywgdGhpcylcblx0XHRcdFx0fV0sXG5cdFx0XHRcdFskKHdpbmRvdyksIHtcblx0XHRcdFx0XHRyZXNpemU6ICQucHJveHkodGhpcy5wbGFjZSwgdGhpcylcblx0XHRcdFx0fV0sXG5cdFx0XHRcdFskKGRvY3VtZW50KSwge1xuXHRcdFx0XHRcdG1vdXNlZG93bjogJC5wcm94eShmdW5jdGlvbiAoZSkge1xuXHRcdFx0XHRcdFx0Ly8gQ2xpY2tlZCBvdXRzaWRlIHRoZSBkYXRlcGlja2VyLCBoaWRlIGl0XG5cdFx0XHRcdFx0XHRpZiAoIShcblx0XHRcdFx0XHRcdFx0dGhpcy5lbGVtZW50LmlzKGUudGFyZ2V0KSB8fFxuXHRcdFx0XHRcdFx0XHR0aGlzLmVsZW1lbnQuZmluZChlLnRhcmdldCkuc2l6ZSgpIHx8XG5cdFx0XHRcdFx0XHRcdHRoaXMucGlja2VyLmlzKGUudGFyZ2V0KSB8fFxuXHRcdFx0XHRcdFx0XHR0aGlzLnBpY2tlci5maW5kKGUudGFyZ2V0KS5zaXplKClcblx0XHRcdFx0XHRcdCkpIHtcblx0XHRcdFx0XHRcdFx0dGhpcy5oaWRlKCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSwgdGhpcylcblx0XHRcdFx0fV1cblx0XHRcdF07XG5cdFx0fSxcblx0XHRfYXR0YWNoRXZlbnRzOiBmdW5jdGlvbigpe1xuXHRcdFx0dGhpcy5fZGV0YWNoRXZlbnRzKCk7XG5cdFx0XHR0aGlzLl9hcHBseUV2ZW50cyh0aGlzLl9ldmVudHMpO1xuXHRcdH0sXG5cdFx0X2RldGFjaEV2ZW50czogZnVuY3Rpb24oKXtcblx0XHRcdHRoaXMuX3VuYXBwbHlFdmVudHModGhpcy5fZXZlbnRzKTtcblx0XHR9LFxuXHRcdF9hdHRhY2hTZWNvbmRhcnlFdmVudHM6IGZ1bmN0aW9uKCl7XG5cdFx0XHR0aGlzLl9kZXRhY2hTZWNvbmRhcnlFdmVudHMoKTtcblx0XHRcdHRoaXMuX2FwcGx5RXZlbnRzKHRoaXMuX3NlY29uZGFyeUV2ZW50cyk7XG5cdFx0fSxcblx0XHRfZGV0YWNoU2Vjb25kYXJ5RXZlbnRzOiBmdW5jdGlvbigpe1xuXHRcdFx0dGhpcy5fdW5hcHBseUV2ZW50cyh0aGlzLl9zZWNvbmRhcnlFdmVudHMpO1xuXHRcdH0sXG5cdFx0X3RyaWdnZXI6IGZ1bmN0aW9uKGV2ZW50LCBhbHRkYXRlKXtcblx0XHRcdHZhciBkYXRlID0gYWx0ZGF0ZSB8fCB0aGlzLmRhdGUsXG5cdFx0XHRcdGxvY2FsX2RhdGUgPSBuZXcgRGF0ZShkYXRlLmdldFRpbWUoKSArIChkYXRlLmdldFRpbWV6b25lT2Zmc2V0KCkqNjAwMDApKTtcblxuXHRcdFx0dGhpcy5lbGVtZW50LnRyaWdnZXIoe1xuXHRcdFx0XHR0eXBlOiBldmVudCxcblx0XHRcdFx0ZGF0ZTogbG9jYWxfZGF0ZSxcblx0XHRcdFx0Zm9ybWF0OiAkLnByb3h5KGZ1bmN0aW9uKGFsdGZvcm1hdCl7XG5cdFx0XHRcdFx0dmFyIGZvcm1hdCA9IGFsdGZvcm1hdCB8fCB0aGlzLm8uZm9ybWF0O1xuXHRcdFx0XHRcdHJldHVybiBEUEdsb2JhbC5mb3JtYXREYXRlKGRhdGUsIGZvcm1hdCwgdGhpcy5vLmxhbmd1YWdlKTtcblx0XHRcdFx0fSwgdGhpcylcblx0XHRcdH0pO1xuXHRcdH0sXG5cblx0XHRzaG93OiBmdW5jdGlvbihlKSB7XG5cdFx0XHRpZiAoIXRoaXMuaXNJbmxpbmUpXG5cdFx0XHRcdHRoaXMucGlja2VyLmFwcGVuZFRvKCdib2R5Jyk7XG5cdFx0XHR0aGlzLnBpY2tlci5zaG93KCk7XG5cdFx0XHR0aGlzLmhlaWdodCA9IHRoaXMuY29tcG9uZW50ID8gdGhpcy5jb21wb25lbnQub3V0ZXJIZWlnaHQoKSA6IHRoaXMuZWxlbWVudC5vdXRlckhlaWdodCgpO1xuXHRcdFx0dGhpcy5wbGFjZSgpO1xuXHRcdFx0dGhpcy5fYXR0YWNoU2Vjb25kYXJ5RXZlbnRzKCk7XG5cdFx0XHRpZiAoZSkge1xuXHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLl90cmlnZ2VyKCdzaG93Jyk7XG5cdFx0fSxcblxuXHRcdGhpZGU6IGZ1bmN0aW9uKGUpe1xuXHRcdFx0aWYodGhpcy5pc0lubGluZSkgcmV0dXJuO1xuXHRcdFx0aWYgKCF0aGlzLnBpY2tlci5pcygnOnZpc2libGUnKSkgcmV0dXJuO1xuXHRcdFx0dGhpcy5waWNrZXIuaGlkZSgpLmRldGFjaCgpO1xuXHRcdFx0dGhpcy5fZGV0YWNoU2Vjb25kYXJ5RXZlbnRzKCk7XG5cdFx0XHR0aGlzLnZpZXdNb2RlID0gdGhpcy5vLnN0YXJ0Vmlldztcblx0XHRcdHRoaXMuc2hvd01vZGUoKTtcblxuXHRcdFx0aWYgKFxuXHRcdFx0XHR0aGlzLm8uZm9yY2VQYXJzZSAmJlxuXHRcdFx0XHQoXG5cdFx0XHRcdFx0dGhpcy5pc0lucHV0ICYmIHRoaXMuZWxlbWVudC52YWwoKSB8fFxuXHRcdFx0XHRcdHRoaXMuaGFzSW5wdXQgJiYgdGhpcy5lbGVtZW50LmZpbmQoJ2lucHV0JykudmFsKClcblx0XHRcdFx0KVxuXHRcdFx0KVxuXHRcdFx0XHR0aGlzLnNldFZhbHVlKCk7XG5cdFx0XHR0aGlzLl90cmlnZ2VyKCdoaWRlJyk7XG5cdFx0fSxcblxuXHRcdHJlbW92ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHR0aGlzLmhpZGUoKTtcblx0XHRcdHRoaXMuX2RldGFjaEV2ZW50cygpO1xuXHRcdFx0dGhpcy5fZGV0YWNoU2Vjb25kYXJ5RXZlbnRzKCk7XG5cdFx0XHR0aGlzLnBpY2tlci5yZW1vdmUoKTtcblx0XHRcdGRlbGV0ZSB0aGlzLmVsZW1lbnQuZGF0YSgpLmRhdGVwaWNrZXI7XG5cdFx0XHRpZiAoIXRoaXMuaXNJbnB1dCkge1xuXHRcdFx0XHRkZWxldGUgdGhpcy5lbGVtZW50LmRhdGEoKS5kYXRlO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRnZXREYXRlOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBkID0gdGhpcy5nZXRVVENEYXRlKCk7XG5cdFx0XHRyZXR1cm4gbmV3IERhdGUoZC5nZXRUaW1lKCkgKyAoZC5nZXRUaW1lem9uZU9mZnNldCgpKjYwMDAwKSk7XG5cdFx0fSxcblxuXHRcdGdldFVUQ0RhdGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZGF0ZTtcblx0XHR9LFxuXG5cdFx0c2V0RGF0ZTogZnVuY3Rpb24oZCkge1xuXHRcdFx0dGhpcy5zZXRVVENEYXRlKG5ldyBEYXRlKGQuZ2V0VGltZSgpIC0gKGQuZ2V0VGltZXpvbmVPZmZzZXQoKSo2MDAwMCkpKTtcblx0XHR9LFxuXG5cdFx0c2V0VVRDRGF0ZTogZnVuY3Rpb24oZCkge1xuXHRcdFx0dGhpcy5kYXRlID0gZDtcblx0XHRcdHRoaXMuc2V0VmFsdWUoKTtcblx0XHR9LFxuXG5cdFx0c2V0VmFsdWU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGZvcm1hdHRlZCA9IHRoaXMuZ2V0Rm9ybWF0dGVkRGF0ZSgpO1xuXHRcdFx0aWYgKCF0aGlzLmlzSW5wdXQpIHtcblx0XHRcdFx0aWYgKHRoaXMuY29tcG9uZW50KXtcblx0XHRcdFx0XHR0aGlzLmVsZW1lbnQuZmluZCgnaW5wdXQnKS52YWwoZm9ybWF0dGVkKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhpcy5lbGVtZW50LnZhbChmb3JtYXR0ZWQpO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRnZXRGb3JtYXR0ZWREYXRlOiBmdW5jdGlvbihmb3JtYXQpIHtcblx0XHRcdGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZClcblx0XHRcdFx0Zm9ybWF0ID0gdGhpcy5vLmZvcm1hdDtcblx0XHRcdHJldHVybiBEUEdsb2JhbC5mb3JtYXREYXRlKHRoaXMuZGF0ZSwgZm9ybWF0LCB0aGlzLm8ubGFuZ3VhZ2UpO1xuXHRcdH0sXG5cblx0XHRzZXRTdGFydERhdGU6IGZ1bmN0aW9uKHN0YXJ0RGF0ZSl7XG5cdFx0XHR0aGlzLl9wcm9jZXNzX29wdGlvbnMoe3N0YXJ0RGF0ZTogc3RhcnREYXRlfSk7XG5cdFx0XHR0aGlzLnVwZGF0ZSgpO1xuXHRcdFx0dGhpcy51cGRhdGVOYXZBcnJvd3MoKTtcblx0XHR9LFxuXG5cdFx0c2V0RW5kRGF0ZTogZnVuY3Rpb24oZW5kRGF0ZSl7XG5cdFx0XHR0aGlzLl9wcm9jZXNzX29wdGlvbnMoe2VuZERhdGU6IGVuZERhdGV9KTtcblx0XHRcdHRoaXMudXBkYXRlKCk7XG5cdFx0XHR0aGlzLnVwZGF0ZU5hdkFycm93cygpO1xuXHRcdH0sXG5cblx0XHRzZXREYXlzT2ZXZWVrRGlzYWJsZWQ6IGZ1bmN0aW9uKGRheXNPZldlZWtEaXNhYmxlZCl7XG5cdFx0XHR0aGlzLl9wcm9jZXNzX29wdGlvbnMoe2RheXNPZldlZWtEaXNhYmxlZDogZGF5c09mV2Vla0Rpc2FibGVkfSk7XG5cdFx0XHR0aGlzLnVwZGF0ZSgpO1xuXHRcdFx0dGhpcy51cGRhdGVOYXZBcnJvd3MoKTtcblx0XHR9LFxuXG5cdFx0cGxhY2U6IGZ1bmN0aW9uKCl7XG5cdFx0XHRcdFx0XHRpZih0aGlzLmlzSW5saW5lKSByZXR1cm47XG5cdFx0XHR2YXIgekluZGV4ID0gcGFyc2VJbnQodGhpcy5lbGVtZW50LnBhcmVudHMoKS5maWx0ZXIoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiAkKHRoaXMpLmNzcygnei1pbmRleCcpICE9ICdhdXRvJztcblx0XHRcdFx0XHRcdH0pLmZpcnN0KCkuY3NzKCd6LWluZGV4JykpKzEwO1xuXHRcdFx0dmFyIG9mZnNldCA9IHRoaXMuY29tcG9uZW50ID8gdGhpcy5jb21wb25lbnQucGFyZW50KCkub2Zmc2V0KCkgOiB0aGlzLmVsZW1lbnQub2Zmc2V0KCk7XG5cdFx0XHR2YXIgaGVpZ2h0ID0gdGhpcy5jb21wb25lbnQgPyB0aGlzLmNvbXBvbmVudC5vdXRlckhlaWdodCh0cnVlKSA6IHRoaXMuZWxlbWVudC5vdXRlckhlaWdodCh0cnVlKTtcblx0XHRcdHRoaXMucGlja2VyLmNzcyh7XG5cdFx0XHRcdHRvcDogb2Zmc2V0LnRvcCArIGhlaWdodCxcblx0XHRcdFx0bGVmdDogb2Zmc2V0LmxlZnQsXG5cdFx0XHRcdHpJbmRleDogekluZGV4XG5cdFx0XHR9KTtcblx0XHR9LFxuXG5cdFx0X2FsbG93X3VwZGF0ZTogdHJ1ZSxcblx0XHR1cGRhdGU6IGZ1bmN0aW9uKCl7XG5cdFx0XHRpZiAoIXRoaXMuX2FsbG93X3VwZGF0ZSkgcmV0dXJuO1xuXG5cdFx0XHR2YXIgZGF0ZSwgZnJvbUFyZ3MgPSBmYWxzZTtcblx0XHRcdGlmKGFyZ3VtZW50cyAmJiBhcmd1bWVudHMubGVuZ3RoICYmICh0eXBlb2YgYXJndW1lbnRzWzBdID09PSAnc3RyaW5nJyB8fCBhcmd1bWVudHNbMF0gaW5zdGFuY2VvZiBEYXRlKSkge1xuXHRcdFx0XHRkYXRlID0gYXJndW1lbnRzWzBdO1xuXHRcdFx0XHRmcm9tQXJncyA9IHRydWU7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkYXRlID0gdGhpcy5pc0lucHV0ID8gdGhpcy5lbGVtZW50LnZhbCgpIDogdGhpcy5lbGVtZW50LmRhdGEoJ2RhdGUnKSB8fCB0aGlzLmVsZW1lbnQuZmluZCgnaW5wdXQnKS52YWwoKTtcblx0XHRcdFx0ZGVsZXRlIHRoaXMuZWxlbWVudC5kYXRhKCkuZGF0ZTtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5kYXRlID0gRFBHbG9iYWwucGFyc2VEYXRlKGRhdGUsIHRoaXMuby5mb3JtYXQsIHRoaXMuby5sYW5ndWFnZSk7XG5cblx0XHRcdGlmKGZyb21BcmdzKSB0aGlzLnNldFZhbHVlKCk7XG5cblx0XHRcdGlmICh0aGlzLmRhdGUgPCB0aGlzLm8uc3RhcnREYXRlKSB7XG5cdFx0XHRcdHRoaXMudmlld0RhdGUgPSBuZXcgRGF0ZSh0aGlzLm8uc3RhcnREYXRlKTtcblx0XHRcdH0gZWxzZSBpZiAodGhpcy5kYXRlID4gdGhpcy5vLmVuZERhdGUpIHtcblx0XHRcdFx0dGhpcy52aWV3RGF0ZSA9IG5ldyBEYXRlKHRoaXMuby5lbmREYXRlKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMudmlld0RhdGUgPSBuZXcgRGF0ZSh0aGlzLmRhdGUpO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5maWxsKCk7XG5cdFx0fSxcblxuXHRcdGZpbGxEb3c6IGZ1bmN0aW9uKCl7XG5cdFx0XHR2YXIgZG93Q250ID0gdGhpcy5vLndlZWtTdGFydCxcblx0XHRcdGh0bWwgPSAnPHRyPic7XG5cdFx0XHRpZih0aGlzLm8uY2FsZW5kYXJXZWVrcyl7XG5cdFx0XHRcdHZhciBjZWxsID0gJzx0aCBjbGFzcz1cImN3XCI+Jm5ic3A7PC90aD4nO1xuXHRcdFx0XHRodG1sICs9IGNlbGw7XG5cdFx0XHRcdHRoaXMucGlja2VyLmZpbmQoJy5kYXRlcGlja2VyLWRheXMgdGhlYWQgdHI6Zmlyc3QtY2hpbGQnKS5wcmVwZW5kKGNlbGwpO1xuXHRcdFx0fVxuXHRcdFx0d2hpbGUgKGRvd0NudCA8IHRoaXMuby53ZWVrU3RhcnQgKyA3KSB7XG5cdFx0XHRcdGh0bWwgKz0gJzx0aCBjbGFzcz1cImRvd1wiPicrZGF0ZXNbdGhpcy5vLmxhbmd1YWdlXS5kYXlzTWluWyhkb3dDbnQrKyklN10rJzwvdGg+Jztcblx0XHRcdH1cblx0XHRcdGh0bWwgKz0gJzwvdHI+Jztcblx0XHRcdHRoaXMucGlja2VyLmZpbmQoJy5kYXRlcGlja2VyLWRheXMgdGhlYWQnKS5hcHBlbmQoaHRtbCk7XG5cdFx0fSxcblxuXHRcdGZpbGxNb250aHM6IGZ1bmN0aW9uKCl7XG5cdFx0XHR2YXIgaHRtbCA9ICcnLFxuXHRcdFx0aSA9IDA7XG5cdFx0XHR3aGlsZSAoaSA8IDEyKSB7XG5cdFx0XHRcdGh0bWwgKz0gJzxzcGFuIGNsYXNzPVwibW9udGhcIj4nK2RhdGVzW3RoaXMuby5sYW5ndWFnZV0ubW9udGhzU2hvcnRbaSsrXSsnPC9zcGFuPic7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLnBpY2tlci5maW5kKCcuZGF0ZXBpY2tlci1tb250aHMgdGQnKS5odG1sKGh0bWwpO1xuXHRcdH0sXG5cblx0XHRzZXRSYW5nZTogZnVuY3Rpb24ocmFuZ2Upe1xuXHRcdFx0aWYgKCFyYW5nZSB8fCAhcmFuZ2UubGVuZ3RoKVxuXHRcdFx0XHRkZWxldGUgdGhpcy5yYW5nZTtcblx0XHRcdGVsc2Vcblx0XHRcdFx0dGhpcy5yYW5nZSA9ICQubWFwKHJhbmdlLCBmdW5jdGlvbihkKXsgcmV0dXJuIGQudmFsdWVPZigpOyB9KTtcblx0XHRcdHRoaXMuZmlsbCgpO1xuXHRcdH0sXG5cblx0XHRnZXRDbGFzc05hbWVzOiBmdW5jdGlvbihkYXRlKXtcblx0XHRcdHZhciBjbHMgPSBbXSxcblx0XHRcdFx0eWVhciA9IHRoaXMudmlld0RhdGUuZ2V0VVRDRnVsbFllYXIoKSxcblx0XHRcdFx0bW9udGggPSB0aGlzLnZpZXdEYXRlLmdldFVUQ01vbnRoKCksXG5cdFx0XHRcdGN1cnJlbnREYXRlID0gdGhpcy5kYXRlLnZhbHVlT2YoKSxcblx0XHRcdFx0dG9kYXkgPSBuZXcgRGF0ZSgpO1xuXHRcdFx0aWYgKGRhdGUuZ2V0VVRDRnVsbFllYXIoKSA8IHllYXIgfHwgKGRhdGUuZ2V0VVRDRnVsbFllYXIoKSA9PSB5ZWFyICYmIGRhdGUuZ2V0VVRDTW9udGgoKSA8IG1vbnRoKSkge1xuXHRcdFx0XHRjbHMucHVzaCgnb2xkJyk7XG5cdFx0XHR9IGVsc2UgaWYgKGRhdGUuZ2V0VVRDRnVsbFllYXIoKSA+IHllYXIgfHwgKGRhdGUuZ2V0VVRDRnVsbFllYXIoKSA9PSB5ZWFyICYmIGRhdGUuZ2V0VVRDTW9udGgoKSA+IG1vbnRoKSkge1xuXHRcdFx0XHRjbHMucHVzaCgnbmV3Jyk7XG5cdFx0XHR9XG5cdFx0XHQvLyBDb21wYXJlIGludGVybmFsIFVUQyBkYXRlIHdpdGggbG9jYWwgdG9kYXksIG5vdCBVVEMgdG9kYXlcblx0XHRcdGlmICh0aGlzLm8udG9kYXlIaWdobGlnaHQgJiZcblx0XHRcdFx0ZGF0ZS5nZXRVVENGdWxsWWVhcigpID09IHRvZGF5LmdldEZ1bGxZZWFyKCkgJiZcblx0XHRcdFx0ZGF0ZS5nZXRVVENNb250aCgpID09IHRvZGF5LmdldE1vbnRoKCkgJiZcblx0XHRcdFx0ZGF0ZS5nZXRVVENEYXRlKCkgPT0gdG9kYXkuZ2V0RGF0ZSgpKSB7XG5cdFx0XHRcdGNscy5wdXNoKCd0b2RheScpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKGN1cnJlbnREYXRlICYmIGRhdGUudmFsdWVPZigpID09IGN1cnJlbnREYXRlKSB7XG5cdFx0XHRcdGNscy5wdXNoKCdhY3RpdmUnKTtcblx0XHRcdH1cblx0XHRcdGlmIChkYXRlLnZhbHVlT2YoKSA8IHRoaXMuby5zdGFydERhdGUgfHwgZGF0ZS52YWx1ZU9mKCkgPiB0aGlzLm8uZW5kRGF0ZSB8fFxuXHRcdFx0XHQkLmluQXJyYXkoZGF0ZS5nZXRVVENEYXkoKSwgdGhpcy5vLmRheXNPZldlZWtEaXNhYmxlZCkgIT09IC0xKSB7XG5cdFx0XHRcdGNscy5wdXNoKCdkaXNhYmxlZCcpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHRoaXMucmFuZ2Upe1xuXHRcdFx0XHRpZiAoZGF0ZSA+IHRoaXMucmFuZ2VbMF0gJiYgZGF0ZSA8IHRoaXMucmFuZ2VbdGhpcy5yYW5nZS5sZW5ndGgtMV0pe1xuXHRcdFx0XHRcdGNscy5wdXNoKCdyYW5nZScpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICgkLmluQXJyYXkoZGF0ZS52YWx1ZU9mKCksIHRoaXMucmFuZ2UpICE9IC0xKXtcblx0XHRcdFx0XHRjbHMucHVzaCgnc2VsZWN0ZWQnKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGNscztcblx0XHR9LFxuXG5cdFx0ZmlsbDogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgZCA9IG5ldyBEYXRlKHRoaXMudmlld0RhdGUpLFxuXHRcdFx0XHR5ZWFyID0gZC5nZXRVVENGdWxsWWVhcigpLFxuXHRcdFx0XHRtb250aCA9IGQuZ2V0VVRDTW9udGgoKSxcblx0XHRcdFx0c3RhcnRZZWFyID0gdGhpcy5vLnN0YXJ0RGF0ZSAhPT0gLUluZmluaXR5ID8gdGhpcy5vLnN0YXJ0RGF0ZS5nZXRVVENGdWxsWWVhcigpIDogLUluZmluaXR5LFxuXHRcdFx0XHRzdGFydE1vbnRoID0gdGhpcy5vLnN0YXJ0RGF0ZSAhPT0gLUluZmluaXR5ID8gdGhpcy5vLnN0YXJ0RGF0ZS5nZXRVVENNb250aCgpIDogLUluZmluaXR5LFxuXHRcdFx0XHRlbmRZZWFyID0gdGhpcy5vLmVuZERhdGUgIT09IEluZmluaXR5ID8gdGhpcy5vLmVuZERhdGUuZ2V0VVRDRnVsbFllYXIoKSA6IEluZmluaXR5LFxuXHRcdFx0XHRlbmRNb250aCA9IHRoaXMuby5lbmREYXRlICE9PSBJbmZpbml0eSA/IHRoaXMuby5lbmREYXRlLmdldFVUQ01vbnRoKCkgOiBJbmZpbml0eSxcblx0XHRcdFx0Y3VycmVudERhdGUgPSB0aGlzLmRhdGUgJiYgdGhpcy5kYXRlLnZhbHVlT2YoKSxcblx0XHRcdFx0dG9vbHRpcDtcblx0XHRcdHRoaXMucGlja2VyLmZpbmQoJy5kYXRlcGlja2VyLWRheXMgdGhlYWQgdGguZGF0ZXBpY2tlci1zd2l0Y2gnKVxuXHRcdFx0XHRcdFx0LnRleHQoZGF0ZXNbdGhpcy5vLmxhbmd1YWdlXS5tb250aHNbbW9udGhdKycgJyt5ZWFyKTtcblx0XHRcdHRoaXMucGlja2VyLmZpbmQoJ3Rmb290IHRoLnRvZGF5Jylcblx0XHRcdFx0XHRcdC50ZXh0KGRhdGVzW3RoaXMuby5sYW5ndWFnZV0udG9kYXkpXG5cdFx0XHRcdFx0XHQudG9nZ2xlKHRoaXMuby50b2RheUJ0biAhPT0gZmFsc2UpO1xuXHRcdFx0dGhpcy5waWNrZXIuZmluZCgndGZvb3QgdGguY2xlYXInKVxuXHRcdFx0XHRcdFx0LnRleHQoZGF0ZXNbdGhpcy5vLmxhbmd1YWdlXS5jbGVhcilcblx0XHRcdFx0XHRcdC50b2dnbGUodGhpcy5vLmNsZWFyQnRuICE9PSBmYWxzZSk7XG5cdFx0XHR0aGlzLnVwZGF0ZU5hdkFycm93cygpO1xuXHRcdFx0dGhpcy5maWxsTW9udGhzKCk7XG5cdFx0XHR2YXIgcHJldk1vbnRoID0gVVRDRGF0ZSh5ZWFyLCBtb250aC0xLCAyOCwwLDAsMCwwKSxcblx0XHRcdFx0ZGF5ID0gRFBHbG9iYWwuZ2V0RGF5c0luTW9udGgocHJldk1vbnRoLmdldFVUQ0Z1bGxZZWFyKCksIHByZXZNb250aC5nZXRVVENNb250aCgpKTtcblx0XHRcdHByZXZNb250aC5zZXRVVENEYXRlKGRheSk7XG5cdFx0XHRwcmV2TW9udGguc2V0VVRDRGF0ZShkYXkgLSAocHJldk1vbnRoLmdldFVUQ0RheSgpIC0gdGhpcy5vLndlZWtTdGFydCArIDcpJTcpO1xuXHRcdFx0dmFyIG5leHRNb250aCA9IG5ldyBEYXRlKHByZXZNb250aCk7XG5cdFx0XHRuZXh0TW9udGguc2V0VVRDRGF0ZShuZXh0TW9udGguZ2V0VVRDRGF0ZSgpICsgNDIpO1xuXHRcdFx0bmV4dE1vbnRoID0gbmV4dE1vbnRoLnZhbHVlT2YoKTtcblx0XHRcdHZhciBodG1sID0gW107XG5cdFx0XHR2YXIgY2xzTmFtZTtcblx0XHRcdHdoaWxlKHByZXZNb250aC52YWx1ZU9mKCkgPCBuZXh0TW9udGgpIHtcblx0XHRcdFx0aWYgKHByZXZNb250aC5nZXRVVENEYXkoKSA9PSB0aGlzLm8ud2Vla1N0YXJ0KSB7XG5cdFx0XHRcdFx0aHRtbC5wdXNoKCc8dHI+Jyk7XG5cdFx0XHRcdFx0aWYodGhpcy5vLmNhbGVuZGFyV2Vla3Mpe1xuXHRcdFx0XHRcdFx0Ly8gSVNPIDg2MDE6IEZpcnN0IHdlZWsgY29udGFpbnMgZmlyc3QgdGh1cnNkYXkuXG5cdFx0XHRcdFx0XHQvLyBJU08gYWxzbyBzdGF0ZXMgd2VlayBzdGFydHMgb24gTW9uZGF5LCBidXQgd2UgY2FuIGJlIG1vcmUgYWJzdHJhY3QgaGVyZS5cblx0XHRcdFx0XHRcdHZhclxuXHRcdFx0XHRcdFx0XHQvLyBTdGFydCBvZiBjdXJyZW50IHdlZWs6IGJhc2VkIG9uIHdlZWtzdGFydC9jdXJyZW50IGRhdGVcblx0XHRcdFx0XHRcdFx0d3MgPSBuZXcgRGF0ZSgrcHJldk1vbnRoICsgKHRoaXMuby53ZWVrU3RhcnQgLSBwcmV2TW9udGguZ2V0VVRDRGF5KCkgLSA3KSAlIDcgKiA4NjRlNSksXG5cdFx0XHRcdFx0XHRcdC8vIFRodXJzZGF5IG9mIHRoaXMgd2Vla1xuXHRcdFx0XHRcdFx0XHR0aCA9IG5ldyBEYXRlKCt3cyArICg3ICsgNCAtIHdzLmdldFVUQ0RheSgpKSAlIDcgKiA4NjRlNSksXG5cdFx0XHRcdFx0XHRcdC8vIEZpcnN0IFRodXJzZGF5IG9mIHllYXIsIHllYXIgZnJvbSB0aHVyc2RheVxuXHRcdFx0XHRcdFx0XHR5dGggPSBuZXcgRGF0ZSgrKHl0aCA9IFVUQ0RhdGUodGguZ2V0VVRDRnVsbFllYXIoKSwgMCwgMSkpICsgKDcgKyA0IC0geXRoLmdldFVUQ0RheSgpKSU3Kjg2NGU1KSxcblx0XHRcdFx0XHRcdFx0Ly8gQ2FsZW5kYXIgd2VlazogbXMgYmV0d2VlbiB0aHVyc2RheXMsIGRpdiBtcyBwZXIgZGF5LCBkaXYgNyBkYXlzXG5cdFx0XHRcdFx0XHRcdGNhbFdlZWsgPSAgKHRoIC0geXRoKSAvIDg2NGU1IC8gNyArIDE7XG5cdFx0XHRcdFx0XHRodG1sLnB1c2goJzx0ZCBjbGFzcz1cImN3XCI+JysgY2FsV2VlayArJzwvdGQ+Jyk7XG5cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0Y2xzTmFtZSA9IHRoaXMuZ2V0Q2xhc3NOYW1lcyhwcmV2TW9udGgpO1xuXHRcdFx0XHRjbHNOYW1lLnB1c2goJ2RheScpO1xuXG5cdFx0XHRcdHZhciBiZWZvcmUgPSB0aGlzLm8uYmVmb3JlU2hvd0RheShwcmV2TW9udGgpO1xuXHRcdFx0XHRpZiAoYmVmb3JlID09PSB1bmRlZmluZWQpXG5cdFx0XHRcdFx0YmVmb3JlID0ge307XG5cdFx0XHRcdGVsc2UgaWYgKHR5cGVvZihiZWZvcmUpID09PSAnYm9vbGVhbicpXG5cdFx0XHRcdFx0YmVmb3JlID0ge2VuYWJsZWQ6IGJlZm9yZX07XG5cdFx0XHRcdGVsc2UgaWYgKHR5cGVvZihiZWZvcmUpID09PSAnc3RyaW5nJylcblx0XHRcdFx0XHRiZWZvcmUgPSB7Y2xhc3NlczogYmVmb3JlfTtcblx0XHRcdFx0aWYgKGJlZm9yZS5lbmFibGVkID09PSBmYWxzZSlcblx0XHRcdFx0XHRjbHNOYW1lLnB1c2goJ2Rpc2FibGVkJyk7XG5cdFx0XHRcdGlmIChiZWZvcmUuY2xhc3Nlcylcblx0XHRcdFx0XHRjbHNOYW1lID0gY2xzTmFtZS5jb25jYXQoYmVmb3JlLmNsYXNzZXMuc3BsaXQoL1xccysvKSk7XG5cdFx0XHRcdGlmIChiZWZvcmUudG9vbHRpcClcblx0XHRcdFx0XHR0b29sdGlwID0gYmVmb3JlLnRvb2x0aXA7XG5cblx0XHRcdFx0Y2xzTmFtZSA9ICQudW5pcXVlKGNsc05hbWUpO1xuXHRcdFx0XHRodG1sLnB1c2goJzx0ZCBjbGFzcz1cIicrY2xzTmFtZS5qb2luKCcgJykrJ1wiJyArICh0b29sdGlwID8gJyB0aXRsZT1cIicrdG9vbHRpcCsnXCInIDogJycpICsgJz4nK3ByZXZNb250aC5nZXRVVENEYXRlKCkgKyAnPC90ZD4nKTtcblx0XHRcdFx0aWYgKHByZXZNb250aC5nZXRVVENEYXkoKSA9PSB0aGlzLm8ud2Vla0VuZCkge1xuXHRcdFx0XHRcdGh0bWwucHVzaCgnPC90cj4nKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRwcmV2TW9udGguc2V0VVRDRGF0ZShwcmV2TW9udGguZ2V0VVRDRGF0ZSgpKzEpO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5waWNrZXIuZmluZCgnLmRhdGVwaWNrZXItZGF5cyB0Ym9keScpLmVtcHR5KCkuYXBwZW5kKGh0bWwuam9pbignJykpO1xuXHRcdFx0dmFyIGN1cnJlbnRZZWFyID0gdGhpcy5kYXRlICYmIHRoaXMuZGF0ZS5nZXRVVENGdWxsWWVhcigpO1xuXG5cdFx0XHR2YXIgbW9udGhzID0gdGhpcy5waWNrZXIuZmluZCgnLmRhdGVwaWNrZXItbW9udGhzJylcblx0XHRcdFx0XHRcdC5maW5kKCd0aDplcSgxKScpXG5cdFx0XHRcdFx0XHRcdC50ZXh0KHllYXIpXG5cdFx0XHRcdFx0XHRcdC5lbmQoKVxuXHRcdFx0XHRcdFx0LmZpbmQoJ3NwYW4nKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XG5cdFx0XHRpZiAoY3VycmVudFllYXIgJiYgY3VycmVudFllYXIgPT0geWVhcikge1xuXHRcdFx0XHRtb250aHMuZXEodGhpcy5kYXRlLmdldFVUQ01vbnRoKCkpLmFkZENsYXNzKCdhY3RpdmUnKTtcblx0XHRcdH1cblx0XHRcdGlmICh5ZWFyIDwgc3RhcnRZZWFyIHx8IHllYXIgPiBlbmRZZWFyKSB7XG5cdFx0XHRcdG1vbnRocy5hZGRDbGFzcygnZGlzYWJsZWQnKTtcblx0XHRcdH1cblx0XHRcdGlmICh5ZWFyID09IHN0YXJ0WWVhcikge1xuXHRcdFx0XHRtb250aHMuc2xpY2UoMCwgc3RhcnRNb250aCkuYWRkQ2xhc3MoJ2Rpc2FibGVkJyk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoeWVhciA9PSBlbmRZZWFyKSB7XG5cdFx0XHRcdG1vbnRocy5zbGljZShlbmRNb250aCsxKS5hZGRDbGFzcygnZGlzYWJsZWQnKTtcblx0XHRcdH1cblxuXHRcdFx0aHRtbCA9ICcnO1xuXHRcdFx0eWVhciA9IHBhcnNlSW50KHllYXIvMTAsIDEwKSAqIDEwO1xuXHRcdFx0dmFyIHllYXJDb250ID0gdGhpcy5waWNrZXIuZmluZCgnLmRhdGVwaWNrZXIteWVhcnMnKVxuXHRcdFx0XHRcdFx0XHRcdC5maW5kKCd0aDplcSgxKScpXG5cdFx0XHRcdFx0XHRcdFx0XHQudGV4dCh5ZWFyICsgJy0nICsgKHllYXIgKyA5KSlcblx0XHRcdFx0XHRcdFx0XHRcdC5lbmQoKVxuXHRcdFx0XHRcdFx0XHRcdC5maW5kKCd0ZCcpO1xuXHRcdFx0eWVhciAtPSAxO1xuXHRcdFx0Zm9yICh2YXIgaSA9IC0xOyBpIDwgMTE7IGkrKykge1xuXHRcdFx0XHRodG1sICs9ICc8c3BhbiBjbGFzcz1cInllYXInKyhpID09IC0xID8gJyBvbGQnIDogaSA9PSAxMCA/ICcgbmV3JyA6ICcnKSsoY3VycmVudFllYXIgPT0geWVhciA/ICcgYWN0aXZlJyA6ICcnKSsoeWVhciA8IHN0YXJ0WWVhciB8fCB5ZWFyID4gZW5kWWVhciA/ICcgZGlzYWJsZWQnIDogJycpKydcIj4nK3llYXIrJzwvc3Bhbj4nO1xuXHRcdFx0XHR5ZWFyICs9IDE7XG5cdFx0XHR9XG5cdFx0XHR5ZWFyQ29udC5odG1sKGh0bWwpO1xuXHRcdH0sXG5cblx0XHR1cGRhdGVOYXZBcnJvd3M6IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCF0aGlzLl9hbGxvd191cGRhdGUpIHJldHVybjtcblxuXHRcdFx0dmFyIGQgPSBuZXcgRGF0ZSh0aGlzLnZpZXdEYXRlKSxcblx0XHRcdFx0eWVhciA9IGQuZ2V0VVRDRnVsbFllYXIoKSxcblx0XHRcdFx0bW9udGggPSBkLmdldFVUQ01vbnRoKCk7XG5cdFx0XHRzd2l0Y2ggKHRoaXMudmlld01vZGUpIHtcblx0XHRcdFx0Y2FzZSAwOlxuXHRcdFx0XHRcdGlmICh0aGlzLm8uc3RhcnREYXRlICE9PSAtSW5maW5pdHkgJiYgeWVhciA8PSB0aGlzLm8uc3RhcnREYXRlLmdldFVUQ0Z1bGxZZWFyKCkgJiYgbW9udGggPD0gdGhpcy5vLnN0YXJ0RGF0ZS5nZXRVVENNb250aCgpKSB7XG5cdFx0XHRcdFx0XHR0aGlzLnBpY2tlci5maW5kKCcucHJldicpLmNzcyh7dmlzaWJpbGl0eTogJ2hpZGRlbid9KTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dGhpcy5waWNrZXIuZmluZCgnLnByZXYnKS5jc3Moe3Zpc2liaWxpdHk6ICd2aXNpYmxlJ30pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAodGhpcy5vLmVuZERhdGUgIT09IEluZmluaXR5ICYmIHllYXIgPj0gdGhpcy5vLmVuZERhdGUuZ2V0VVRDRnVsbFllYXIoKSAmJiBtb250aCA+PSB0aGlzLm8uZW5kRGF0ZS5nZXRVVENNb250aCgpKSB7XG5cdFx0XHRcdFx0XHR0aGlzLnBpY2tlci5maW5kKCcubmV4dCcpLmNzcyh7dmlzaWJpbGl0eTogJ2hpZGRlbid9KTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dGhpcy5waWNrZXIuZmluZCgnLm5leHQnKS5jc3Moe3Zpc2liaWxpdHk6ICd2aXNpYmxlJ30pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAxOlxuXHRcdFx0XHRjYXNlIDI6XG5cdFx0XHRcdFx0aWYgKHRoaXMuby5zdGFydERhdGUgIT09IC1JbmZpbml0eSAmJiB5ZWFyIDw9IHRoaXMuby5zdGFydERhdGUuZ2V0VVRDRnVsbFllYXIoKSkge1xuXHRcdFx0XHRcdFx0dGhpcy5waWNrZXIuZmluZCgnLnByZXYnKS5jc3Moe3Zpc2liaWxpdHk6ICdoaWRkZW4nfSk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHRoaXMucGlja2VyLmZpbmQoJy5wcmV2JykuY3NzKHt2aXNpYmlsaXR5OiAndmlzaWJsZSd9KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKHRoaXMuby5lbmREYXRlICE9PSBJbmZpbml0eSAmJiB5ZWFyID49IHRoaXMuby5lbmREYXRlLmdldFVUQ0Z1bGxZZWFyKCkpIHtcblx0XHRcdFx0XHRcdHRoaXMucGlja2VyLmZpbmQoJy5uZXh0JykuY3NzKHt2aXNpYmlsaXR5OiAnaGlkZGVuJ30pO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR0aGlzLnBpY2tlci5maW5kKCcubmV4dCcpLmNzcyh7dmlzaWJpbGl0eTogJ3Zpc2libGUnfSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRjbGljazogZnVuY3Rpb24oZSkge1xuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0dmFyIHRhcmdldCA9ICQoZS50YXJnZXQpLmNsb3Nlc3QoJ3NwYW4sIHRkLCB0aCcpO1xuXHRcdFx0aWYgKHRhcmdldC5sZW5ndGggPT0gMSkge1xuXHRcdFx0XHRzd2l0Y2godGFyZ2V0WzBdLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpIHtcblx0XHRcdFx0XHRjYXNlICd0aCc6XG5cdFx0XHRcdFx0XHRzd2l0Y2godGFyZ2V0WzBdLmNsYXNzTmFtZSkge1xuXHRcdFx0XHRcdFx0XHRjYXNlICdkYXRlcGlja2VyLXN3aXRjaCc6XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5zaG93TW9kZSgxKTtcblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0Y2FzZSAncHJldic6XG5cdFx0XHRcdFx0XHRcdGNhc2UgJ25leHQnOlxuXHRcdFx0XHRcdFx0XHRcdHZhciBkaXIgPSBEUEdsb2JhbC5tb2Rlc1t0aGlzLnZpZXdNb2RlXS5uYXZTdGVwICogKHRhcmdldFswXS5jbGFzc05hbWUgPT0gJ3ByZXYnID8gLTEgOiAxKTtcblx0XHRcdFx0XHRcdFx0XHRzd2l0Y2godGhpcy52aWV3TW9kZSl7XG5cdFx0XHRcdFx0XHRcdFx0XHRjYXNlIDA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRoaXMudmlld0RhdGUgPSB0aGlzLm1vdmVNb250aCh0aGlzLnZpZXdEYXRlLCBkaXIpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHRcdGNhc2UgMTpcblx0XHRcdFx0XHRcdFx0XHRcdGNhc2UgMjpcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGhpcy52aWV3RGF0ZSA9IHRoaXMubW92ZVllYXIodGhpcy52aWV3RGF0ZSwgZGlyKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdHRoaXMuZmlsbCgpO1xuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRjYXNlICd0b2RheSc6XG5cdFx0XHRcdFx0XHRcdFx0dmFyIGRhdGUgPSBuZXcgRGF0ZSgpO1xuXHRcdFx0XHRcdFx0XHRcdGRhdGUgPSBVVENEYXRlKGRhdGUuZ2V0RnVsbFllYXIoKSwgZGF0ZS5nZXRNb250aCgpLCBkYXRlLmdldERhdGUoKSwgMCwgMCwgMCk7XG5cblx0XHRcdFx0XHRcdFx0XHR0aGlzLnNob3dNb2RlKC0yKTtcblx0XHRcdFx0XHRcdFx0XHR2YXIgd2hpY2ggPSB0aGlzLm8udG9kYXlCdG4gPT0gJ2xpbmtlZCcgPyBudWxsIDogJ3ZpZXcnO1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuX3NldERhdGUoZGF0ZSwgd2hpY2gpO1xuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRjYXNlICdjbGVhcic6XG5cdFx0XHRcdFx0XHRcdFx0dmFyIGVsZW1lbnQ7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKHRoaXMuaXNJbnB1dClcblx0XHRcdFx0XHRcdFx0XHRcdGVsZW1lbnQgPSB0aGlzLmVsZW1lbnQ7XG5cdFx0XHRcdFx0XHRcdFx0ZWxzZSBpZiAodGhpcy5jb21wb25lbnQpXG5cdFx0XHRcdFx0XHRcdFx0XHRlbGVtZW50ID0gdGhpcy5lbGVtZW50LmZpbmQoJ2lucHV0Jyk7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKGVsZW1lbnQpXG5cdFx0XHRcdFx0XHRcdFx0XHRlbGVtZW50LnZhbChcIlwiKS5jaGFuZ2UoKTtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLl90cmlnZ2VyKCdjaGFuZ2VEYXRlJyk7XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy51cGRhdGUoKTtcblx0XHRcdFx0XHRcdFx0XHRpZiAodGhpcy5vLmF1dG9jbG9zZSlcblx0XHRcdFx0XHRcdFx0XHRcdHRoaXMuaGlkZSgpO1xuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnc3Bhbic6XG5cdFx0XHRcdFx0XHRpZiAoIXRhcmdldC5pcygnLmRpc2FibGVkJykpIHtcblx0XHRcdFx0XHRcdFx0dGhpcy52aWV3RGF0ZS5zZXRVVENEYXRlKDEpO1xuXHRcdFx0XHRcdFx0XHRpZiAodGFyZ2V0LmlzKCcubW9udGgnKSkge1xuXHRcdFx0XHRcdFx0XHRcdHZhciBkYXkgPSAxO1xuXHRcdFx0XHRcdFx0XHRcdHZhciBtb250aCA9IHRhcmdldC5wYXJlbnQoKS5maW5kKCdzcGFuJykuaW5kZXgodGFyZ2V0KTtcblx0XHRcdFx0XHRcdFx0XHR2YXIgeWVhciA9IHRoaXMudmlld0RhdGUuZ2V0VVRDRnVsbFllYXIoKTtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLnZpZXdEYXRlLnNldFVUQ01vbnRoKG1vbnRoKTtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLl90cmlnZ2VyKCdjaGFuZ2VNb250aCcsIHRoaXMudmlld0RhdGUpO1xuXHRcdFx0XHRcdFx0XHRcdGlmICh0aGlzLm8ubWluVmlld01vZGUgPT09IDEpIHtcblx0XHRcdFx0XHRcdFx0XHRcdHRoaXMuX3NldERhdGUoVVRDRGF0ZSh5ZWFyLCBtb250aCwgZGF5LDAsMCwwLDApKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0dmFyIHllYXIgPSBwYXJzZUludCh0YXJnZXQudGV4dCgpLCAxMCl8fDA7XG5cdFx0XHRcdFx0XHRcdFx0dmFyIGRheSA9IDE7XG5cdFx0XHRcdFx0XHRcdFx0dmFyIG1vbnRoID0gMDtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLnZpZXdEYXRlLnNldFVUQ0Z1bGxZZWFyKHllYXIpO1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuX3RyaWdnZXIoJ2NoYW5nZVllYXInLCB0aGlzLnZpZXdEYXRlKTtcblx0XHRcdFx0XHRcdFx0XHRpZiAodGhpcy5vLm1pblZpZXdNb2RlID09PSAyKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR0aGlzLl9zZXREYXRlKFVUQ0RhdGUoeWVhciwgbW9udGgsIGRheSwwLDAsMCwwKSk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHRoaXMuc2hvd01vZGUoLTEpO1xuXHRcdFx0XHRcdFx0XHR0aGlzLmZpbGwoKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3RkJzpcblx0XHRcdFx0XHRcdGlmICh0YXJnZXQuaXMoJy5kYXknKSAmJiAhdGFyZ2V0LmlzKCcuZGlzYWJsZWQnKSl7XG5cdFx0XHRcdFx0XHRcdHZhciBkYXkgPSBwYXJzZUludCh0YXJnZXQudGV4dCgpLCAxMCl8fDE7XG5cdFx0XHRcdFx0XHRcdHZhciB5ZWFyID0gdGhpcy52aWV3RGF0ZS5nZXRVVENGdWxsWWVhcigpLFxuXHRcdFx0XHRcdFx0XHRcdG1vbnRoID0gdGhpcy52aWV3RGF0ZS5nZXRVVENNb250aCgpO1xuXHRcdFx0XHRcdFx0XHRpZiAodGFyZ2V0LmlzKCcub2xkJykpIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAobW9udGggPT09IDApIHtcblx0XHRcdFx0XHRcdFx0XHRcdG1vbnRoID0gMTE7XG5cdFx0XHRcdFx0XHRcdFx0XHR5ZWFyIC09IDE7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdG1vbnRoIC09IDE7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKHRhcmdldC5pcygnLm5ldycpKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKG1vbnRoID09IDExKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRtb250aCA9IDA7XG5cdFx0XHRcdFx0XHRcdFx0XHR5ZWFyICs9IDE7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdG1vbnRoICs9IDE7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHRoaXMuX3NldERhdGUoVVRDRGF0ZSh5ZWFyLCBtb250aCwgZGF5LDAsMCwwLDApKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdF9zZXREYXRlOiBmdW5jdGlvbihkYXRlLCB3aGljaCl7XG5cdFx0XHRpZiAoIXdoaWNoIHx8IHdoaWNoID09ICdkYXRlJylcblx0XHRcdFx0dGhpcy5kYXRlID0gbmV3IERhdGUoZGF0ZSk7XG5cdFx0XHRpZiAoIXdoaWNoIHx8IHdoaWNoICA9PSAndmlldycpXG5cdFx0XHRcdHRoaXMudmlld0RhdGUgPSBuZXcgRGF0ZShkYXRlKTtcblx0XHRcdHRoaXMuZmlsbCgpO1xuXHRcdFx0dGhpcy5zZXRWYWx1ZSgpO1xuXHRcdFx0dGhpcy5fdHJpZ2dlcignY2hhbmdlRGF0ZScpO1xuXHRcdFx0dmFyIGVsZW1lbnQ7XG5cdFx0XHRpZiAodGhpcy5pc0lucHV0KSB7XG5cdFx0XHRcdGVsZW1lbnQgPSB0aGlzLmVsZW1lbnQ7XG5cdFx0XHR9IGVsc2UgaWYgKHRoaXMuY29tcG9uZW50KXtcblx0XHRcdFx0ZWxlbWVudCA9IHRoaXMuZWxlbWVudC5maW5kKCdpbnB1dCcpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKGVsZW1lbnQpIHtcblx0XHRcdFx0ZWxlbWVudC5jaGFuZ2UoKTtcblx0XHRcdFx0aWYgKHRoaXMuby5hdXRvY2xvc2UgJiYgKCF3aGljaCB8fCB3aGljaCA9PSAnZGF0ZScpKSB7XG5cdFx0XHRcdFx0dGhpcy5oaWRlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0bW92ZU1vbnRoOiBmdW5jdGlvbihkYXRlLCBkaXIpe1xuXHRcdFx0aWYgKCFkaXIpIHJldHVybiBkYXRlO1xuXHRcdFx0dmFyIG5ld19kYXRlID0gbmV3IERhdGUoZGF0ZS52YWx1ZU9mKCkpLFxuXHRcdFx0XHRkYXkgPSBuZXdfZGF0ZS5nZXRVVENEYXRlKCksXG5cdFx0XHRcdG1vbnRoID0gbmV3X2RhdGUuZ2V0VVRDTW9udGgoKSxcblx0XHRcdFx0bWFnID0gTWF0aC5hYnMoZGlyKSxcblx0XHRcdFx0bmV3X21vbnRoLCB0ZXN0O1xuXHRcdFx0ZGlyID0gZGlyID4gMCA/IDEgOiAtMTtcblx0XHRcdGlmIChtYWcgPT0gMSl7XG5cdFx0XHRcdHRlc3QgPSBkaXIgPT0gLTFcblx0XHRcdFx0XHQvLyBJZiBnb2luZyBiYWNrIG9uZSBtb250aCwgbWFrZSBzdXJlIG1vbnRoIGlzIG5vdCBjdXJyZW50IG1vbnRoXG5cdFx0XHRcdFx0Ly8gKGVnLCBNYXIgMzEgLT4gRmViIDMxID09IEZlYiAyOCwgbm90IE1hciAwMilcblx0XHRcdFx0XHQ/IGZ1bmN0aW9uKCl7IHJldHVybiBuZXdfZGF0ZS5nZXRVVENNb250aCgpID09IG1vbnRoOyB9XG5cdFx0XHRcdFx0Ly8gSWYgZ29pbmcgZm9yd2FyZCBvbmUgbW9udGgsIG1ha2Ugc3VyZSBtb250aCBpcyBhcyBleHBlY3RlZFxuXHRcdFx0XHRcdC8vIChlZywgSmFuIDMxIC0+IEZlYiAzMSA9PSBGZWIgMjgsIG5vdCBNYXIgMDIpXG5cdFx0XHRcdFx0OiBmdW5jdGlvbigpeyByZXR1cm4gbmV3X2RhdGUuZ2V0VVRDTW9udGgoKSAhPSBuZXdfbW9udGg7IH07XG5cdFx0XHRcdG5ld19tb250aCA9IG1vbnRoICsgZGlyO1xuXHRcdFx0XHRuZXdfZGF0ZS5zZXRVVENNb250aChuZXdfbW9udGgpO1xuXHRcdFx0XHQvLyBEZWMgLT4gSmFuICgxMikgb3IgSmFuIC0+IERlYyAoLTEpIC0tIGxpbWl0IGV4cGVjdGVkIGRhdGUgdG8gMC0xMVxuXHRcdFx0XHRpZiAobmV3X21vbnRoIDwgMCB8fCBuZXdfbW9udGggPiAxMSlcblx0XHRcdFx0XHRuZXdfbW9udGggPSAobmV3X21vbnRoICsgMTIpICUgMTI7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyBGb3IgbWFnbml0dWRlcyA+MSwgbW92ZSBvbmUgbW9udGggYXQgYSB0aW1lLi4uXG5cdFx0XHRcdGZvciAodmFyIGk9MDsgaTxtYWc7IGkrKylcblx0XHRcdFx0XHQvLyAuLi53aGljaCBtaWdodCBkZWNyZWFzZSB0aGUgZGF5IChlZywgSmFuIDMxIHRvIEZlYiAyOCwgZXRjKS4uLlxuXHRcdFx0XHRcdG5ld19kYXRlID0gdGhpcy5tb3ZlTW9udGgobmV3X2RhdGUsIGRpcik7XG5cdFx0XHRcdC8vIC4uLnRoZW4gcmVzZXQgdGhlIGRheSwga2VlcGluZyBpdCBpbiB0aGUgbmV3IG1vbnRoXG5cdFx0XHRcdG5ld19tb250aCA9IG5ld19kYXRlLmdldFVUQ01vbnRoKCk7XG5cdFx0XHRcdG5ld19kYXRlLnNldFVUQ0RhdGUoZGF5KTtcblx0XHRcdFx0dGVzdCA9IGZ1bmN0aW9uKCl7IHJldHVybiBuZXdfbW9udGggIT0gbmV3X2RhdGUuZ2V0VVRDTW9udGgoKTsgfTtcblx0XHRcdH1cblx0XHRcdC8vIENvbW1vbiBkYXRlLXJlc2V0dGluZyBsb29wIC0tIGlmIGRhdGUgaXMgYmV5b25kIGVuZCBvZiBtb250aCwgbWFrZSBpdFxuXHRcdFx0Ly8gZW5kIG9mIG1vbnRoXG5cdFx0XHR3aGlsZSAodGVzdCgpKXtcblx0XHRcdFx0bmV3X2RhdGUuc2V0VVRDRGF0ZSgtLWRheSk7XG5cdFx0XHRcdG5ld19kYXRlLnNldFVUQ01vbnRoKG5ld19tb250aCk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbmV3X2RhdGU7XG5cdFx0fSxcblxuXHRcdG1vdmVZZWFyOiBmdW5jdGlvbihkYXRlLCBkaXIpe1xuXHRcdFx0cmV0dXJuIHRoaXMubW92ZU1vbnRoKGRhdGUsIGRpcioxMik7XG5cdFx0fSxcblxuXHRcdGRhdGVXaXRoaW5SYW5nZTogZnVuY3Rpb24oZGF0ZSl7XG5cdFx0XHRyZXR1cm4gZGF0ZSA+PSB0aGlzLm8uc3RhcnREYXRlICYmIGRhdGUgPD0gdGhpcy5vLmVuZERhdGU7XG5cdFx0fSxcblxuXHRcdGtleWRvd246IGZ1bmN0aW9uKGUpe1xuXHRcdFx0aWYgKHRoaXMucGlja2VyLmlzKCc6bm90KDp2aXNpYmxlKScpKXtcblx0XHRcdFx0aWYgKGUua2V5Q29kZSA9PSAyNykgLy8gYWxsb3cgZXNjYXBlIHRvIGhpZGUgYW5kIHJlLXNob3cgcGlja2VyXG5cdFx0XHRcdFx0dGhpcy5zaG93KCk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdHZhciBkYXRlQ2hhbmdlZCA9IGZhbHNlLFxuXHRcdFx0XHRkaXIsIGRheSwgbW9udGgsXG5cdFx0XHRcdG5ld0RhdGUsIG5ld1ZpZXdEYXRlO1xuXHRcdFx0c3dpdGNoKGUua2V5Q29kZSl7XG5cdFx0XHRcdGNhc2UgMjc6IC8vIGVzY2FwZVxuXHRcdFx0XHRcdHRoaXMuaGlkZSgpO1xuXHRcdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAzNzogLy8gbGVmdFxuXHRcdFx0XHRjYXNlIDM5OiAvLyByaWdodFxuXHRcdFx0XHRcdGlmICghdGhpcy5vLmtleWJvYXJkTmF2aWdhdGlvbikgYnJlYWs7XG5cdFx0XHRcdFx0ZGlyID0gZS5rZXlDb2RlID09IDM3ID8gLTEgOiAxO1xuXHRcdFx0XHRcdGlmIChlLmN0cmxLZXkpe1xuXHRcdFx0XHRcdFx0bmV3RGF0ZSA9IHRoaXMubW92ZVllYXIodGhpcy5kYXRlLCBkaXIpO1xuXHRcdFx0XHRcdFx0bmV3Vmlld0RhdGUgPSB0aGlzLm1vdmVZZWFyKHRoaXMudmlld0RhdGUsIGRpcik7XG5cdFx0XHRcdFx0fSBlbHNlIGlmIChlLnNoaWZ0S2V5KXtcblx0XHRcdFx0XHRcdG5ld0RhdGUgPSB0aGlzLm1vdmVNb250aCh0aGlzLmRhdGUsIGRpcik7XG5cdFx0XHRcdFx0XHRuZXdWaWV3RGF0ZSA9IHRoaXMubW92ZU1vbnRoKHRoaXMudmlld0RhdGUsIGRpcik7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdG5ld0RhdGUgPSBuZXcgRGF0ZSh0aGlzLmRhdGUpO1xuXHRcdFx0XHRcdFx0bmV3RGF0ZS5zZXRVVENEYXRlKHRoaXMuZGF0ZS5nZXRVVENEYXRlKCkgKyBkaXIpO1xuXHRcdFx0XHRcdFx0bmV3Vmlld0RhdGUgPSBuZXcgRGF0ZSh0aGlzLnZpZXdEYXRlKTtcblx0XHRcdFx0XHRcdG5ld1ZpZXdEYXRlLnNldFVUQ0RhdGUodGhpcy52aWV3RGF0ZS5nZXRVVENEYXRlKCkgKyBkaXIpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAodGhpcy5kYXRlV2l0aGluUmFuZ2UobmV3RGF0ZSkpe1xuXHRcdFx0XHRcdFx0dGhpcy5kYXRlID0gbmV3RGF0ZTtcblx0XHRcdFx0XHRcdHRoaXMudmlld0RhdGUgPSBuZXdWaWV3RGF0ZTtcblx0XHRcdFx0XHRcdHRoaXMuc2V0VmFsdWUoKTtcblx0XHRcdFx0XHRcdHRoaXMudXBkYXRlKCk7XG5cdFx0XHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0XHRkYXRlQ2hhbmdlZCA9IHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIDM4OiAvLyB1cFxuXHRcdFx0XHRjYXNlIDQwOiAvLyBkb3duXG5cdFx0XHRcdFx0aWYgKCF0aGlzLm8ua2V5Ym9hcmROYXZpZ2F0aW9uKSBicmVhaztcblx0XHRcdFx0XHRkaXIgPSBlLmtleUNvZGUgPT0gMzggPyAtMSA6IDE7XG5cdFx0XHRcdFx0aWYgKGUuY3RybEtleSl7XG5cdFx0XHRcdFx0XHRuZXdEYXRlID0gdGhpcy5tb3ZlWWVhcih0aGlzLmRhdGUsIGRpcik7XG5cdFx0XHRcdFx0XHRuZXdWaWV3RGF0ZSA9IHRoaXMubW92ZVllYXIodGhpcy52aWV3RGF0ZSwgZGlyKTtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKGUuc2hpZnRLZXkpe1xuXHRcdFx0XHRcdFx0bmV3RGF0ZSA9IHRoaXMubW92ZU1vbnRoKHRoaXMuZGF0ZSwgZGlyKTtcblx0XHRcdFx0XHRcdG5ld1ZpZXdEYXRlID0gdGhpcy5tb3ZlTW9udGgodGhpcy52aWV3RGF0ZSwgZGlyKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0bmV3RGF0ZSA9IG5ldyBEYXRlKHRoaXMuZGF0ZSk7XG5cdFx0XHRcdFx0XHRuZXdEYXRlLnNldFVUQ0RhdGUodGhpcy5kYXRlLmdldFVUQ0RhdGUoKSArIGRpciAqIDcpO1xuXHRcdFx0XHRcdFx0bmV3Vmlld0RhdGUgPSBuZXcgRGF0ZSh0aGlzLnZpZXdEYXRlKTtcblx0XHRcdFx0XHRcdG5ld1ZpZXdEYXRlLnNldFVUQ0RhdGUodGhpcy52aWV3RGF0ZS5nZXRVVENEYXRlKCkgKyBkaXIgKiA3KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKHRoaXMuZGF0ZVdpdGhpblJhbmdlKG5ld0RhdGUpKXtcblx0XHRcdFx0XHRcdHRoaXMuZGF0ZSA9IG5ld0RhdGU7XG5cdFx0XHRcdFx0XHR0aGlzLnZpZXdEYXRlID0gbmV3Vmlld0RhdGU7XG5cdFx0XHRcdFx0XHR0aGlzLnNldFZhbHVlKCk7XG5cdFx0XHRcdFx0XHR0aGlzLnVwZGF0ZSgpO1xuXHRcdFx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdFx0ZGF0ZUNoYW5nZWQgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAxMzogLy8gZW50ZXJcblx0XHRcdFx0XHR0aGlzLmhpZGUoKTtcblx0XHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgOTogLy8gdGFiXG5cdFx0XHRcdFx0dGhpcy5oaWRlKCk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZiAoZGF0ZUNoYW5nZWQpe1xuXHRcdFx0XHR0aGlzLl90cmlnZ2VyKCdjaGFuZ2VEYXRlJyk7XG5cdFx0XHRcdHZhciBlbGVtZW50O1xuXHRcdFx0XHRpZiAodGhpcy5pc0lucHV0KSB7XG5cdFx0XHRcdFx0ZWxlbWVudCA9IHRoaXMuZWxlbWVudDtcblx0XHRcdFx0fSBlbHNlIGlmICh0aGlzLmNvbXBvbmVudCl7XG5cdFx0XHRcdFx0ZWxlbWVudCA9IHRoaXMuZWxlbWVudC5maW5kKCdpbnB1dCcpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChlbGVtZW50KSB7XG5cdFx0XHRcdFx0ZWxlbWVudC5jaGFuZ2UoKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRzaG93TW9kZTogZnVuY3Rpb24oZGlyKSB7XG5cdFx0XHRpZiAoZGlyKSB7XG5cdFx0XHRcdHRoaXMudmlld01vZGUgPSBNYXRoLm1heCh0aGlzLm8ubWluVmlld01vZGUsIE1hdGgubWluKDIsIHRoaXMudmlld01vZGUgKyBkaXIpKTtcblx0XHRcdH1cblx0XHRcdC8qXG5cdFx0XHRcdHZpdGFsZXRzOiBmaXhpbmcgYnVnIG9mIHZlcnkgc3BlY2lhbCBjb25kaXRpb25zOlxuXHRcdFx0XHRqcXVlcnkgMS43LjEgKyB3ZWJraXQgKyBzaG93IGlubGluZSBkYXRlcGlja2VyIGluIGJvb3RzdHJhcCBwb3BvdmVyLlxuXHRcdFx0XHRNZXRob2Qgc2hvdygpIGRvZXMgbm90IHNldCBkaXNwbGF5IGNzcyBjb3JyZWN0bHkgYW5kIGRhdGVwaWNrZXIgaXMgbm90IHNob3duLlxuXHRcdFx0XHRDaGFuZ2VkIHRvIC5jc3MoJ2Rpc3BsYXknLCAnYmxvY2snKSBzb2x2ZSB0aGUgcHJvYmxlbS5cblx0XHRcdFx0U2VlIGh0dHBzOi8vZ2l0aHViLmNvbS92aXRhbGV0cy94LWVkaXRhYmxlL2lzc3Vlcy8zN1xuXG5cdFx0XHRcdEluIGpxdWVyeSAxLjcuMisgZXZlcnl0aGluZyB3b3JrcyBmaW5lLlxuXHRcdFx0Ki9cblx0XHRcdC8vdGhpcy5waWNrZXIuZmluZCgnPmRpdicpLmhpZGUoKS5maWx0ZXIoJy5kYXRlcGlja2VyLScrRFBHbG9iYWwubW9kZXNbdGhpcy52aWV3TW9kZV0uY2xzTmFtZSkuc2hvdygpO1xuXHRcdFx0dGhpcy5waWNrZXIuZmluZCgnPmRpdicpLmhpZGUoKS5maWx0ZXIoJy5kYXRlcGlja2VyLScrRFBHbG9iYWwubW9kZXNbdGhpcy52aWV3TW9kZV0uY2xzTmFtZSkuY3NzKCdkaXNwbGF5JywgJ2Jsb2NrJyk7XG5cdFx0XHR0aGlzLnVwZGF0ZU5hdkFycm93cygpO1xuXHRcdH1cblx0fTtcblxuXHR2YXIgRGF0ZVJhbmdlUGlja2VyID0gZnVuY3Rpb24oZWxlbWVudCwgb3B0aW9ucyl7XG5cdFx0dGhpcy5lbGVtZW50ID0gJChlbGVtZW50KTtcblx0XHR0aGlzLmlucHV0cyA9ICQubWFwKG9wdGlvbnMuaW5wdXRzLCBmdW5jdGlvbihpKXsgcmV0dXJuIGkuanF1ZXJ5ID8gaVswXSA6IGk7IH0pO1xuXHRcdGRlbGV0ZSBvcHRpb25zLmlucHV0cztcblxuXHRcdCQodGhpcy5pbnB1dHMpXG5cdFx0XHQuZGF0ZXBpY2tlcihvcHRpb25zKVxuXHRcdFx0LmJpbmQoJ2NoYW5nZURhdGUnLCAkLnByb3h5KHRoaXMuZGF0ZVVwZGF0ZWQsIHRoaXMpKTtcblxuXHRcdHRoaXMucGlja2VycyA9ICQubWFwKHRoaXMuaW5wdXRzLCBmdW5jdGlvbihpKXsgcmV0dXJuICQoaSkuZGF0YSgnZGF0ZXBpY2tlcicpOyB9KTtcblx0XHR0aGlzLnVwZGF0ZURhdGVzKCk7XG5cdH07XG5cdERhdGVSYW5nZVBpY2tlci5wcm90b3R5cGUgPSB7XG5cdFx0dXBkYXRlRGF0ZXM6IGZ1bmN0aW9uKCl7XG5cdFx0XHR0aGlzLmRhdGVzID0gJC5tYXAodGhpcy5waWNrZXJzLCBmdW5jdGlvbihpKXsgcmV0dXJuIGkuZGF0ZTsgfSk7XG5cdFx0XHR0aGlzLnVwZGF0ZVJhbmdlcygpO1xuXHRcdH0sXG5cdFx0dXBkYXRlUmFuZ2VzOiBmdW5jdGlvbigpe1xuXHRcdFx0dmFyIHJhbmdlID0gJC5tYXAodGhpcy5kYXRlcywgZnVuY3Rpb24oZCl7IHJldHVybiBkLnZhbHVlT2YoKTsgfSk7XG5cdFx0XHQkLmVhY2godGhpcy5waWNrZXJzLCBmdW5jdGlvbihpLCBwKXtcblx0XHRcdFx0cC5zZXRSYW5nZShyYW5nZSk7XG5cdFx0XHR9KTtcblx0XHR9LFxuXHRcdGRhdGVVcGRhdGVkOiBmdW5jdGlvbihlKXtcblx0XHRcdHZhciBkcCA9ICQoZS50YXJnZXQpLmRhdGEoJ2RhdGVwaWNrZXInKSxcblx0XHRcdFx0bmV3X2RhdGUgPSBkcC5nZXRVVENEYXRlKCksXG5cdFx0XHRcdGkgPSAkLmluQXJyYXkoZS50YXJnZXQsIHRoaXMuaW5wdXRzKSxcblx0XHRcdFx0bCA9IHRoaXMuaW5wdXRzLmxlbmd0aDtcblx0XHRcdGlmIChpID09IC0xKSByZXR1cm47XG5cblx0XHRcdGlmIChuZXdfZGF0ZSA8IHRoaXMuZGF0ZXNbaV0pe1xuXHRcdFx0XHQvLyBEYXRlIGJlaW5nIG1vdmVkIGVhcmxpZXIvbGVmdFxuXHRcdFx0XHR3aGlsZSAoaT49MCAmJiBuZXdfZGF0ZSA8IHRoaXMuZGF0ZXNbaV0pe1xuXHRcdFx0XHRcdHRoaXMucGlja2Vyc1tpLS1dLnNldFVUQ0RhdGUobmV3X2RhdGUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRlbHNlIGlmIChuZXdfZGF0ZSA+IHRoaXMuZGF0ZXNbaV0pe1xuXHRcdFx0XHQvLyBEYXRlIGJlaW5nIG1vdmVkIGxhdGVyL3JpZ2h0XG5cdFx0XHRcdHdoaWxlIChpPGwgJiYgbmV3X2RhdGUgPiB0aGlzLmRhdGVzW2ldKXtcblx0XHRcdFx0XHR0aGlzLnBpY2tlcnNbaSsrXS5zZXRVVENEYXRlKG5ld19kYXRlKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0dGhpcy51cGRhdGVEYXRlcygpO1xuXHRcdH0sXG5cdFx0cmVtb3ZlOiBmdW5jdGlvbigpe1xuXHRcdFx0JC5tYXAodGhpcy5waWNrZXJzLCBmdW5jdGlvbihwKXsgcC5yZW1vdmUoKTsgfSk7XG5cdFx0XHRkZWxldGUgdGhpcy5lbGVtZW50LmRhdGEoKS5kYXRlcGlja2VyO1xuXHRcdH1cblx0fTtcblxuXHRmdW5jdGlvbiBvcHRzX2Zyb21fZWwoZWwsIHByZWZpeCl7XG5cdFx0Ly8gRGVyaXZlIG9wdGlvbnMgZnJvbSBlbGVtZW50IGRhdGEtYXR0cnNcblx0XHR2YXIgZGF0YSA9ICQoZWwpLmRhdGEoKSxcblx0XHRcdG91dCA9IHt9LCBpbmtleSxcblx0XHRcdHJlcGxhY2UgPSBuZXcgUmVnRXhwKCdeJyArIHByZWZpeC50b0xvd2VyQ2FzZSgpICsgJyhbQS1aXSknKSxcblx0XHRcdHByZWZpeCA9IG5ldyBSZWdFeHAoJ14nICsgcHJlZml4LnRvTG93ZXJDYXNlKCkpO1xuXHRcdGZvciAodmFyIGtleSBpbiBkYXRhKVxuXHRcdFx0aWYgKHByZWZpeC50ZXN0KGtleSkpe1xuXHRcdFx0XHRpbmtleSA9IGtleS5yZXBsYWNlKHJlcGxhY2UsIGZ1bmN0aW9uKF8sYSl7IHJldHVybiBhLnRvTG93ZXJDYXNlKCk7IH0pO1xuXHRcdFx0XHRvdXRbaW5rZXldID0gZGF0YVtrZXldO1xuXHRcdFx0fVxuXHRcdHJldHVybiBvdXQ7XG5cdH1cblxuXHRmdW5jdGlvbiBvcHRzX2Zyb21fbG9jYWxlKGxhbmcpe1xuXHRcdC8vIERlcml2ZSBvcHRpb25zIGZyb20gbG9jYWxlIHBsdWdpbnNcblx0XHR2YXIgb3V0ID0ge307XG5cdFx0Ly8gQ2hlY2sgaWYgXCJkZS1ERVwiIHN0eWxlIGRhdGUgaXMgYXZhaWxhYmxlLCBpZiBub3QgbGFuZ3VhZ2Ugc2hvdWxkXG5cdFx0Ly8gZmFsbGJhY2sgdG8gMiBsZXR0ZXIgY29kZSBlZyBcImRlXCJcblx0XHRpZiAoIWRhdGVzW2xhbmddKSB7XG5cdFx0XHRsYW5nID0gbGFuZy5zcGxpdCgnLScpWzBdXG5cdFx0XHRpZiAoIWRhdGVzW2xhbmddKVxuXHRcdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdHZhciBkID0gZGF0ZXNbbGFuZ107XG5cdFx0JC5lYWNoKGxvY2FsZV9vcHRzLCBmdW5jdGlvbihpLGspe1xuXHRcdFx0aWYgKGsgaW4gZClcblx0XHRcdFx0b3V0W2tdID0gZFtrXTtcblx0XHR9KTtcblx0XHRyZXR1cm4gb3V0O1xuXHR9XG5cblx0dmFyIG9sZCA9ICQuZm4uZGF0ZXBpY2tlcjtcblx0dmFyIGRhdGVwaWNrZXIgPSAkLmZuLmRhdGVwaWNrZXIgPSBmdW5jdGlvbiAoIG9wdGlvbiApIHtcblx0XHR2YXIgYXJncyA9IEFycmF5LmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG5cdFx0YXJncy5zaGlmdCgpO1xuXHRcdHZhciBpbnRlcm5hbF9yZXR1cm4sXG5cdFx0XHR0aGlzX3JldHVybjtcblx0XHR0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuXHRcdFx0dmFyICR0aGlzID0gJCh0aGlzKSxcblx0XHRcdFx0ZGF0YSA9ICR0aGlzLmRhdGEoJ2RhdGVwaWNrZXInKSxcblx0XHRcdFx0b3B0aW9ucyA9IHR5cGVvZiBvcHRpb24gPT0gJ29iamVjdCcgJiYgb3B0aW9uO1xuXHRcdFx0aWYgKCFkYXRhKSB7XG5cdFx0XHRcdHZhciBlbG9wdHMgPSBvcHRzX2Zyb21fZWwodGhpcywgJ2RhdGUnKSxcblx0XHRcdFx0XHQvLyBQcmVsaW1pbmFyeSBvdGlvbnNcblx0XHRcdFx0XHR4b3B0cyA9ICQuZXh0ZW5kKHt9LCBkZWZhdWx0cywgZWxvcHRzLCBvcHRpb25zKSxcblx0XHRcdFx0XHRsb2NvcHRzID0gb3B0c19mcm9tX2xvY2FsZSh4b3B0cy5sYW5ndWFnZSksXG5cdFx0XHRcdFx0Ly8gT3B0aW9ucyBwcmlvcml0eToganMgYXJncywgZGF0YS1hdHRycywgbG9jYWxlcywgZGVmYXVsdHNcblx0XHRcdFx0XHRvcHRzID0gJC5leHRlbmQoe30sIGRlZmF1bHRzLCBsb2NvcHRzLCBlbG9wdHMsIG9wdGlvbnMpO1xuXHRcdFx0XHRpZiAoJHRoaXMuaXMoJy5pbnB1dC1kYXRlcmFuZ2UnKSB8fCBvcHRzLmlucHV0cyl7XG5cdFx0XHRcdFx0dmFyIHJvcHRzID0ge1xuXHRcdFx0XHRcdFx0aW5wdXRzOiBvcHRzLmlucHV0cyB8fCAkdGhpcy5maW5kKCdpbnB1dCcpLnRvQXJyYXkoKVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0JHRoaXMuZGF0YSgnZGF0ZXBpY2tlcicsIChkYXRhID0gbmV3IERhdGVSYW5nZVBpY2tlcih0aGlzLCAkLmV4dGVuZChvcHRzLCByb3B0cykpKSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxzZXtcblx0XHRcdFx0XHQkdGhpcy5kYXRhKCdkYXRlcGlja2VyJywgKGRhdGEgPSBuZXcgRGF0ZXBpY2tlcih0aGlzLCBvcHRzKSkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAodHlwZW9mIG9wdGlvbiA9PSAnc3RyaW5nJyAmJiB0eXBlb2YgZGF0YVtvcHRpb25dID09ICdmdW5jdGlvbicpIHtcblx0XHRcdFx0aW50ZXJuYWxfcmV0dXJuID0gZGF0YVtvcHRpb25dLmFwcGx5KGRhdGEsIGFyZ3MpO1xuXHRcdFx0XHRpZiAoaW50ZXJuYWxfcmV0dXJuICE9PSB1bmRlZmluZWQpXG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdGlmIChpbnRlcm5hbF9yZXR1cm4gIT09IHVuZGVmaW5lZClcblx0XHRcdHJldHVybiBpbnRlcm5hbF9yZXR1cm47XG5cdFx0ZWxzZVxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdH07XG5cblx0dmFyIGRlZmF1bHRzID0gJC5mbi5kYXRlcGlja2VyLmRlZmF1bHRzID0ge1xuXHRcdGF1dG9jbG9zZTogZmFsc2UsXG5cdFx0YmVmb3JlU2hvd0RheTogJC5ub29wLFxuXHRcdGNhbGVuZGFyV2Vla3M6IGZhbHNlLFxuXHRcdGNsZWFyQnRuOiBmYWxzZSxcblx0XHRkYXlzT2ZXZWVrRGlzYWJsZWQ6IFtdLFxuXHRcdGVuZERhdGU6IEluZmluaXR5LFxuXHRcdGZvcmNlUGFyc2U6IHRydWUsXG5cdFx0Zm9ybWF0OiAnbW0vZGQveXl5eScsXG5cdFx0a2V5Ym9hcmROYXZpZ2F0aW9uOiB0cnVlLFxuXHRcdGxhbmd1YWdlOiAnZW4nLFxuXHRcdG1pblZpZXdNb2RlOiAwLFxuXHRcdHJ0bDogZmFsc2UsXG5cdFx0c3RhcnREYXRlOiAtSW5maW5pdHksXG5cdFx0c3RhcnRWaWV3OiAwLFxuXHRcdHRvZGF5QnRuOiBmYWxzZSxcblx0XHR0b2RheUhpZ2hsaWdodDogZmFsc2UsXG5cdFx0d2Vla1N0YXJ0OiAwXG5cdH07XG5cdHZhciBsb2NhbGVfb3B0cyA9ICQuZm4uZGF0ZXBpY2tlci5sb2NhbGVfb3B0cyA9IFtcblx0XHQnZm9ybWF0Jyxcblx0XHQncnRsJyxcblx0XHQnd2Vla1N0YXJ0J1xuXHRdO1xuXHQkLmZuLmRhdGVwaWNrZXIuQ29uc3RydWN0b3IgPSBEYXRlcGlja2VyO1xuXHR2YXIgZGF0ZXMgPSAkLmZuLmRhdGVwaWNrZXIuZGF0ZXMgPSB7XG5cdFx0ZW46IHtcblx0XHRcdGRheXM6IFtcIlN1bmRheVwiLCBcIk1vbmRheVwiLCBcIlR1ZXNkYXlcIiwgXCJXZWRuZXNkYXlcIiwgXCJUaHVyc2RheVwiLCBcIkZyaWRheVwiLCBcIlNhdHVyZGF5XCIsIFwiU3VuZGF5XCJdLFxuXHRcdFx0ZGF5c1Nob3J0OiBbXCJTdW5cIiwgXCJNb25cIiwgXCJUdWVcIiwgXCJXZWRcIiwgXCJUaHVcIiwgXCJGcmlcIiwgXCJTYXRcIiwgXCJTdW5cIl0sXG5cdFx0XHRkYXlzTWluOiBbXCJTdVwiLCBcIk1vXCIsIFwiVHVcIiwgXCJXZVwiLCBcIlRoXCIsIFwiRnJcIiwgXCJTYVwiLCBcIlN1XCJdLFxuXHRcdFx0bW9udGhzOiBbXCJKYW51YXJ5XCIsIFwiRmVicnVhcnlcIiwgXCJNYXJjaFwiLCBcIkFwcmlsXCIsIFwiTWF5XCIsIFwiSnVuZVwiLCBcIkp1bHlcIiwgXCJBdWd1c3RcIiwgXCJTZXB0ZW1iZXJcIiwgXCJPY3RvYmVyXCIsIFwiTm92ZW1iZXJcIiwgXCJEZWNlbWJlclwiXSxcblx0XHRcdG1vbnRoc1Nob3J0OiBbXCJKYW5cIiwgXCJGZWJcIiwgXCJNYXJcIiwgXCJBcHJcIiwgXCJNYXlcIiwgXCJKdW5cIiwgXCJKdWxcIiwgXCJBdWdcIiwgXCJTZXBcIiwgXCJPY3RcIiwgXCJOb3ZcIiwgXCJEZWNcIl0sXG5cdFx0XHR0b2RheTogXCJUb2RheVwiLFxuXHRcdFx0Y2xlYXI6IFwiQ2xlYXJcIlxuXHRcdH1cblx0fTtcblxuXHR2YXIgRFBHbG9iYWwgPSB7XG5cdFx0bW9kZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0Y2xzTmFtZTogJ2RheXMnLFxuXHRcdFx0XHRuYXZGbmM6ICdNb250aCcsXG5cdFx0XHRcdG5hdlN0ZXA6IDFcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGNsc05hbWU6ICdtb250aHMnLFxuXHRcdFx0XHRuYXZGbmM6ICdGdWxsWWVhcicsXG5cdFx0XHRcdG5hdlN0ZXA6IDFcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGNsc05hbWU6ICd5ZWFycycsXG5cdFx0XHRcdG5hdkZuYzogJ0Z1bGxZZWFyJyxcblx0XHRcdFx0bmF2U3RlcDogMTBcblx0XHR9XSxcblx0XHRpc0xlYXBZZWFyOiBmdW5jdGlvbiAoeWVhcikge1xuXHRcdFx0cmV0dXJuICgoKHllYXIgJSA0ID09PSAwKSAmJiAoeWVhciAlIDEwMCAhPT0gMCkpIHx8ICh5ZWFyICUgNDAwID09PSAwKSk7XG5cdFx0fSxcblx0XHRnZXREYXlzSW5Nb250aDogZnVuY3Rpb24gKHllYXIsIG1vbnRoKSB7XG5cdFx0XHRyZXR1cm4gWzMxLCAoRFBHbG9iYWwuaXNMZWFwWWVhcih5ZWFyKSA/IDI5IDogMjgpLCAzMSwgMzAsIDMxLCAzMCwgMzEsIDMxLCAzMCwgMzEsIDMwLCAzMV1bbW9udGhdO1xuXHRcdH0sXG5cdFx0dmFsaWRQYXJ0czogL2RkP3xERD98bW0/fE1NP3x5eSg/Onl5KT8vZyxcblx0XHRub25wdW5jdHVhdGlvbjogL1teIC1cXC86LUBcXFtcXHUzNDAwLVxcdTlmZmYtYHstflxcdFxcblxccl0rL2csXG5cdFx0cGFyc2VGb3JtYXQ6IGZ1bmN0aW9uKGZvcm1hdCl7XG5cdFx0XHQvLyBJRSB0cmVhdHMgXFwwIGFzIGEgc3RyaW5nIGVuZCBpbiBpbnB1dHMgKHRydW5jYXRpbmcgdGhlIHZhbHVlKSxcblx0XHRcdC8vIHNvIGl0J3MgYSBiYWQgZm9ybWF0IGRlbGltaXRlciwgYW55d2F5XG5cdFx0XHR2YXIgc2VwYXJhdG9ycyA9IGZvcm1hdC5yZXBsYWNlKHRoaXMudmFsaWRQYXJ0cywgJ1xcMCcpLnNwbGl0KCdcXDAnKSxcblx0XHRcdFx0cGFydHMgPSBmb3JtYXQubWF0Y2godGhpcy52YWxpZFBhcnRzKTtcblx0XHRcdGlmICghc2VwYXJhdG9ycyB8fCAhc2VwYXJhdG9ycy5sZW5ndGggfHwgIXBhcnRzIHx8IHBhcnRzLmxlbmd0aCA9PT0gMCl7XG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgZGF0ZSBmb3JtYXQuXCIpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHtzZXBhcmF0b3JzOiBzZXBhcmF0b3JzLCBwYXJ0czogcGFydHN9O1xuXHRcdH0sXG5cdFx0cGFyc2VEYXRlOiBmdW5jdGlvbihkYXRlLCBmb3JtYXQsIGxhbmd1YWdlKSB7XG5cdFx0XHRpZiAoZGF0ZSBpbnN0YW5jZW9mIERhdGUpIHJldHVybiBkYXRlO1xuXHRcdFx0aWYgKHR5cGVvZiBmb3JtYXQgPT09ICdzdHJpbmcnKVxuXHRcdFx0XHRmb3JtYXQgPSBEUEdsb2JhbC5wYXJzZUZvcm1hdChmb3JtYXQpO1xuXHRcdFx0aWYgKC9eW1xcLStdXFxkK1tkbXd5XShbXFxzLF0rW1xcLStdXFxkK1tkbXd5XSkqJC8udGVzdChkYXRlKSkge1xuXHRcdFx0XHR2YXIgcGFydF9yZSA9IC8oW1xcLStdXFxkKykoW2Rtd3ldKS8sXG5cdFx0XHRcdFx0cGFydHMgPSBkYXRlLm1hdGNoKC8oW1xcLStdXFxkKykoW2Rtd3ldKS9nKSxcblx0XHRcdFx0XHRwYXJ0LCBkaXI7XG5cdFx0XHRcdGRhdGUgPSBuZXcgRGF0ZSgpO1xuXHRcdFx0XHRmb3IgKHZhciBpPTA7IGk8cGFydHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0XHRwYXJ0ID0gcGFydF9yZS5leGVjKHBhcnRzW2ldKTtcblx0XHRcdFx0XHRkaXIgPSBwYXJzZUludChwYXJ0WzFdKTtcblx0XHRcdFx0XHRzd2l0Y2gocGFydFsyXSl7XG5cdFx0XHRcdFx0XHRjYXNlICdkJzpcblx0XHRcdFx0XHRcdFx0ZGF0ZS5zZXRVVENEYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpICsgZGlyKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdtJzpcblx0XHRcdFx0XHRcdFx0ZGF0ZSA9IERhdGVwaWNrZXIucHJvdG90eXBlLm1vdmVNb250aC5jYWxsKERhdGVwaWNrZXIucHJvdG90eXBlLCBkYXRlLCBkaXIpO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ3cnOlxuXHRcdFx0XHRcdFx0XHRkYXRlLnNldFVUQ0RhdGUoZGF0ZS5nZXRVVENEYXRlKCkgKyBkaXIgKiA3KTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICd5Jzpcblx0XHRcdFx0XHRcdFx0ZGF0ZSA9IERhdGVwaWNrZXIucHJvdG90eXBlLm1vdmVZZWFyLmNhbGwoRGF0ZXBpY2tlci5wcm90b3R5cGUsIGRhdGUsIGRpcik7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gVVRDRGF0ZShkYXRlLmdldFVUQ0Z1bGxZZWFyKCksIGRhdGUuZ2V0VVRDTW9udGgoKSwgZGF0ZS5nZXRVVENEYXRlKCksIDAsIDAsIDApO1xuXHRcdFx0fVxuXHRcdFx0dmFyIHBhcnRzID0gZGF0ZSAmJiBkYXRlLm1hdGNoKHRoaXMubm9ucHVuY3R1YXRpb24pIHx8IFtdLFxuXHRcdFx0XHRkYXRlID0gbmV3IERhdGUoKSxcblx0XHRcdFx0cGFyc2VkID0ge30sXG5cdFx0XHRcdHNldHRlcnNfb3JkZXIgPSBbJ3l5eXknLCAneXknLCAnTScsICdNTScsICdtJywgJ21tJywgJ2QnLCAnZGQnXSxcblx0XHRcdFx0c2V0dGVyc19tYXAgPSB7XG5cdFx0XHRcdFx0eXl5eTogZnVuY3Rpb24oZCx2KXsgcmV0dXJuIGQuc2V0VVRDRnVsbFllYXIodik7IH0sXG5cdFx0XHRcdFx0eXk6IGZ1bmN0aW9uKGQsdil7IHJldHVybiBkLnNldFVUQ0Z1bGxZZWFyKDIwMDArdik7IH0sXG5cdFx0XHRcdFx0bTogZnVuY3Rpb24oZCx2KXtcblx0XHRcdFx0XHRcdHYgLT0gMTtcblx0XHRcdFx0XHRcdHdoaWxlICh2PDApIHYgKz0gMTI7XG5cdFx0XHRcdFx0XHR2ICU9IDEyO1xuXHRcdFx0XHRcdFx0ZC5zZXRVVENNb250aCh2KTtcblx0XHRcdFx0XHRcdHdoaWxlIChkLmdldFVUQ01vbnRoKCkgIT0gdilcblx0XHRcdFx0XHRcdFx0ZC5zZXRVVENEYXRlKGQuZ2V0VVRDRGF0ZSgpLTEpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIGQ7XG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRkOiBmdW5jdGlvbihkLHYpeyByZXR1cm4gZC5zZXRVVENEYXRlKHYpOyB9XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHZhbCwgZmlsdGVyZWQsIHBhcnQ7XG5cdFx0XHRzZXR0ZXJzX21hcFsnTSddID0gc2V0dGVyc19tYXBbJ01NJ10gPSBzZXR0ZXJzX21hcFsnbW0nXSA9IHNldHRlcnNfbWFwWydtJ107XG5cdFx0XHRzZXR0ZXJzX21hcFsnZGQnXSA9IHNldHRlcnNfbWFwWydkJ107XG5cdFx0XHRkYXRlID0gVVRDRGF0ZShkYXRlLmdldEZ1bGxZZWFyKCksIGRhdGUuZ2V0TW9udGgoKSwgZGF0ZS5nZXREYXRlKCksIDAsIDAsIDApO1xuXHRcdFx0dmFyIGZwYXJ0cyA9IGZvcm1hdC5wYXJ0cy5zbGljZSgpO1xuXHRcdFx0Ly8gUmVtb3ZlIG5vb3AgcGFydHNcblx0XHRcdGlmIChwYXJ0cy5sZW5ndGggIT0gZnBhcnRzLmxlbmd0aCkge1xuXHRcdFx0XHRmcGFydHMgPSAkKGZwYXJ0cykuZmlsdGVyKGZ1bmN0aW9uKGkscCl7XG5cdFx0XHRcdFx0cmV0dXJuICQuaW5BcnJheShwLCBzZXR0ZXJzX29yZGVyKSAhPT0gLTE7XG5cdFx0XHRcdH0pLnRvQXJyYXkoKTtcblx0XHRcdH1cblx0XHRcdC8vIFByb2Nlc3MgcmVtYWluZGVyXG5cdFx0XHRpZiAocGFydHMubGVuZ3RoID09IGZwYXJ0cy5sZW5ndGgpIHtcblx0XHRcdFx0Zm9yICh2YXIgaT0wLCBjbnQgPSBmcGFydHMubGVuZ3RoOyBpIDwgY250OyBpKyspIHtcblx0XHRcdFx0XHR2YWwgPSBwYXJzZUludChwYXJ0c1tpXSwgMTApO1xuXHRcdFx0XHRcdHBhcnQgPSBmcGFydHNbaV07XG5cdFx0XHRcdFx0aWYgKGlzTmFOKHZhbCkpIHtcblx0XHRcdFx0XHRcdHN3aXRjaChwYXJ0KSB7XG5cdFx0XHRcdFx0XHRcdGNhc2UgJ01NJzpcblx0XHRcdFx0XHRcdFx0XHRmaWx0ZXJlZCA9ICQoZGF0ZXNbbGFuZ3VhZ2VdLm1vbnRocykuZmlsdGVyKGZ1bmN0aW9uKCl7XG5cdFx0XHRcdFx0XHRcdFx0XHR2YXIgbSA9IHRoaXMuc2xpY2UoMCwgcGFydHNbaV0ubGVuZ3RoKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0cCA9IHBhcnRzW2ldLnNsaWNlKDAsIG0ubGVuZ3RoKTtcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiBtID09IHA7XG5cdFx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHRcdFx0dmFsID0gJC5pbkFycmF5KGZpbHRlcmVkWzBdLCBkYXRlc1tsYW5ndWFnZV0ubW9udGhzKSArIDE7XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdGNhc2UgJ00nOlxuXHRcdFx0XHRcdFx0XHRcdGZpbHRlcmVkID0gJChkYXRlc1tsYW5ndWFnZV0ubW9udGhzU2hvcnQpLmZpbHRlcihmdW5jdGlvbigpe1xuXHRcdFx0XHRcdFx0XHRcdFx0dmFyIG0gPSB0aGlzLnNsaWNlKDAsIHBhcnRzW2ldLmxlbmd0aCksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHAgPSBwYXJ0c1tpXS5zbGljZSgwLCBtLmxlbmd0aCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gbSA9PSBwO1xuXHRcdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0XHRcdHZhbCA9ICQuaW5BcnJheShmaWx0ZXJlZFswXSwgZGF0ZXNbbGFuZ3VhZ2VdLm1vbnRoc1Nob3J0KSArIDE7XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHBhcnNlZFtwYXJ0XSA9IHZhbDtcblx0XHRcdFx0fVxuXHRcdFx0XHRmb3IgKHZhciBpPTAsIHM7IGk8c2V0dGVyc19vcmRlci5sZW5ndGg7IGkrKyl7XG5cdFx0XHRcdFx0cyA9IHNldHRlcnNfb3JkZXJbaV07XG5cdFx0XHRcdFx0aWYgKHMgaW4gcGFyc2VkICYmICFpc05hTihwYXJzZWRbc10pKVxuXHRcdFx0XHRcdFx0c2V0dGVyc19tYXBbc10oZGF0ZSwgcGFyc2VkW3NdKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGRhdGU7XG5cdFx0fSxcblx0XHRmb3JtYXREYXRlOiBmdW5jdGlvbihkYXRlLCBmb3JtYXQsIGxhbmd1YWdlKXtcblx0XHRcdGlmICh0eXBlb2YgZm9ybWF0ID09PSAnc3RyaW5nJylcblx0XHRcdFx0Zm9ybWF0ID0gRFBHbG9iYWwucGFyc2VGb3JtYXQoZm9ybWF0KTtcblx0XHRcdHZhciB2YWwgPSB7XG5cdFx0XHRcdGQ6IGRhdGUuZ2V0VVRDRGF0ZSgpLFxuXHRcdFx0XHREOiBkYXRlc1tsYW5ndWFnZV0uZGF5c1Nob3J0W2RhdGUuZ2V0VVRDRGF5KCldLFxuXHRcdFx0XHRERDogZGF0ZXNbbGFuZ3VhZ2VdLmRheXNbZGF0ZS5nZXRVVENEYXkoKV0sXG5cdFx0XHRcdG06IGRhdGUuZ2V0VVRDTW9udGgoKSArIDEsXG5cdFx0XHRcdE06IGRhdGVzW2xhbmd1YWdlXS5tb250aHNTaG9ydFtkYXRlLmdldFVUQ01vbnRoKCldLFxuXHRcdFx0XHRNTTogZGF0ZXNbbGFuZ3VhZ2VdLm1vbnRoc1tkYXRlLmdldFVUQ01vbnRoKCldLFxuXHRcdFx0XHR5eTogZGF0ZS5nZXRVVENGdWxsWWVhcigpLnRvU3RyaW5nKCkuc3Vic3RyaW5nKDIpLFxuXHRcdFx0XHR5eXl5OiBkYXRlLmdldFVUQ0Z1bGxZZWFyKClcblx0XHRcdH07XG5cdFx0XHR2YWwuZGQgPSAodmFsLmQgPCAxMCA/ICcwJyA6ICcnKSArIHZhbC5kO1xuXHRcdFx0dmFsLm1tID0gKHZhbC5tIDwgMTAgPyAnMCcgOiAnJykgKyB2YWwubTtcblx0XHRcdHZhciBkYXRlID0gW10sXG5cdFx0XHRcdHNlcHMgPSAkLmV4dGVuZChbXSwgZm9ybWF0LnNlcGFyYXRvcnMpO1xuXHRcdFx0Zm9yICh2YXIgaT0wLCBjbnQgPSBmb3JtYXQucGFydHMubGVuZ3RoOyBpIDw9IGNudDsgaSsrKSB7XG5cdFx0XHRcdGlmIChzZXBzLmxlbmd0aClcblx0XHRcdFx0XHRkYXRlLnB1c2goc2Vwcy5zaGlmdCgpKTtcblx0XHRcdFx0ZGF0ZS5wdXNoKHZhbFtmb3JtYXQucGFydHNbaV1dKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBkYXRlLmpvaW4oJycpO1xuXHRcdH0sXG5cdFx0aGVhZFRlbXBsYXRlOiAnPHRoZWFkPicrXG5cdFx0XHRcdFx0XHRcdCc8dHI+Jytcblx0XHRcdFx0XHRcdFx0XHQnPHRoIGNsYXNzPVwicHJldlwiPjxpIGNsYXNzPVwiaWNvbi1hcnJvdy1sZWZ0XCIvPjwvdGg+Jytcblx0XHRcdFx0XHRcdFx0XHQnPHRoIGNvbHNwYW49XCI1XCIgY2xhc3M9XCJkYXRlcGlja2VyLXN3aXRjaFwiPjwvdGg+Jytcblx0XHRcdFx0XHRcdFx0XHQnPHRoIGNsYXNzPVwibmV4dFwiPjxpIGNsYXNzPVwiaWNvbi1hcnJvdy1yaWdodFwiLz48L3RoPicrXG5cdFx0XHRcdFx0XHRcdCc8L3RyPicrXG5cdFx0XHRcdFx0XHQnPC90aGVhZD4nLFxuXHRcdGNvbnRUZW1wbGF0ZTogJzx0Ym9keT48dHI+PHRkIGNvbHNwYW49XCI3XCI+PC90ZD48L3RyPjwvdGJvZHk+Jyxcblx0XHRmb290VGVtcGxhdGU6ICc8dGZvb3Q+PHRyPjx0aCBjb2xzcGFuPVwiN1wiIGNsYXNzPVwidG9kYXlcIj48L3RoPjwvdHI+PHRyPjx0aCBjb2xzcGFuPVwiN1wiIGNsYXNzPVwiY2xlYXJcIj48L3RoPjwvdHI+PC90Zm9vdD4nXG5cdH07XG5cdERQR2xvYmFsLnRlbXBsYXRlID0gJzxkaXYgY2xhc3M9XCJkYXRlcGlja2VyXCI+Jytcblx0XHRcdFx0XHRcdFx0JzxkaXYgY2xhc3M9XCJkYXRlcGlja2VyLWRheXNcIj4nK1xuXHRcdFx0XHRcdFx0XHRcdCc8dGFibGUgY2xhc3M9XCIgdGFibGUtY29uZGVuc2VkXCI+Jytcblx0XHRcdFx0XHRcdFx0XHRcdERQR2xvYmFsLmhlYWRUZW1wbGF0ZStcblx0XHRcdFx0XHRcdFx0XHRcdCc8dGJvZHk+PC90Ym9keT4nK1xuXHRcdFx0XHRcdFx0XHRcdFx0RFBHbG9iYWwuZm9vdFRlbXBsYXRlK1xuXHRcdFx0XHRcdFx0XHRcdCc8L3RhYmxlPicrXG5cdFx0XHRcdFx0XHRcdCc8L2Rpdj4nK1xuXHRcdFx0XHRcdFx0XHQnPGRpdiBjbGFzcz1cImRhdGVwaWNrZXItbW9udGhzXCI+Jytcblx0XHRcdFx0XHRcdFx0XHQnPHRhYmxlIGNsYXNzPVwidGFibGUtY29uZGVuc2VkXCI+Jytcblx0XHRcdFx0XHRcdFx0XHRcdERQR2xvYmFsLmhlYWRUZW1wbGF0ZStcblx0XHRcdFx0XHRcdFx0XHRcdERQR2xvYmFsLmNvbnRUZW1wbGF0ZStcblx0XHRcdFx0XHRcdFx0XHRcdERQR2xvYmFsLmZvb3RUZW1wbGF0ZStcblx0XHRcdFx0XHRcdFx0XHQnPC90YWJsZT4nK1xuXHRcdFx0XHRcdFx0XHQnPC9kaXY+Jytcblx0XHRcdFx0XHRcdFx0JzxkaXYgY2xhc3M9XCJkYXRlcGlja2VyLXllYXJzXCI+Jytcblx0XHRcdFx0XHRcdFx0XHQnPHRhYmxlIGNsYXNzPVwidGFibGUtY29uZGVuc2VkXCI+Jytcblx0XHRcdFx0XHRcdFx0XHRcdERQR2xvYmFsLmhlYWRUZW1wbGF0ZStcblx0XHRcdFx0XHRcdFx0XHRcdERQR2xvYmFsLmNvbnRUZW1wbGF0ZStcblx0XHRcdFx0XHRcdFx0XHRcdERQR2xvYmFsLmZvb3RUZW1wbGF0ZStcblx0XHRcdFx0XHRcdFx0XHQnPC90YWJsZT4nK1xuXHRcdFx0XHRcdFx0XHQnPC9kaXY+Jytcblx0XHRcdFx0XHRcdCc8L2Rpdj4nO1xuXG5cdCQuZm4uZGF0ZXBpY2tlci5EUEdsb2JhbCA9IERQR2xvYmFsO1xuXG5cblx0LyogREFURVBJQ0tFUiBOTyBDT05GTElDVFxuXHQqID09PT09PT09PT09PT09PT09PT0gKi9cblxuXHQkLmZuLmRhdGVwaWNrZXIubm9Db25mbGljdCA9IGZ1bmN0aW9uKCl7XG5cdFx0JC5mbi5kYXRlcGlja2VyID0gb2xkO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9O1xuXG5cblx0LyogREFURVBJQ0tFUiBEQVRBLUFQSVxuXHQqID09PT09PT09PT09PT09PT09PSAqL1xuXG5cdCQoZG9jdW1lbnQpLm9uKFxuXHRcdCdmb2N1cy5kYXRlcGlja2VyLmRhdGEtYXBpIGNsaWNrLmRhdGVwaWNrZXIuZGF0YS1hcGknLFxuXHRcdCdbZGF0YS1wcm92aWRlPVwiZGF0ZXBpY2tlclwiXScsXG5cdFx0ZnVuY3Rpb24oZSl7XG5cdFx0XHR2YXIgJHRoaXMgPSAkKHRoaXMpO1xuXHRcdFx0aWYgKCR0aGlzLmRhdGEoJ2RhdGVwaWNrZXInKSkgcmV0dXJuO1xuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0Ly8gY29tcG9uZW50IGNsaWNrIHJlcXVpcmVzIHVzIHRvIGV4cGxpY2l0bHkgc2hvdyBpdFxuXHRcdFx0ZGF0ZXBpY2tlci5jYWxsKCR0aGlzLCAnc2hvdycpO1xuXHRcdH1cblx0KTtcblx0JChmdW5jdGlvbigpe1xuXHRcdC8vJCgnW2RhdGEtcHJvdmlkZT1cImRhdGVwaWNrZXItaW5saW5lXCJdJykuZGF0ZXBpY2tlcigpO1xuICAgICAgICAvL3ZpdDogY2hhbmdlZCB0byBzdXBwb3J0IG5vQ29uZmxpY3QoKVxuICAgICAgICBkYXRlcGlja2VyLmNhbGwoJCgnW2RhdGEtcHJvdmlkZT1cImRhdGVwaWNrZXItaW5saW5lXCJdJykpO1xuXHR9KTtcblxufSggd2luZG93LmpRdWVyeSApKTtcblxuLyoqXG5Cb290c3RyYXAtZGF0ZXBpY2tlci4gIFxuRGVzY3JpcHRpb24gYW5kIGV4YW1wbGVzOiBodHRwczovL2dpdGh1Yi5jb20vZXRlcm5pY29kZS9ib290c3RyYXAtZGF0ZXBpY2tlci4gIFxuRm9yICoqaTE4bioqIHlvdSBzaG91bGQgaW5jbHVkZSBqcyBmaWxlIGZyb20gaGVyZTogaHR0cHM6Ly9naXRodWIuY29tL2V0ZXJuaWNvZGUvYm9vdHN0cmFwLWRhdGVwaWNrZXIvdHJlZS9tYXN0ZXIvanMvbG9jYWxlc1xuYW5kIHNldCBgbGFuZ3VhZ2VgIG9wdGlvbi4gIFxuU2luY2UgMS40LjAgZGF0ZSBoYXMgZGlmZmVyZW50IGFwcGVhcmFuY2UgaW4gKipwb3B1cCoqIGFuZCAqKmlubGluZSoqIG1vZGVzLiBcblxuQGNsYXNzIGRhdGVcbkBleHRlbmRzIGFic3RyYWN0aW5wdXRcbkBmaW5hbFxuQGV4YW1wbGVcbjxhIGhyZWY9XCIjXCIgaWQ9XCJkb2JcIiBkYXRhLXR5cGU9XCJkYXRlXCIgZGF0YS1waz1cIjFcIiBkYXRhLXVybD1cIi9wb3N0XCIgZGF0YS10aXRsZT1cIlNlbGVjdCBkYXRlXCI+MTUvMDUvMTk4NDwvYT5cbjxzY3JpcHQ+XG4kKGZ1bmN0aW9uKCl7XG4gICAgJCgnI2RvYicpLmVkaXRhYmxlKHtcbiAgICAgICAgZm9ybWF0OiAneXl5eS1tbS1kZCcsICAgIFxuICAgICAgICB2aWV3Zm9ybWF0OiAnZGQvbW0veXl5eScsICAgIFxuICAgICAgICBkYXRlcGlja2VyOiB7XG4gICAgICAgICAgICAgICAgd2Vla1N0YXJ0OiAxXG4gICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xufSk7XG48L3NjcmlwdD5cbioqL1xuKGZ1bmN0aW9uICgkKSB7XG4gICAgO1xuICAgIFxuICAgIC8vc3RvcmUgYm9vdHN0cmFwLWRhdGVwaWNrZXIgYXMgYmRhdGVpY2tlciB0byBleGNsdWRlIGNvbmZsaWN0IHdpdGggalF1ZXJ5IFVJIG9uZVxuICAgICQuZm4uYmRhdGVwaWNrZXIgPSAkLmZuLmRhdGVwaWNrZXIubm9Db25mbGljdCgpO1xuICAgIGlmKCEkLmZuLmRhdGVwaWNrZXIpIHsgLy9pZiB0aGVyZSB3ZXJlIG5vIG90aGVyIGRhdGVwaWNrZXJzLCBrZWVwIGFsc28gb3JpZ2luYWwgbmFtZVxuICAgICAgICAkLmZuLmRhdGVwaWNrZXIgPSAkLmZuLmJkYXRlcGlja2VyOyAgICBcbiAgICB9ICAgIFxuICAgIFxuICAgIHZhciBEYXRlID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5pbml0KCdkYXRlJywgb3B0aW9ucywgRGF0ZS5kZWZhdWx0cyk7XG4gICAgICAgIHRoaXMuaW5pdFBpY2tlcihvcHRpb25zLCBEYXRlLmRlZmF1bHRzKTtcbiAgICB9O1xuXG4gICAgJC5mbi5lZGl0YWJsZXV0aWxzLmluaGVyaXQoRGF0ZSwgJC5mbi5lZGl0YWJsZXR5cGVzLmFic3RyYWN0aW5wdXQpOyAgICBcbiAgICBcbiAgICAkLmV4dGVuZChEYXRlLnByb3RvdHlwZSwge1xuICAgICAgICBpbml0UGlja2VyOiBmdW5jdGlvbihvcHRpb25zLCBkZWZhdWx0cykge1xuICAgICAgICAgICAgLy8nZm9ybWF0JyBpcyBzZXQgZGlyZWN0bHkgZnJvbSBzZXR0aW5ncyBvciBkYXRhLSogYXR0cmlidXRlc1xuXG4gICAgICAgICAgICAvL2J5IGRlZmF1bHQgdmlld2Zvcm1hdCBlcXVhbHMgdG8gZm9ybWF0XG4gICAgICAgICAgICBpZighdGhpcy5vcHRpb25zLnZpZXdmb3JtYXQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMudmlld2Zvcm1hdCA9IHRoaXMub3B0aW9ucy5mb3JtYXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vdHJ5IHBhcnNlIGRhdGVwaWNrZXIgY29uZmlnIGRlZmluZWQgYXMganNvbiBzdHJpbmcgaW4gZGF0YS1kYXRlcGlja2VyXG4gICAgICAgICAgICBvcHRpb25zLmRhdGVwaWNrZXIgPSAkLmZuLmVkaXRhYmxldXRpbHMudHJ5UGFyc2VKc29uKG9wdGlvbnMuZGF0ZXBpY2tlciwgdHJ1ZSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vb3ZlcnJpZGluZyBkYXRlcGlja2VyIGNvbmZpZyAoYXMgYnkgZGVmYXVsdCBqUXVlcnkgZXh0ZW5kKCkgaXMgbm90IHJlY3Vyc2l2ZSlcbiAgICAgICAgICAgIC8vc2luY2UgMS40IGRhdGVwaWNrZXIgaW50ZXJuYWxseSB1c2VzIHZpZXdmb3JtYXQgaW5zdGVhZCBvZiBmb3JtYXQuIEZvcm1hdCBpcyBmb3Igc3VibWl0IG9ubHlcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy5kYXRlcGlja2VyID0gJC5leHRlbmQoe30sIGRlZmF1bHRzLmRhdGVwaWNrZXIsIG9wdGlvbnMuZGF0ZXBpY2tlciwge1xuICAgICAgICAgICAgICAgIGZvcm1hdDogdGhpcy5vcHRpb25zLnZpZXdmb3JtYXRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvL2xhbmd1YWdlXG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMuZGF0ZXBpY2tlci5sYW5ndWFnZSA9IHRoaXMub3B0aW9ucy5kYXRlcGlja2VyLmxhbmd1YWdlIHx8ICdlbic7IFxuXG4gICAgICAgICAgICAvL3N0b3JlIERQZ2xvYmFsXG4gICAgICAgICAgICB0aGlzLmRwZyA9ICQuZm4uYmRhdGVwaWNrZXIuRFBHbG9iYWw7IFxuXG4gICAgICAgICAgICAvL3N0b3JlIHBhcnNlZCBmb3JtYXRzXG4gICAgICAgICAgICB0aGlzLnBhcnNlZEZvcm1hdCA9IHRoaXMuZHBnLnBhcnNlRm9ybWF0KHRoaXMub3B0aW9ucy5mb3JtYXQpO1xuICAgICAgICAgICAgdGhpcy5wYXJzZWRWaWV3Rm9ybWF0ID0gdGhpcy5kcGcucGFyc2VGb3JtYXQodGhpcy5vcHRpb25zLnZpZXdmb3JtYXQpOyAgICAgICAgICAgIFxuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgcmVuZGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLiRpbnB1dC5iZGF0ZXBpY2tlcih0aGlzLm9wdGlvbnMuZGF0ZXBpY2tlcik7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vXCJjbGVhclwiIGxpbmtcbiAgICAgICAgICAgIGlmKHRoaXMub3B0aW9ucy5jbGVhcikge1xuICAgICAgICAgICAgICAgIHRoaXMuJGNsZWFyID0gJCgnPGEgaHJlZj1cIiNcIj48L2E+JykuaHRtbCh0aGlzLm9wdGlvbnMuY2xlYXIpLmNsaWNrKCQucHJveHkoZnVuY3Rpb24oZSl7XG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgICAgICAgICAgIH0sIHRoaXMpKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB0aGlzLiR0cGwucGFyZW50KCkuYXBwZW5kKCQoJzxkaXYgY2xhc3M9XCJlZGl0YWJsZS1jbGVhclwiPicpLmFwcGVuZCh0aGlzLiRjbGVhcikpOyAgXG4gICAgICAgICAgICB9ICAgICAgICAgICAgICAgIFxuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgdmFsdWUyaHRtbDogZnVuY3Rpb24odmFsdWUsIGVsZW1lbnQpIHtcbiAgICAgICAgICAgdmFyIHRleHQgPSB2YWx1ZSA/IHRoaXMuZHBnLmZvcm1hdERhdGUodmFsdWUsIHRoaXMucGFyc2VkVmlld0Zvcm1hdCwgdGhpcy5vcHRpb25zLmRhdGVwaWNrZXIubGFuZ3VhZ2UpIDogJyc7XG4gICAgICAgICAgIERhdGUuc3VwZXJjbGFzcy52YWx1ZTJodG1sLmNhbGwodGhpcywgdGV4dCwgZWxlbWVudCk7IFxuICAgICAgICB9LFxuXG4gICAgICAgIGh0bWwydmFsdWU6IGZ1bmN0aW9uKGh0bWwpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlRGF0ZShodG1sLCB0aGlzLnBhcnNlZFZpZXdGb3JtYXQpO1xuICAgICAgICB9LCAgIFxuXG4gICAgICAgIHZhbHVlMnN0cjogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZSA/IHRoaXMuZHBnLmZvcm1hdERhdGUodmFsdWUsIHRoaXMucGFyc2VkRm9ybWF0LCB0aGlzLm9wdGlvbnMuZGF0ZXBpY2tlci5sYW5ndWFnZSkgOiAnJztcbiAgICAgICAgfSwgXG5cbiAgICAgICAgc3RyMnZhbHVlOiBmdW5jdGlvbihzdHIpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlRGF0ZShzdHIsIHRoaXMucGFyc2VkRm9ybWF0KTtcbiAgICAgICAgfSwgXG5cbiAgICAgICAgdmFsdWUyc3VibWl0OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsdWUyc3RyKHZhbHVlKTtcbiAgICAgICAgfSwgICAgICAgICAgICAgICAgICAgIFxuXG4gICAgICAgIHZhbHVlMmlucHV0OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy4kaW5wdXQuYmRhdGVwaWNrZXIoJ3VwZGF0ZScsIHZhbHVlKTtcbiAgICAgICAgfSxcblxuICAgICAgICBpbnB1dDJ2YWx1ZTogZnVuY3Rpb24oKSB7IFxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuJGlucHV0LmRhdGEoJ2RhdGVwaWNrZXInKS5kYXRlO1xuICAgICAgICB9LCAgICAgICBcblxuICAgICAgICBhY3RpdmF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIH0sXG5cbiAgICAgICAgY2xlYXI6ICBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuJGlucHV0LmRhdGEoJ2RhdGVwaWNrZXInKS5kYXRlID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuJGlucHV0LmZpbmQoJy5hY3RpdmUnKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XG4gICAgICAgICAgICBpZighdGhpcy5vcHRpb25zLnNob3didXR0b25zKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kaW5wdXQuY2xvc2VzdCgnZm9ybScpLnN1Ym1pdCgpOyBcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBhdXRvc3VibWl0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuJGlucHV0Lm9uKCdtb3VzZXVwJywgJy5kYXknLCBmdW5jdGlvbihlKXtcbiAgICAgICAgICAgICAgICBpZigkKGUuY3VycmVudFRhcmdldCkuaXMoJy5vbGQnKSB8fCAkKGUuY3VycmVudFRhcmdldCkuaXMoJy5uZXcnKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciAkZm9ybSA9ICQodGhpcykuY2xvc2VzdCgnZm9ybScpO1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICRmb3JtLnN1Ym1pdCgpO1xuICAgICAgICAgICAgICAgIH0sIDIwMCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgLy9jaGFuZ2VkYXRlIGlzIG5vdCBzdWl0YWJsZSBhcyBpdCB0cmlnZ2VyZWQgd2hlbiBzaG93aW5nIGRhdGVwaWNrZXIuIHNlZSAjMTQ5XG4gICAgICAgICAgIC8qXG4gICAgICAgICAgIHRoaXMuJGlucHV0Lm9uKCdjaGFuZ2VEYXRlJywgZnVuY3Rpb24oZSl7XG4gICAgICAgICAgICAgICB2YXIgJGZvcm0gPSAkKHRoaXMpLmNsb3Nlc3QoJ2Zvcm0nKTtcbiAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgJGZvcm0uc3VibWl0KCk7XG4gICAgICAgICAgICAgICB9LCAyMDApO1xuICAgICAgICAgICB9KTtcbiAgICAgICAgICAgKi9cbiAgICAgICB9LFxuICAgICAgIFxuICAgICAgIC8qXG4gICAgICAgIEZvciBpbmNvcnJlY3QgZGF0ZSBib290c3RyYXAtZGF0ZXBpY2tlciByZXR1cm5zIGN1cnJlbnQgZGF0ZSB0aGF0IGlzIG5vdCBzdWl0YWJsZVxuICAgICAgICBmb3IgZGF0ZWZpZWxkLlxuICAgICAgICBUaGlzIGZ1bmN0aW9uIHJldHVybnMgbnVsbCBmb3IgaW5jb3JyZWN0IGRhdGUuICBcbiAgICAgICAqL1xuICAgICAgIHBhcnNlRGF0ZTogZnVuY3Rpb24oc3RyLCBmb3JtYXQpIHtcbiAgICAgICAgICAgdmFyIGRhdGUgPSBudWxsLCBmb3JtYXR0ZWRCYWNrO1xuICAgICAgICAgICBpZihzdHIpIHtcbiAgICAgICAgICAgICAgIGRhdGUgPSB0aGlzLmRwZy5wYXJzZURhdGUoc3RyLCBmb3JtYXQsIHRoaXMub3B0aW9ucy5kYXRlcGlja2VyLmxhbmd1YWdlKTtcbiAgICAgICAgICAgICAgIGlmKHR5cGVvZiBzdHIgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgZm9ybWF0dGVkQmFjayA9IHRoaXMuZHBnLmZvcm1hdERhdGUoZGF0ZSwgZm9ybWF0LCB0aGlzLm9wdGlvbnMuZGF0ZXBpY2tlci5sYW5ndWFnZSk7XG4gICAgICAgICAgICAgICAgICAgaWYoc3RyICE9PSBmb3JtYXR0ZWRCYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgIGRhdGUgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgfVxuICAgICAgICAgICByZXR1cm4gZGF0ZTtcbiAgICAgICB9XG5cbiAgICB9KTtcblxuICAgIERhdGUuZGVmYXVsdHMgPSAkLmV4dGVuZCh7fSwgJC5mbi5lZGl0YWJsZXR5cGVzLmFic3RyYWN0aW5wdXQuZGVmYXVsdHMsIHtcbiAgICAgICAgLyoqXG4gICAgICAgIEBwcm9wZXJ0eSB0cGwgXG4gICAgICAgIEBkZWZhdWx0IDxkaXY+PC9kaXY+XG4gICAgICAgICoqLyAgICAgICAgIFxuICAgICAgICB0cGw6JzxkaXYgY2xhc3M9XCJlZGl0YWJsZS1kYXRlIHdlbGxcIj48L2Rpdj4nLFxuICAgICAgICAvKipcbiAgICAgICAgQHByb3BlcnR5IGlucHV0Y2xhc3MgXG4gICAgICAgIEBkZWZhdWx0IG51bGxcbiAgICAgICAgKiovXG4gICAgICAgIGlucHV0Y2xhc3M6IG51bGwsXG4gICAgICAgIC8qKlxuICAgICAgICBGb3JtYXQgdXNlZCBmb3Igc2VuZGluZyB2YWx1ZSB0byBzZXJ2ZXIuIEFsc28gYXBwbGllZCB3aGVuIGNvbnZlcnRpbmcgZGF0ZSBmcm9tIDxjb2RlPmRhdGEtdmFsdWU8L2NvZGU+IGF0dHJpYnV0ZS48YnI+XG4gICAgICAgIFBvc3NpYmxlIHRva2VucyBhcmU6IDxjb2RlPmQsIGRkLCBtLCBtbSwgeXksIHl5eXk8L2NvZGU+ICBcblxuICAgICAgICBAcHJvcGVydHkgZm9ybWF0IFxuICAgICAgICBAdHlwZSBzdHJpbmdcbiAgICAgICAgQGRlZmF1bHQgeXl5eS1tbS1kZFxuICAgICAgICAqKi9cbiAgICAgICAgZm9ybWF0Oid5eXl5LW1tLWRkJyxcbiAgICAgICAgLyoqXG4gICAgICAgIEZvcm1hdCB1c2VkIGZvciBkaXNwbGF5aW5nIGRhdGUuIEFsc28gYXBwbGllZCB3aGVuIGNvbnZlcnRpbmcgZGF0ZSBmcm9tIGVsZW1lbnQncyB0ZXh0IG9uIGluaXQuICAgXG4gICAgICAgIElmIG5vdCBzcGVjaWZpZWQgZXF1YWxzIHRvIDxjb2RlPmZvcm1hdDwvY29kZT5cblxuICAgICAgICBAcHJvcGVydHkgdmlld2Zvcm1hdCBcbiAgICAgICAgQHR5cGUgc3RyaW5nXG4gICAgICAgIEBkZWZhdWx0IG51bGxcbiAgICAgICAgKiovXG4gICAgICAgIHZpZXdmb3JtYXQ6IG51bGwsXG4gICAgICAgIC8qKlxuICAgICAgICBDb25maWd1cmF0aW9uIG9mIGRhdGVwaWNrZXIuXG4gICAgICAgIEZ1bGwgbGlzdCBvZiBvcHRpb25zOiBodHRwOi8vYm9vdHN0cmFwLWRhdGVwaWNrZXIucmVhZHRoZWRvY3Mub3JnL2VuL2xhdGVzdC9vcHRpb25zLmh0bWxcblxuICAgICAgICBAcHJvcGVydHkgZGF0ZXBpY2tlciBcbiAgICAgICAgQHR5cGUgb2JqZWN0XG4gICAgICAgIEBkZWZhdWx0IHtcbiAgICAgICAgICAgIHdlZWtTdGFydDogMCxcbiAgICAgICAgICAgIHN0YXJ0VmlldzogMCxcbiAgICAgICAgICAgIG1pblZpZXdNb2RlOiAwLFxuICAgICAgICAgICAgYXV0b2Nsb3NlOiBmYWxzZVxuICAgICAgICB9XG4gICAgICAgICoqL1xuICAgICAgICBkYXRlcGlja2VyOntcbiAgICAgICAgICAgIHdlZWtTdGFydDogMCxcbiAgICAgICAgICAgIHN0YXJ0VmlldzogMCxcbiAgICAgICAgICAgIG1pblZpZXdNb2RlOiAwLFxuICAgICAgICAgICAgYXV0b2Nsb3NlOiBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgVGV4dCBzaG93biBhcyBjbGVhciBkYXRlIGJ1dHRvbi4gXG4gICAgICAgIElmIDxjb2RlPmZhbHNlPC9jb2RlPiBjbGVhciBidXR0b24gd2lsbCBub3QgYmUgcmVuZGVyZWQuXG5cbiAgICAgICAgQHByb3BlcnR5IGNsZWFyIFxuICAgICAgICBAdHlwZSBib29sZWFufHN0cmluZ1xuICAgICAgICBAZGVmYXVsdCAneCBjbGVhcidcbiAgICAgICAgKiovXG4gICAgICAgIGNsZWFyOiAnJnRpbWVzOyBjbGVhcidcbiAgICB9KTtcblxuICAgICQuZm4uZWRpdGFibGV0eXBlcy5kYXRlID0gRGF0ZTtcblxufSh3aW5kb3cualF1ZXJ5KSk7XG5cbi8qKlxuQm9vdHN0cmFwIGRhdGVmaWVsZCBpbnB1dCAtIG1vZGlmaWNhdGlvbiBmb3IgaW5saW5lIG1vZGUuXG5TaG93cyBub3JtYWwgPGlucHV0IHR5cGU9XCJ0ZXh0XCI+IGFuZCBiaW5kcyBwb3B1cCBkYXRlcGlja2VyLiAgXG5BdXRvbWF0aWNhbGx5IHNob3duIGluIGlubGluZSBtb2RlLlxuXG5AY2xhc3MgZGF0ZWZpZWxkXG5AZXh0ZW5kcyBkYXRlXG5cbkBzaW5jZSAxLjQuMFxuKiovXG4oZnVuY3Rpb24gKCQpIHtcbiAgICA7XG4gICAgXG4gICAgdmFyIERhdGVGaWVsZCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuaW5pdCgnZGF0ZWZpZWxkJywgb3B0aW9ucywgRGF0ZUZpZWxkLmRlZmF1bHRzKTtcbiAgICAgICAgdGhpcy5pbml0UGlja2VyKG9wdGlvbnMsIERhdGVGaWVsZC5kZWZhdWx0cyk7XG4gICAgfTtcblxuICAgICQuZm4uZWRpdGFibGV1dGlscy5pbmhlcml0KERhdGVGaWVsZCwgJC5mbi5lZGl0YWJsZXR5cGVzLmRhdGUpOyAgICBcbiAgICBcbiAgICAkLmV4dGVuZChEYXRlRmllbGQucHJvdG90eXBlLCB7XG4gICAgICAgIHJlbmRlcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy4kaW5wdXQgPSB0aGlzLiR0cGwuZmluZCgnaW5wdXQnKTtcbiAgICAgICAgICAgIHRoaXMuc2V0Q2xhc3MoKTtcbiAgICAgICAgICAgIHRoaXMuc2V0QXR0cigncGxhY2Vob2xkZXInKTtcbiAgICBcbiAgICAgICAgICAgIC8vYm9vdHN0cmFwLWRhdGVwaWNrZXIgaXMgc2V0IGBiZGF0ZWlja2VyYCB0byBleGNsdWRlIGNvbmZsaWN0IHdpdGggalF1ZXJ5IFVJIG9uZS4gKGluIGRhdGUuanMpICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuJHRwbC5iZGF0ZXBpY2tlcih0aGlzLm9wdGlvbnMuZGF0ZXBpY2tlcik7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vbmVlZCB0byBkaXNhYmxlIG9yaWdpbmFsIGV2ZW50IGhhbmRsZXJzXG4gICAgICAgICAgICB0aGlzLiRpbnB1dC5vZmYoJ2ZvY3VzIGtleWRvd24nKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy91cGRhdGUgdmFsdWUgb2YgZGF0ZXBpY2tlclxuICAgICAgICAgICAgdGhpcy4kaW5wdXQua2V5dXAoJC5wcm94eShmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgdGhpcy4kdHBsLnJlbW92ZURhdGEoJ2RhdGUnKTtcbiAgICAgICAgICAgICAgIHRoaXMuJHRwbC5iZGF0ZXBpY2tlcigndXBkYXRlJyk7XG4gICAgICAgICAgICB9LCB0aGlzKSk7XG4gICAgICAgICAgICBcbiAgICAgICAgfSwgICBcbiAgICAgICAgXG4gICAgICAgdmFsdWUyaW5wdXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgIHRoaXMuJGlucHV0LnZhbCh2YWx1ZSA/IHRoaXMuZHBnLmZvcm1hdERhdGUodmFsdWUsIHRoaXMucGFyc2VkVmlld0Zvcm1hdCwgdGhpcy5vcHRpb25zLmRhdGVwaWNrZXIubGFuZ3VhZ2UpIDogJycpO1xuICAgICAgICAgICB0aGlzLiR0cGwuYmRhdGVwaWNrZXIoJ3VwZGF0ZScpO1xuICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgIGlucHV0MnZhbHVlOiBmdW5jdGlvbigpIHsgXG4gICAgICAgICAgIHJldHVybiB0aGlzLmh0bWwydmFsdWUodGhpcy4kaW5wdXQudmFsKCkpO1xuICAgICAgIH0sICAgICAgICAgICAgICBcbiAgICAgICAgXG4gICAgICAgYWN0aXZhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAkLmZuLmVkaXRhYmxldHlwZXMudGV4dC5wcm90b3R5cGUuYWN0aXZhdGUuY2FsbCh0aGlzKTtcbiAgICAgICB9LFxuICAgICAgIFxuICAgICAgIGF1dG9zdWJtaXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgLy9yZXNldCBhdXRvc3VibWl0IHRvIGVtcHR5ICBcbiAgICAgICB9XG4gICAgfSk7XG4gICAgXG4gICAgRGF0ZUZpZWxkLmRlZmF1bHRzID0gJC5leHRlbmQoe30sICQuZm4uZWRpdGFibGV0eXBlcy5kYXRlLmRlZmF1bHRzLCB7XG4gICAgICAgIC8qKlxuICAgICAgICBAcHJvcGVydHkgdHBsIFxuICAgICAgICAqKi8gICAgICAgICBcbiAgICAgICAgdHBsOic8ZGl2IGNsYXNzPVwiaW5wdXQtYXBwZW5kIGRhdGVcIj48aW5wdXQgdHlwZT1cInRleHRcIi8+PHNwYW4gY2xhc3M9XCJhZGQtb25cIj48aSBjbGFzcz1cImljb24tdGhcIj48L2k+PC9zcGFuPjwvZGl2PicsXG4gICAgICAgIC8qKlxuICAgICAgICBAcHJvcGVydHkgaW5wdXRjbGFzcyBcbiAgICAgICAgQGRlZmF1bHQgJ2lucHV0LXNtYWxsJ1xuICAgICAgICAqKi8gICAgICAgICBcbiAgICAgICAgaW5wdXRjbGFzczogJ2lucHV0LXNtYWxsJyxcbiAgICAgICAgXG4gICAgICAgIC8qIGRhdGVwaWNrZXIgY29uZmlnICovXG4gICAgICAgIGRhdGVwaWNrZXI6IHtcbiAgICAgICAgICAgIHdlZWtTdGFydDogMCxcbiAgICAgICAgICAgIHN0YXJ0VmlldzogMCxcbiAgICAgICAgICAgIG1pblZpZXdNb2RlOiAwLFxuICAgICAgICAgICAgYXV0b2Nsb3NlOiB0cnVlXG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBcbiAgICAkLmZuLmVkaXRhYmxldHlwZXMuZGF0ZWZpZWxkID0gRGF0ZUZpZWxkO1xuXG59KHdpbmRvdy5qUXVlcnkpKTtcbi8qKlxuQm9vdHN0cmFwLWRhdGV0aW1lcGlja2VyLiAgXG5CYXNlZCBvbiBbc21hbG90IGJvb3RzdHJhcC1kYXRldGltZXBpY2tlciBwbHVnaW5dKGh0dHBzOi8vZ2l0aHViLmNvbS9zbWFsb3QvYm9vdHN0cmFwLWRhdGV0aW1lcGlja2VyKS4gXG5CZWZvcmUgdXNhZ2UgeW91IHNob3VsZCBtYW51YWxseSBpbmNsdWRlIGRlcGVuZGVudCBqcyBhbmQgY3NzOlxuXG4gICAgPGxpbmsgaHJlZj1cImNzcy9kYXRldGltZXBpY2tlci5jc3NcIiByZWw9XCJzdHlsZXNoZWV0XCIgdHlwZT1cInRleHQvY3NzXCI+PC9saW5rPiBcbiAgICA8c2NyaXB0IHNyYz1cImpzL2Jvb3RzdHJhcC1kYXRldGltZXBpY2tlci5qc1wiPjwvc2NyaXB0PlxuXG5Gb3IgKippMThuKiogeW91IHNob3VsZCBpbmNsdWRlIGpzIGZpbGUgZnJvbSBoZXJlOiBodHRwczovL2dpdGh1Yi5jb20vc21hbG90L2Jvb3RzdHJhcC1kYXRldGltZXBpY2tlci90cmVlL21hc3Rlci9qcy9sb2NhbGVzXG5hbmQgc2V0IGBsYW5ndWFnZWAgb3B0aW9uLiAgXG5cbkBjbGFzcyBkYXRldGltZVxuQGV4dGVuZHMgYWJzdHJhY3RpbnB1dFxuQGZpbmFsXG5Ac2luY2UgMS40LjRcbkBleGFtcGxlXG48YSBocmVmPVwiI1wiIGlkPVwibGFzdF9zZWVuXCIgZGF0YS10eXBlPVwiZGF0ZXRpbWVcIiBkYXRhLXBrPVwiMVwiIGRhdGEtdXJsPVwiL3Bvc3RcIiB0aXRsZT1cIlNlbGVjdCBkYXRlICYgdGltZVwiPjE1LzAzLzIwMTMgMTI6NDU8L2E+XG48c2NyaXB0PlxuJChmdW5jdGlvbigpe1xuICAgICQoJyNsYXN0X3NlZW4nKS5lZGl0YWJsZSh7XG4gICAgICAgIGZvcm1hdDogJ3l5eXktbW0tZGQgaGg6aWknLCAgICBcbiAgICAgICAgdmlld2Zvcm1hdDogJ2RkL21tL3l5eXkgaGg6aWknLCAgICBcbiAgICAgICAgZGF0ZXRpbWVwaWNrZXI6IHtcbiAgICAgICAgICAgICAgICB3ZWVrU3RhcnQ6IDFcbiAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG59KTtcbjwvc2NyaXB0PlxuKiovXG4oZnVuY3Rpb24gKCQpIHtcbiAgICA7XG5cbiAgICB2YXIgRGF0ZVRpbWUgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICB0aGlzLmluaXQoJ2RhdGV0aW1lJywgb3B0aW9ucywgRGF0ZVRpbWUuZGVmYXVsdHMpO1xuICAgICAgICB0aGlzLmluaXRQaWNrZXIob3B0aW9ucywgRGF0ZVRpbWUuZGVmYXVsdHMpO1xuICAgIH07XG5cbiAgICAkLmZuLmVkaXRhYmxldXRpbHMuaW5oZXJpdChEYXRlVGltZSwgJC5mbi5lZGl0YWJsZXR5cGVzLmFic3RyYWN0aW5wdXQpO1xuXG4gICAgJC5leHRlbmQoRGF0ZVRpbWUucHJvdG90eXBlLCB7XG4gICAgICAgIGluaXRQaWNrZXI6IGZ1bmN0aW9uKG9wdGlvbnMsIGRlZmF1bHRzKSB7XG4gICAgICAgICAgICAvLydmb3JtYXQnIGlzIHNldCBkaXJlY3RseSBmcm9tIHNldHRpbmdzIG9yIGRhdGEtKiBhdHRyaWJ1dGVzXG5cbiAgICAgICAgICAgIC8vYnkgZGVmYXVsdCB2aWV3Zm9ybWF0IGVxdWFscyB0byBmb3JtYXRcbiAgICAgICAgICAgIGlmKCF0aGlzLm9wdGlvbnMudmlld2Zvcm1hdCkge1xuICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy52aWV3Zm9ybWF0ID0gdGhpcy5vcHRpb25zLmZvcm1hdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy90cnkgcGFyc2UgZGF0ZXRpbWVwaWNrZXIgY29uZmlnIGRlZmluZWQgYXMganNvbiBzdHJpbmcgaW4gZGF0YS1kYXRldGltZXBpY2tlclxuICAgICAgICAgICAgb3B0aW9ucy5kYXRldGltZXBpY2tlciA9ICQuZm4uZWRpdGFibGV1dGlscy50cnlQYXJzZUpzb24ob3B0aW9ucy5kYXRldGltZXBpY2tlciwgdHJ1ZSk7XG5cbiAgICAgICAgICAgIC8vb3ZlcnJpZGluZyBkYXRldGltZXBpY2tlciBjb25maWcgKGFzIGJ5IGRlZmF1bHQgalF1ZXJ5IGV4dGVuZCgpIGlzIG5vdCByZWN1cnNpdmUpXG4gICAgICAgICAgICAvL3NpbmNlIDEuNCBkYXRldGltZXBpY2tlciBpbnRlcm5hbGx5IHVzZXMgdmlld2Zvcm1hdCBpbnN0ZWFkIG9mIGZvcm1hdC4gRm9ybWF0IGlzIGZvciBzdWJtaXQgb25seVxuICAgICAgICAgICAgdGhpcy5vcHRpb25zLmRhdGV0aW1lcGlja2VyID0gJC5leHRlbmQoe30sIGRlZmF1bHRzLmRhdGV0aW1lcGlja2VyLCBvcHRpb25zLmRhdGV0aW1lcGlja2VyLCB7XG4gICAgICAgICAgICAgICAgZm9ybWF0OiB0aGlzLm9wdGlvbnMudmlld2Zvcm1hdFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vbGFuZ3VhZ2VcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy5kYXRldGltZXBpY2tlci5sYW5ndWFnZSA9IHRoaXMub3B0aW9ucy5kYXRldGltZXBpY2tlci5sYW5ndWFnZSB8fCAnZW4nOyBcblxuICAgICAgICAgICAgLy9zdG9yZSBEUGdsb2JhbFxuICAgICAgICAgICAgdGhpcy5kcGcgPSAkLmZuLmRhdGV0aW1lcGlja2VyLkRQR2xvYmFsOyBcblxuICAgICAgICAgICAgLy9zdG9yZSBwYXJzZWQgZm9ybWF0c1xuICAgICAgICAgICAgdGhpcy5wYXJzZWRGb3JtYXQgPSB0aGlzLmRwZy5wYXJzZUZvcm1hdCh0aGlzLm9wdGlvbnMuZm9ybWF0LCB0aGlzLm9wdGlvbnMuZm9ybWF0VHlwZSk7XG4gICAgICAgICAgICB0aGlzLnBhcnNlZFZpZXdGb3JtYXQgPSB0aGlzLmRwZy5wYXJzZUZvcm1hdCh0aGlzLm9wdGlvbnMudmlld2Zvcm1hdCwgdGhpcy5vcHRpb25zLmZvcm1hdFR5cGUpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlbmRlcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy4kaW5wdXQuZGF0ZXRpbWVwaWNrZXIodGhpcy5vcHRpb25zLmRhdGV0aW1lcGlja2VyKTtcblxuICAgICAgICAgICAgLy9hZGp1c3QgY29udGFpbmVyIHBvc2l0aW9uIHdoZW4gdmlld01vZGUgY2hhbmdlc1xuICAgICAgICAgICAgLy9zZWUgaHR0cHM6Ly9naXRodWIuY29tL3NtYWxvdC9ib290c3RyYXAtZGF0ZXRpbWVwaWNrZXIvcHVsbC84MFxuICAgICAgICAgICAgdGhpcy4kaW5wdXQub24oJ2NoYW5nZU1vZGUnLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGYgPSAkKHRoaXMpLmNsb3Nlc3QoJ2Zvcm0nKS5wYXJlbnQoKTtcbiAgICAgICAgICAgICAgICAvL3RpbWVvdXQgaGVyZSwgb3RoZXJ3aXNlIGNvbnRhaW5lciBjaGFuZ2VzIHBvc2l0aW9uIGJlZm9yZSBmb3JtIGhhcyBuZXcgc2l6ZVxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgZi50cmlnZ2VySGFuZGxlcigncmVzaXplJyk7XG4gICAgICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy9cImNsZWFyXCIgbGlua1xuICAgICAgICAgICAgaWYodGhpcy5vcHRpb25zLmNsZWFyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kY2xlYXIgPSAkKCc8YSBocmVmPVwiI1wiPjwvYT4nKS5odG1sKHRoaXMub3B0aW9ucy5jbGVhcikuY2xpY2soJC5wcm94eShmdW5jdGlvbihlKXtcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICAgICAgICAgICAgfSwgdGhpcykpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy4kdHBsLnBhcmVudCgpLmFwcGVuZCgkKCc8ZGl2IGNsYXNzPVwiZWRpdGFibGUtY2xlYXJcIj4nKS5hcHBlbmQodGhpcy4kY2xlYXIpKTsgIFxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIHZhbHVlMmh0bWw6IGZ1bmN0aW9uKHZhbHVlLCBlbGVtZW50KSB7XG4gICAgICAgICAgICAvL2Zvcm1hdERhdGUgd29ya3Mgd2l0aCBVVENEYXRlIVxuICAgICAgICAgICAgdmFyIHRleHQgPSB2YWx1ZSA/IHRoaXMuZHBnLmZvcm1hdERhdGUodGhpcy50b1VUQyh2YWx1ZSksIHRoaXMucGFyc2VkVmlld0Zvcm1hdCwgdGhpcy5vcHRpb25zLmRhdGV0aW1lcGlja2VyLmxhbmd1YWdlLCB0aGlzLm9wdGlvbnMuZm9ybWF0VHlwZSkgOiAnJztcbiAgICAgICAgICAgIGlmKGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBEYXRlVGltZS5zdXBlcmNsYXNzLnZhbHVlMmh0bWwuY2FsbCh0aGlzLCB0ZXh0LCBlbGVtZW50KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRleHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgaHRtbDJ2YWx1ZTogZnVuY3Rpb24oaHRtbCkge1xuICAgICAgICAgICAgLy9wYXJzZURhdGUgcmV0dXJuIHV0YyBkYXRlIVxuICAgICAgICAgICAgdmFyIHZhbHVlID0gdGhpcy5wYXJzZURhdGUoaHRtbCwgdGhpcy5wYXJzZWRWaWV3Rm9ybWF0KTsgXG4gICAgICAgICAgICByZXR1cm4gdmFsdWUgPyB0aGlzLmZyb21VVEModmFsdWUpIDogbnVsbDtcbiAgICAgICAgfSxcblxuICAgICAgICB2YWx1ZTJzdHI6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICAvL2Zvcm1hdERhdGUgd29ya3Mgd2l0aCBVVENEYXRlIVxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlID8gdGhpcy5kcGcuZm9ybWF0RGF0ZSh0aGlzLnRvVVRDKHZhbHVlKSwgdGhpcy5wYXJzZWRGb3JtYXQsIHRoaXMub3B0aW9ucy5kYXRldGltZXBpY2tlci5sYW5ndWFnZSwgdGhpcy5vcHRpb25zLmZvcm1hdFR5cGUpIDogJyc7XG4gICAgICAgfSxcblxuICAgICAgIHN0cjJ2YWx1ZTogZnVuY3Rpb24oc3RyKSB7XG4gICAgICAgICAgIC8vcGFyc2VEYXRlIHJldHVybiB1dGMgZGF0ZSFcbiAgICAgICAgICAgdmFyIHZhbHVlID0gdGhpcy5wYXJzZURhdGUoc3RyLCB0aGlzLnBhcnNlZEZvcm1hdCk7XG4gICAgICAgICAgIHJldHVybiB2YWx1ZSA/IHRoaXMuZnJvbVVUQyh2YWx1ZSkgOiBudWxsO1xuICAgICAgIH0sXG5cbiAgICAgICB2YWx1ZTJzdWJtaXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlMnN0cih2YWx1ZSk7XG4gICAgICAgfSxcblxuICAgICAgIHZhbHVlMmlucHV0OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICBpZih2YWx1ZSkge1xuICAgICAgICAgICAgIHRoaXMuJGlucHV0LmRhdGEoJ2RhdGV0aW1lcGlja2VyJykuc2V0RGF0ZSh2YWx1ZSk7XG4gICAgICAgICAgIH1cbiAgICAgICB9LFxuXG4gICAgICAgaW5wdXQydmFsdWU6IGZ1bmN0aW9uKCkgeyBcbiAgICAgICAgICAgLy9kYXRlIG1heSBiZSBjbGVhcmVkLCBpbiB0aGF0IGNhc2UgZ2V0RGF0ZSgpIHRyaWdnZXJzIGVycm9yXG4gICAgICAgICAgIHZhciBkdCA9IHRoaXMuJGlucHV0LmRhdGEoJ2RhdGV0aW1lcGlja2VyJyk7XG4gICAgICAgICAgIHJldHVybiBkdC5kYXRlID8gZHQuZ2V0RGF0ZSgpIDogbnVsbDtcbiAgICAgICB9LFxuXG4gICAgICAgYWN0aXZhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgIH0sXG5cbiAgICAgICBjbGVhcjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdGhpcy4kaW5wdXQuZGF0YSgnZGF0ZXRpbWVwaWNrZXInKS5kYXRlID0gbnVsbDtcbiAgICAgICAgICB0aGlzLiRpbnB1dC5maW5kKCcuYWN0aXZlJykucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICAgIGlmKCF0aGlzLm9wdGlvbnMuc2hvd2J1dHRvbnMpIHtcbiAgICAgICAgICAgICB0aGlzLiRpbnB1dC5jbG9zZXN0KCdmb3JtJykuc3VibWl0KCk7IFxuICAgICAgICAgIH0gICAgICAgICAgXG4gICAgICAgfSxcblxuICAgICAgIGF1dG9zdWJtaXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICB0aGlzLiRpbnB1dC5vbignbW91c2V1cCcsICcubWludXRlJywgZnVuY3Rpb24oZSl7XG4gICAgICAgICAgICAgICB2YXIgJGZvcm0gPSAkKHRoaXMpLmNsb3Nlc3QoJ2Zvcm0nKTtcbiAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgJGZvcm0uc3VibWl0KCk7XG4gICAgICAgICAgICAgICB9LCAyMDApO1xuICAgICAgICAgICB9KTtcbiAgICAgICB9LFxuXG4gICAgICAgLy9jb252ZXJ0IGRhdGUgZnJvbSBsb2NhbCB0byB1dGNcbiAgICAgICB0b1VUQzogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgIHJldHVybiB2YWx1ZSA/IG5ldyBEYXRlKHZhbHVlLnZhbHVlT2YoKSAtIHZhbHVlLmdldFRpbWV6b25lT2Zmc2V0KCkgKiA2MDAwMCkgOiB2YWx1ZTsgIFxuICAgICAgIH0sXG5cbiAgICAgICAvL2NvbnZlcnQgZGF0ZSBmcm9tIHV0YyB0byBsb2NhbFxuICAgICAgIGZyb21VVEM6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICByZXR1cm4gdmFsdWUgPyBuZXcgRGF0ZSh2YWx1ZS52YWx1ZU9mKCkgKyB2YWx1ZS5nZXRUaW1lem9uZU9mZnNldCgpICogNjAwMDApIDogdmFsdWU7ICBcbiAgICAgICB9LFxuXG4gICAgICAgLypcbiAgICAgICAgRm9yIGluY29ycmVjdCBkYXRlIGJvb3RzdHJhcC1kYXRldGltZXBpY2tlciByZXR1cm5zIGN1cnJlbnQgZGF0ZSB0aGF0IGlzIG5vdCBzdWl0YWJsZVxuICAgICAgICBmb3IgZGF0ZXRpbWVmaWVsZC5cbiAgICAgICAgVGhpcyBmdW5jdGlvbiByZXR1cm5zIG51bGwgZm9yIGluY29ycmVjdCBkYXRlLiAgXG4gICAgICAgKi9cbiAgICAgICBwYXJzZURhdGU6IGZ1bmN0aW9uKHN0ciwgZm9ybWF0KSB7XG4gICAgICAgICAgIHZhciBkYXRlID0gbnVsbCwgZm9ybWF0dGVkQmFjaztcbiAgICAgICAgICAgaWYoc3RyKSB7XG4gICAgICAgICAgICAgICBkYXRlID0gdGhpcy5kcGcucGFyc2VEYXRlKHN0ciwgZm9ybWF0LCB0aGlzLm9wdGlvbnMuZGF0ZXRpbWVwaWNrZXIubGFuZ3VhZ2UsIHRoaXMub3B0aW9ucy5mb3JtYXRUeXBlKTtcbiAgICAgICAgICAgICAgIGlmKHR5cGVvZiBzdHIgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgZm9ybWF0dGVkQmFjayA9IHRoaXMuZHBnLmZvcm1hdERhdGUoZGF0ZSwgZm9ybWF0LCB0aGlzLm9wdGlvbnMuZGF0ZXRpbWVwaWNrZXIubGFuZ3VhZ2UsIHRoaXMub3B0aW9ucy5mb3JtYXRUeXBlKTtcbiAgICAgICAgICAgICAgICAgICBpZihzdHIgIT09IGZvcm1hdHRlZEJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgZGF0ZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgfSBcbiAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgfVxuICAgICAgICAgICByZXR1cm4gZGF0ZTtcbiAgICAgICB9XG5cbiAgICB9KTtcblxuICAgIERhdGVUaW1lLmRlZmF1bHRzID0gJC5leHRlbmQoe30sICQuZm4uZWRpdGFibGV0eXBlcy5hYnN0cmFjdGlucHV0LmRlZmF1bHRzLCB7XG4gICAgICAgIC8qKlxuICAgICAgICBAcHJvcGVydHkgdHBsIFxuICAgICAgICBAZGVmYXVsdCA8ZGl2PjwvZGl2PlxuICAgICAgICAqKi8gICAgICAgICBcbiAgICAgICAgdHBsOic8ZGl2IGNsYXNzPVwiZWRpdGFibGUtZGF0ZSB3ZWxsXCI+PC9kaXY+JyxcbiAgICAgICAgLyoqXG4gICAgICAgIEBwcm9wZXJ0eSBpbnB1dGNsYXNzIFxuICAgICAgICBAZGVmYXVsdCBudWxsXG4gICAgICAgICoqL1xuICAgICAgICBpbnB1dGNsYXNzOiBudWxsLFxuICAgICAgICAvKipcbiAgICAgICAgRm9ybWF0IHVzZWQgZm9yIHNlbmRpbmcgdmFsdWUgdG8gc2VydmVyLiBBbHNvIGFwcGxpZWQgd2hlbiBjb252ZXJ0aW5nIGRhdGUgZnJvbSA8Y29kZT5kYXRhLXZhbHVlPC9jb2RlPiBhdHRyaWJ1dGUuPGJyPlxuICAgICAgICBQb3NzaWJsZSB0b2tlbnMgYXJlOiA8Y29kZT5kLCBkZCwgbSwgbW0sIHl5LCB5eXl5LCBoLCBpPC9jb2RlPiAgXG4gICAgICAgIFxuICAgICAgICBAcHJvcGVydHkgZm9ybWF0IFxuICAgICAgICBAdHlwZSBzdHJpbmdcbiAgICAgICAgQGRlZmF1bHQgeXl5eS1tbS1kZCBoaDppaVxuICAgICAgICAqKi8gICAgICAgICBcbiAgICAgICAgZm9ybWF0Oid5eXl5LW1tLWRkIGhoOmlpJyxcbiAgICAgICAgZm9ybWF0VHlwZTonc3RhbmRhcmQnLFxuICAgICAgICAvKipcbiAgICAgICAgRm9ybWF0IHVzZWQgZm9yIGRpc3BsYXlpbmcgZGF0ZS4gQWxzbyBhcHBsaWVkIHdoZW4gY29udmVydGluZyBkYXRlIGZyb20gZWxlbWVudCdzIHRleHQgb24gaW5pdC4gICBcbiAgICAgICAgSWYgbm90IHNwZWNpZmllZCBlcXVhbHMgdG8gPGNvZGU+Zm9ybWF0PC9jb2RlPlxuICAgICAgICBcbiAgICAgICAgQHByb3BlcnR5IHZpZXdmb3JtYXQgXG4gICAgICAgIEB0eXBlIHN0cmluZ1xuICAgICAgICBAZGVmYXVsdCBudWxsXG4gICAgICAgICoqL1xuICAgICAgICB2aWV3Zm9ybWF0OiBudWxsLFxuICAgICAgICAvKipcbiAgICAgICAgQ29uZmlndXJhdGlvbiBvZiBkYXRldGltZXBpY2tlci5cbiAgICAgICAgRnVsbCBsaXN0IG9mIG9wdGlvbnM6IGh0dHBzOi8vZ2l0aHViLmNvbS9zbWFsb3QvYm9vdHN0cmFwLWRhdGV0aW1lcGlja2VyXG5cbiAgICAgICAgQHByb3BlcnR5IGRhdGV0aW1lcGlja2VyIFxuICAgICAgICBAdHlwZSBvYmplY3RcbiAgICAgICAgQGRlZmF1bHQgeyB9XG4gICAgICAgICoqL1xuICAgICAgICBkYXRldGltZXBpY2tlcjp7XG4gICAgICAgICAgICB0b2RheUhpZ2hsaWdodDogZmFsc2UsXG4gICAgICAgICAgICBhdXRvY2xvc2U6IGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICBUZXh0IHNob3duIGFzIGNsZWFyIGRhdGUgYnV0dG9uLiBcbiAgICAgICAgSWYgPGNvZGU+ZmFsc2U8L2NvZGU+IGNsZWFyIGJ1dHRvbiB3aWxsIG5vdCBiZSByZW5kZXJlZC5cblxuICAgICAgICBAcHJvcGVydHkgY2xlYXIgXG4gICAgICAgIEB0eXBlIGJvb2xlYW58c3RyaW5nXG4gICAgICAgIEBkZWZhdWx0ICd4IGNsZWFyJ1xuICAgICAgICAqKi9cbiAgICAgICAgY2xlYXI6ICcmdGltZXM7IGNsZWFyJ1xuICAgIH0pO1xuXG4gICAgJC5mbi5lZGl0YWJsZXR5cGVzLmRhdGV0aW1lID0gRGF0ZVRpbWU7XG5cbn0od2luZG93LmpRdWVyeSkpO1xuLyoqXG5Cb290c3RyYXAgZGF0ZXRpbWVmaWVsZCBpbnB1dCAtIGRhdGV0aW1lIGlucHV0IGZvciBpbmxpbmUgbW9kZS5cblNob3dzIG5vcm1hbCA8aW5wdXQgdHlwZT1cInRleHRcIj4gYW5kIGJpbmRzIHBvcHVwIGRhdGV0aW1lcGlja2VyLiAgXG5BdXRvbWF0aWNhbGx5IHNob3duIGluIGlubGluZSBtb2RlLlxuXG5AY2xhc3MgZGF0ZXRpbWVmaWVsZFxuQGV4dGVuZHMgZGF0ZXRpbWVcblxuKiovXG4oZnVuY3Rpb24gKCQpIHtcbiAgICA7XG4gICAgXG4gICAgdmFyIERhdGVUaW1lRmllbGQgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICB0aGlzLmluaXQoJ2RhdGV0aW1lZmllbGQnLCBvcHRpb25zLCBEYXRlVGltZUZpZWxkLmRlZmF1bHRzKTtcbiAgICAgICAgdGhpcy5pbml0UGlja2VyKG9wdGlvbnMsIERhdGVUaW1lRmllbGQuZGVmYXVsdHMpO1xuICAgIH07XG5cbiAgICAkLmZuLmVkaXRhYmxldXRpbHMuaW5oZXJpdChEYXRlVGltZUZpZWxkLCAkLmZuLmVkaXRhYmxldHlwZXMuZGF0ZXRpbWUpO1xuICAgIFxuICAgICQuZXh0ZW5kKERhdGVUaW1lRmllbGQucHJvdG90eXBlLCB7XG4gICAgICAgIHJlbmRlcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy4kaW5wdXQgPSB0aGlzLiR0cGwuZmluZCgnaW5wdXQnKTtcbiAgICAgICAgICAgIHRoaXMuc2V0Q2xhc3MoKTtcbiAgICAgICAgICAgIHRoaXMuc2V0QXR0cigncGxhY2Vob2xkZXInKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy4kdHBsLmRhdGV0aW1lcGlja2VyKHRoaXMub3B0aW9ucy5kYXRldGltZXBpY2tlcik7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vbmVlZCB0byBkaXNhYmxlIG9yaWdpbmFsIGV2ZW50IGhhbmRsZXJzXG4gICAgICAgICAgICB0aGlzLiRpbnB1dC5vZmYoJ2ZvY3VzIGtleWRvd24nKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy91cGRhdGUgdmFsdWUgb2YgZGF0ZXBpY2tlclxuICAgICAgICAgICAgdGhpcy4kaW5wdXQua2V5dXAoJC5wcm94eShmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgdGhpcy4kdHBsLnJlbW92ZURhdGEoJ2RhdGUnKTtcbiAgICAgICAgICAgICAgIHRoaXMuJHRwbC5kYXRldGltZXBpY2tlcigndXBkYXRlJyk7XG4gICAgICAgICAgICB9LCB0aGlzKSk7XG4gICAgICAgICAgICBcbiAgICAgICAgfSwgICBcbiAgICAgIFxuICAgICAgIHZhbHVlMmlucHV0OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICB0aGlzLiRpbnB1dC52YWwodGhpcy52YWx1ZTJodG1sKHZhbHVlKSk7XG4gICAgICAgICAgIHRoaXMuJHRwbC5kYXRldGltZXBpY2tlcigndXBkYXRlJyk7XG4gICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgaW5wdXQydmFsdWU6IGZ1bmN0aW9uKCkgeyBcbiAgICAgICAgICAgcmV0dXJuIHRoaXMuaHRtbDJ2YWx1ZSh0aGlzLiRpbnB1dC52YWwoKSk7XG4gICAgICAgfSwgICAgICAgICAgICAgIFxuICAgICAgICBcbiAgICAgICBhY3RpdmF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICQuZm4uZWRpdGFibGV0eXBlcy50ZXh0LnByb3RvdHlwZS5hY3RpdmF0ZS5jYWxsKHRoaXMpO1xuICAgICAgIH0sXG4gICAgICAgXG4gICAgICAgYXV0b3N1Ym1pdDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAvL3Jlc2V0IGF1dG9zdWJtaXQgdG8gZW1wdHkgIFxuICAgICAgIH1cbiAgICB9KTtcbiAgICBcbiAgICBEYXRlVGltZUZpZWxkLmRlZmF1bHRzID0gJC5leHRlbmQoe30sICQuZm4uZWRpdGFibGV0eXBlcy5kYXRldGltZS5kZWZhdWx0cywge1xuICAgICAgICAvKipcbiAgICAgICAgQHByb3BlcnR5IHRwbCBcbiAgICAgICAgKiovICAgICAgICAgXG4gICAgICAgIHRwbDonPGRpdiBjbGFzcz1cImlucHV0LWFwcGVuZCBkYXRlXCI+PGlucHV0IHR5cGU9XCJ0ZXh0XCIvPjxzcGFuIGNsYXNzPVwiYWRkLW9uXCI+PGkgY2xhc3M9XCJpY29uLXRoXCI+PC9pPjwvc3Bhbj48L2Rpdj4nLFxuICAgICAgICAvKipcbiAgICAgICAgQHByb3BlcnR5IGlucHV0Y2xhc3MgXG4gICAgICAgIEBkZWZhdWx0ICdpbnB1dC1tZWRpdW0nXG4gICAgICAgICoqLyAgICAgICAgIFxuICAgICAgICBpbnB1dGNsYXNzOiAnaW5wdXQtbWVkaXVtJyxcbiAgICAgICAgXG4gICAgICAgIC8qIGRhdGV0aW1lcGlja2VyIGNvbmZpZyAqL1xuICAgICAgICBkYXRldGltZXBpY2tlcjp7XG4gICAgICAgICAgICB0b2RheUhpZ2hsaWdodDogZmFsc2UsXG4gICAgICAgICAgICBhdXRvY2xvc2U6IHRydWVcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIFxuICAgICQuZm4uZWRpdGFibGV0eXBlcy5kYXRldGltZWZpZWxkID0gRGF0ZVRpbWVGaWVsZDtcblxufSh3aW5kb3cualF1ZXJ5KSk7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2VkaXRhYmxlL2pzL2Jvb3RzdHJhcC1lZGl0YWJsZS5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///2\n");

/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Editable_vue__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Editable_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__Editable_vue__);\n\n\nVue.component('editable', __WEBPACK_IMPORTED_MODULE_0__Editable_vue___default.a);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi5qcz8zNDc5Il0sIm5hbWVzIjpbIlZ1ZSIsImNvbXBvbmVudCJdLCJtYXBwaW5ncyI6Ijs7O0FBQUE7O0FBRUFBLElBQUlDLFNBQUosQ0FBYyxVQUFkLEVBQTBCLHFEQUExQiIsImZpbGUiOiIzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEVkaXRhYmxlIGZyb20gJy4vRWRpdGFibGUudnVlJ1xuXG5WdWUuY29tcG9uZW50KCdlZGl0YWJsZScsIEVkaXRhYmxlKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9tYWluLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///3\n");

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(5)(undefined);\n// imports\n\n\n// module\nexports.push([module.i, \"/*! X-editable - v1.5.1 \\n* In-place editing with Twitter Bootstrap, jQuery UI or pure jQuery\\n* http://github.com/vitalets/x-editable\\n* Copyright (c) 2013 Vitaliy Potapov; Licensed MIT */\\n.editableform {\\n    margin-bottom: 0; /* overwrites bootstrap margin */\\n}\\n\\n.editableform .control-group {\\n    margin-bottom: 0; /* overwrites bootstrap margin */\\n    white-space: nowrap; /* prevent wrapping buttons on new line */\\n    line-height: 20px; /* overwriting bootstrap line-height. See #133 */\\n}\\n\\n/* \\n  BS3 width:1005 for inputs breaks editable form in popup \\n  See: https://github.com/vitalets/x-editable/issues/393\\n*/\\n.editableform .form-control {\\n    width: auto;\\n}\\n\\n.editable-buttons {\\n   display: inline-block; /* should be inline to take effect of parent's white-space: nowrap */\\n   vertical-align: top;\\n   margin-left: 7px;\\n   /* inline-block emulation for IE7*/\\n   zoom: 1; \\n   *display: inline;\\n}\\n\\n.editable-buttons.editable-buttons-bottom {\\n   display: block; \\n   margin-top: 7px;\\n   margin-left: 0;\\n}\\n\\n.editable-input {\\n    vertical-align: top; \\n    display: inline-block; /* should be inline to take effect of parent's white-space: nowrap */\\n    width: auto; /* bootstrap-responsive has width: 100% that breakes layout */\\n    white-space: normal; /* reset white-space decalred in parent*/\\n   /* display-inline emulation for IE7*/\\n   zoom: 1; \\n   *display: inline;   \\n}\\n\\n.editable-buttons .editable-cancel {\\n   margin-left: 7px; \\n}\\n\\n/*for jquery-ui buttons need set height to look more pretty*/\\n.editable-buttons button.ui-button-icon-only {\\n   height: 24px; \\n   width: 30px;\\n}\\n\\n.editableform-loading {\\n    background: url(\" + __webpack_require__(7) + \") center center no-repeat;  \\n    height: 25px;\\n    width: auto; \\n    min-width: 25px; \\n}\\n\\n.editable-inline .editableform-loading {\\n    background-position: left 5px;      \\n}\\n\\n .editable-error-block {\\n    max-width: 300px;\\n    margin: 5px 0 0 0;\\n    width: auto;\\n    white-space: normal;\\n}\\n\\n/*add padding for jquery ui*/\\n.editable-error-block.ui-state-error {\\n    padding: 3px;  \\n}  \\n\\n.editable-error {\\n   color: red;  \\n}\\n\\n/* ---- For specific types ---- */\\n\\n.editableform .editable-date {\\n    padding: 0; \\n    margin: 0;\\n    float: left;\\n}\\n\\n/* move datepicker icon to center of add-on button. See https://github.com/vitalets/x-editable/issues/183 */\\n.editable-inline .add-on .icon-th {\\n   margin-top: 3px;\\n   margin-left: 1px; \\n}\\n\\n\\n/* checklist vertical alignment */\\n.editable-checklist label input[type=\\\"checkbox\\\"], \\n.editable-checklist label span {\\n    vertical-align: middle;\\n    margin: 0;\\n}\\n\\n.editable-checklist label {\\n    white-space: nowrap; \\n}\\n\\n/* set exact width of textarea to fit buttons toolbar */\\n.editable-wysihtml5 {\\n    width: 566px; \\n    height: 250px; \\n}\\n\\n/* clear button shown as link in date inputs */\\n.editable-clear {\\n   clear: both;\\n   font-size: 0.9em;\\n   text-decoration: none;\\n   text-align: right;\\n}\\n\\n/* IOS-style clear button for text inputs */\\n.editable-clear-x {\\n   background: url(\" + __webpack_require__(6) + \") center center no-repeat;\\n   display: block;\\n   width: 13px;    \\n   height: 13px;\\n   position: absolute;\\n   opacity: 0.6;\\n   z-index: 100;\\n   \\n   top: 50%;\\n   right: 6px;\\n   margin-top: -6px;\\n   \\n}\\n\\n.editable-clear-x:hover {\\n   opacity: 1;\\n}\\n\\n.editable-pre-wrapped {\\n   white-space: pre-wrap;\\n}\\n.editable-container.editable-popup {\\n    max-width: none !important; /* without this rule poshytip/tooltip does not stretch */\\n}  \\n\\n.editable-container.popover {\\n    width: auto; /* without this rule popover does not stretch */\\n}\\n\\n.editable-container.editable-inline {\\n    display: inline-block; \\n    vertical-align: middle;\\n    width: auto;\\n    /* inline-block emulation for IE7*/\\n    zoom: 1; \\n    *display: inline;    \\n}\\n\\n.editable-container.ui-widget {\\n   font-size: inherit;  /* jqueryui widget font 1.1em too big, overwrite it */\\n   z-index: 9990; /* should be less than select2 dropdown z-index to close dropdown first when click */\\n}\\n.editable-click, \\na.editable-click, \\na.editable-click:hover {\\n    text-decoration: none;\\n    border-bottom: dashed 1px #0088cc;\\n}\\n\\n.editable-click.editable-disabled, \\na.editable-click.editable-disabled, \\na.editable-click.editable-disabled:hover {\\n   color: #585858;  \\n   cursor: default;\\n   border-bottom: none;\\n}\\n\\n.editable-empty, .editable-empty:hover, .editable-empty:focus{\\n  font-style: italic; \\n  color: #DD1144;  \\n  /* border-bottom: none; */\\n  text-decoration: none;\\n}\\n\\n.editable-unsaved {\\n  font-weight: bold; \\n}\\n\\n.editable-unsaved:after {\\n/*    content: '*'*/\\n}\\n\\n.editable-bg-transition {\\n  -webkit-transition: background-color 1400ms ease-out;\\n  -moz-transition: background-color 1400ms ease-out;\\n  -o-transition: background-color 1400ms ease-out;\\n  -ms-transition: background-color 1400ms ease-out;\\n  transition: background-color 1400ms ease-out;  \\n}\\n\\n/*see https://github.com/vitalets/x-editable/issues/139 */\\n.form-horizontal .editable\\n{ \\n    padding-top: 5px;\\n    display:inline-block;\\n}\\n\\n\\n/*!\\n * Datepicker for Bootstrap\\n *\\n * Copyright 2012 Stefan Petre\\n * Improvements by Andrew Rowls\\n * Licensed under the Apache License v2.0\\n * http://www.apache.org/licenses/LICENSE-2.0\\n *\\n */\\n.datepicker {\\n  padding: 4px;\\n  -webkit-border-radius: 4px;\\n  -moz-border-radius: 4px;\\n  border-radius: 4px;\\n  direction: ltr;\\n  /*.dow {\\n\\t\\tborder-top: 1px solid #ddd !important;\\n\\t}*/\\n\\n}\\n.datepicker-inline {\\n  width: 220px;\\n}\\n.datepicker.datepicker-rtl {\\n  direction: rtl;\\n}\\n.datepicker.datepicker-rtl table tr td span {\\n  float: right;\\n}\\n.datepicker-dropdown {\\n  top: 0;\\n  left: 0;\\n}\\n.datepicker-dropdown:before {\\n  content: '';\\n  display: inline-block;\\n  border-left: 7px solid transparent;\\n  border-right: 7px solid transparent;\\n  border-bottom: 7px solid #ccc;\\n  border-bottom-color: rgba(0, 0, 0, 0.2);\\n  position: absolute;\\n  top: -7px;\\n  left: 6px;\\n}\\n.datepicker-dropdown:after {\\n  content: '';\\n  display: inline-block;\\n  border-left: 6px solid transparent;\\n  border-right: 6px solid transparent;\\n  border-bottom: 6px solid #ffffff;\\n  position: absolute;\\n  top: -6px;\\n  left: 7px;\\n}\\n.datepicker > div {\\n  display: none;\\n}\\n.datepicker.days div.datepicker-days {\\n  display: block;\\n}\\n.datepicker.months div.datepicker-months {\\n  display: block;\\n}\\n.datepicker.years div.datepicker-years {\\n  display: block;\\n}\\n.datepicker table {\\n  margin: 0;\\n}\\n.datepicker td,\\n.datepicker th {\\n  text-align: center;\\n  width: 20px;\\n  height: 20px;\\n  -webkit-border-radius: 4px;\\n  -moz-border-radius: 4px;\\n  border-radius: 4px;\\n  border: none;\\n}\\n.table-striped .datepicker table tr td,\\n.table-striped .datepicker table tr th {\\n  background-color: transparent;\\n}\\n.datepicker table tr td.day:hover {\\n  background: #eeeeee;\\n  cursor: pointer;\\n}\\n.datepicker table tr td.old,\\n.datepicker table tr td.new {\\n  color: #999999;\\n}\\n.datepicker table tr td.disabled,\\n.datepicker table tr td.disabled:hover {\\n  background: none;\\n  color: #999999;\\n  cursor: default;\\n}\\n.datepicker table tr td.today,\\n.datepicker table tr td.today:hover,\\n.datepicker table tr td.today.disabled,\\n.datepicker table tr td.today.disabled:hover {\\n  background-color: #fde19a;\\n  background-image: -moz-linear-gradient(top, #fdd49a, #fdf59a);\\n  background-image: -ms-linear-gradient(top, #fdd49a, #fdf59a);\\n  background-image: -webkit-gradient(linear, 0 0, 0 100%, from(#fdd49a), to(#fdf59a));\\n  background-image: -webkit-linear-gradient(top, #fdd49a, #fdf59a);\\n  background-image: -o-linear-gradient(top, #fdd49a, #fdf59a);\\n  background-image: linear-gradient(top, #fdd49a, #fdf59a);\\n  background-repeat: repeat-x;\\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#fdd49a', endColorstr='#fdf59a', GradientType=0);\\n  border-color: #fdf59a #fdf59a #fbed50;\\n  border-color: rgba(0, 0, 0, 0.1) rgba(0, 0, 0, 0.1) rgba(0, 0, 0, 0.25);\\n  filter: progid:DXImageTransform.Microsoft.gradient(enabled=false);\\n  color: #000;\\n}\\n.datepicker table tr td.today:hover,\\n.datepicker table tr td.today:hover:hover,\\n.datepicker table tr td.today.disabled:hover,\\n.datepicker table tr td.today.disabled:hover:hover,\\n.datepicker table tr td.today:active,\\n.datepicker table tr td.today:hover:active,\\n.datepicker table tr td.today.disabled:active,\\n.datepicker table tr td.today.disabled:hover:active,\\n.datepicker table tr td.today.active,\\n.datepicker table tr td.today:hover.active,\\n.datepicker table tr td.today.disabled.active,\\n.datepicker table tr td.today.disabled:hover.active,\\n.datepicker table tr td.today.disabled,\\n.datepicker table tr td.today:hover.disabled,\\n.datepicker table tr td.today.disabled.disabled,\\n.datepicker table tr td.today.disabled:hover.disabled,\\n.datepicker table tr td.today[disabled],\\n.datepicker table tr td.today:hover[disabled],\\n.datepicker table tr td.today.disabled[disabled],\\n.datepicker table tr td.today.disabled:hover[disabled] {\\n  background-color: #fdf59a;\\n}\\n.datepicker table tr td.today:active,\\n.datepicker table tr td.today:hover:active,\\n.datepicker table tr td.today.disabled:active,\\n.datepicker table tr td.today.disabled:hover:active,\\n.datepicker table tr td.today.active,\\n.datepicker table tr td.today:hover.active,\\n.datepicker table tr td.today.disabled.active,\\n.datepicker table tr td.today.disabled:hover.active {\\n  background-color: #fbf069 \\\\9;\\n}\\n.datepicker table tr td.today:hover:hover {\\n  color: #000;\\n}\\n.datepicker table tr td.today.active:hover {\\n  color: #fff;\\n}\\n.datepicker table tr td.range,\\n.datepicker table tr td.range:hover,\\n.datepicker table tr td.range.disabled,\\n.datepicker table tr td.range.disabled:hover {\\n  background: #eeeeee;\\n  -webkit-border-radius: 0;\\n  -moz-border-radius: 0;\\n  border-radius: 0;\\n}\\n.datepicker table tr td.range.today,\\n.datepicker table tr td.range.today:hover,\\n.datepicker table tr td.range.today.disabled,\\n.datepicker table tr td.range.today.disabled:hover {\\n  background-color: #f3d17a;\\n  background-image: -moz-linear-gradient(top, #f3c17a, #f3e97a);\\n  background-image: -ms-linear-gradient(top, #f3c17a, #f3e97a);\\n  background-image: -webkit-gradient(linear, 0 0, 0 100%, from(#f3c17a), to(#f3e97a));\\n  background-image: -webkit-linear-gradient(top, #f3c17a, #f3e97a);\\n  background-image: -o-linear-gradient(top, #f3c17a, #f3e97a);\\n  background-image: linear-gradient(top, #f3c17a, #f3e97a);\\n  background-repeat: repeat-x;\\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#f3c17a', endColorstr='#f3e97a', GradientType=0);\\n  border-color: #f3e97a #f3e97a #edde34;\\n  border-color: rgba(0, 0, 0, 0.1) rgba(0, 0, 0, 0.1) rgba(0, 0, 0, 0.25);\\n  filter: progid:DXImageTransform.Microsoft.gradient(enabled=false);\\n  -webkit-border-radius: 0;\\n  -moz-border-radius: 0;\\n  border-radius: 0;\\n}\\n.datepicker table tr td.range.today:hover,\\n.datepicker table tr td.range.today:hover:hover,\\n.datepicker table tr td.range.today.disabled:hover,\\n.datepicker table tr td.range.today.disabled:hover:hover,\\n.datepicker table tr td.range.today:active,\\n.datepicker table tr td.range.today:hover:active,\\n.datepicker table tr td.range.today.disabled:active,\\n.datepicker table tr td.range.today.disabled:hover:active,\\n.datepicker table tr td.range.today.active,\\n.datepicker table tr td.range.today:hover.active,\\n.datepicker table tr td.range.today.disabled.active,\\n.datepicker table tr td.range.today.disabled:hover.active,\\n.datepicker table tr td.range.today.disabled,\\n.datepicker table tr td.range.today:hover.disabled,\\n.datepicker table tr td.range.today.disabled.disabled,\\n.datepicker table tr td.range.today.disabled:hover.disabled,\\n.datepicker table tr td.range.today[disabled],\\n.datepicker table tr td.range.today:hover[disabled],\\n.datepicker table tr td.range.today.disabled[disabled],\\n.datepicker table tr td.range.today.disabled:hover[disabled] {\\n  background-color: #f3e97a;\\n}\\n.datepicker table tr td.range.today:active,\\n.datepicker table tr td.range.today:hover:active,\\n.datepicker table tr td.range.today.disabled:active,\\n.datepicker table tr td.range.today.disabled:hover:active,\\n.datepicker table tr td.range.today.active,\\n.datepicker table tr td.range.today:hover.active,\\n.datepicker table tr td.range.today.disabled.active,\\n.datepicker table tr td.range.today.disabled:hover.active {\\n  background-color: #efe24b \\\\9;\\n}\\n.datepicker table tr td.selected,\\n.datepicker table tr td.selected:hover,\\n.datepicker table tr td.selected.disabled,\\n.datepicker table tr td.selected.disabled:hover {\\n  background-color: #9e9e9e;\\n  background-image: -moz-linear-gradient(top, #b3b3b3, #808080);\\n  background-image: -ms-linear-gradient(top, #b3b3b3, #808080);\\n  background-image: -webkit-gradient(linear, 0 0, 0 100%, from(#b3b3b3), to(#808080));\\n  background-image: -webkit-linear-gradient(top, #b3b3b3, #808080);\\n  background-image: -o-linear-gradient(top, #b3b3b3, #808080);\\n  background-image: linear-gradient(top, #b3b3b3, #808080);\\n  background-repeat: repeat-x;\\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#b3b3b3', endColorstr='#808080', GradientType=0);\\n  border-color: #808080 #808080 #595959;\\n  border-color: rgba(0, 0, 0, 0.1) rgba(0, 0, 0, 0.1) rgba(0, 0, 0, 0.25);\\n  filter: progid:DXImageTransform.Microsoft.gradient(enabled=false);\\n  color: #fff;\\n  text-shadow: 0 -1px 0 rgba(0, 0, 0, 0.25);\\n}\\n.datepicker table tr td.selected:hover,\\n.datepicker table tr td.selected:hover:hover,\\n.datepicker table tr td.selected.disabled:hover,\\n.datepicker table tr td.selected.disabled:hover:hover,\\n.datepicker table tr td.selected:active,\\n.datepicker table tr td.selected:hover:active,\\n.datepicker table tr td.selected.disabled:active,\\n.datepicker table tr td.selected.disabled:hover:active,\\n.datepicker table tr td.selected.active,\\n.datepicker table tr td.selected:hover.active,\\n.datepicker table tr td.selected.disabled.active,\\n.datepicker table tr td.selected.disabled:hover.active,\\n.datepicker table tr td.selected.disabled,\\n.datepicker table tr td.selected:hover.disabled,\\n.datepicker table tr td.selected.disabled.disabled,\\n.datepicker table tr td.selected.disabled:hover.disabled,\\n.datepicker table tr td.selected[disabled],\\n.datepicker table tr td.selected:hover[disabled],\\n.datepicker table tr td.selected.disabled[disabled],\\n.datepicker table tr td.selected.disabled:hover[disabled] {\\n  background-color: #808080;\\n}\\n.datepicker table tr td.selected:active,\\n.datepicker table tr td.selected:hover:active,\\n.datepicker table tr td.selected.disabled:active,\\n.datepicker table tr td.selected.disabled:hover:active,\\n.datepicker table tr td.selected.active,\\n.datepicker table tr td.selected:hover.active,\\n.datepicker table tr td.selected.disabled.active,\\n.datepicker table tr td.selected.disabled:hover.active {\\n  background-color: #666666 \\\\9;\\n}\\n.datepicker table tr td.active,\\n.datepicker table tr td.active:hover,\\n.datepicker table tr td.active.disabled,\\n.datepicker table tr td.active.disabled:hover {\\n  background-color: #006dcc;\\n  background-image: -moz-linear-gradient(top, #0088cc, #0044cc);\\n  background-image: -ms-linear-gradient(top, #0088cc, #0044cc);\\n  background-image: -webkit-gradient(linear, 0 0, 0 100%, from(#0088cc), to(#0044cc));\\n  background-image: -webkit-linear-gradient(top, #0088cc, #0044cc);\\n  background-image: -o-linear-gradient(top, #0088cc, #0044cc);\\n  background-image: linear-gradient(top, #0088cc, #0044cc);\\n  background-repeat: repeat-x;\\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#0088cc', endColorstr='#0044cc', GradientType=0);\\n  border-color: #0044cc #0044cc #002a80;\\n  border-color: rgba(0, 0, 0, 0.1) rgba(0, 0, 0, 0.1) rgba(0, 0, 0, 0.25);\\n  filter: progid:DXImageTransform.Microsoft.gradient(enabled=false);\\n  color: #fff;\\n  text-shadow: 0 -1px 0 rgba(0, 0, 0, 0.25);\\n}\\n.datepicker table tr td.active:hover,\\n.datepicker table tr td.active:hover:hover,\\n.datepicker table tr td.active.disabled:hover,\\n.datepicker table tr td.active.disabled:hover:hover,\\n.datepicker table tr td.active:active,\\n.datepicker table tr td.active:hover:active,\\n.datepicker table tr td.active.disabled:active,\\n.datepicker table tr td.active.disabled:hover:active,\\n.datepicker table tr td.active.active,\\n.datepicker table tr td.active:hover.active,\\n.datepicker table tr td.active.disabled.active,\\n.datepicker table tr td.active.disabled:hover.active,\\n.datepicker table tr td.active.disabled,\\n.datepicker table tr td.active:hover.disabled,\\n.datepicker table tr td.active.disabled.disabled,\\n.datepicker table tr td.active.disabled:hover.disabled,\\n.datepicker table tr td.active[disabled],\\n.datepicker table tr td.active:hover[disabled],\\n.datepicker table tr td.active.disabled[disabled],\\n.datepicker table tr td.active.disabled:hover[disabled] {\\n  background-color: #0044cc;\\n}\\n.datepicker table tr td.active:active,\\n.datepicker table tr td.active:hover:active,\\n.datepicker table tr td.active.disabled:active,\\n.datepicker table tr td.active.disabled:hover:active,\\n.datepicker table tr td.active.active,\\n.datepicker table tr td.active:hover.active,\\n.datepicker table tr td.active.disabled.active,\\n.datepicker table tr td.active.disabled:hover.active {\\n  background-color: #003399 \\\\9;\\n}\\n.datepicker table tr td span {\\n  display: block;\\n  width: 23%;\\n  height: 54px;\\n  line-height: 54px;\\n  float: left;\\n  margin: 1%;\\n  cursor: pointer;\\n  -webkit-border-radius: 4px;\\n  -moz-border-radius: 4px;\\n  border-radius: 4px;\\n}\\n.datepicker table tr td span:hover {\\n  background: #eeeeee;\\n}\\n.datepicker table tr td span.disabled,\\n.datepicker table tr td span.disabled:hover {\\n  background: none;\\n  color: #999999;\\n  cursor: default;\\n}\\n.datepicker table tr td span.active,\\n.datepicker table tr td span.active:hover,\\n.datepicker table tr td span.active.disabled,\\n.datepicker table tr td span.active.disabled:hover {\\n  background-color: #006dcc;\\n  background-image: -moz-linear-gradient(top, #0088cc, #0044cc);\\n  background-image: -ms-linear-gradient(top, #0088cc, #0044cc);\\n  background-image: -webkit-gradient(linear, 0 0, 0 100%, from(#0088cc), to(#0044cc));\\n  background-image: -webkit-linear-gradient(top, #0088cc, #0044cc);\\n  background-image: -o-linear-gradient(top, #0088cc, #0044cc);\\n  background-image: linear-gradient(top, #0088cc, #0044cc);\\n  background-repeat: repeat-x;\\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#0088cc', endColorstr='#0044cc', GradientType=0);\\n  border-color: #0044cc #0044cc #002a80;\\n  border-color: rgba(0, 0, 0, 0.1) rgba(0, 0, 0, 0.1) rgba(0, 0, 0, 0.25);\\n  filter: progid:DXImageTransform.Microsoft.gradient(enabled=false);\\n  color: #fff;\\n  text-shadow: 0 -1px 0 rgba(0, 0, 0, 0.25);\\n}\\n.datepicker table tr td span.active:hover,\\n.datepicker table tr td span.active:hover:hover,\\n.datepicker table tr td span.active.disabled:hover,\\n.datepicker table tr td span.active.disabled:hover:hover,\\n.datepicker table tr td span.active:active,\\n.datepicker table tr td span.active:hover:active,\\n.datepicker table tr td span.active.disabled:active,\\n.datepicker table tr td span.active.disabled:hover:active,\\n.datepicker table tr td span.active.active,\\n.datepicker table tr td span.active:hover.active,\\n.datepicker table tr td span.active.disabled.active,\\n.datepicker table tr td span.active.disabled:hover.active,\\n.datepicker table tr td span.active.disabled,\\n.datepicker table tr td span.active:hover.disabled,\\n.datepicker table tr td span.active.disabled.disabled,\\n.datepicker table tr td span.active.disabled:hover.disabled,\\n.datepicker table tr td span.active[disabled],\\n.datepicker table tr td span.active:hover[disabled],\\n.datepicker table tr td span.active.disabled[disabled],\\n.datepicker table tr td span.active.disabled:hover[disabled] {\\n  background-color: #0044cc;\\n}\\n.datepicker table tr td span.active:active,\\n.datepicker table tr td span.active:hover:active,\\n.datepicker table tr td span.active.disabled:active,\\n.datepicker table tr td span.active.disabled:hover:active,\\n.datepicker table tr td span.active.active,\\n.datepicker table tr td span.active:hover.active,\\n.datepicker table tr td span.active.disabled.active,\\n.datepicker table tr td span.active.disabled:hover.active {\\n  background-color: #003399 \\\\9;\\n}\\n.datepicker table tr td span.old,\\n.datepicker table tr td span.new {\\n  color: #999999;\\n}\\n.datepicker th.datepicker-switch {\\n  width: 145px;\\n}\\n.datepicker thead tr:first-child th,\\n.datepicker tfoot tr th {\\n  cursor: pointer;\\n}\\n.datepicker thead tr:first-child th:hover,\\n.datepicker tfoot tr th:hover {\\n  background: #eeeeee;\\n}\\n.datepicker .cw {\\n  font-size: 10px;\\n  width: 12px;\\n  padding: 0 2px 0 5px;\\n  vertical-align: middle;\\n}\\n.datepicker thead tr:first-child th.cw {\\n  cursor: default;\\n  background-color: transparent;\\n}\\n.input-append.date .add-on i,\\n.input-prepend.date .add-on i {\\n  display: block;\\n  cursor: pointer;\\n  width: 16px;\\n  height: 16px;\\n}\\n.input-daterange input {\\n  text-align: center;\\n}\\n.input-daterange input:first-child {\\n  -webkit-border-radius: 3px 0 0 3px;\\n  -moz-border-radius: 3px 0 0 3px;\\n  border-radius: 3px 0 0 3px;\\n}\\n.input-daterange input:last-child {\\n  -webkit-border-radius: 0 3px 3px 0;\\n  -moz-border-radius: 0 3px 3px 0;\\n  border-radius: 0 3px 3px 0;\\n}\\n.input-daterange .add-on {\\n  display: inline-block;\\n  width: auto;\\n  min-width: 16px;\\n  height: 18px;\\n  padding: 4px 5px;\\n  font-weight: normal;\\n  line-height: 18px;\\n  text-align: center;\\n  text-shadow: 0 1px 0 #ffffff;\\n  vertical-align: middle;\\n  background-color: #eeeeee;\\n  border: 1px solid #ccc;\\n  margin-left: -5px;\\n  margin-right: -5px;\\n}\\n\", \"\"]);\n\n// exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4\n");

/***/ }),
/* 5 */
/***/ (function(module, exports) {

eval("/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\nmodule.exports = function(useSourceMap) {\n\tvar list = [];\n\n\t// return the list of modules as css string\n\tlist.toString = function toString() {\n\t\treturn this.map(function (item) {\n\t\t\tvar content = cssWithMappingToString(item, useSourceMap);\n\t\t\tif(item[2]) {\n\t\t\t\treturn \"@media \" + item[2] + \"{\" + content + \"}\";\n\t\t\t} else {\n\t\t\t\treturn content;\n\t\t\t}\n\t\t}).join(\"\");\n\t};\n\n\t// import a list of modules into the list\n\tlist.i = function(modules, mediaQuery) {\n\t\tif(typeof modules === \"string\")\n\t\t\tmodules = [[null, modules, \"\"]];\n\t\tvar alreadyImportedModules = {};\n\t\tfor(var i = 0; i < this.length; i++) {\n\t\t\tvar id = this[i][0];\n\t\t\tif(typeof id === \"number\")\n\t\t\t\talreadyImportedModules[id] = true;\n\t\t}\n\t\tfor(i = 0; i < modules.length; i++) {\n\t\t\tvar item = modules[i];\n\t\t\t// skip already imported module\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\n\t\t\t//  when a module is imported multiple times with different media queries.\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\n\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\n\t\t\t\tif(mediaQuery && !item[2]) {\n\t\t\t\t\titem[2] = mediaQuery;\n\t\t\t\t} else if(mediaQuery) {\n\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\n\t\t\t\t}\n\t\t\t\tlist.push(item);\n\t\t\t}\n\t\t}\n\t};\n\treturn list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n\tvar content = item[1] || '';\n\tvar cssMapping = item[3];\n\tif (!cssMapping) {\n\t\treturn content;\n\t}\n\n\tif (useSourceMap && typeof btoa === 'function') {\n\t\tvar sourceMapping = toComment(cssMapping);\n\t\tvar sourceURLs = cssMapping.sources.map(function (source) {\n\t\t\treturn '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'\n\t\t});\n\n\t\treturn [content].concat(sourceURLs).concat([sourceMapping]).join('\\n');\n\t}\n\n\treturn [content].join('\\n');\n}\n\n// Adapted from convert-source-map (MIT)\nfunction toComment(sourceMap) {\n\t// eslint-disable-next-line no-undef\n\tvar base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n\tvar data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;\n\n\treturn '/*# ' + data + ' */';\n}\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzP2RhMDQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyxnQkFBZ0I7QUFDbkQsSUFBSTtBQUNKO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixpQkFBaUI7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLG9CQUFvQjtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvREFBb0QsY0FBYzs7QUFFbEU7QUFDQSIsImZpbGUiOiI1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbi8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHVzZVNvdXJjZU1hcCkge1xuXHR2YXIgbGlzdCA9IFtdO1xuXG5cdC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblx0bGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuXHRcdFx0dmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCk7XG5cdFx0XHRpZihpdGVtWzJdKSB7XG5cdFx0XHRcdHJldHVybiBcIkBtZWRpYSBcIiArIGl0ZW1bMl0gKyBcIntcIiArIGNvbnRlbnQgKyBcIn1cIjtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiBjb250ZW50O1xuXHRcdFx0fVxuXHRcdH0pLmpvaW4oXCJcIik7XG5cdH07XG5cblx0Ly8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3Rcblx0bGlzdC5pID0gZnVuY3Rpb24obW9kdWxlcywgbWVkaWFRdWVyeSkge1xuXHRcdGlmKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKVxuXHRcdFx0bW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgXCJcIl1dO1xuXHRcdHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpZCA9IHRoaXNbaV1bMF07XG5cdFx0XHRpZih0eXBlb2YgaWQgPT09IFwibnVtYmVyXCIpXG5cdFx0XHRcdGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcblx0XHR9XG5cdFx0Zm9yKGkgPSAwOyBpIDwgbW9kdWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGl0ZW0gPSBtb2R1bGVzW2ldO1xuXHRcdFx0Ly8gc2tpcCBhbHJlYWR5IGltcG9ydGVkIG1vZHVsZVxuXHRcdFx0Ly8gdGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBub3QgMTAwJSBwZXJmZWN0IGZvciB3ZWlyZCBtZWRpYSBxdWVyeSBjb21iaW5hdGlvbnNcblx0XHRcdC8vICB3aGVuIGEgbW9kdWxlIGlzIGltcG9ydGVkIG11bHRpcGxlIHRpbWVzIHdpdGggZGlmZmVyZW50IG1lZGlhIHF1ZXJpZXMuXG5cdFx0XHQvLyAgSSBob3BlIHRoaXMgd2lsbCBuZXZlciBvY2N1ciAoSGV5IHRoaXMgd2F5IHdlIGhhdmUgc21hbGxlciBidW5kbGVzKVxuXHRcdFx0aWYodHlwZW9mIGl0ZW1bMF0gIT09IFwibnVtYmVyXCIgfHwgIWFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcblx0XHRcdFx0aWYobWVkaWFRdWVyeSAmJiAhaXRlbVsyXSkge1xuXHRcdFx0XHRcdGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xuXHRcdFx0XHR9IGVsc2UgaWYobWVkaWFRdWVyeSkge1xuXHRcdFx0XHRcdGl0ZW1bMl0gPSBcIihcIiArIGl0ZW1bMl0gKyBcIikgYW5kIChcIiArIG1lZGlhUXVlcnkgKyBcIilcIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRsaXN0LnB1c2goaXRlbSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRyZXR1cm4gbGlzdDtcbn07XG5cbmZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKSB7XG5cdHZhciBjb250ZW50ID0gaXRlbVsxXSB8fCAnJztcblx0dmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuXHRpZiAoIWNzc01hcHBpbmcpIHtcblx0XHRyZXR1cm4gY29udGVudDtcblx0fVxuXG5cdGlmICh1c2VTb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgPT09ICdmdW5jdGlvbicpIHtcblx0XHR2YXIgc291cmNlTWFwcGluZyA9IHRvQ29tbWVudChjc3NNYXBwaW5nKTtcblx0XHR2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuXHRcdFx0cmV0dXJuICcvKiMgc291cmNlVVJMPScgKyBjc3NNYXBwaW5nLnNvdXJjZVJvb3QgKyBzb3VyY2UgKyAnICovJ1xuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbignXFxuJyk7XG5cdH1cblxuXHRyZXR1cm4gW2NvbnRlbnRdLmpvaW4oJ1xcbicpO1xufVxuXG4vLyBBZGFwdGVkIGZyb20gY29udmVydC1zb3VyY2UtbWFwIChNSVQpXG5mdW5jdGlvbiB0b0NvbW1lbnQoc291cmNlTWFwKSB7XG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuXHR2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKTtcblx0dmFyIGRhdGEgPSAnc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsJyArIGJhc2U2NDtcblxuXHRyZXR1cm4gJy8qIyAnICsgZGF0YSArICcgKi8nO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXG4vLyBtb2R1bGUgaWQgPSA1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///5\n");

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__.p + \"clear.png?f470863024f982806a178d720710f024\";\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvZWRpdGFibGUvaW1nL2NsZWFyLnBuZz80ODNlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJjbGVhci5wbmc/ZjQ3MDg2MzAyNGY5ODI4MDZhMTc4ZDcyMDcxMGYwMjRcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9lZGl0YWJsZS9pbWcvY2xlYXIucG5nXG4vLyBtb2R1bGUgaWQgPSA2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///6\n");

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__.p + \"loading.gif?7b9776076d5fceef4993b55c9383dedd\";\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvZWRpdGFibGUvaW1nL2xvYWRpbmcuZ2lmPzdiODgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiNy5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImxvYWRpbmcuZ2lmPzdiOTc3NjA3NmQ1ZmNlZWY0OTkzYjU1YzkzODNkZWRkXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvZWRpdGFibGUvaW1nL2xvYWRpbmcuZ2lmXG4vLyBtb2R1bGUgaWQgPSA3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///7\n");

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(4);\nif(typeof content === 'string') content = [[module.i, content, '']];\n// Prepare cssTransformation\nvar transform;\n\nvar options = {}\noptions.transform = transform\n// add the styles to the DOM\nvar update = __webpack_require__(9)(content, options);\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(false) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../../../node_modules/css-loader/index.js!./bootstrap-editable.css\", function() {\n\t\t\tvar newContent = require(\"!!../../../node_modules/css-loader/index.js!./bootstrap-editable.css\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvZWRpdGFibGUvY3NzL2Jvb3RzdHJhcC1lZGl0YWJsZS5jc3M/ZTIzZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxnQ0FBZ0MsVUFBVSxFQUFFO0FBQzVDIiwiZmlsZSI6IjguanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzdHlsZS1sb2FkZXI6IEFkZHMgc29tZSBjc3MgdG8gdGhlIERPTSBieSBhZGRpbmcgYSA8c3R5bGU+IHRhZ1xuXG4vLyBsb2FkIHRoZSBzdHlsZXNcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9ib290c3RyYXAtZWRpdGFibGUuY3NzXCIpO1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4vLyBQcmVwYXJlIGNzc1RyYW5zZm9ybWF0aW9uXG52YXIgdHJhbnNmb3JtO1xuXG52YXIgb3B0aW9ucyA9IHt9XG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBIb3QgTW9kdWxlIFJlcGxhY2VtZW50XG5pZihtb2R1bGUuaG90KSB7XG5cdC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG5cdGlmKCFjb250ZW50LmxvY2Fscykge1xuXHRcdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuL2Jvb3RzdHJhcC1lZGl0YWJsZS5jc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vYm9vdHN0cmFwLWVkaXRhYmxlLmNzc1wiKTtcblx0XHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXHRcdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHRcdH0pO1xuXHR9XG5cdC8vIFdoZW4gdGhlIG1vZHVsZSBpcyBkaXNwb3NlZCwgcmVtb3ZlIHRoZSA8c3R5bGU+IHRhZ3Ncblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvZWRpdGFibGUvY3NzL2Jvb3RzdHJhcC1lZGl0YWJsZS5jc3Ncbi8vIG1vZHVsZSBpZCA9IDhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///8\n");

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

eval("/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\nvar stylesInDom = {};\n\nvar\tmemoize = function (fn) {\n\tvar memo;\n\n\treturn function () {\n\t\tif (typeof memo === \"undefined\") memo = fn.apply(this, arguments);\n\t\treturn memo;\n\t};\n};\n\nvar isOldIE = memoize(function () {\n\t// Test for IE <= 9 as proposed by Browserhacks\n\t// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\n\t// Tests for existence of standard globals is to allow style-loader\n\t// to operate correctly into non-standard environments\n\t// @see https://github.com/webpack-contrib/style-loader/issues/177\n\treturn window && document && document.all && !window.atob;\n});\n\nvar getElement = (function (fn) {\n\tvar memo = {};\n\n\treturn function(selector) {\n\t\tif (typeof memo[selector] === \"undefined\") {\n\t\t\tmemo[selector] = fn.call(this, selector);\n\t\t}\n\n\t\treturn memo[selector]\n\t};\n})(function (target) {\n\treturn document.querySelector(target)\n});\n\nvar singleton = null;\nvar\tsingletonCounter = 0;\nvar\tstylesInsertedAtTop = [];\n\nvar\tfixUrls = __webpack_require__(10);\n\nmodule.exports = function(list, options) {\n\tif (typeof DEBUG !== \"undefined\" && DEBUG) {\n\t\tif (typeof document !== \"object\") throw new Error(\"The style-loader cannot be used in a non-browser environment\");\n\t}\n\n\toptions = options || {};\n\n\toptions.attrs = typeof options.attrs === \"object\" ? options.attrs : {};\n\n\t// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n\t// tags it will allow on a page\n\tif (!options.singleton) options.singleton = isOldIE();\n\n\t// By default, add <style> tags to the <head> element\n\tif (!options.insertInto) options.insertInto = \"head\";\n\n\t// By default, add <style> tags to the bottom of the target\n\tif (!options.insertAt) options.insertAt = \"bottom\";\n\n\tvar styles = listToStyles(list, options);\n\n\taddStylesToDom(styles, options);\n\n\treturn function update (newList) {\n\t\tvar mayRemove = [];\n\n\t\tfor (var i = 0; i < styles.length; i++) {\n\t\t\tvar item = styles[i];\n\t\t\tvar domStyle = stylesInDom[item.id];\n\n\t\t\tdomStyle.refs--;\n\t\t\tmayRemove.push(domStyle);\n\t\t}\n\n\t\tif(newList) {\n\t\t\tvar newStyles = listToStyles(newList, options);\n\t\t\taddStylesToDom(newStyles, options);\n\t\t}\n\n\t\tfor (var i = 0; i < mayRemove.length; i++) {\n\t\t\tvar domStyle = mayRemove[i];\n\n\t\t\tif(domStyle.refs === 0) {\n\t\t\t\tfor (var j = 0; j < domStyle.parts.length; j++) domStyle.parts[j]();\n\n\t\t\t\tdelete stylesInDom[domStyle.id];\n\t\t\t}\n\t\t}\n\t};\n};\n\nfunction addStylesToDom (styles, options) {\n\tfor (var i = 0; i < styles.length; i++) {\n\t\tvar item = styles[i];\n\t\tvar domStyle = stylesInDom[item.id];\n\n\t\tif(domStyle) {\n\t\t\tdomStyle.refs++;\n\n\t\t\tfor(var j = 0; j < domStyle.parts.length; j++) {\n\t\t\t\tdomStyle.parts[j](item.parts[j]);\n\t\t\t}\n\n\t\t\tfor(; j < item.parts.length; j++) {\n\t\t\t\tdomStyle.parts.push(addStyle(item.parts[j], options));\n\t\t\t}\n\t\t} else {\n\t\t\tvar parts = [];\n\n\t\t\tfor(var j = 0; j < item.parts.length; j++) {\n\t\t\t\tparts.push(addStyle(item.parts[j], options));\n\t\t\t}\n\n\t\t\tstylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};\n\t\t}\n\t}\n}\n\nfunction listToStyles (list, options) {\n\tvar styles = [];\n\tvar newStyles = {};\n\n\tfor (var i = 0; i < list.length; i++) {\n\t\tvar item = list[i];\n\t\tvar id = options.base ? item[0] + options.base : item[0];\n\t\tvar css = item[1];\n\t\tvar media = item[2];\n\t\tvar sourceMap = item[3];\n\t\tvar part = {css: css, media: media, sourceMap: sourceMap};\n\n\t\tif(!newStyles[id]) styles.push(newStyles[id] = {id: id, parts: [part]});\n\t\telse newStyles[id].parts.push(part);\n\t}\n\n\treturn styles;\n}\n\nfunction insertStyleElement (options, style) {\n\tvar target = getElement(options.insertInto)\n\n\tif (!target) {\n\t\tthrow new Error(\"Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.\");\n\t}\n\n\tvar lastStyleElementInsertedAtTop = stylesInsertedAtTop[stylesInsertedAtTop.length - 1];\n\n\tif (options.insertAt === \"top\") {\n\t\tif (!lastStyleElementInsertedAtTop) {\n\t\t\ttarget.insertBefore(style, target.firstChild);\n\t\t} else if (lastStyleElementInsertedAtTop.nextSibling) {\n\t\t\ttarget.insertBefore(style, lastStyleElementInsertedAtTop.nextSibling);\n\t\t} else {\n\t\t\ttarget.appendChild(style);\n\t\t}\n\t\tstylesInsertedAtTop.push(style);\n\t} else if (options.insertAt === \"bottom\") {\n\t\ttarget.appendChild(style);\n\t} else {\n\t\tthrow new Error(\"Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.\");\n\t}\n}\n\nfunction removeStyleElement (style) {\n\tif (style.parentNode === null) return false;\n\tstyle.parentNode.removeChild(style);\n\n\tvar idx = stylesInsertedAtTop.indexOf(style);\n\tif(idx >= 0) {\n\t\tstylesInsertedAtTop.splice(idx, 1);\n\t}\n}\n\nfunction createStyleElement (options) {\n\tvar style = document.createElement(\"style\");\n\n\toptions.attrs.type = \"text/css\";\n\n\taddAttrs(style, options.attrs);\n\tinsertStyleElement(options, style);\n\n\treturn style;\n}\n\nfunction createLinkElement (options) {\n\tvar link = document.createElement(\"link\");\n\n\toptions.attrs.type = \"text/css\";\n\toptions.attrs.rel = \"stylesheet\";\n\n\taddAttrs(link, options.attrs);\n\tinsertStyleElement(options, link);\n\n\treturn link;\n}\n\nfunction addAttrs (el, attrs) {\n\tObject.keys(attrs).forEach(function (key) {\n\t\tel.setAttribute(key, attrs[key]);\n\t});\n}\n\nfunction addStyle (obj, options) {\n\tvar style, update, remove, result;\n\n\t// If a transform function was defined, run it on the css\n\tif (options.transform && obj.css) {\n\t    result = options.transform(obj.css);\n\n\t    if (result) {\n\t    \t// If transform returns a value, use that instead of the original css.\n\t    \t// This allows running runtime transformations on the css.\n\t    \tobj.css = result;\n\t    } else {\n\t    \t// If the transform function returns a falsy value, don't add this css.\n\t    \t// This allows conditional loading of css\n\t    \treturn function() {\n\t    \t\t// noop\n\t    \t};\n\t    }\n\t}\n\n\tif (options.singleton) {\n\t\tvar styleIndex = singletonCounter++;\n\n\t\tstyle = singleton || (singleton = createStyleElement(options));\n\n\t\tupdate = applyToSingletonTag.bind(null, style, styleIndex, false);\n\t\tremove = applyToSingletonTag.bind(null, style, styleIndex, true);\n\n\t} else if (\n\t\tobj.sourceMap &&\n\t\ttypeof URL === \"function\" &&\n\t\ttypeof URL.createObjectURL === \"function\" &&\n\t\ttypeof URL.revokeObjectURL === \"function\" &&\n\t\ttypeof Blob === \"function\" &&\n\t\ttypeof btoa === \"function\"\n\t) {\n\t\tstyle = createLinkElement(options);\n\t\tupdate = updateLink.bind(null, style, options);\n\t\tremove = function () {\n\t\t\tremoveStyleElement(style);\n\n\t\t\tif(style.href) URL.revokeObjectURL(style.href);\n\t\t};\n\t} else {\n\t\tstyle = createStyleElement(options);\n\t\tupdate = applyToTag.bind(null, style);\n\t\tremove = function () {\n\t\t\tremoveStyleElement(style);\n\t\t};\n\t}\n\n\tupdate(obj);\n\n\treturn function updateStyle (newObj) {\n\t\tif (newObj) {\n\t\t\tif (\n\t\t\t\tnewObj.css === obj.css &&\n\t\t\t\tnewObj.media === obj.media &&\n\t\t\t\tnewObj.sourceMap === obj.sourceMap\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tupdate(obj = newObj);\n\t\t} else {\n\t\t\tremove();\n\t\t}\n\t};\n}\n\nvar replaceText = (function () {\n\tvar textStore = [];\n\n\treturn function (index, replacement) {\n\t\ttextStore[index] = replacement;\n\n\t\treturn textStore.filter(Boolean).join('\\n');\n\t};\n})();\n\nfunction applyToSingletonTag (style, index, remove, obj) {\n\tvar css = remove ? \"\" : obj.css;\n\n\tif (style.styleSheet) {\n\t\tstyle.styleSheet.cssText = replaceText(index, css);\n\t} else {\n\t\tvar cssNode = document.createTextNode(css);\n\t\tvar childNodes = style.childNodes;\n\n\t\tif (childNodes[index]) style.removeChild(childNodes[index]);\n\n\t\tif (childNodes.length) {\n\t\t\tstyle.insertBefore(cssNode, childNodes[index]);\n\t\t} else {\n\t\t\tstyle.appendChild(cssNode);\n\t\t}\n\t}\n}\n\nfunction applyToTag (style, obj) {\n\tvar css = obj.css;\n\tvar media = obj.media;\n\n\tif(media) {\n\t\tstyle.setAttribute(\"media\", media)\n\t}\n\n\tif(style.styleSheet) {\n\t\tstyle.styleSheet.cssText = css;\n\t} else {\n\t\twhile(style.firstChild) {\n\t\t\tstyle.removeChild(style.firstChild);\n\t\t}\n\n\t\tstyle.appendChild(document.createTextNode(css));\n\t}\n}\n\nfunction updateLink (link, options, obj) {\n\tvar css = obj.css;\n\tvar sourceMap = obj.sourceMap;\n\n\t/*\n\t\tIf convertToAbsoluteUrls isn't defined, but sourcemaps are enabled\n\t\tand there is no publicPath defined then lets turn convertToAbsoluteUrls\n\t\ton by default.  Otherwise default to the convertToAbsoluteUrls option\n\t\tdirectly\n\t*/\n\tvar autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;\n\n\tif (options.convertToAbsoluteUrls || autoFixUrls) {\n\t\tcss = fixUrls(css);\n\t}\n\n\tif (sourceMap) {\n\t\t// http://stackoverflow.com/a/26603875\n\t\tcss += \"\\n/*# sourceMappingURL=data:application/json;base64,\" + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + \" */\";\n\t}\n\n\tvar blob = new Blob([css], { type: \"text/css\" });\n\n\tvar oldSrc = link.href;\n\n\tlink.href = URL.createObjectURL(blob);\n\n\tif(oldSrc) URL.revokeObjectURL(oldSrc);\n}\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9\n");

/***/ }),
/* 10 */
/***/ (function(module, exports) {

eval("\n/**\n * When source maps are enabled, `style-loader` uses a link element with a data-uri to\n * embed the css on the page. This breaks all relative urls because now they are relative to a\n * bundle instead of the current page.\n *\n * One solution is to only use full urls, but that may be impossible.\n *\n * Instead, this function \"fixes\" the relative urls to be absolute according to the current page location.\n *\n * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.\n *\n */\n\nmodule.exports = function (css) {\n  // get current location\n  var location = typeof window !== \"undefined\" && window.location;\n\n  if (!location) {\n    throw new Error(\"fixUrls requires window.location\");\n  }\n\n\t// blank or null?\n\tif (!css || typeof css !== \"string\") {\n\t  return css;\n  }\n\n  var baseUrl = location.protocol + \"//\" + location.host;\n  var currentDir = baseUrl + location.pathname.replace(/\\/[^\\/]*$/, \"/\");\n\n\t// convert each url(...)\n\t/*\n\tThis regular expression is just a way to recursively match brackets within\n\ta string.\n\n\t /url\\s*\\(  = Match on the word \"url\" with any whitespace after it and then a parens\n\t   (  = Start a capturing group\n\t     (?:  = Start a non-capturing group\n\t         [^)(]  = Match anything that isn't a parentheses\n\t         |  = OR\n\t         \\(  = Match a start parentheses\n\t             (?:  = Start another non-capturing groups\n\t                 [^)(]+  = Match anything that isn't a parentheses\n\t                 |  = OR\n\t                 \\(  = Match a start parentheses\n\t                     [^)(]*  = Match anything that isn't a parentheses\n\t                 \\)  = Match a end parentheses\n\t             )  = End Group\n              *\\) = Match anything and then a close parens\n          )  = Close non-capturing group\n          *  = Match anything\n       )  = Close capturing group\n\t \\)  = Match a close parens\n\n\t /gi  = Get all matches, not the first.  Be case insensitive.\n\t */\n\tvar fixedCss = css.replace(/url\\s*\\(((?:[^)(]|\\((?:[^)(]+|\\([^)(]*\\))*\\))*)\\)/gi, function(fullMatch, origUrl) {\n\t\t// strip quotes (if they exist)\n\t\tvar unquotedOrigUrl = origUrl\n\t\t\t.trim()\n\t\t\t.replace(/^\"(.*)\"$/, function(o, $1){ return $1; })\n\t\t\t.replace(/^'(.*)'$/, function(o, $1){ return $1; });\n\n\t\t// already a full url? no change\n\t\tif (/^(#|data:|http:\\/\\/|https:\\/\\/|file:\\/\\/\\/)/i.test(unquotedOrigUrl)) {\n\t\t  return fullMatch;\n\t\t}\n\n\t\t// convert the url to a full url\n\t\tvar newUrl;\n\n\t\tif (unquotedOrigUrl.indexOf(\"//\") === 0) {\n\t\t  \t//TODO: should we add protocol?\n\t\t\tnewUrl = unquotedOrigUrl;\n\t\t} else if (unquotedOrigUrl.indexOf(\"/\") === 0) {\n\t\t\t// path should be relative to the base url\n\t\t\tnewUrl = baseUrl + unquotedOrigUrl; // already starts with '/'\n\t\t} else {\n\t\t\t// path should be relative to current directory\n\t\t\tnewUrl = currentDir + unquotedOrigUrl.replace(/^\\.\\//, \"\"); // Strip leading './'\n\t\t}\n\n\t\t// send back the fixed url(...)\n\t\treturn \"url(\" + JSON.stringify(newUrl) + \")\";\n\t});\n\n\t// send back the fixed css\n\treturn fixedCss;\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3N0eWxlLWxvYWRlci9saWIvdXJscy5qcz85YzMxIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0MsV0FBVyxFQUFFO0FBQ3JELHdDQUF3QyxXQUFXLEVBQUU7O0FBRXJEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0Esc0NBQXNDO0FBQ3RDLEdBQUc7QUFDSDtBQUNBLDhEQUE4RDtBQUM5RDs7QUFFQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0EiLCJmaWxlIjoiMTAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbi8qKlxuICogV2hlbiBzb3VyY2UgbWFwcyBhcmUgZW5hYmxlZCwgYHN0eWxlLWxvYWRlcmAgdXNlcyBhIGxpbmsgZWxlbWVudCB3aXRoIGEgZGF0YS11cmkgdG9cbiAqIGVtYmVkIHRoZSBjc3Mgb24gdGhlIHBhZ2UuIFRoaXMgYnJlYWtzIGFsbCByZWxhdGl2ZSB1cmxzIGJlY2F1c2Ugbm93IHRoZXkgYXJlIHJlbGF0aXZlIHRvIGFcbiAqIGJ1bmRsZSBpbnN0ZWFkIG9mIHRoZSBjdXJyZW50IHBhZ2UuXG4gKlxuICogT25lIHNvbHV0aW9uIGlzIHRvIG9ubHkgdXNlIGZ1bGwgdXJscywgYnV0IHRoYXQgbWF5IGJlIGltcG9zc2libGUuXG4gKlxuICogSW5zdGVhZCwgdGhpcyBmdW5jdGlvbiBcImZpeGVzXCIgdGhlIHJlbGF0aXZlIHVybHMgdG8gYmUgYWJzb2x1dGUgYWNjb3JkaW5nIHRvIHRoZSBjdXJyZW50IHBhZ2UgbG9jYXRpb24uXG4gKlxuICogQSBydWRpbWVudGFyeSB0ZXN0IHN1aXRlIGlzIGxvY2F0ZWQgYXQgYHRlc3QvZml4VXJscy5qc2AgYW5kIGNhbiBiZSBydW4gdmlhIHRoZSBgbnBtIHRlc3RgIGNvbW1hbmQuXG4gKlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzcykge1xuICAvLyBnZXQgY3VycmVudCBsb2NhdGlvblxuICB2YXIgbG9jYXRpb24gPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdy5sb2NhdGlvbjtcblxuICBpZiAoIWxvY2F0aW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiZml4VXJscyByZXF1aXJlcyB3aW5kb3cubG9jYXRpb25cIik7XG4gIH1cblxuXHQvLyBibGFuayBvciBudWxsP1xuXHRpZiAoIWNzcyB8fCB0eXBlb2YgY3NzICE9PSBcInN0cmluZ1wiKSB7XG5cdCAgcmV0dXJuIGNzcztcbiAgfVxuXG4gIHZhciBiYXNlVXJsID0gbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKyBsb2NhdGlvbi5ob3N0O1xuICB2YXIgY3VycmVudERpciA9IGJhc2VVcmwgKyBsb2NhdGlvbi5wYXRobmFtZS5yZXBsYWNlKC9cXC9bXlxcL10qJC8sIFwiL1wiKTtcblxuXHQvLyBjb252ZXJ0IGVhY2ggdXJsKC4uLilcblx0Lypcblx0VGhpcyByZWd1bGFyIGV4cHJlc3Npb24gaXMganVzdCBhIHdheSB0byByZWN1cnNpdmVseSBtYXRjaCBicmFja2V0cyB3aXRoaW5cblx0YSBzdHJpbmcuXG5cblx0IC91cmxcXHMqXFwoICA9IE1hdGNoIG9uIHRoZSB3b3JkIFwidXJsXCIgd2l0aCBhbnkgd2hpdGVzcGFjZSBhZnRlciBpdCBhbmQgdGhlbiBhIHBhcmVuc1xuXHQgICAoICA9IFN0YXJ0IGEgY2FwdHVyaW5nIGdyb3VwXG5cdCAgICAgKD86ICA9IFN0YXJ0IGEgbm9uLWNhcHR1cmluZyBncm91cFxuXHQgICAgICAgICBbXikoXSAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgfCAgPSBPUlxuXHQgICAgICAgICBcXCggID0gTWF0Y2ggYSBzdGFydCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgKD86ICA9IFN0YXJ0IGFub3RoZXIgbm9uLWNhcHR1cmluZyBncm91cHNcblx0ICAgICAgICAgICAgICAgICBbXikoXSsgID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgfCAgPSBPUlxuXHQgICAgICAgICAgICAgICAgIFxcKCAgPSBNYXRjaCBhIHN0YXJ0IHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgICAgIFteKShdKiAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICBcXCkgID0gTWF0Y2ggYSBlbmQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICkgID0gRW5kIEdyb3VwXG4gICAgICAgICAgICAgICpcXCkgPSBNYXRjaCBhbnl0aGluZyBhbmQgdGhlbiBhIGNsb3NlIHBhcmVuc1xuICAgICAgICAgICkgID0gQ2xvc2Ugbm9uLWNhcHR1cmluZyBncm91cFxuICAgICAgICAgICogID0gTWF0Y2ggYW55dGhpbmdcbiAgICAgICApICA9IENsb3NlIGNhcHR1cmluZyBncm91cFxuXHQgXFwpICA9IE1hdGNoIGEgY2xvc2UgcGFyZW5zXG5cblx0IC9naSAgPSBHZXQgYWxsIG1hdGNoZXMsIG5vdCB0aGUgZmlyc3QuICBCZSBjYXNlIGluc2Vuc2l0aXZlLlxuXHQgKi9cblx0dmFyIGZpeGVkQ3NzID0gY3NzLnJlcGxhY2UoL3VybFxccypcXCgoKD86W14pKF18XFwoKD86W14pKF0rfFxcKFteKShdKlxcKSkqXFwpKSopXFwpL2dpLCBmdW5jdGlvbihmdWxsTWF0Y2gsIG9yaWdVcmwpIHtcblx0XHQvLyBzdHJpcCBxdW90ZXMgKGlmIHRoZXkgZXhpc3QpXG5cdFx0dmFyIHVucXVvdGVkT3JpZ1VybCA9IG9yaWdVcmxcblx0XHRcdC50cmltKClcblx0XHRcdC5yZXBsYWNlKC9eXCIoLiopXCIkLywgZnVuY3Rpb24obywgJDEpeyByZXR1cm4gJDE7IH0pXG5cdFx0XHQucmVwbGFjZSgvXicoLiopJyQvLCBmdW5jdGlvbihvLCAkMSl7IHJldHVybiAkMTsgfSk7XG5cblx0XHQvLyBhbHJlYWR5IGEgZnVsbCB1cmw/IG5vIGNoYW5nZVxuXHRcdGlmICgvXigjfGRhdGE6fGh0dHA6XFwvXFwvfGh0dHBzOlxcL1xcL3xmaWxlOlxcL1xcL1xcLykvaS50ZXN0KHVucXVvdGVkT3JpZ1VybCkpIHtcblx0XHQgIHJldHVybiBmdWxsTWF0Y2g7XG5cdFx0fVxuXG5cdFx0Ly8gY29udmVydCB0aGUgdXJsIHRvIGEgZnVsbCB1cmxcblx0XHR2YXIgbmV3VXJsO1xuXG5cdFx0aWYgKHVucXVvdGVkT3JpZ1VybC5pbmRleE9mKFwiLy9cIikgPT09IDApIHtcblx0XHQgIFx0Ly9UT0RPOiBzaG91bGQgd2UgYWRkIHByb3RvY29sP1xuXHRcdFx0bmV3VXJsID0gdW5xdW90ZWRPcmlnVXJsO1xuXHRcdH0gZWxzZSBpZiAodW5xdW90ZWRPcmlnVXJsLmluZGV4T2YoXCIvXCIpID09PSAwKSB7XG5cdFx0XHQvLyBwYXRoIHNob3VsZCBiZSByZWxhdGl2ZSB0byB0aGUgYmFzZSB1cmxcblx0XHRcdG5ld1VybCA9IGJhc2VVcmwgKyB1bnF1b3RlZE9yaWdVcmw7IC8vIGFscmVhZHkgc3RhcnRzIHdpdGggJy8nXG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIHBhdGggc2hvdWxkIGJlIHJlbGF0aXZlIHRvIGN1cnJlbnQgZGlyZWN0b3J5XG5cdFx0XHRuZXdVcmwgPSBjdXJyZW50RGlyICsgdW5xdW90ZWRPcmlnVXJsLnJlcGxhY2UoL15cXC5cXC8vLCBcIlwiKTsgLy8gU3RyaXAgbGVhZGluZyAnLi8nXG5cdFx0fVxuXG5cdFx0Ly8gc2VuZCBiYWNrIHRoZSBmaXhlZCB1cmwoLi4uKVxuXHRcdHJldHVybiBcInVybChcIiArIEpTT04uc3RyaW5naWZ5KG5ld1VybCkgKyBcIilcIjtcblx0fSk7XG5cblx0Ly8gc2VuZCBiYWNrIHRoZSBmaXhlZCBjc3Ncblx0cmV0dXJuIGZpeGVkQ3NzO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9zdHlsZS1sb2FkZXIvbGliL3VybHMuanNcbi8vIG1vZHVsZSBpZCA9IDEwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///10\n");

/***/ }),
/* 11 */
/***/ (function(module, exports) {

eval("/* globals __VUE_SSR_CONTEXT__ */\n\n// this module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle\n\nmodule.exports = function normalizeComponent (\n  rawScriptExports,\n  compiledTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier /* server only */\n) {\n  var esModule\n  var scriptExports = rawScriptExports = rawScriptExports || {}\n\n  // ES6 modules interop\n  var type = typeof rawScriptExports.default\n  if (type === 'object' || type === 'function') {\n    esModule = rawScriptExports\n    scriptExports = rawScriptExports.default\n  }\n\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (compiledTemplate) {\n    options.render = compiledTemplate.render\n    options.staticRenderFns = compiledTemplate.staticRenderFns\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) { // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = injectStyles\n  }\n\n  if (hook) {\n    var functional = options.functional\n    var existing = functional\n      ? options.render\n      : options.beforeCreate\n    if (!functional) {\n      // inject component registration as beforeCreate hook\n      options.beforeCreate = existing\n        ? [].concat(existing, hook)\n        : [hook]\n    } else {\n      // register for functioal component in vue file\n      options.render = function renderWithStyleInjection (h, context) {\n        hook.call(context)\n        return existing(h, context)\n      }\n    }\n  }\n\n  return {\n    esModule: esModule,\n    exports: scriptExports,\n    options: options\n  }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3Z1ZS1sb2FkZXIvbGliL2NvbXBvbmVudC1ub3JtYWxpemVyLmpzP2Q0ZjMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMTEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBnbG9iYWxzIF9fVlVFX1NTUl9DT05URVhUX18gKi9cblxuLy8gdGhpcyBtb2R1bGUgaXMgYSBydW50aW1lIHV0aWxpdHkgZm9yIGNsZWFuZXIgY29tcG9uZW50IG1vZHVsZSBvdXRwdXQgYW5kIHdpbGxcbi8vIGJlIGluY2x1ZGVkIGluIHRoZSBmaW5hbCB3ZWJwYWNrIHVzZXIgYnVuZGxlXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbm9ybWFsaXplQ29tcG9uZW50IChcbiAgcmF3U2NyaXB0RXhwb3J0cyxcbiAgY29tcGlsZWRUZW1wbGF0ZSxcbiAgaW5qZWN0U3R5bGVzLFxuICBzY29wZUlkLFxuICBtb2R1bGVJZGVudGlmaWVyIC8qIHNlcnZlciBvbmx5ICovXG4pIHtcbiAgdmFyIGVzTW9kdWxlXG4gIHZhciBzY3JpcHRFeHBvcnRzID0gcmF3U2NyaXB0RXhwb3J0cyA9IHJhd1NjcmlwdEV4cG9ydHMgfHwge31cblxuICAvLyBFUzYgbW9kdWxlcyBpbnRlcm9wXG4gIHZhciB0eXBlID0gdHlwZW9mIHJhd1NjcmlwdEV4cG9ydHMuZGVmYXVsdFxuICBpZiAodHlwZSA9PT0gJ29iamVjdCcgfHwgdHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGVzTW9kdWxlID0gcmF3U2NyaXB0RXhwb3J0c1xuICAgIHNjcmlwdEV4cG9ydHMgPSByYXdTY3JpcHRFeHBvcnRzLmRlZmF1bHRcbiAgfVxuXG4gIC8vIFZ1ZS5leHRlbmQgY29uc3RydWN0b3IgZXhwb3J0IGludGVyb3BcbiAgdmFyIG9wdGlvbnMgPSB0eXBlb2Ygc2NyaXB0RXhwb3J0cyA9PT0gJ2Z1bmN0aW9uJ1xuICAgID8gc2NyaXB0RXhwb3J0cy5vcHRpb25zXG4gICAgOiBzY3JpcHRFeHBvcnRzXG5cbiAgLy8gcmVuZGVyIGZ1bmN0aW9uc1xuICBpZiAoY29tcGlsZWRUZW1wbGF0ZSkge1xuICAgIG9wdGlvbnMucmVuZGVyID0gY29tcGlsZWRUZW1wbGF0ZS5yZW5kZXJcbiAgICBvcHRpb25zLnN0YXRpY1JlbmRlckZucyA9IGNvbXBpbGVkVGVtcGxhdGUuc3RhdGljUmVuZGVyRm5zXG4gIH1cblxuICAvLyBzY29wZWRJZFxuICBpZiAoc2NvcGVJZCkge1xuICAgIG9wdGlvbnMuX3Njb3BlSWQgPSBzY29wZUlkXG4gIH1cblxuICB2YXIgaG9va1xuICBpZiAobW9kdWxlSWRlbnRpZmllcikgeyAvLyBzZXJ2ZXIgYnVpbGRcbiAgICBob29rID0gZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgIC8vIDIuMyBpbmplY3Rpb25cbiAgICAgIGNvbnRleHQgPVxuICAgICAgICBjb250ZXh0IHx8IC8vIGNhY2hlZCBjYWxsXG4gICAgICAgICh0aGlzLiR2bm9kZSAmJiB0aGlzLiR2bm9kZS5zc3JDb250ZXh0KSB8fCAvLyBzdGF0ZWZ1bFxuICAgICAgICAodGhpcy5wYXJlbnQgJiYgdGhpcy5wYXJlbnQuJHZub2RlICYmIHRoaXMucGFyZW50LiR2bm9kZS5zc3JDb250ZXh0KSAvLyBmdW5jdGlvbmFsXG4gICAgICAvLyAyLjIgd2l0aCBydW5Jbk5ld0NvbnRleHQ6IHRydWVcbiAgICAgIGlmICghY29udGV4dCAmJiB0eXBlb2YgX19WVUVfU1NSX0NPTlRFWFRfXyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgY29udGV4dCA9IF9fVlVFX1NTUl9DT05URVhUX19cbiAgICAgIH1cbiAgICAgIC8vIGluamVjdCBjb21wb25lbnQgc3R5bGVzXG4gICAgICBpZiAoaW5qZWN0U3R5bGVzKSB7XG4gICAgICAgIGluamVjdFN0eWxlcy5jYWxsKHRoaXMsIGNvbnRleHQpXG4gICAgICB9XG4gICAgICAvLyByZWdpc3RlciBjb21wb25lbnQgbW9kdWxlIGlkZW50aWZpZXIgZm9yIGFzeW5jIGNodW5rIGluZmVycmVuY2VcbiAgICAgIGlmIChjb250ZXh0ICYmIGNvbnRleHQuX3JlZ2lzdGVyZWRDb21wb25lbnRzKSB7XG4gICAgICAgIGNvbnRleHQuX3JlZ2lzdGVyZWRDb21wb25lbnRzLmFkZChtb2R1bGVJZGVudGlmaWVyKVxuICAgICAgfVxuICAgIH1cbiAgICAvLyB1c2VkIGJ5IHNzciBpbiBjYXNlIGNvbXBvbmVudCBpcyBjYWNoZWQgYW5kIGJlZm9yZUNyZWF0ZVxuICAgIC8vIG5ldmVyIGdldHMgY2FsbGVkXG4gICAgb3B0aW9ucy5fc3NyUmVnaXN0ZXIgPSBob29rXG4gIH0gZWxzZSBpZiAoaW5qZWN0U3R5bGVzKSB7XG4gICAgaG9vayA9IGluamVjdFN0eWxlc1xuICB9XG5cbiAgaWYgKGhvb2spIHtcbiAgICB2YXIgZnVuY3Rpb25hbCA9IG9wdGlvbnMuZnVuY3Rpb25hbFxuICAgIHZhciBleGlzdGluZyA9IGZ1bmN0aW9uYWxcbiAgICAgID8gb3B0aW9ucy5yZW5kZXJcbiAgICAgIDogb3B0aW9ucy5iZWZvcmVDcmVhdGVcbiAgICBpZiAoIWZ1bmN0aW9uYWwpIHtcbiAgICAgIC8vIGluamVjdCBjb21wb25lbnQgcmVnaXN0cmF0aW9uIGFzIGJlZm9yZUNyZWF0ZSBob29rXG4gICAgICBvcHRpb25zLmJlZm9yZUNyZWF0ZSA9IGV4aXN0aW5nXG4gICAgICAgID8gW10uY29uY2F0KGV4aXN0aW5nLCBob29rKVxuICAgICAgICA6IFtob29rXVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyByZWdpc3RlciBmb3IgZnVuY3Rpb2FsIGNvbXBvbmVudCBpbiB2dWUgZmlsZVxuICAgICAgb3B0aW9ucy5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXJXaXRoU3R5bGVJbmplY3Rpb24gKGgsIGNvbnRleHQpIHtcbiAgICAgICAgaG9vay5jYWxsKGNvbnRleHQpXG4gICAgICAgIHJldHVybiBleGlzdGluZyhoLCBjb250ZXh0KVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZXNNb2R1bGU6IGVzTW9kdWxlLFxuICAgIGV4cG9ydHM6IHNjcmlwdEV4cG9ydHMsXG4gICAgb3B0aW9uczogb3B0aW9uc1xuICB9XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vdnVlLWxvYWRlci9saWIvY29tcG9uZW50LW5vcm1hbGl6ZXIuanNcbi8vIG1vZHVsZSBpZCA9IDExXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///11\n");

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('a', {\n    attrs: {\n      \"href\": \"javascript:;\",\n      \"data-type\": _vm.type,\n      \"disabled\": _vm.disabled,\n      \"emptytext\": _vm.emptytext\n    }\n  }, [_vm._v(_vm._s(_vm.value))])\n},staticRenderFns: []}\nmodule.exports.render._withStripped = true\nif (false) {\n  module.hot.accept()\n  if (module.hot.data) {\n     require(\"vue-hot-reload-api\").rerender(\"data-v-409b4816\", module.exports)\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvRWRpdGFibGUudnVlP2ZiNzQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsZ0JBQWdCLG1CQUFtQixhQUFhLDBCQUEwQjtBQUMxRTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIxMi5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzPXtyZW5kZXI6ZnVuY3Rpb24gKCl7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7XG4gIHJldHVybiBfYygnYScsIHtcbiAgICBhdHRyczoge1xuICAgICAgXCJocmVmXCI6IFwiamF2YXNjcmlwdDo7XCIsXG4gICAgICBcImRhdGEtdHlwZVwiOiBfdm0udHlwZSxcbiAgICAgIFwiZGlzYWJsZWRcIjogX3ZtLmRpc2FibGVkLFxuICAgICAgXCJlbXB0eXRleHRcIjogX3ZtLmVtcHR5dGV4dFxuICAgIH1cbiAgfSwgW192bS5fdihfdm0uX3MoX3ZtLnZhbHVlKSldKVxufSxzdGF0aWNSZW5kZXJGbnM6IFtdfVxubW9kdWxlLmV4cG9ydHMucmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlXG5pZiAobW9kdWxlLmhvdCkge1xuICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gIGlmIChtb2R1bGUuaG90LmRhdGEpIHtcbiAgICAgcmVxdWlyZShcInZ1ZS1ob3QtcmVsb2FkLWFwaVwiKS5yZXJlbmRlcihcImRhdGEtdi00MDliNDgxNlwiLCBtb2R1bGUuZXhwb3J0cylcbiAgfVxufVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlcj97XCJpZFwiOlwiZGF0YS12LTQwOWI0ODE2XCIsXCJoYXNTY29wZWRcIjpmYWxzZX0hLi9+L3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL3NyYy9FZGl0YWJsZS52dWVcbi8vIG1vZHVsZSBpZCA9IDEyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///12\n");

/***/ }),
/* 13 */
/***/ (function(module, exports) {

eval("var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/*!\n * Bootstrap v3.3.5 (http://getbootstrap.com)\n * Copyright 2011-2015 Twitter, Inc.\n * Licensed under the MIT license\n */\nif (\"undefined\" == typeof jQuery) throw new Error(\"Bootstrap's JavaScript requires jQuery\");+function (a) {\n  \"use strict\";\n  var b = a.fn.jquery.split(\" \")[0].split(\".\");if (b[0] < 2 && b[1] < 9 || 1 == b[0] && 9 == b[1] && b[2] < 1) throw new Error(\"Bootstrap's JavaScript requires jQuery version 1.9.1 or higher\");\n}(jQuery), +function (a) {\n  \"use strict\";\n  function b() {\n    var a = document.createElement(\"bootstrap\"),\n        b = { WebkitTransition: \"webkitTransitionEnd\", MozTransition: \"transitionend\", OTransition: \"oTransitionEnd otransitionend\", transition: \"transitionend\" };for (var c in b) {\n      if (void 0 !== a.style[c]) return { end: b[c] };\n    }return !1;\n  }a.fn.emulateTransitionEnd = function (b) {\n    var c = !1,\n        d = this;a(this).one(\"bsTransitionEnd\", function () {\n      c = !0;\n    });var e = function e() {\n      c || a(d).trigger(a.support.transition.end);\n    };return setTimeout(e, b), this;\n  }, a(function () {\n    a.support.transition = b(), a.support.transition && (a.event.special.bsTransitionEnd = { bindType: a.support.transition.end, delegateType: a.support.transition.end, handle: function handle(b) {\n        return a(b.target).is(this) ? b.handleObj.handler.apply(this, arguments) : void 0;\n      } });\n  });\n}(jQuery), +function (a) {\n  \"use strict\";\n  function b(b) {\n    return this.each(function () {\n      var c = a(this),\n          e = c.data(\"bs.alert\");e || c.data(\"bs.alert\", e = new d(this)), \"string\" == typeof b && e[b].call(c);\n    });\n  }var c = '[data-dismiss=\"alert\"]',\n      d = function d(b) {\n    a(b).on(\"click\", c, this.close);\n  };d.VERSION = \"3.3.5\", d.TRANSITION_DURATION = 150, d.prototype.close = function (b) {\n    function c() {\n      g.detach().trigger(\"closed.bs.alert\").remove();\n    }var e = a(this),\n        f = e.attr(\"data-target\");f || (f = e.attr(\"href\"), f = f && f.replace(/.*(?=#[^\\s]*$)/, \"\"));var g = a(f);b && b.preventDefault(), g.length || (g = e.closest(\".alert\")), g.trigger(b = a.Event(\"close.bs.alert\")), b.isDefaultPrevented() || (g.removeClass(\"in\"), a.support.transition && g.hasClass(\"fade\") ? g.one(\"bsTransitionEnd\", c).emulateTransitionEnd(d.TRANSITION_DURATION) : c());\n  };var e = a.fn.alert;a.fn.alert = b, a.fn.alert.Constructor = d, a.fn.alert.noConflict = function () {\n    return a.fn.alert = e, this;\n  }, a(document).on(\"click.bs.alert.data-api\", c, d.prototype.close);\n}(jQuery), +function (a) {\n  \"use strict\";\n  function b(b) {\n    return this.each(function () {\n      var d = a(this),\n          e = d.data(\"bs.button\"),\n          f = \"object\" == (typeof b === \"undefined\" ? \"undefined\" : _typeof(b)) && b;e || d.data(\"bs.button\", e = new c(this, f)), \"toggle\" == b ? e.toggle() : b && e.setState(b);\n    });\n  }var c = function c(b, d) {\n    this.$element = a(b), this.options = a.extend({}, c.DEFAULTS, d), this.isLoading = !1;\n  };c.VERSION = \"3.3.5\", c.DEFAULTS = { loadingText: \"loading...\" }, c.prototype.setState = function (b) {\n    var c = \"disabled\",\n        d = this.$element,\n        e = d.is(\"input\") ? \"val\" : \"html\",\n        f = d.data();b += \"Text\", null == f.resetText && d.data(\"resetText\", d[e]()), setTimeout(a.proxy(function () {\n      d[e](null == f[b] ? this.options[b] : f[b]), \"loadingText\" == b ? (this.isLoading = !0, d.addClass(c).attr(c, c)) : this.isLoading && (this.isLoading = !1, d.removeClass(c).removeAttr(c));\n    }, this), 0);\n  }, c.prototype.toggle = function () {\n    var a = !0,\n        b = this.$element.closest('[data-toggle=\"buttons\"]');if (b.length) {\n      var c = this.$element.find(\"input\");\"radio\" == c.prop(\"type\") ? (c.prop(\"checked\") && (a = !1), b.find(\".active\").removeClass(\"active\"), this.$element.addClass(\"active\")) : \"checkbox\" == c.prop(\"type\") && (c.prop(\"checked\") !== this.$element.hasClass(\"active\") && (a = !1), this.$element.toggleClass(\"active\")), c.prop(\"checked\", this.$element.hasClass(\"active\")), a && c.trigger(\"change\");\n    } else this.$element.attr(\"aria-pressed\", !this.$element.hasClass(\"active\")), this.$element.toggleClass(\"active\");\n  };var d = a.fn.button;a.fn.button = b, a.fn.button.Constructor = c, a.fn.button.noConflict = function () {\n    return a.fn.button = d, this;\n  }, a(document).on(\"click.bs.button.data-api\", '[data-toggle^=\"button\"]', function (c) {\n    var d = a(c.target);d.hasClass(\"btn\") || (d = d.closest(\".btn\")), b.call(d, \"toggle\"), a(c.target).is('input[type=\"radio\"]') || a(c.target).is('input[type=\"checkbox\"]') || c.preventDefault();\n  }).on(\"focus.bs.button.data-api blur.bs.button.data-api\", '[data-toggle^=\"button\"]', function (b) {\n    a(b.target).closest(\".btn\").toggleClass(\"focus\", /^focus(in)?$/.test(b.type));\n  });\n}(jQuery), +function (a) {\n  \"use strict\";\n  function b(b) {\n    return this.each(function () {\n      var d = a(this),\n          e = d.data(\"bs.carousel\"),\n          f = a.extend({}, c.DEFAULTS, d.data(), \"object\" == (typeof b === \"undefined\" ? \"undefined\" : _typeof(b)) && b),\n          g = \"string\" == typeof b ? b : f.slide;e || d.data(\"bs.carousel\", e = new c(this, f)), \"number\" == typeof b ? e.to(b) : g ? e[g]() : f.interval && e.pause().cycle();\n    });\n  }var c = function c(b, _c) {\n    this.$element = a(b), this.$indicators = this.$element.find(\".carousel-indicators\"), this.options = _c, this.paused = null, this.sliding = null, this.interval = null, this.$active = null, this.$items = null, this.options.keyboard && this.$element.on(\"keydown.bs.carousel\", a.proxy(this.keydown, this)), \"hover\" == this.options.pause && !(\"ontouchstart\" in document.documentElement) && this.$element.on(\"mouseenter.bs.carousel\", a.proxy(this.pause, this)).on(\"mouseleave.bs.carousel\", a.proxy(this.cycle, this));\n  };c.VERSION = \"3.3.5\", c.TRANSITION_DURATION = 600, c.DEFAULTS = { interval: 5e3, pause: \"hover\", wrap: !0, keyboard: !0 }, c.prototype.keydown = function (a) {\n    if (!/input|textarea/i.test(a.target.tagName)) {\n      switch (a.which) {case 37:\n          this.prev();break;case 39:\n          this.next();break;default:\n          return;}a.preventDefault();\n    }\n  }, c.prototype.cycle = function (b) {\n    return b || (this.paused = !1), this.interval && clearInterval(this.interval), this.options.interval && !this.paused && (this.interval = setInterval(a.proxy(this.next, this), this.options.interval)), this;\n  }, c.prototype.getItemIndex = function (a) {\n    return this.$items = a.parent().children(\".item\"), this.$items.index(a || this.$active);\n  }, c.prototype.getItemForDirection = function (a, b) {\n    var c = this.getItemIndex(b),\n        d = \"prev\" == a && 0 === c || \"next\" == a && c == this.$items.length - 1;if (d && !this.options.wrap) return b;var e = \"prev\" == a ? -1 : 1,\n        f = (c + e) % this.$items.length;return this.$items.eq(f);\n  }, c.prototype.to = function (a) {\n    var b = this,\n        c = this.getItemIndex(this.$active = this.$element.find(\".item.active\"));return a > this.$items.length - 1 || 0 > a ? void 0 : this.sliding ? this.$element.one(\"slid.bs.carousel\", function () {\n      b.to(a);\n    }) : c == a ? this.pause().cycle() : this.slide(a > c ? \"next\" : \"prev\", this.$items.eq(a));\n  }, c.prototype.pause = function (b) {\n    return b || (this.paused = !0), this.$element.find(\".next, .prev\").length && a.support.transition && (this.$element.trigger(a.support.transition.end), this.cycle(!0)), this.interval = clearInterval(this.interval), this;\n  }, c.prototype.next = function () {\n    return this.sliding ? void 0 : this.slide(\"next\");\n  }, c.prototype.prev = function () {\n    return this.sliding ? void 0 : this.slide(\"prev\");\n  }, c.prototype.slide = function (b, d) {\n    var e = this.$element.find(\".item.active\"),\n        f = d || this.getItemForDirection(b, e),\n        g = this.interval,\n        h = \"next\" == b ? \"left\" : \"right\",\n        i = this;if (f.hasClass(\"active\")) return this.sliding = !1;var j = f[0],\n        k = a.Event(\"slide.bs.carousel\", { relatedTarget: j, direction: h });if (this.$element.trigger(k), !k.isDefaultPrevented()) {\n      if (this.sliding = !0, g && this.pause(), this.$indicators.length) {\n        this.$indicators.find(\".active\").removeClass(\"active\");var l = a(this.$indicators.children()[this.getItemIndex(f)]);l && l.addClass(\"active\");\n      }var m = a.Event(\"slid.bs.carousel\", { relatedTarget: j, direction: h });return a.support.transition && this.$element.hasClass(\"slide\") ? (f.addClass(b), f[0].offsetWidth, e.addClass(h), f.addClass(h), e.one(\"bsTransitionEnd\", function () {\n        f.removeClass([b, h].join(\" \")).addClass(\"active\"), e.removeClass([\"active\", h].join(\" \")), i.sliding = !1, setTimeout(function () {\n          i.$element.trigger(m);\n        }, 0);\n      }).emulateTransitionEnd(c.TRANSITION_DURATION)) : (e.removeClass(\"active\"), f.addClass(\"active\"), this.sliding = !1, this.$element.trigger(m)), g && this.cycle(), this;\n    }\n  };var d = a.fn.carousel;a.fn.carousel = b, a.fn.carousel.Constructor = c, a.fn.carousel.noConflict = function () {\n    return a.fn.carousel = d, this;\n  };var e = function e(c) {\n    var d,\n        e = a(this),\n        f = a(e.attr(\"data-target\") || (d = e.attr(\"href\")) && d.replace(/.*(?=#[^\\s]+$)/, \"\"));if (f.hasClass(\"carousel\")) {\n      var g = a.extend({}, f.data(), e.data()),\n          h = e.attr(\"data-slide-to\");h && (g.interval = !1), b.call(f, g), h && f.data(\"bs.carousel\").to(h), c.preventDefault();\n    }\n  };a(document).on(\"click.bs.carousel.data-api\", \"[data-slide]\", e).on(\"click.bs.carousel.data-api\", \"[data-slide-to]\", e), a(window).on(\"load\", function () {\n    a('[data-ride=\"carousel\"]').each(function () {\n      var c = a(this);b.call(c, c.data());\n    });\n  });\n}(jQuery), +function (a) {\n  \"use strict\";\n  function b(b) {\n    var c,\n        d = b.attr(\"data-target\") || (c = b.attr(\"href\")) && c.replace(/.*(?=#[^\\s]+$)/, \"\");return a(d);\n  }function c(b) {\n    return this.each(function () {\n      var c = a(this),\n          e = c.data(\"bs.collapse\"),\n          f = a.extend({}, d.DEFAULTS, c.data(), \"object\" == (typeof b === \"undefined\" ? \"undefined\" : _typeof(b)) && b);!e && f.toggle && /show|hide/.test(b) && (f.toggle = !1), e || c.data(\"bs.collapse\", e = new d(this, f)), \"string\" == typeof b && e[b]();\n    });\n  }var d = function d(b, c) {\n    this.$element = a(b), this.options = a.extend({}, d.DEFAULTS, c), this.$trigger = a('[data-toggle=\"collapse\"][href=\"#' + b.id + '\"],[data-toggle=\"collapse\"][data-target=\"#' + b.id + '\"]'), this.transitioning = null, this.options.parent ? this.$parent = this.getParent() : this.addAriaAndCollapsedClass(this.$element, this.$trigger), this.options.toggle && this.toggle();\n  };d.VERSION = \"3.3.5\", d.TRANSITION_DURATION = 350, d.DEFAULTS = { toggle: !0 }, d.prototype.dimension = function () {\n    var a = this.$element.hasClass(\"width\");return a ? \"width\" : \"height\";\n  }, d.prototype.show = function () {\n    if (!this.transitioning && !this.$element.hasClass(\"in\")) {\n      var b,\n          e = this.$parent && this.$parent.children(\".panel\").children(\".in, .collapsing\");if (!(e && e.length && (b = e.data(\"bs.collapse\"), b && b.transitioning))) {\n        var f = a.Event(\"show.bs.collapse\");if (this.$element.trigger(f), !f.isDefaultPrevented()) {\n          e && e.length && (c.call(e, \"hide\"), b || e.data(\"bs.collapse\", null));var g = this.dimension();this.$element.removeClass(\"collapse\").addClass(\"collapsing\")[g](0).attr(\"aria-expanded\", !0), this.$trigger.removeClass(\"collapsed\").attr(\"aria-expanded\", !0), this.transitioning = 1;var h = function h() {\n            this.$element.removeClass(\"collapsing\").addClass(\"collapse in\")[g](\"\"), this.transitioning = 0, this.$element.trigger(\"shown.bs.collapse\");\n          };if (!a.support.transition) return h.call(this);var i = a.camelCase([\"scroll\", g].join(\"-\"));this.$element.one(\"bsTransitionEnd\", a.proxy(h, this)).emulateTransitionEnd(d.TRANSITION_DURATION)[g](this.$element[0][i]);\n        }\n      }\n    }\n  }, d.prototype.hide = function () {\n    if (!this.transitioning && this.$element.hasClass(\"in\")) {\n      var b = a.Event(\"hide.bs.collapse\");if (this.$element.trigger(b), !b.isDefaultPrevented()) {\n        var c = this.dimension();this.$element[c](this.$element[c]())[0].offsetHeight, this.$element.addClass(\"collapsing\").removeClass(\"collapse in\").attr(\"aria-expanded\", !1), this.$trigger.addClass(\"collapsed\").attr(\"aria-expanded\", !1), this.transitioning = 1;var e = function e() {\n          this.transitioning = 0, this.$element.removeClass(\"collapsing\").addClass(\"collapse\").trigger(\"hidden.bs.collapse\");\n        };return a.support.transition ? void this.$element[c](0).one(\"bsTransitionEnd\", a.proxy(e, this)).emulateTransitionEnd(d.TRANSITION_DURATION) : e.call(this);\n      }\n    }\n  }, d.prototype.toggle = function () {\n    this[this.$element.hasClass(\"in\") ? \"hide\" : \"show\"]();\n  }, d.prototype.getParent = function () {\n    return a(this.options.parent).find('[data-toggle=\"collapse\"][data-parent=\"' + this.options.parent + '\"]').each(a.proxy(function (c, d) {\n      var e = a(d);this.addAriaAndCollapsedClass(b(e), e);\n    }, this)).end();\n  }, d.prototype.addAriaAndCollapsedClass = function (a, b) {\n    var c = a.hasClass(\"in\");a.attr(\"aria-expanded\", c), b.toggleClass(\"collapsed\", !c).attr(\"aria-expanded\", c);\n  };var e = a.fn.collapse;a.fn.collapse = c, a.fn.collapse.Constructor = d, a.fn.collapse.noConflict = function () {\n    return a.fn.collapse = e, this;\n  }, a(document).on(\"click.bs.collapse.data-api\", '[data-toggle=\"collapse\"]', function (d) {\n    var e = a(this);e.attr(\"data-target\") || d.preventDefault();var f = b(e),\n        g = f.data(\"bs.collapse\"),\n        h = g ? \"toggle\" : e.data();c.call(f, h);\n  });\n}(jQuery), +function (a) {\n  \"use strict\";\n  function b(b) {\n    var c = b.attr(\"data-target\");c || (c = b.attr(\"href\"), c = c && /#[A-Za-z]/.test(c) && c.replace(/.*(?=#[^\\s]*$)/, \"\"));var d = c && a(c);return d && d.length ? d : b.parent();\n  }function c(c) {\n    c && 3 === c.which || (a(e).remove(), a(f).each(function () {\n      var d = a(this),\n          e = b(d),\n          f = { relatedTarget: this };e.hasClass(\"open\") && (c && \"click\" == c.type && /input|textarea/i.test(c.target.tagName) && a.contains(e[0], c.target) || (e.trigger(c = a.Event(\"hide.bs.dropdown\", f)), c.isDefaultPrevented() || (d.attr(\"aria-expanded\", \"false\"), e.removeClass(\"open\").trigger(\"hidden.bs.dropdown\", f))));\n    }));\n  }function d(b) {\n    return this.each(function () {\n      var c = a(this),\n          d = c.data(\"bs.dropdown\");d || c.data(\"bs.dropdown\", d = new g(this)), \"string\" == typeof b && d[b].call(c);\n    });\n  }var e = \".dropdown-backdrop\",\n      f = '[data-toggle=\"dropdown\"]',\n      g = function g(b) {\n    a(b).on(\"click.bs.dropdown\", this.toggle);\n  };g.VERSION = \"3.3.5\", g.prototype.toggle = function (d) {\n    var e = a(this);if (!e.is(\".disabled, :disabled\")) {\n      var f = b(e),\n          g = f.hasClass(\"open\");if (c(), !g) {\n        \"ontouchstart\" in document.documentElement && !f.closest(\".navbar-nav\").length && a(document.createElement(\"div\")).addClass(\"dropdown-backdrop\").insertAfter(a(this)).on(\"click\", c);var h = { relatedTarget: this };if (f.trigger(d = a.Event(\"show.bs.dropdown\", h)), d.isDefaultPrevented()) return;e.trigger(\"focus\").attr(\"aria-expanded\", \"true\"), f.toggleClass(\"open\").trigger(\"shown.bs.dropdown\", h);\n      }return !1;\n    }\n  }, g.prototype.keydown = function (c) {\n    if (/(38|40|27|32)/.test(c.which) && !/input|textarea/i.test(c.target.tagName)) {\n      var d = a(this);if (c.preventDefault(), c.stopPropagation(), !d.is(\".disabled, :disabled\")) {\n        var e = b(d),\n            g = e.hasClass(\"open\");if (!g && 27 != c.which || g && 27 == c.which) return 27 == c.which && e.find(f).trigger(\"focus\"), d.trigger(\"click\");var h = \" li:not(.disabled):visible a\",\n            i = e.find(\".dropdown-menu\" + h);if (i.length) {\n          var j = i.index(c.target);38 == c.which && j > 0 && j--, 40 == c.which && j < i.length - 1 && j++, ~j || (j = 0), i.eq(j).trigger(\"focus\");\n        }\n      }\n    }\n  };var h = a.fn.dropdown;a.fn.dropdown = d, a.fn.dropdown.Constructor = g, a.fn.dropdown.noConflict = function () {\n    return a.fn.dropdown = h, this;\n  }, a(document).on(\"click.bs.dropdown.data-api\", c).on(\"click.bs.dropdown.data-api\", \".dropdown form\", function (a) {\n    a.stopPropagation();\n  }).on(\"click.bs.dropdown.data-api\", f, g.prototype.toggle).on(\"keydown.bs.dropdown.data-api\", f, g.prototype.keydown).on(\"keydown.bs.dropdown.data-api\", \".dropdown-menu\", g.prototype.keydown);\n}(jQuery), +function (a) {\n  \"use strict\";\n  function b(b, d) {\n    return this.each(function () {\n      var e = a(this),\n          f = e.data(\"bs.modal\"),\n          g = a.extend({}, c.DEFAULTS, e.data(), \"object\" == (typeof b === \"undefined\" ? \"undefined\" : _typeof(b)) && b);f || e.data(\"bs.modal\", f = new c(this, g)), \"string\" == typeof b ? f[b](d) : g.show && f.show(d);\n    });\n  }var c = function c(b, _c2) {\n    this.options = _c2, this.$body = a(document.body), this.$element = a(b), this.$dialog = this.$element.find(\".modal-dialog\"), this.$backdrop = null, this.isShown = null, this.originalBodyPad = null, this.scrollbarWidth = 0, this.ignoreBackdropClick = !1, this.options.remote && this.$element.find(\".modal-content\").load(this.options.remote, a.proxy(function () {\n      this.$element.trigger(\"loaded.bs.modal\");\n    }, this));\n  };c.VERSION = \"3.3.5\", c.TRANSITION_DURATION = 300, c.BACKDROP_TRANSITION_DURATION = 150, c.DEFAULTS = { backdrop: !0, keyboard: !0, show: !0 }, c.prototype.toggle = function (a) {\n    return this.isShown ? this.hide() : this.show(a);\n  }, c.prototype.show = function (b) {\n    var d = this,\n        e = a.Event(\"show.bs.modal\", { relatedTarget: b });this.$element.trigger(e), this.isShown || e.isDefaultPrevented() || (this.isShown = !0, this.checkScrollbar(), this.setScrollbar(), this.$body.addClass(\"modal-open\"), this.escape(), this.resize(), this.$element.on(\"click.dismiss.bs.modal\", '[data-dismiss=\"modal\"]', a.proxy(this.hide, this)), this.$dialog.on(\"mousedown.dismiss.bs.modal\", function () {\n      d.$element.one(\"mouseup.dismiss.bs.modal\", function (b) {\n        a(b.target).is(d.$element) && (d.ignoreBackdropClick = !0);\n      });\n    }), this.backdrop(function () {\n      var e = a.support.transition && d.$element.hasClass(\"fade\");d.$element.parent().length || d.$element.appendTo(d.$body), d.$element.show().scrollTop(0), d.adjustDialog(), e && d.$element[0].offsetWidth, d.$element.addClass(\"in\"), d.enforceFocus();var f = a.Event(\"shown.bs.modal\", { relatedTarget: b });e ? d.$dialog.one(\"bsTransitionEnd\", function () {\n        d.$element.trigger(\"focus\").trigger(f);\n      }).emulateTransitionEnd(c.TRANSITION_DURATION) : d.$element.trigger(\"focus\").trigger(f);\n    }));\n  }, c.prototype.hide = function (b) {\n    b && b.preventDefault(), b = a.Event(\"hide.bs.modal\"), this.$element.trigger(b), this.isShown && !b.isDefaultPrevented() && (this.isShown = !1, this.escape(), this.resize(), a(document).off(\"focusin.bs.modal\"), this.$element.removeClass(\"in\").off(\"click.dismiss.bs.modal\").off(\"mouseup.dismiss.bs.modal\"), this.$dialog.off(\"mousedown.dismiss.bs.modal\"), a.support.transition && this.$element.hasClass(\"fade\") ? this.$element.one(\"bsTransitionEnd\", a.proxy(this.hideModal, this)).emulateTransitionEnd(c.TRANSITION_DURATION) : this.hideModal());\n  }, c.prototype.enforceFocus = function () {\n    a(document).off(\"focusin.bs.modal\").on(\"focusin.bs.modal\", a.proxy(function (a) {\n      this.$element[0] === a.target || this.$element.has(a.target).length || this.$element.trigger(\"focus\");\n    }, this));\n  }, c.prototype.escape = function () {\n    this.isShown && this.options.keyboard ? this.$element.on(\"keydown.dismiss.bs.modal\", a.proxy(function (a) {\n      27 == a.which && this.hide();\n    }, this)) : this.isShown || this.$element.off(\"keydown.dismiss.bs.modal\");\n  }, c.prototype.resize = function () {\n    this.isShown ? a(window).on(\"resize.bs.modal\", a.proxy(this.handleUpdate, this)) : a(window).off(\"resize.bs.modal\");\n  }, c.prototype.hideModal = function () {\n    var a = this;this.$element.hide(), this.backdrop(function () {\n      a.$body.removeClass(\"modal-open\"), a.resetAdjustments(), a.resetScrollbar(), a.$element.trigger(\"hidden.bs.modal\");\n    });\n  }, c.prototype.removeBackdrop = function () {\n    this.$backdrop && this.$backdrop.remove(), this.$backdrop = null;\n  }, c.prototype.backdrop = function (b) {\n    var d = this,\n        e = this.$element.hasClass(\"fade\") ? \"fade\" : \"\";if (this.isShown && this.options.backdrop) {\n      var f = a.support.transition && e;if (this.$backdrop = a(document.createElement(\"div\")).addClass(\"modal-backdrop \" + e).appendTo(this.$body), this.$element.on(\"click.dismiss.bs.modal\", a.proxy(function (a) {\n        return this.ignoreBackdropClick ? void (this.ignoreBackdropClick = !1) : void (a.target === a.currentTarget && (\"static\" == this.options.backdrop ? this.$element[0].focus() : this.hide()));\n      }, this)), f && this.$backdrop[0].offsetWidth, this.$backdrop.addClass(\"in\"), !b) return;f ? this.$backdrop.one(\"bsTransitionEnd\", b).emulateTransitionEnd(c.BACKDROP_TRANSITION_DURATION) : b();\n    } else if (!this.isShown && this.$backdrop) {\n      this.$backdrop.removeClass(\"in\");var g = function g() {\n        d.removeBackdrop(), b && b();\n      };a.support.transition && this.$element.hasClass(\"fade\") ? this.$backdrop.one(\"bsTransitionEnd\", g).emulateTransitionEnd(c.BACKDROP_TRANSITION_DURATION) : g();\n    } else b && b();\n  }, c.prototype.handleUpdate = function () {\n    this.adjustDialog();\n  }, c.prototype.adjustDialog = function () {\n    var a = this.$element[0].scrollHeight > document.documentElement.clientHeight;this.$element.css({ paddingLeft: !this.bodyIsOverflowing && a ? this.scrollbarWidth : \"\", paddingRight: this.bodyIsOverflowing && !a ? this.scrollbarWidth : \"\" });\n  }, c.prototype.resetAdjustments = function () {\n    this.$element.css({ paddingLeft: \"\", paddingRight: \"\" });\n  }, c.prototype.checkScrollbar = function () {\n    var a = window.innerWidth;if (!a) {\n      var b = document.documentElement.getBoundingClientRect();a = b.right - Math.abs(b.left);\n    }this.bodyIsOverflowing = document.body.clientWidth < a, this.scrollbarWidth = this.measureScrollbar();\n  }, c.prototype.setScrollbar = function () {\n    var a = parseInt(this.$body.css(\"padding-right\") || 0, 10);this.originalBodyPad = document.body.style.paddingRight || \"\", this.bodyIsOverflowing && this.$body.css(\"padding-right\", a + this.scrollbarWidth);\n  }, c.prototype.resetScrollbar = function () {\n    this.$body.css(\"padding-right\", this.originalBodyPad);\n  }, c.prototype.measureScrollbar = function () {\n    var a = document.createElement(\"div\");a.className = \"modal-scrollbar-measure\", this.$body.append(a);var b = a.offsetWidth - a.clientWidth;return this.$body[0].removeChild(a), b;\n  };var d = a.fn.modal;a.fn.modal = b, a.fn.modal.Constructor = c, a.fn.modal.noConflict = function () {\n    return a.fn.modal = d, this;\n  }, a(document).on(\"click.bs.modal.data-api\", '[data-toggle=\"modal\"]', function (c) {\n    var d = a(this),\n        e = d.attr(\"href\"),\n        f = a(d.attr(\"data-target\") || e && e.replace(/.*(?=#[^\\s]+$)/, \"\")),\n        g = f.data(\"bs.modal\") ? \"toggle\" : a.extend({ remote: !/#/.test(e) && e }, f.data(), d.data());d.is(\"a\") && c.preventDefault(), f.one(\"show.bs.modal\", function (a) {\n      a.isDefaultPrevented() || f.one(\"hidden.bs.modal\", function () {\n        d.is(\":visible\") && d.trigger(\"focus\");\n      });\n    }), b.call(f, g, this);\n  });\n}(jQuery), +function (a) {\n  \"use strict\";\n  function b(b) {\n    return this.each(function () {\n      var d = a(this),\n          e = d.data(\"bs.tooltip\"),\n          f = \"object\" == (typeof b === \"undefined\" ? \"undefined\" : _typeof(b)) && b;(e || !/destroy|hide/.test(b)) && (e || d.data(\"bs.tooltip\", e = new c(this, f)), \"string\" == typeof b && e[b]());\n    });\n  }var c = function c(a, b) {\n    this.type = null, this.options = null, this.enabled = null, this.timeout = null, this.hoverState = null, this.$element = null, this.inState = null, this.init(\"tooltip\", a, b);\n  };c.VERSION = \"3.3.5\", c.TRANSITION_DURATION = 150, c.DEFAULTS = { animation: !0, placement: \"top\", selector: !1, template: '<div class=\"tooltip\" role=\"tooltip\"><div class=\"tooltip-arrow\"></div><div class=\"tooltip-inner\"></div></div>', trigger: \"hover focus\", title: \"\", delay: 0, html: !1, container: !1, viewport: { selector: \"body\", padding: 0 } }, c.prototype.init = function (b, c, d) {\n    if (this.enabled = !0, this.type = b, this.$element = a(c), this.options = this.getOptions(d), this.$viewport = this.options.viewport && a(a.isFunction(this.options.viewport) ? this.options.viewport.call(this, this.$element) : this.options.viewport.selector || this.options.viewport), this.inState = { click: !1, hover: !1, focus: !1 }, this.$element[0] instanceof document.constructor && !this.options.selector) throw new Error(\"`selector` option must be specified when initializing \" + this.type + \" on the window.document object!\");for (var e = this.options.trigger.split(\" \"), f = e.length; f--;) {\n      var g = e[f];if (\"click\" == g) this.$element.on(\"click.\" + this.type, this.options.selector, a.proxy(this.toggle, this));else if (\"manual\" != g) {\n        var h = \"hover\" == g ? \"mouseenter\" : \"focusin\",\n            i = \"hover\" == g ? \"mouseleave\" : \"focusout\";this.$element.on(h + \".\" + this.type, this.options.selector, a.proxy(this.enter, this)), this.$element.on(i + \".\" + this.type, this.options.selector, a.proxy(this.leave, this));\n      }\n    }this.options.selector ? this._options = a.extend({}, this.options, { trigger: \"manual\", selector: \"\" }) : this.fixTitle();\n  }, c.prototype.getDefaults = function () {\n    return c.DEFAULTS;\n  }, c.prototype.getOptions = function (b) {\n    return b = a.extend({}, this.getDefaults(), this.$element.data(), b), b.delay && \"number\" == typeof b.delay && (b.delay = { show: b.delay, hide: b.delay }), b;\n  }, c.prototype.getDelegateOptions = function () {\n    var b = {},\n        c = this.getDefaults();return this._options && a.each(this._options, function (a, d) {\n      c[a] != d && (b[a] = d);\n    }), b;\n  }, c.prototype.enter = function (b) {\n    var c = b instanceof this.constructor ? b : a(b.currentTarget).data(\"bs.\" + this.type);return c || (c = new this.constructor(b.currentTarget, this.getDelegateOptions()), a(b.currentTarget).data(\"bs.\" + this.type, c)), b instanceof a.Event && (c.inState[\"focusin\" == b.type ? \"focus\" : \"hover\"] = !0), c.tip().hasClass(\"in\") || \"in\" == c.hoverState ? void (c.hoverState = \"in\") : (clearTimeout(c.timeout), c.hoverState = \"in\", c.options.delay && c.options.delay.show ? void (c.timeout = setTimeout(function () {\n      \"in\" == c.hoverState && c.show();\n    }, c.options.delay.show)) : c.show());\n  }, c.prototype.isInStateTrue = function () {\n    for (var a in this.inState) {\n      if (this.inState[a]) return !0;\n    }return !1;\n  }, c.prototype.leave = function (b) {\n    var c = b instanceof this.constructor ? b : a(b.currentTarget).data(\"bs.\" + this.type);return c || (c = new this.constructor(b.currentTarget, this.getDelegateOptions()), a(b.currentTarget).data(\"bs.\" + this.type, c)), b instanceof a.Event && (c.inState[\"focusout\" == b.type ? \"focus\" : \"hover\"] = !1), c.isInStateTrue() ? void 0 : (clearTimeout(c.timeout), c.hoverState = \"out\", c.options.delay && c.options.delay.hide ? void (c.timeout = setTimeout(function () {\n      \"out\" == c.hoverState && c.hide();\n    }, c.options.delay.hide)) : c.hide());\n  }, c.prototype.show = function () {\n    var b = a.Event(\"show.bs.\" + this.type);if (this.hasContent() && this.enabled) {\n      this.$element.trigger(b);var d = a.contains(this.$element[0].ownerDocument.documentElement, this.$element[0]);if (b.isDefaultPrevented() || !d) return;var e = this,\n          f = this.tip(),\n          g = this.getUID(this.type);this.setContent(), f.attr(\"id\", g), this.$element.attr(\"aria-describedby\", g), this.options.animation && f.addClass(\"fade\");var h = \"function\" == typeof this.options.placement ? this.options.placement.call(this, f[0], this.$element[0]) : this.options.placement,\n          i = /\\s?auto?\\s?/i,\n          j = i.test(h);j && (h = h.replace(i, \"\") || \"top\"), f.detach().css({ top: 0, left: 0, display: \"block\" }).addClass(h).data(\"bs.\" + this.type, this), this.options.container ? f.appendTo(this.options.container) : f.insertAfter(this.$element), this.$element.trigger(\"inserted.bs.\" + this.type);var k = this.getPosition(),\n          l = f[0].offsetWidth,\n          m = f[0].offsetHeight;if (j) {\n        var n = h,\n            o = this.getPosition(this.$viewport);h = \"bottom\" == h && k.bottom + m > o.bottom ? \"top\" : \"top\" == h && k.top - m < o.top ? \"bottom\" : \"right\" == h && k.right + l > o.width ? \"left\" : \"left\" == h && k.left - l < o.left ? \"right\" : h, f.removeClass(n).addClass(h);\n      }var p = this.getCalculatedOffset(h, k, l, m);this.applyPlacement(p, h);var q = function q() {\n        var a = e.hoverState;e.$element.trigger(\"shown.bs.\" + e.type), e.hoverState = null, \"out\" == a && e.leave(e);\n      };a.support.transition && this.$tip.hasClass(\"fade\") ? f.one(\"bsTransitionEnd\", q).emulateTransitionEnd(c.TRANSITION_DURATION) : q();\n    }\n  }, c.prototype.applyPlacement = function (b, c) {\n    var d = this.tip(),\n        e = d[0].offsetWidth,\n        f = d[0].offsetHeight,\n        g = parseInt(d.css(\"margin-top\"), 10),\n        h = parseInt(d.css(\"margin-left\"), 10);isNaN(g) && (g = 0), isNaN(h) && (h = 0), b.top += g, b.left += h, a.offset.setOffset(d[0], a.extend({ using: function using(a) {\n        d.css({ top: Math.round(a.top), left: Math.round(a.left) });\n      } }, b), 0), d.addClass(\"in\");var i = d[0].offsetWidth,\n        j = d[0].offsetHeight;\"top\" == c && j != f && (b.top = b.top + f - j);var k = this.getViewportAdjustedDelta(c, b, i, j);k.left ? b.left += k.left : b.top += k.top;var l = /top|bottom/.test(c),\n        m = l ? 2 * k.left - e + i : 2 * k.top - f + j,\n        n = l ? \"offsetWidth\" : \"offsetHeight\";d.offset(b), this.replaceArrow(m, d[0][n], l);\n  }, c.prototype.replaceArrow = function (a, b, c) {\n    this.arrow().css(c ? \"left\" : \"top\", 50 * (1 - a / b) + \"%\").css(c ? \"top\" : \"left\", \"\");\n  }, c.prototype.setContent = function () {\n    var a = this.tip(),\n        b = this.getTitle();a.find(\".tooltip-inner\")[this.options.html ? \"html\" : \"text\"](b), a.removeClass(\"fade in top bottom left right\");\n  }, c.prototype.hide = function (b) {\n    function d() {\n      \"in\" != e.hoverState && f.detach(), e.$element.removeAttr(\"aria-describedby\").trigger(\"hidden.bs.\" + e.type), b && b();\n    }var e = this,\n        f = a(this.$tip),\n        g = a.Event(\"hide.bs.\" + this.type);return this.$element.trigger(g), g.isDefaultPrevented() ? void 0 : (f.removeClass(\"in\"), a.support.transition && f.hasClass(\"fade\") ? f.one(\"bsTransitionEnd\", d).emulateTransitionEnd(c.TRANSITION_DURATION) : d(), this.hoverState = null, this);\n  }, c.prototype.fixTitle = function () {\n    var a = this.$element;(a.attr(\"title\") || \"string\" != typeof a.attr(\"data-original-title\")) && a.attr(\"data-original-title\", a.attr(\"title\") || \"\").attr(\"title\", \"\");\n  }, c.prototype.hasContent = function () {\n    return this.getTitle();\n  }, c.prototype.getPosition = function (b) {\n    b = b || this.$element;var c = b[0],\n        d = \"BODY\" == c.tagName,\n        e = c.getBoundingClientRect();null == e.width && (e = a.extend({}, e, { width: e.right - e.left, height: e.bottom - e.top }));var f = d ? { top: 0, left: 0 } : b.offset(),\n        g = { scroll: d ? document.documentElement.scrollTop || document.body.scrollTop : b.scrollTop() },\n        h = d ? { width: a(window).width(), height: a(window).height() } : null;return a.extend({}, e, g, h, f);\n  }, c.prototype.getCalculatedOffset = function (a, b, c, d) {\n    return \"bottom\" == a ? { top: b.top + b.height, left: b.left + b.width / 2 - c / 2 } : \"top\" == a ? { top: b.top - d, left: b.left + b.width / 2 - c / 2 } : \"left\" == a ? { top: b.top + b.height / 2 - d / 2, left: b.left - c } : { top: b.top + b.height / 2 - d / 2, left: b.left + b.width };\n  }, c.prototype.getViewportAdjustedDelta = function (a, b, c, d) {\n    var e = { top: 0, left: 0 };if (!this.$viewport) return e;var f = this.options.viewport && this.options.viewport.padding || 0,\n        g = this.getPosition(this.$viewport);if (/right|left/.test(a)) {\n      var h = b.top - f - g.scroll,\n          i = b.top + f - g.scroll + d;h < g.top ? e.top = g.top - h : i > g.top + g.height && (e.top = g.top + g.height - i);\n    } else {\n      var j = b.left - f,\n          k = b.left + f + c;j < g.left ? e.left = g.left - j : k > g.right && (e.left = g.left + g.width - k);\n    }return e;\n  }, c.prototype.getTitle = function () {\n    var a,\n        b = this.$element,\n        c = this.options;return a = b.attr(\"data-original-title\") || (\"function\" == typeof c.title ? c.title.call(b[0]) : c.title);\n  }, c.prototype.getUID = function (a) {\n    do {\n      a += ~~(1e6 * Math.random());\n    } while (document.getElementById(a));return a;\n  }, c.prototype.tip = function () {\n    if (!this.$tip && (this.$tip = a(this.options.template), 1 != this.$tip.length)) throw new Error(this.type + \" `template` option must consist of exactly 1 top-level element!\");return this.$tip;\n  }, c.prototype.arrow = function () {\n    return this.$arrow = this.$arrow || this.tip().find(\".tooltip-arrow\");\n  }, c.prototype.enable = function () {\n    this.enabled = !0;\n  }, c.prototype.disable = function () {\n    this.enabled = !1;\n  }, c.prototype.toggleEnabled = function () {\n    this.enabled = !this.enabled;\n  }, c.prototype.toggle = function (b) {\n    var c = this;b && (c = a(b.currentTarget).data(\"bs.\" + this.type), c || (c = new this.constructor(b.currentTarget, this.getDelegateOptions()), a(b.currentTarget).data(\"bs.\" + this.type, c))), b ? (c.inState.click = !c.inState.click, c.isInStateTrue() ? c.enter(c) : c.leave(c)) : c.tip().hasClass(\"in\") ? c.leave(c) : c.enter(c);\n  }, c.prototype.destroy = function () {\n    var a = this;clearTimeout(this.timeout), this.hide(function () {\n      a.$element.off(\".\" + a.type).removeData(\"bs.\" + a.type), a.$tip && a.$tip.detach(), a.$tip = null, a.$arrow = null, a.$viewport = null;\n    });\n  };var d = a.fn.tooltip;a.fn.tooltip = b, a.fn.tooltip.Constructor = c, a.fn.tooltip.noConflict = function () {\n    return a.fn.tooltip = d, this;\n  };\n}(jQuery), +function (a) {\n  \"use strict\";\n  function b(b) {\n    return this.each(function () {\n      var d = a(this),\n          e = d.data(\"bs.popover\"),\n          f = \"object\" == (typeof b === \"undefined\" ? \"undefined\" : _typeof(b)) && b;(e || !/destroy|hide/.test(b)) && (e || d.data(\"bs.popover\", e = new c(this, f)), \"string\" == typeof b && e[b]());\n    });\n  }var c = function c(a, b) {\n    this.init(\"popover\", a, b);\n  };if (!a.fn.tooltip) throw new Error(\"Popover requires tooltip.js\");c.VERSION = \"3.3.5\", c.DEFAULTS = a.extend({}, a.fn.tooltip.Constructor.DEFAULTS, { placement: \"right\", trigger: \"click\", content: \"\", template: '<div class=\"popover\" role=\"tooltip\"><div class=\"arrow\"></div><h3 class=\"popover-title\"></h3><div class=\"popover-content\"></div></div>' }), c.prototype = a.extend({}, a.fn.tooltip.Constructor.prototype), c.prototype.constructor = c, c.prototype.getDefaults = function () {\n    return c.DEFAULTS;\n  }, c.prototype.setContent = function () {\n    var a = this.tip(),\n        b = this.getTitle(),\n        c = this.getContent();a.find(\".popover-title\")[this.options.html ? \"html\" : \"text\"](b), a.find(\".popover-content\").children().detach().end()[this.options.html ? \"string\" == typeof c ? \"html\" : \"append\" : \"text\"](c), a.removeClass(\"fade top bottom left right in\"), a.find(\".popover-title\").html() || a.find(\".popover-title\").hide();\n  }, c.prototype.hasContent = function () {\n    return this.getTitle() || this.getContent();\n  }, c.prototype.getContent = function () {\n    var a = this.$element,\n        b = this.options;return a.attr(\"data-content\") || (\"function\" == typeof b.content ? b.content.call(a[0]) : b.content);\n  }, c.prototype.arrow = function () {\n    return this.$arrow = this.$arrow || this.tip().find(\".arrow\");\n  };var d = a.fn.popover;a.fn.popover = b, a.fn.popover.Constructor = c, a.fn.popover.noConflict = function () {\n    return a.fn.popover = d, this;\n  };\n}(jQuery), +function (a) {\n  \"use strict\";\n  function b(c, d) {\n    this.$body = a(document.body), this.$scrollElement = a(a(c).is(document.body) ? window : c), this.options = a.extend({}, b.DEFAULTS, d), this.selector = (this.options.target || \"\") + \" .nav li > a\", this.offsets = [], this.targets = [], this.activeTarget = null, this.scrollHeight = 0, this.$scrollElement.on(\"scroll.bs.scrollspy\", a.proxy(this.process, this)), this.refresh(), this.process();\n  }function c(c) {\n    return this.each(function () {\n      var d = a(this),\n          e = d.data(\"bs.scrollspy\"),\n          f = \"object\" == (typeof c === \"undefined\" ? \"undefined\" : _typeof(c)) && c;e || d.data(\"bs.scrollspy\", e = new b(this, f)), \"string\" == typeof c && e[c]();\n    });\n  }b.VERSION = \"3.3.5\", b.DEFAULTS = { offset: 10 }, b.prototype.getScrollHeight = function () {\n    return this.$scrollElement[0].scrollHeight || Math.max(this.$body[0].scrollHeight, document.documentElement.scrollHeight);\n  }, b.prototype.refresh = function () {\n    var b = this,\n        c = \"offset\",\n        d = 0;this.offsets = [], this.targets = [], this.scrollHeight = this.getScrollHeight(), a.isWindow(this.$scrollElement[0]) || (c = \"position\", d = this.$scrollElement.scrollTop()), this.$body.find(this.selector).map(function () {\n      var b = a(this),\n          e = b.data(\"target\") || b.attr(\"href\"),\n          f = /^#./.test(e) && a(e);return f && f.length && f.is(\":visible\") && [[f[c]().top + d, e]] || null;\n    }).sort(function (a, b) {\n      return a[0] - b[0];\n    }).each(function () {\n      b.offsets.push(this[0]), b.targets.push(this[1]);\n    });\n  }, b.prototype.process = function () {\n    var a,\n        b = this.$scrollElement.scrollTop() + this.options.offset,\n        c = this.getScrollHeight(),\n        d = this.options.offset + c - this.$scrollElement.height(),\n        e = this.offsets,\n        f = this.targets,\n        g = this.activeTarget;if (this.scrollHeight != c && this.refresh(), b >= d) return g != (a = f[f.length - 1]) && this.activate(a);if (g && b < e[0]) return this.activeTarget = null, this.clear();for (a = e.length; a--;) {\n      g != f[a] && b >= e[a] && (void 0 === e[a + 1] || b < e[a + 1]) && this.activate(f[a]);\n    }\n  }, b.prototype.activate = function (b) {\n    this.activeTarget = b, this.clear();var c = this.selector + '[data-target=\"' + b + '\"],' + this.selector + '[href=\"' + b + '\"]',\n        d = a(c).parents(\"li\").addClass(\"active\");d.parent(\".dropdown-menu\").length && (d = d.closest(\"li.dropdown\").addClass(\"active\")), d.trigger(\"activate.bs.scrollspy\");\n  }, b.prototype.clear = function () {\n    a(this.selector).parentsUntil(this.options.target, \".active\").removeClass(\"active\");\n  };var d = a.fn.scrollspy;a.fn.scrollspy = c, a.fn.scrollspy.Constructor = b, a.fn.scrollspy.noConflict = function () {\n    return a.fn.scrollspy = d, this;\n  }, a(window).on(\"load.bs.scrollspy.data-api\", function () {\n    a('[data-spy=\"scroll\"]').each(function () {\n      var b = a(this);c.call(b, b.data());\n    });\n  });\n}(jQuery), +function (a) {\n  \"use strict\";\n  function b(b) {\n    return this.each(function () {\n      var d = a(this),\n          e = d.data(\"bs.tab\");e || d.data(\"bs.tab\", e = new c(this)), \"string\" == typeof b && e[b]();\n    });\n  }var c = function c(b) {\n    this.element = a(b);\n  };c.VERSION = \"3.3.5\", c.TRANSITION_DURATION = 150, c.prototype.show = function () {\n    var b = this.element,\n        c = b.closest(\"ul:not(.dropdown-menu)\"),\n        d = b.data(\"target\");if (d || (d = b.attr(\"href\"), d = d && d.replace(/.*(?=#[^\\s]*$)/, \"\")), !b.parent(\"li\").hasClass(\"active\")) {\n      var e = c.find(\".active:last a\"),\n          f = a.Event(\"hide.bs.tab\", { relatedTarget: b[0] }),\n          g = a.Event(\"show.bs.tab\", { relatedTarget: e[0] });if (e.trigger(f), b.trigger(g), !g.isDefaultPrevented() && !f.isDefaultPrevented()) {\n        var h = a(d);this.activate(b.closest(\"li\"), c), this.activate(h, h.parent(), function () {\n          e.trigger({ type: \"hidden.bs.tab\", relatedTarget: b[0] }), b.trigger({ type: \"shown.bs.tab\", relatedTarget: e[0] });\n        });\n      }\n    }\n  }, c.prototype.activate = function (b, d, e) {\n    function f() {\n      g.removeClass(\"active\").find(\"> .dropdown-menu > .active\").removeClass(\"active\").end().find('[data-toggle=\"tab\"]').attr(\"aria-expanded\", !1), b.addClass(\"active\").find('[data-toggle=\"tab\"]').attr(\"aria-expanded\", !0), h ? (b[0].offsetWidth, b.addClass(\"in\")) : b.removeClass(\"fade\"), b.parent(\".dropdown-menu\").length && b.closest(\"li.dropdown\").addClass(\"active\").end().find('[data-toggle=\"tab\"]').attr(\"aria-expanded\", !0), e && e();\n    }var g = d.find(\"> .active\"),\n        h = e && a.support.transition && (g.length && g.hasClass(\"fade\") || !!d.find(\"> .fade\").length);g.length && h ? g.one(\"bsTransitionEnd\", f).emulateTransitionEnd(c.TRANSITION_DURATION) : f(), g.removeClass(\"in\");\n  };var d = a.fn.tab;a.fn.tab = b, a.fn.tab.Constructor = c, a.fn.tab.noConflict = function () {\n    return a.fn.tab = d, this;\n  };var e = function e(c) {\n    c.preventDefault(), b.call(a(this), \"show\");\n  };a(document).on(\"click.bs.tab.data-api\", '[data-toggle=\"tab\"]', e).on(\"click.bs.tab.data-api\", '[data-toggle=\"pill\"]', e);\n}(jQuery), +function (a) {\n  \"use strict\";\n  function b(b) {\n    return this.each(function () {\n      var d = a(this),\n          e = d.data(\"bs.affix\"),\n          f = \"object\" == (typeof b === \"undefined\" ? \"undefined\" : _typeof(b)) && b;e || d.data(\"bs.affix\", e = new c(this, f)), \"string\" == typeof b && e[b]();\n    });\n  }var c = function c(b, d) {\n    this.options = a.extend({}, c.DEFAULTS, d), this.$target = a(this.options.target).on(\"scroll.bs.affix.data-api\", a.proxy(this.checkPosition, this)).on(\"click.bs.affix.data-api\", a.proxy(this.checkPositionWithEventLoop, this)), this.$element = a(b), this.affixed = null, this.unpin = null, this.pinnedOffset = null, this.checkPosition();\n  };c.VERSION = \"3.3.5\", c.RESET = \"affix affix-top affix-bottom\", c.DEFAULTS = { offset: 0, target: window }, c.prototype.getState = function (a, b, c, d) {\n    var e = this.$target.scrollTop(),\n        f = this.$element.offset(),\n        g = this.$target.height();if (null != c && \"top\" == this.affixed) return c > e ? \"top\" : !1;if (\"bottom\" == this.affixed) return null != c ? e + this.unpin <= f.top ? !1 : \"bottom\" : a - d >= e + g ? !1 : \"bottom\";var h = null == this.affixed,\n        i = h ? e : f.top,\n        j = h ? g : b;return null != c && c >= e ? \"top\" : null != d && i + j >= a - d ? \"bottom\" : !1;\n  }, c.prototype.getPinnedOffset = function () {\n    if (this.pinnedOffset) return this.pinnedOffset;this.$element.removeClass(c.RESET).addClass(\"affix\");var a = this.$target.scrollTop(),\n        b = this.$element.offset();return this.pinnedOffset = b.top - a;\n  }, c.prototype.checkPositionWithEventLoop = function () {\n    setTimeout(a.proxy(this.checkPosition, this), 1);\n  }, c.prototype.checkPosition = function () {\n    if (this.$element.is(\":visible\")) {\n      var b = this.$element.height(),\n          d = this.options.offset,\n          e = d.top,\n          f = d.bottom,\n          g = Math.max(a(document).height(), a(document.body).height());\"object\" != (typeof d === \"undefined\" ? \"undefined\" : _typeof(d)) && (f = e = d), \"function\" == typeof e && (e = d.top(this.$element)), \"function\" == typeof f && (f = d.bottom(this.$element));var h = this.getState(g, b, e, f);if (this.affixed != h) {\n        null != this.unpin && this.$element.css(\"top\", \"\");var i = \"affix\" + (h ? \"-\" + h : \"\"),\n            j = a.Event(i + \".bs.affix\");if (this.$element.trigger(j), j.isDefaultPrevented()) return;this.affixed = h, this.unpin = \"bottom\" == h ? this.getPinnedOffset() : null, this.$element.removeClass(c.RESET).addClass(i).trigger(i.replace(\"affix\", \"affixed\") + \".bs.affix\");\n      }\"bottom\" == h && this.$element.offset({ top: g - b - f });\n    }\n  };var d = a.fn.affix;a.fn.affix = b, a.fn.affix.Constructor = c, a.fn.affix.noConflict = function () {\n    return a.fn.affix = d, this;\n  }, a(window).on(\"load\", function () {\n    a('[data-spy=\"affix\"]').each(function () {\n      var c = a(this),\n          d = c.data();d.offset = d.offset || {}, null != d.offsetBottom && (d.offset.bottom = d.offsetBottom), null != d.offsetTop && (d.offset.top = d.offsetTop), b.call(c, d);\n    });\n  });\n}(jQuery);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///13\n");

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(5)(undefined);\n// imports\n\n\n// module\nexports.push([module.i, \"/*!\\n * Bootstrap v3.3.7 (http://getbootstrap.com)\\n * Copyright 2011-2017 Twitter, Inc.\\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\\n */\\n\\n/*!\\n * Generated using the Bootstrap Customizer (https://getbootstrap.com/docs/3.3/customize/?id=6729ca5bfebd0b65e0f15f121902b07d)\\n * Config saved to config.json and https://gist.github.com/6729ca5bfebd0b65e0f15f121902b07d\\n *//*!\\n * Bootstrap v3.3.7 (http://getbootstrap.com)\\n * Copyright 2011-2016 Twitter, Inc.\\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\\n *//*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,hgroup,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block;vertical-align:baseline}audio:not([controls]){display:none;height:0}[hidden],template{display:none}a{background-color:transparent}a:active,a:hover{outline:0}abbr[title]{border-bottom:1px dotted}b,strong{font-weight:bold}dfn{font-style:italic}h1{font-size:2em;margin:0.67em 0}mark{background:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sup{top:-0.5em}sub{bottom:-0.25em}img{border:0}svg:not(:root){overflow:hidden}figure{margin:1em 40px}hr{-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;height:0}pre{overflow:auto}code,kbd,pre,samp{font-family:monospace, monospace;font-size:1em}button,input,optgroup,select,textarea{color:inherit;font:inherit;margin:0}button{overflow:visible}button,select{text-transform:none}button,html input[type=\\\"button\\\"],input[type=\\\"reset\\\"],input[type=\\\"submit\\\"]{-webkit-appearance:button;cursor:pointer}button[disabled],html input[disabled]{cursor:default}button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}input{line-height:normal}input[type=\\\"checkbox\\\"],input[type=\\\"radio\\\"]{-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;padding:0}input[type=\\\"number\\\"]::-webkit-inner-spin-button,input[type=\\\"number\\\"]::-webkit-outer-spin-button{height:auto}input[type=\\\"search\\\"]{-webkit-appearance:textfield;-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box}input[type=\\\"search\\\"]::-webkit-search-cancel-button,input[type=\\\"search\\\"]::-webkit-search-decoration{-webkit-appearance:none}fieldset{border:1px solid #c0c0c0;margin:0 2px;padding:0.35em 0.625em 0.75em}legend{border:0;padding:0}textarea{overflow:auto}optgroup{font-weight:bold}table{border-collapse:collapse;border-spacing:0}td,th{padding:0}*{-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box}*:before,*:after{-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box}html{font-size:10px;-webkit-tap-highlight-color:rgba(0,0,0,0)}body{font-family:\\\"Helvetica Neue\\\",Helvetica,Arial,sans-serif;font-size:14px;line-height:1.42857143;color:#333;background-color:#fff}input,button,select,textarea{font-family:inherit;font-size:inherit;line-height:inherit}a{color:#337ab7;text-decoration:none}a:hover,a:focus{color:#23527c;text-decoration:underline}a:focus{outline:5px auto -webkit-focus-ring-color;outline-offset:-2px}figure{margin:0}img{vertical-align:middle}.img-responsive{display:block;max-width:100%;height:auto}.img-rounded{border-radius:6px}.img-thumbnail{padding:4px;line-height:1.42857143;background-color:#fff;border:1px solid #ddd;border-radius:4px;-webkit-transition:all .2s ease-in-out;-o-transition:all .2s ease-in-out;transition:all .2s ease-in-out;display:inline-block;max-width:100%;height:auto}.img-circle{border-radius:50%}hr{margin-top:20px;margin-bottom:20px;border:0;border-top:1px solid #eee}.sr-only{position:absolute;width:1px;height:1px;margin:-1px;padding:0;overflow:hidden;clip:rect(0, 0, 0, 0);border:0}.sr-only-focusable:active,.sr-only-focusable:focus{position:static;width:auto;height:auto;margin:0;overflow:visible;clip:auto}[role=\\\"button\\\"]{cursor:pointer}.btn{display:inline-block;margin-bottom:0;font-weight:normal;text-align:center;vertical-align:middle;-ms-touch-action:manipulation;touch-action:manipulation;cursor:pointer;background-image:none;border:1px solid transparent;white-space:nowrap;padding:6px 12px;font-size:14px;line-height:1.42857143;border-radius:4px;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.btn:focus,.btn:active:focus,.btn.active:focus,.btn.focus,.btn:active.focus,.btn.active.focus{outline:5px auto -webkit-focus-ring-color;outline-offset:-2px}.btn:hover,.btn:focus,.btn.focus{color:#333;text-decoration:none}.btn:active,.btn.active{outline:0;background-image:none;-webkit-box-shadow:inset 0 3px 5px rgba(0,0,0,0.125);box-shadow:inset 0 3px 5px rgba(0,0,0,0.125)}.btn.disabled,.btn[disabled],fieldset[disabled] .btn{cursor:not-allowed;opacity:.65;filter:alpha(opacity=65);-webkit-box-shadow:none;box-shadow:none}a.btn.disabled,fieldset[disabled] a.btn{pointer-events:none}.btn-default{color:#333;background-color:#fff;border-color:#ccc}.btn-default:focus,.btn-default.focus{color:#333;background-color:#e6e6e6;border-color:#8c8c8c}.btn-default:hover{color:#333;background-color:#e6e6e6;border-color:#adadad}.btn-default:active,.btn-default.active,.open>.dropdown-toggle.btn-default{color:#333;background-color:#e6e6e6;border-color:#adadad}.btn-default:active:hover,.btn-default.active:hover,.open>.dropdown-toggle.btn-default:hover,.btn-default:active:focus,.btn-default.active:focus,.open>.dropdown-toggle.btn-default:focus,.btn-default:active.focus,.btn-default.active.focus,.open>.dropdown-toggle.btn-default.focus{color:#333;background-color:#d4d4d4;border-color:#8c8c8c}.btn-default:active,.btn-default.active,.open>.dropdown-toggle.btn-default{background-image:none}.btn-default.disabled:hover,.btn-default[disabled]:hover,fieldset[disabled] .btn-default:hover,.btn-default.disabled:focus,.btn-default[disabled]:focus,fieldset[disabled] .btn-default:focus,.btn-default.disabled.focus,.btn-default[disabled].focus,fieldset[disabled] .btn-default.focus{background-color:#fff;border-color:#ccc}.btn-default .badge{color:#fff;background-color:#333}.btn-primary{color:#fff;background-color:#337ab7;border-color:#2e6da4}.btn-primary:focus,.btn-primary.focus{color:#fff;background-color:#286090;border-color:#122b40}.btn-primary:hover{color:#fff;background-color:#286090;border-color:#204d74}.btn-primary:active,.btn-primary.active,.open>.dropdown-toggle.btn-primary{color:#fff;background-color:#286090;border-color:#204d74}.btn-primary:active:hover,.btn-primary.active:hover,.open>.dropdown-toggle.btn-primary:hover,.btn-primary:active:focus,.btn-primary.active:focus,.open>.dropdown-toggle.btn-primary:focus,.btn-primary:active.focus,.btn-primary.active.focus,.open>.dropdown-toggle.btn-primary.focus{color:#fff;background-color:#204d74;border-color:#122b40}.btn-primary:active,.btn-primary.active,.open>.dropdown-toggle.btn-primary{background-image:none}.btn-primary.disabled:hover,.btn-primary[disabled]:hover,fieldset[disabled] .btn-primary:hover,.btn-primary.disabled:focus,.btn-primary[disabled]:focus,fieldset[disabled] .btn-primary:focus,.btn-primary.disabled.focus,.btn-primary[disabled].focus,fieldset[disabled] .btn-primary.focus{background-color:#337ab7;border-color:#2e6da4}.btn-primary .badge{color:#337ab7;background-color:#fff}.btn-success{color:#fff;background-color:#5cb85c;border-color:#4cae4c}.btn-success:focus,.btn-success.focus{color:#fff;background-color:#449d44;border-color:#255625}.btn-success:hover{color:#fff;background-color:#449d44;border-color:#398439}.btn-success:active,.btn-success.active,.open>.dropdown-toggle.btn-success{color:#fff;background-color:#449d44;border-color:#398439}.btn-success:active:hover,.btn-success.active:hover,.open>.dropdown-toggle.btn-success:hover,.btn-success:active:focus,.btn-success.active:focus,.open>.dropdown-toggle.btn-success:focus,.btn-success:active.focus,.btn-success.active.focus,.open>.dropdown-toggle.btn-success.focus{color:#fff;background-color:#398439;border-color:#255625}.btn-success:active,.btn-success.active,.open>.dropdown-toggle.btn-success{background-image:none}.btn-success.disabled:hover,.btn-success[disabled]:hover,fieldset[disabled] .btn-success:hover,.btn-success.disabled:focus,.btn-success[disabled]:focus,fieldset[disabled] .btn-success:focus,.btn-success.disabled.focus,.btn-success[disabled].focus,fieldset[disabled] .btn-success.focus{background-color:#5cb85c;border-color:#4cae4c}.btn-success .badge{color:#5cb85c;background-color:#fff}.btn-info{color:#fff;background-color:#5bc0de;border-color:#46b8da}.btn-info:focus,.btn-info.focus{color:#fff;background-color:#31b0d5;border-color:#1b6d85}.btn-info:hover{color:#fff;background-color:#31b0d5;border-color:#269abc}.btn-info:active,.btn-info.active,.open>.dropdown-toggle.btn-info{color:#fff;background-color:#31b0d5;border-color:#269abc}.btn-info:active:hover,.btn-info.active:hover,.open>.dropdown-toggle.btn-info:hover,.btn-info:active:focus,.btn-info.active:focus,.open>.dropdown-toggle.btn-info:focus,.btn-info:active.focus,.btn-info.active.focus,.open>.dropdown-toggle.btn-info.focus{color:#fff;background-color:#269abc;border-color:#1b6d85}.btn-info:active,.btn-info.active,.open>.dropdown-toggle.btn-info{background-image:none}.btn-info.disabled:hover,.btn-info[disabled]:hover,fieldset[disabled] .btn-info:hover,.btn-info.disabled:focus,.btn-info[disabled]:focus,fieldset[disabled] .btn-info:focus,.btn-info.disabled.focus,.btn-info[disabled].focus,fieldset[disabled] .btn-info.focus{background-color:#5bc0de;border-color:#46b8da}.btn-info .badge{color:#5bc0de;background-color:#fff}.btn-warning{color:#fff;background-color:#f0ad4e;border-color:#eea236}.btn-warning:focus,.btn-warning.focus{color:#fff;background-color:#ec971f;border-color:#985f0d}.btn-warning:hover{color:#fff;background-color:#ec971f;border-color:#d58512}.btn-warning:active,.btn-warning.active,.open>.dropdown-toggle.btn-warning{color:#fff;background-color:#ec971f;border-color:#d58512}.btn-warning:active:hover,.btn-warning.active:hover,.open>.dropdown-toggle.btn-warning:hover,.btn-warning:active:focus,.btn-warning.active:focus,.open>.dropdown-toggle.btn-warning:focus,.btn-warning:active.focus,.btn-warning.active.focus,.open>.dropdown-toggle.btn-warning.focus{color:#fff;background-color:#d58512;border-color:#985f0d}.btn-warning:active,.btn-warning.active,.open>.dropdown-toggle.btn-warning{background-image:none}.btn-warning.disabled:hover,.btn-warning[disabled]:hover,fieldset[disabled] .btn-warning:hover,.btn-warning.disabled:focus,.btn-warning[disabled]:focus,fieldset[disabled] .btn-warning:focus,.btn-warning.disabled.focus,.btn-warning[disabled].focus,fieldset[disabled] .btn-warning.focus{background-color:#f0ad4e;border-color:#eea236}.btn-warning .badge{color:#f0ad4e;background-color:#fff}.btn-danger{color:#fff;background-color:#d9534f;border-color:#d43f3a}.btn-danger:focus,.btn-danger.focus{color:#fff;background-color:#c9302c;border-color:#761c19}.btn-danger:hover{color:#fff;background-color:#c9302c;border-color:#ac2925}.btn-danger:active,.btn-danger.active,.open>.dropdown-toggle.btn-danger{color:#fff;background-color:#c9302c;border-color:#ac2925}.btn-danger:active:hover,.btn-danger.active:hover,.open>.dropdown-toggle.btn-danger:hover,.btn-danger:active:focus,.btn-danger.active:focus,.open>.dropdown-toggle.btn-danger:focus,.btn-danger:active.focus,.btn-danger.active.focus,.open>.dropdown-toggle.btn-danger.focus{color:#fff;background-color:#ac2925;border-color:#761c19}.btn-danger:active,.btn-danger.active,.open>.dropdown-toggle.btn-danger{background-image:none}.btn-danger.disabled:hover,.btn-danger[disabled]:hover,fieldset[disabled] .btn-danger:hover,.btn-danger.disabled:focus,.btn-danger[disabled]:focus,fieldset[disabled] .btn-danger:focus,.btn-danger.disabled.focus,.btn-danger[disabled].focus,fieldset[disabled] .btn-danger.focus{background-color:#d9534f;border-color:#d43f3a}.btn-danger .badge{color:#d9534f;background-color:#fff}.btn-link{color:#337ab7;font-weight:normal;border-radius:0}.btn-link,.btn-link:active,.btn-link.active,.btn-link[disabled],fieldset[disabled] .btn-link{background-color:transparent;-webkit-box-shadow:none;box-shadow:none}.btn-link,.btn-link:hover,.btn-link:focus,.btn-link:active{border-color:transparent}.btn-link:hover,.btn-link:focus{color:#23527c;text-decoration:underline;background-color:transparent}.btn-link[disabled]:hover,fieldset[disabled] .btn-link:hover,.btn-link[disabled]:focus,fieldset[disabled] .btn-link:focus{color:#777;text-decoration:none}.btn-lg,.btn-group-lg>.btn{padding:10px 16px;font-size:18px;line-height:1.3333333;border-radius:6px}.btn-sm,.btn-group-sm>.btn{padding:5px 10px;font-size:12px;line-height:1.5;border-radius:3px}.btn-xs,.btn-group-xs>.btn{padding:1px 5px;font-size:12px;line-height:1.5;border-radius:3px}.btn-block{display:block;width:100%}.btn-block+.btn-block{margin-top:5px}input[type=\\\"submit\\\"].btn-block,input[type=\\\"reset\\\"].btn-block,input[type=\\\"button\\\"].btn-block{width:100%}.caret{display:inline-block;width:0;height:0;margin-left:2px;vertical-align:middle;border-top:4px dashed;border-top:4px solid \\\\9;border-right:4px solid transparent;border-left:4px solid transparent}.dropup,.dropdown{position:relative}.dropdown-toggle:focus{outline:0}.dropdown-menu{position:absolute;top:100%;left:0;z-index:1000;display:none;float:left;min-width:160px;padding:5px 0;margin:2px 0 0;list-style:none;font-size:14px;text-align:left;background-color:#fff;border:1px solid #ccc;border:1px solid rgba(0,0,0,0.15);border-radius:4px;-webkit-box-shadow:0 6px 12px rgba(0,0,0,0.175);box-shadow:0 6px 12px rgba(0,0,0,0.175);-webkit-background-clip:padding-box;background-clip:padding-box}.dropdown-menu.pull-right{right:0;left:auto}.dropdown-menu .divider{height:1px;margin:9px 0;overflow:hidden;background-color:#e5e5e5}.dropdown-menu>li>a{display:block;padding:3px 20px;clear:both;font-weight:normal;line-height:1.42857143;color:#333;white-space:nowrap}.dropdown-menu>li>a:hover,.dropdown-menu>li>a:focus{text-decoration:none;color:#262626;background-color:#f5f5f5}.dropdown-menu>.active>a,.dropdown-menu>.active>a:hover,.dropdown-menu>.active>a:focus{color:#fff;text-decoration:none;outline:0;background-color:#337ab7}.dropdown-menu>.disabled>a,.dropdown-menu>.disabled>a:hover,.dropdown-menu>.disabled>a:focus{color:#777}.dropdown-menu>.disabled>a:hover,.dropdown-menu>.disabled>a:focus{text-decoration:none;background-color:transparent;background-image:none;filter:progid:DXImageTransform.Microsoft.gradient(enabled = false);cursor:not-allowed}.open>.dropdown-menu{display:block}.open>a{outline:0}.dropdown-menu-right{left:auto;right:0}.dropdown-menu-left{left:0;right:auto}.dropdown-header{display:block;padding:3px 20px;font-size:12px;line-height:1.42857143;color:#777;white-space:nowrap}.dropdown-backdrop{position:fixed;left:0;right:0;bottom:0;top:0;z-index:990}.pull-right>.dropdown-menu{right:0;left:auto}.dropup .caret,.navbar-fixed-bottom .dropdown .caret{border-top:0;border-bottom:4px dashed;border-bottom:4px solid \\\\9;content:\\\"\\\"}.dropup .dropdown-menu,.navbar-fixed-bottom .dropdown .dropdown-menu{top:auto;bottom:100%;margin-bottom:2px}@media (min-width:768px){.navbar-right .dropdown-menu{left:auto;right:0}.navbar-right .dropdown-menu-left{left:0;right:auto}}.btn-group,.btn-group-vertical{position:relative;display:inline-block;vertical-align:middle}.btn-group>.btn,.btn-group-vertical>.btn{position:relative;float:left}.btn-group>.btn:hover,.btn-group-vertical>.btn:hover,.btn-group>.btn:focus,.btn-group-vertical>.btn:focus,.btn-group>.btn:active,.btn-group-vertical>.btn:active,.btn-group>.btn.active,.btn-group-vertical>.btn.active{z-index:2}.btn-group .btn+.btn,.btn-group .btn+.btn-group,.btn-group .btn-group+.btn,.btn-group .btn-group+.btn-group{margin-left:-1px}.btn-toolbar{margin-left:-5px}.btn-toolbar .btn,.btn-toolbar .btn-group,.btn-toolbar .input-group{float:left}.btn-toolbar>.btn,.btn-toolbar>.btn-group,.btn-toolbar>.input-group{margin-left:5px}.btn-group>.btn:not(:first-child):not(:last-child):not(.dropdown-toggle){border-radius:0}.btn-group>.btn:first-child{margin-left:0}.btn-group>.btn:first-child:not(:last-child):not(.dropdown-toggle){border-bottom-right-radius:0;border-top-right-radius:0}.btn-group>.btn:last-child:not(:first-child),.btn-group>.dropdown-toggle:not(:first-child){border-bottom-left-radius:0;border-top-left-radius:0}.btn-group>.btn-group{float:left}.btn-group>.btn-group:not(:first-child):not(:last-child)>.btn{border-radius:0}.btn-group>.btn-group:first-child:not(:last-child)>.btn:last-child,.btn-group>.btn-group:first-child:not(:last-child)>.dropdown-toggle{border-bottom-right-radius:0;border-top-right-radius:0}.btn-group>.btn-group:last-child:not(:first-child)>.btn:first-child{border-bottom-left-radius:0;border-top-left-radius:0}.btn-group .dropdown-toggle:active,.btn-group.open .dropdown-toggle{outline:0}.btn-group>.btn+.dropdown-toggle{padding-left:8px;padding-right:8px}.btn-group>.btn-lg+.dropdown-toggle{padding-left:12px;padding-right:12px}.btn-group.open .dropdown-toggle{-webkit-box-shadow:inset 0 3px 5px rgba(0,0,0,0.125);box-shadow:inset 0 3px 5px rgba(0,0,0,0.125)}.btn-group.open .dropdown-toggle.btn-link{-webkit-box-shadow:none;box-shadow:none}.btn .caret{margin-left:0}.btn-lg .caret{border-width:5px 5px 0;border-bottom-width:0}.dropup .btn-lg .caret{border-width:0 5px 5px}.btn-group-vertical>.btn,.btn-group-vertical>.btn-group,.btn-group-vertical>.btn-group>.btn{display:block;float:none;width:100%;max-width:100%}.btn-group-vertical>.btn-group>.btn{float:none}.btn-group-vertical>.btn+.btn,.btn-group-vertical>.btn+.btn-group,.btn-group-vertical>.btn-group+.btn,.btn-group-vertical>.btn-group+.btn-group{margin-top:-1px;margin-left:0}.btn-group-vertical>.btn:not(:first-child):not(:last-child){border-radius:0}.btn-group-vertical>.btn:first-child:not(:last-child){border-top-right-radius:4px;border-top-left-radius:4px;border-bottom-right-radius:0;border-bottom-left-radius:0}.btn-group-vertical>.btn:last-child:not(:first-child){border-top-right-radius:0;border-top-left-radius:0;border-bottom-right-radius:4px;border-bottom-left-radius:4px}.btn-group-vertical>.btn-group:not(:first-child):not(:last-child)>.btn{border-radius:0}.btn-group-vertical>.btn-group:first-child:not(:last-child)>.btn:last-child,.btn-group-vertical>.btn-group:first-child:not(:last-child)>.dropdown-toggle{border-bottom-right-radius:0;border-bottom-left-radius:0}.btn-group-vertical>.btn-group:last-child:not(:first-child)>.btn:first-child{border-top-right-radius:0;border-top-left-radius:0}.btn-group-justified{display:table;width:100%;table-layout:fixed;border-collapse:separate}.btn-group-justified>.btn,.btn-group-justified>.btn-group{float:none;display:table-cell;width:1%}.btn-group-justified>.btn-group .btn{width:100%}.btn-group-justified>.btn-group .dropdown-menu{left:auto}[data-toggle=\\\"buttons\\\"]>.btn input[type=\\\"radio\\\"],[data-toggle=\\\"buttons\\\"]>.btn-group>.btn input[type=\\\"radio\\\"],[data-toggle=\\\"buttons\\\"]>.btn input[type=\\\"checkbox\\\"],[data-toggle=\\\"buttons\\\"]>.btn-group>.btn input[type=\\\"checkbox\\\"]{position:absolute;clip:rect(0, 0, 0, 0);pointer-events:none}.tooltip{position:absolute;z-index:1070;display:block;font-family:\\\"Helvetica Neue\\\",Helvetica,Arial,sans-serif;font-style:normal;font-weight:normal;letter-spacing:normal;line-break:auto;line-height:1.42857143;text-align:left;text-align:start;text-decoration:none;text-shadow:none;text-transform:none;white-space:normal;word-break:normal;word-spacing:normal;word-wrap:normal;font-size:12px;opacity:0;filter:alpha(opacity=0)}.tooltip.in{opacity:.9;filter:alpha(opacity=90)}.tooltip.top{margin-top:-3px;padding:5px 0}.tooltip.right{margin-left:3px;padding:0 5px}.tooltip.bottom{margin-top:3px;padding:5px 0}.tooltip.left{margin-left:-3px;padding:0 5px}.tooltip-inner{max-width:200px;padding:3px 8px;color:#fff;text-align:center;background-color:#000;border-radius:4px}.tooltip-arrow{position:absolute;width:0;height:0;border-color:transparent;border-style:solid}.tooltip.top .tooltip-arrow{bottom:0;left:50%;margin-left:-5px;border-width:5px 5px 0;border-top-color:#000}.tooltip.top-left .tooltip-arrow{bottom:0;right:5px;margin-bottom:-5px;border-width:5px 5px 0;border-top-color:#000}.tooltip.top-right .tooltip-arrow{bottom:0;left:5px;margin-bottom:-5px;border-width:5px 5px 0;border-top-color:#000}.tooltip.right .tooltip-arrow{top:50%;left:0;margin-top:-5px;border-width:5px 5px 5px 0;border-right-color:#000}.tooltip.left .tooltip-arrow{top:50%;right:0;margin-top:-5px;border-width:5px 0 5px 5px;border-left-color:#000}.tooltip.bottom .tooltip-arrow{top:0;left:50%;margin-left:-5px;border-width:0 5px 5px;border-bottom-color:#000}.tooltip.bottom-left .tooltip-arrow{top:0;right:5px;margin-top:-5px;border-width:0 5px 5px;border-bottom-color:#000}.tooltip.bottom-right .tooltip-arrow{top:0;left:5px;margin-top:-5px;border-width:0 5px 5px;border-bottom-color:#000}.clearfix:before,.clearfix:after,.btn-toolbar:before,.btn-toolbar:after,.btn-group-vertical>.btn-group:before,.btn-group-vertical>.btn-group:after{content:\\\" \\\";display:table}.clearfix:after,.btn-toolbar:after,.btn-group-vertical>.btn-group:after{clear:both}.center-block{display:block;margin-left:auto;margin-right:auto}.pull-right{float:right !important}.pull-left{float:left !important}.hide{display:none !important}.show{display:block !important}.invisible{visibility:hidden}.text-hide{font:0/0 a;color:transparent;text-shadow:none;background-color:transparent;border:0}.hidden{display:none !important}.affix{position:fixed}\", \"\"]);\n\n// exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///14\n");

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(14);\nif(typeof content === 'string') content = [[module.i, content, '']];\n// Prepare cssTransformation\nvar transform;\n\nvar options = {}\noptions.transform = transform\n// add the styles to the DOM\nvar update = __webpack_require__(9)(content, options);\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(false) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../../../node_modules/css-loader/index.js!./bootstrap.min.css\", function() {\n\t\t\tvar newContent = require(\"!!../../../node_modules/css-loader/index.js!./bootstrap.min.css\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvZWRpdGFibGUvY3NzL2Jvb3RzdHJhcC5taW4uY3NzPzIwNTQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsZ0NBQWdDLFVBQVUsRUFBRTtBQUM1QyIsImZpbGUiOiIxNS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuL2Jvb3RzdHJhcC5taW4uY3NzXCIpO1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4vLyBQcmVwYXJlIGNzc1RyYW5zZm9ybWF0aW9uXG52YXIgdHJhbnNmb3JtO1xuXG52YXIgb3B0aW9ucyA9IHt9XG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBIb3QgTW9kdWxlIFJlcGxhY2VtZW50XG5pZihtb2R1bGUuaG90KSB7XG5cdC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG5cdGlmKCFjb250ZW50LmxvY2Fscykge1xuXHRcdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuL2Jvb3RzdHJhcC5taW4uY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuL2Jvb3RzdHJhcC5taW4uY3NzXCIpO1xuXHRcdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cdFx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdFx0fSk7XG5cdH1cblx0Ly8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9lZGl0YWJsZS9jc3MvYm9vdHN0cmFwLm1pbi5jc3Ncbi8vIG1vZHVsZSBpZCA9IDE1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///15\n");

/***/ }),
/* 16 */,
/* 17 */,
/* 18 */,
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(5)(undefined);\n// imports\n\n\n// module\nexports.push([module.i, \"ul.wysihtml5-toolbar {\\n\\tmargin: 0;\\n\\tpadding: 0;\\n\\tdisplay: block;\\n}\\n\\nul.wysihtml5-toolbar::after {\\n\\tclear: both;\\n\\tdisplay: table;\\n\\tcontent: \\\"\\\";\\n}\\n\\nul.wysihtml5-toolbar > li {\\n\\tfloat: left;\\n\\tdisplay: list-item;\\n\\tlist-style: none;\\n\\tmargin: 0 5px 10px 0;\\n}\\n\\nul.wysihtml5-toolbar a[data-wysihtml5-command=bold] {\\n\\tfont-weight: bold;\\n}\\n\\nul.wysihtml5-toolbar a[data-wysihtml5-command=italic] {\\n\\tfont-style: italic;\\n}\\n\\nul.wysihtml5-toolbar a[data-wysihtml5-command=underline] {\\n\\ttext-decoration: underline;\\n}\\n\\nul.wysihtml5-toolbar a.btn.wysihtml5-command-active {\\n\\tbackground-image: none;\\n\\t-webkit-box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.15),0 1px 2px rgba(0, 0, 0, 0.05);\\n\\t-moz-box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.15),0 1px 2px rgba(0, 0, 0, 0.05);\\n\\tbox-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.15),0 1px 2px rgba(0, 0, 0, 0.05);\\n\\tbackground-color: #E6E6E6;\\n\\tbackground-color: #D9D9D9;\\n\\toutline: 0;\\n}\\n\\nul.wysihtml5-commands-disabled .dropdown-menu {\\n\\tdisplay: none !important;\\n}\\n\\nul.wysihtml5-toolbar div.wysihtml5-colors {\\n  display:block;\\n  width: 50px;\\n  height: 20px;\\n  margin-top: 2px;\\n  margin-left: 5px;\\n  position: absolute;\\n  pointer-events: none;\\n}\\n\\nul.wysihtml5-toolbar a.wysihtml5-colors-title {\\n  padding-left: 70px;\\n}\\n\\nul.wysihtml5-toolbar div[data-wysihtml5-command-value=\\\"clear\\\"] {\\n  background: #a38a77 !important;\\n}\\n\\nul.wysihtml5-toolbar div[data-wysihtml5-command-value=\\\"black\\\"] {\\n  background: black !important;\\n}\\n\\nul.wysihtml5-toolbar div[data-wysihtml5-command-value=\\\"silver\\\"] {\\n  background: silver !important;\\n}\\n\\nul.wysihtml5-toolbar div[data-wysihtml5-command-value=\\\"gray\\\"] {\\n  background: gray !important;\\n}\\n\\nul.wysihtml5-toolbar div[data-wysihtml5-command-value=\\\"maroon\\\"] {\\n  background: maroon !important;\\n}\\n\\nul.wysihtml5-toolbar div[data-wysihtml5-command-value=\\\"red\\\"] {\\n  background: red !important;\\n}\\n\\nul.wysihtml5-toolbar div[data-wysihtml5-command-value=\\\"purple\\\"] {\\n  background: purple !important;\\n}\\n\\nul.wysihtml5-toolbar div[data-wysihtml5-command-value=\\\"green\\\"] {\\n  background: green !important;\\n}\\n\\nul.wysihtml5-toolbar div[data-wysihtml5-command-value=\\\"olive\\\"] {\\n  background: olive !important;\\n}\\n\\nul.wysihtml5-toolbar div[data-wysihtml5-command-value=\\\"navy\\\"] {\\n  background: navy !important;\\n}\\n\\nul.wysihtml5-toolbar div[data-wysihtml5-command-value=\\\"blue\\\"] {\\n  background: blue !important;\\n}\\n\\nul.wysihtml5-toolbar div[data-wysihtml5-command-value=\\\"orange\\\"] {\\n  background: orange !important;\\n}\\n\\nul.wysihtml5-toolbar div[data-wysihtml5-command-value=\\\"first\\\"] {\\n\\tbackground: #149D9A !important;\\n}\\n\\nul.wysihtml5-toolbar div[data-wysihtml5-command-value=\\\"second\\\"] {\\n\\tbackground: #E02924 !important;\\n}\\n\\nul.wysihtml5-toolbar div[data-wysihtml5-command-value=\\\"three\\\"] {\\n\\tbackground: #2954A4 !important;\\n}\\n\", \"\"]);\n\n// exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvZWRpdGFibGUvY3NzL2Jvb3RzdHJhcC13eXNpaHRtbDUuY3NzPzIyYzQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7O0FBR0E7QUFDQSwrQ0FBZ0QsY0FBYyxlQUFlLG1CQUFtQixHQUFHLGlDQUFpQyxnQkFBZ0IsbUJBQW1CLGtCQUFrQixHQUFHLCtCQUErQixnQkFBZ0IsdUJBQXVCLHFCQUFxQix5QkFBeUIsR0FBRyx5REFBeUQsc0JBQXNCLEdBQUcsMkRBQTJELHVCQUF1QixHQUFHLDhEQUE4RCwrQkFBK0IsR0FBRyx5REFBeUQsMkJBQTJCLDBGQUEwRix1RkFBdUYsa0ZBQWtGLDhCQUE4Qiw4QkFBOEIsZUFBZSxHQUFHLG1EQUFtRCw2QkFBNkIsR0FBRywrQ0FBK0Msa0JBQWtCLGdCQUFnQixpQkFBaUIsb0JBQW9CLHFCQUFxQix1QkFBdUIseUJBQXlCLEdBQUcsbURBQW1ELHVCQUF1QixHQUFHLHNFQUFzRSxtQ0FBbUMsR0FBRyxzRUFBc0UsaUNBQWlDLEdBQUcsdUVBQXVFLGtDQUFrQyxHQUFHLHFFQUFxRSxnQ0FBZ0MsR0FBRyx1RUFBdUUsa0NBQWtDLEdBQUcsb0VBQW9FLCtCQUErQixHQUFHLHVFQUF1RSxrQ0FBa0MsR0FBRyxzRUFBc0UsaUNBQWlDLEdBQUcsc0VBQXNFLGlDQUFpQyxHQUFHLHFFQUFxRSxnQ0FBZ0MsR0FBRyxxRUFBcUUsZ0NBQWdDLEdBQUcsdUVBQXVFLGtDQUFrQyxHQUFHLHNFQUFzRSxtQ0FBbUMsR0FBRyx1RUFBdUUsbUNBQW1DLEdBQUcsc0VBQXNFLG1DQUFtQyxHQUFHOztBQUUxM0YiLCJmaWxlIjoiMTkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKHVuZGVmaW5lZCk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJ1bC53eXNpaHRtbDUtdG9vbGJhciB7XFxuXFx0bWFyZ2luOiAwO1xcblxcdHBhZGRpbmc6IDA7XFxuXFx0ZGlzcGxheTogYmxvY2s7XFxufVxcblxcbnVsLnd5c2lodG1sNS10b29sYmFyOjphZnRlciB7XFxuXFx0Y2xlYXI6IGJvdGg7XFxuXFx0ZGlzcGxheTogdGFibGU7XFxuXFx0Y29udGVudDogXFxcIlxcXCI7XFxufVxcblxcbnVsLnd5c2lodG1sNS10b29sYmFyID4gbGkge1xcblxcdGZsb2F0OiBsZWZ0O1xcblxcdGRpc3BsYXk6IGxpc3QtaXRlbTtcXG5cXHRsaXN0LXN0eWxlOiBub25lO1xcblxcdG1hcmdpbjogMCA1cHggMTBweCAwO1xcbn1cXG5cXG51bC53eXNpaHRtbDUtdG9vbGJhciBhW2RhdGEtd3lzaWh0bWw1LWNvbW1hbmQ9Ym9sZF0ge1xcblxcdGZvbnQtd2VpZ2h0OiBib2xkO1xcbn1cXG5cXG51bC53eXNpaHRtbDUtdG9vbGJhciBhW2RhdGEtd3lzaWh0bWw1LWNvbW1hbmQ9aXRhbGljXSB7XFxuXFx0Zm9udC1zdHlsZTogaXRhbGljO1xcbn1cXG5cXG51bC53eXNpaHRtbDUtdG9vbGJhciBhW2RhdGEtd3lzaWh0bWw1LWNvbW1hbmQ9dW5kZXJsaW5lXSB7XFxuXFx0dGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7XFxufVxcblxcbnVsLnd5c2lodG1sNS10b29sYmFyIGEuYnRuLnd5c2lodG1sNS1jb21tYW5kLWFjdGl2ZSB7XFxuXFx0YmFja2dyb3VuZC1pbWFnZTogbm9uZTtcXG5cXHQtd2Via2l0LWJveC1zaGFkb3c6IGluc2V0IDAgMnB4IDRweCByZ2JhKDAsIDAsIDAsIDAuMTUpLDAgMXB4IDJweCByZ2JhKDAsIDAsIDAsIDAuMDUpO1xcblxcdC1tb3otYm94LXNoYWRvdzogaW5zZXQgMCAycHggNHB4IHJnYmEoMCwgMCwgMCwgMC4xNSksMCAxcHggMnB4IHJnYmEoMCwgMCwgMCwgMC4wNSk7XFxuXFx0Ym94LXNoYWRvdzogaW5zZXQgMCAycHggNHB4IHJnYmEoMCwgMCwgMCwgMC4xNSksMCAxcHggMnB4IHJnYmEoMCwgMCwgMCwgMC4wNSk7XFxuXFx0YmFja2dyb3VuZC1jb2xvcjogI0U2RTZFNjtcXG5cXHRiYWNrZ3JvdW5kLWNvbG9yOiAjRDlEOUQ5O1xcblxcdG91dGxpbmU6IDA7XFxufVxcblxcbnVsLnd5c2lodG1sNS1jb21tYW5kcy1kaXNhYmxlZCAuZHJvcGRvd24tbWVudSB7XFxuXFx0ZGlzcGxheTogbm9uZSAhaW1wb3J0YW50O1xcbn1cXG5cXG51bC53eXNpaHRtbDUtdG9vbGJhciBkaXYud3lzaWh0bWw1LWNvbG9ycyB7XFxuICBkaXNwbGF5OmJsb2NrO1xcbiAgd2lkdGg6IDUwcHg7XFxuICBoZWlnaHQ6IDIwcHg7XFxuICBtYXJnaW4tdG9wOiAycHg7XFxuICBtYXJnaW4tbGVmdDogNXB4O1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxufVxcblxcbnVsLnd5c2lodG1sNS10b29sYmFyIGEud3lzaWh0bWw1LWNvbG9ycy10aXRsZSB7XFxuICBwYWRkaW5nLWxlZnQ6IDcwcHg7XFxufVxcblxcbnVsLnd5c2lodG1sNS10b29sYmFyIGRpdltkYXRhLXd5c2lodG1sNS1jb21tYW5kLXZhbHVlPVxcXCJjbGVhclxcXCJdIHtcXG4gIGJhY2tncm91bmQ6ICNhMzhhNzcgIWltcG9ydGFudDtcXG59XFxuXFxudWwud3lzaWh0bWw1LXRvb2xiYXIgZGl2W2RhdGEtd3lzaWh0bWw1LWNvbW1hbmQtdmFsdWU9XFxcImJsYWNrXFxcIl0ge1xcbiAgYmFja2dyb3VuZDogYmxhY2sgIWltcG9ydGFudDtcXG59XFxuXFxudWwud3lzaWh0bWw1LXRvb2xiYXIgZGl2W2RhdGEtd3lzaWh0bWw1LWNvbW1hbmQtdmFsdWU9XFxcInNpbHZlclxcXCJdIHtcXG4gIGJhY2tncm91bmQ6IHNpbHZlciAhaW1wb3J0YW50O1xcbn1cXG5cXG51bC53eXNpaHRtbDUtdG9vbGJhciBkaXZbZGF0YS13eXNpaHRtbDUtY29tbWFuZC12YWx1ZT1cXFwiZ3JheVxcXCJdIHtcXG4gIGJhY2tncm91bmQ6IGdyYXkgIWltcG9ydGFudDtcXG59XFxuXFxudWwud3lzaWh0bWw1LXRvb2xiYXIgZGl2W2RhdGEtd3lzaWh0bWw1LWNvbW1hbmQtdmFsdWU9XFxcIm1hcm9vblxcXCJdIHtcXG4gIGJhY2tncm91bmQ6IG1hcm9vbiAhaW1wb3J0YW50O1xcbn1cXG5cXG51bC53eXNpaHRtbDUtdG9vbGJhciBkaXZbZGF0YS13eXNpaHRtbDUtY29tbWFuZC12YWx1ZT1cXFwicmVkXFxcIl0ge1xcbiAgYmFja2dyb3VuZDogcmVkICFpbXBvcnRhbnQ7XFxufVxcblxcbnVsLnd5c2lodG1sNS10b29sYmFyIGRpdltkYXRhLXd5c2lodG1sNS1jb21tYW5kLXZhbHVlPVxcXCJwdXJwbGVcXFwiXSB7XFxuICBiYWNrZ3JvdW5kOiBwdXJwbGUgIWltcG9ydGFudDtcXG59XFxuXFxudWwud3lzaWh0bWw1LXRvb2xiYXIgZGl2W2RhdGEtd3lzaWh0bWw1LWNvbW1hbmQtdmFsdWU9XFxcImdyZWVuXFxcIl0ge1xcbiAgYmFja2dyb3VuZDogZ3JlZW4gIWltcG9ydGFudDtcXG59XFxuXFxudWwud3lzaWh0bWw1LXRvb2xiYXIgZGl2W2RhdGEtd3lzaWh0bWw1LWNvbW1hbmQtdmFsdWU9XFxcIm9saXZlXFxcIl0ge1xcbiAgYmFja2dyb3VuZDogb2xpdmUgIWltcG9ydGFudDtcXG59XFxuXFxudWwud3lzaWh0bWw1LXRvb2xiYXIgZGl2W2RhdGEtd3lzaWh0bWw1LWNvbW1hbmQtdmFsdWU9XFxcIm5hdnlcXFwiXSB7XFxuICBiYWNrZ3JvdW5kOiBuYXZ5ICFpbXBvcnRhbnQ7XFxufVxcblxcbnVsLnd5c2lodG1sNS10b29sYmFyIGRpdltkYXRhLXd5c2lodG1sNS1jb21tYW5kLXZhbHVlPVxcXCJibHVlXFxcIl0ge1xcbiAgYmFja2dyb3VuZDogYmx1ZSAhaW1wb3J0YW50O1xcbn1cXG5cXG51bC53eXNpaHRtbDUtdG9vbGJhciBkaXZbZGF0YS13eXNpaHRtbDUtY29tbWFuZC12YWx1ZT1cXFwib3JhbmdlXFxcIl0ge1xcbiAgYmFja2dyb3VuZDogb3JhbmdlICFpbXBvcnRhbnQ7XFxufVxcblxcbnVsLnd5c2lodG1sNS10b29sYmFyIGRpdltkYXRhLXd5c2lodG1sNS1jb21tYW5kLXZhbHVlPVxcXCJmaXJzdFxcXCJdIHtcXG5cXHRiYWNrZ3JvdW5kOiAjMTQ5RDlBICFpbXBvcnRhbnQ7XFxufVxcblxcbnVsLnd5c2lodG1sNS10b29sYmFyIGRpdltkYXRhLXd5c2lodG1sNS1jb21tYW5kLXZhbHVlPVxcXCJzZWNvbmRcXFwiXSB7XFxuXFx0YmFja2dyb3VuZDogI0UwMjkyNCAhaW1wb3J0YW50O1xcbn1cXG5cXG51bC53eXNpaHRtbDUtdG9vbGJhciBkaXZbZGF0YS13eXNpaHRtbDUtY29tbWFuZC12YWx1ZT1cXFwidGhyZWVcXFwiXSB7XFxuXFx0YmFja2dyb3VuZDogIzI5NTRBNCAhaW1wb3J0YW50O1xcbn1cXG5cIiwgXCJcIl0pO1xuXG4vLyBleHBvcnRzXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY3NzLWxvYWRlciEuL3NyYy9lZGl0YWJsZS9jc3MvYm9vdHN0cmFwLXd5c2lodG1sNS5jc3Ncbi8vIG1vZHVsZSBpZCA9IDE5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///19\n");

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(19);\nif(typeof content === 'string') content = [[module.i, content, '']];\n// Prepare cssTransformation\nvar transform;\n\nvar options = {}\noptions.transform = transform\n// add the styles to the DOM\nvar update = __webpack_require__(9)(content, options);\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(false) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../../../node_modules/css-loader/index.js!./bootstrap-wysihtml5.css\", function() {\n\t\t\tvar newContent = require(\"!!../../../node_modules/css-loader/index.js!./bootstrap-wysihtml5.css\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvZWRpdGFibGUvY3NzL2Jvb3RzdHJhcC13eXNpaHRtbDUuY3NzPzM2MDciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsZ0NBQWdDLFVBQVUsRUFBRTtBQUM1QyIsImZpbGUiOiIyMC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuL2Jvb3RzdHJhcC13eXNpaHRtbDUuY3NzXCIpO1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4vLyBQcmVwYXJlIGNzc1RyYW5zZm9ybWF0aW9uXG52YXIgdHJhbnNmb3JtO1xuXG52YXIgb3B0aW9ucyA9IHt9XG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBIb3QgTW9kdWxlIFJlcGxhY2VtZW50XG5pZihtb2R1bGUuaG90KSB7XG5cdC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG5cdGlmKCFjb250ZW50LmxvY2Fscykge1xuXHRcdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuL2Jvb3RzdHJhcC13eXNpaHRtbDUuY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuL2Jvb3RzdHJhcC13eXNpaHRtbDUuY3NzXCIpO1xuXHRcdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cdFx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdFx0fSk7XG5cdH1cblx0Ly8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9lZGl0YWJsZS9jc3MvYm9vdHN0cmFwLXd5c2lodG1sNS5jc3Ncbi8vIG1vZHVsZSBpZCA9IDIwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///20\n");

/***/ }),
/* 21 */,
/* 22 */
/***/ (function(module, exports) {

eval("var _typeof2 = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _typeof = typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\" ? function (obj) {\n  return typeof obj === \"undefined\" ? \"undefined\" : _typeof2(obj);\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj === \"undefined\" ? \"undefined\" : _typeof2(obj);\n};\n\nvar wysihtml5 = {\n  version: \"0.3.0\",\n\n  // namespaces\n  commands: {},\n  dom: {},\n  quirks: {},\n  toolbar: {},\n  lang: {},\n  selection: {},\n  views: {},\n\n  INVISIBLE_SPACE: \"\\uFEFF\",\n\n  EMPTY_FUNCTION: function EMPTY_FUNCTION() {},\n\n  ELEMENT_NODE: 1,\n  TEXT_NODE: 3,\n\n  BACKSPACE_KEY: 8,\n  ENTER_KEY: 13,\n  ESCAPE_KEY: 27,\n  SPACE_KEY: 32,\n  DELETE_KEY: 46\n}; /**\n   * @license Rangy, a cross-browser JavaScript range and selection library\n   * http://code.google.com/p/rangy/\n   *\n   * Copyright 2011, Tim Down\n   * Licensed under the MIT license.\n   * Version: 1.2.2\n   * Build date: 13 November 2011\n   */\nwindow['rangy'] = function () {\n\n  var OBJECT = \"object\",\n      FUNCTION = \"function\",\n      UNDEFINED = \"undefined\";\n\n  var domRangeProperties = [\"startContainer\", \"startOffset\", \"endContainer\", \"endOffset\", \"collapsed\", \"commonAncestorContainer\", \"START_TO_START\", \"START_TO_END\", \"END_TO_START\", \"END_TO_END\"];\n\n  var domRangeMethods = [\"setStart\", \"setStartBefore\", \"setStartAfter\", \"setEnd\", \"setEndBefore\", \"setEndAfter\", \"collapse\", \"selectNode\", \"selectNodeContents\", \"compareBoundaryPoints\", \"deleteContents\", \"extractContents\", \"cloneContents\", \"insertNode\", \"surroundContents\", \"cloneRange\", \"toString\", \"detach\"];\n\n  var textRangeProperties = [\"boundingHeight\", \"boundingLeft\", \"boundingTop\", \"boundingWidth\", \"htmlText\", \"text\"];\n\n  // Subset of TextRange's full set of methods that we're interested in\n  var textRangeMethods = [\"collapse\", \"compareEndPoints\", \"duplicate\", \"getBookmark\", \"moveToBookmark\", \"moveToElementText\", \"parentElement\", \"pasteHTML\", \"select\", \"setEndPoint\", \"getBoundingClientRect\"];\n\n  /*----------------------------------------------------------------------------------------------------------------*/\n\n  // Trio of functions taken from Peter Michaux's article:\n  // http://peter.michaux.ca/articles/feature-detection-state-of-the-art-browser-scripting\n  function isHostMethod(o, p) {\n    var t = _typeof(o[p]);\n    return t == FUNCTION || !!(t == OBJECT && o[p]) || t == \"unknown\";\n  }\n\n  function isHostObject(o, p) {\n    return !!(_typeof(o[p]) == OBJECT && o[p]);\n  }\n\n  function isHostProperty(o, p) {\n    return _typeof(o[p]) != UNDEFINED;\n  }\n\n  // Creates a convenience function to save verbose repeated calls to tests functions\n  function createMultiplePropertyTest(testFunc) {\n    return function (o, props) {\n      var i = props.length;\n      while (i--) {\n        if (!testFunc(o, props[i])) {\n          return false;\n        }\n      }\n      return true;\n    };\n  }\n\n  // Next trio of functions are a convenience to save verbose repeated calls to previous two functions\n  var areHostMethods = createMultiplePropertyTest(isHostMethod);\n  var areHostObjects = createMultiplePropertyTest(isHostObject);\n  var areHostProperties = createMultiplePropertyTest(isHostProperty);\n\n  function isTextRange(range) {\n    return range && areHostMethods(range, textRangeMethods) && areHostProperties(range, textRangeProperties);\n  }\n\n  var api = {\n    version: \"1.2.2\",\n    initialized: false,\n    supported: true,\n\n    util: {\n      isHostMethod: isHostMethod,\n      isHostObject: isHostObject,\n      isHostProperty: isHostProperty,\n      areHostMethods: areHostMethods,\n      areHostObjects: areHostObjects,\n      areHostProperties: areHostProperties,\n      isTextRange: isTextRange\n    },\n\n    features: {},\n\n    modules: {},\n    config: {\n      alertOnWarn: false,\n      preferTextRange: false\n    }\n  };\n\n  function fail(reason) {\n    window.alert(\"Rangy not supported in your browser. Reason: \" + reason);\n    api.initialized = true;\n    api.supported = false;\n  }\n\n  api.fail = fail;\n\n  function warn(msg) {\n    var warningMessage = \"Rangy warning: \" + msg;\n    if (api.config.alertOnWarn) {\n      window.alert(warningMessage);\n    } else if (_typeof(window.console) != UNDEFINED && _typeof(window.console.log) != UNDEFINED) {\n      window.console.log(warningMessage);\n    }\n  }\n\n  api.warn = warn;\n\n  if ({}.hasOwnProperty) {\n    api.util.extend = function (o, props) {\n      for (var i in props) {\n        if (props.hasOwnProperty(i)) {\n          o[i] = props[i];\n        }\n      }\n    };\n  } else {\n    fail(\"hasOwnProperty not supported\");\n  }\n\n  var initListeners = [];\n  var moduleInitializers = [];\n\n  // Initialization\n  function init() {\n    if (api.initialized) {\n      return;\n    }\n    var testRange;\n    var implementsDomRange = false,\n        implementsTextRange = false;\n\n    // First, perform basic feature tests\n\n    if (isHostMethod(document, \"createRange\")) {\n      testRange = document.createRange();\n      if (areHostMethods(testRange, domRangeMethods) && areHostProperties(testRange, domRangeProperties)) {\n        implementsDomRange = true;\n      }\n      testRange.detach();\n    }\n\n    var body = isHostObject(document, \"body\") ? document.body : document.getElementsByTagName(\"body\")[0];\n\n    if (body && isHostMethod(body, \"createTextRange\")) {\n      testRange = body.createTextRange();\n      if (isTextRange(testRange)) {\n        implementsTextRange = true;\n      }\n    }\n\n    if (!implementsDomRange && !implementsTextRange) {\n      fail(\"Neither Range nor TextRange are implemented\");\n    }\n\n    api.initialized = true;\n    api.features = {\n      implementsDomRange: implementsDomRange,\n      implementsTextRange: implementsTextRange\n    };\n\n    // Initialize modules and call init listeners\n    var allListeners = moduleInitializers.concat(initListeners);\n    for (var i = 0, len = allListeners.length; i < len; ++i) {\n      try {\n        allListeners[i](api);\n      } catch (ex) {\n        if (isHostObject(window, \"console\") && isHostMethod(window.console, \"log\")) {\n          window.console.log(\"Init listener threw an exception. Continuing.\", ex);\n        }\n      }\n    }\n  }\n\n  // Allow external scripts to initialize this library in case it's loaded after the document has loaded\n  api.init = init;\n\n  // Execute listener immediately if already initialized\n  api.addInitListener = function (listener) {\n    if (api.initialized) {\n      listener(api);\n    } else {\n      initListeners.push(listener);\n    }\n  };\n\n  var createMissingNativeApiListeners = [];\n\n  api.addCreateMissingNativeApiListener = function (listener) {\n    createMissingNativeApiListeners.push(listener);\n  };\n\n  function createMissingNativeApi(win) {\n    win = win || window;\n    init();\n\n    // Notify listeners\n    for (var i = 0, len = createMissingNativeApiListeners.length; i < len; ++i) {\n      createMissingNativeApiListeners[i](win);\n    }\n  }\n\n  api.createMissingNativeApi = createMissingNativeApi;\n\n  /**\n   * @constructor\n   */\n  function Module(name) {\n    this.name = name;\n    this.initialized = false;\n    this.supported = false;\n  }\n\n  Module.prototype.fail = function (reason) {\n    this.initialized = true;\n    this.supported = false;\n\n    throw new Error(\"Module '\" + this.name + \"' failed to load: \" + reason);\n  };\n\n  Module.prototype.warn = function (msg) {\n    api.warn(\"Module \" + this.name + \": \" + msg);\n  };\n\n  Module.prototype.createError = function (msg) {\n    return new Error(\"Error in Rangy \" + this.name + \" module: \" + msg);\n  };\n\n  api.createModule = function (name, initFunc) {\n    var module = new Module(name);\n    api.modules[name] = module;\n\n    moduleInitializers.push(function (api) {\n      initFunc(api, module);\n      module.initialized = true;\n      module.supported = true;\n    });\n  };\n\n  api.requireModules = function (modules) {\n    for (var i = 0, len = modules.length, module, moduleName; i < len; ++i) {\n      moduleName = modules[i];\n      module = api.modules[moduleName];\n      if (!module || !(module instanceof Module)) {\n        throw new Error(\"Module '\" + moduleName + \"' not found\");\n      }\n      if (!module.supported) {\n        throw new Error(\"Module '\" + moduleName + \"' not supported\");\n      }\n    }\n  };\n\n  /*----------------------------------------------------------------------------------------------------------------*/\n\n  // Wait for document to load before running tests\n\n  var docReady = false;\n\n  var loadHandler = function loadHandler(e) {\n\n    if (!docReady) {\n      docReady = true;\n      if (!api.initialized) {\n        init();\n      }\n    }\n  };\n\n  // Test whether we have window and document objects that we will need\n  if ((typeof window === \"undefined\" ? \"undefined\" : _typeof(window)) == UNDEFINED) {\n    fail(\"No window found\");\n    return;\n  }\n  if ((typeof document === \"undefined\" ? \"undefined\" : _typeof(document)) == UNDEFINED) {\n    fail(\"No document found\");\n    return;\n  }\n\n  if (isHostMethod(document, \"addEventListener\")) {\n    document.addEventListener(\"DOMContentLoaded\", loadHandler, false);\n  }\n\n  // Add a fallback in case the DOMContentLoaded event isn't supported\n  if (isHostMethod(window, \"addEventListener\")) {\n    window.addEventListener(\"load\", loadHandler, false);\n  } else if (isHostMethod(window, \"attachEvent\")) {\n    window.attachEvent(\"onload\", loadHandler);\n  } else {\n    fail(\"Window does not have required addEventListener or attachEvent method\");\n  }\n\n  return api;\n}();\nrangy.createModule(\"DomUtil\", function (api, module) {\n\n  var UNDEF = \"undefined\";\n  var util = api.util;\n\n  // Perform feature tests\n  if (!util.areHostMethods(document, [\"createDocumentFragment\", \"createElement\", \"createTextNode\"])) {\n    module.fail(\"document missing a Node creation method\");\n  }\n\n  if (!util.isHostMethod(document, \"getElementsByTagName\")) {\n    module.fail(\"document missing getElementsByTagName method\");\n  }\n\n  var el = document.createElement(\"div\");\n  if (!util.areHostMethods(el, [\"insertBefore\", \"appendChild\", \"cloneNode\"] || !util.areHostObjects(el, [\"previousSibling\", \"nextSibling\", \"childNodes\", \"parentNode\"]))) {\n    module.fail(\"Incomplete Element implementation\");\n  }\n\n  // innerHTML is required for Range's createContextualFragment method\n  if (!util.isHostProperty(el, \"innerHTML\")) {\n    module.fail(\"Element is missing innerHTML property\");\n  }\n\n  var textNode = document.createTextNode(\"test\");\n  if (!util.areHostMethods(textNode, [\"splitText\", \"deleteData\", \"insertData\", \"appendData\", \"cloneNode\"] || !util.areHostObjects(el, [\"previousSibling\", \"nextSibling\", \"childNodes\", \"parentNode\"]) || !util.areHostProperties(textNode, [\"data\"]))) {\n    module.fail(\"Incomplete Text Node implementation\");\n  }\n\n  /*----------------------------------------------------------------------------------------------------------------*/\n\n  // Removed use of indexOf because of a bizarre bug in Opera that is thrown in one of the Acid3 tests. I haven't been\n  // able to replicate it outside of the test. The bug is that indexOf returns -1 when called on an Array that\n  // contains just the document as a single element and the value searched for is the document.\n  var arrayContains = /*Array.prototype.indexOf ?\n                      function(arr, val) {\n                      return arr.indexOf(val) > -1;\n                      }:*/\n\n  function arrayContains(arr, val) {\n    var i = arr.length;\n    while (i--) {\n      if (arr[i] === val) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  // Opera 11 puts HTML elements in the null namespace, it seems, and IE 7 has undefined namespaceURI\n  function isHtmlNamespace(node) {\n    var ns;\n    return _typeof(node.namespaceURI) == UNDEF || (ns = node.namespaceURI) === null || ns == \"http://www.w3.org/1999/xhtml\";\n  }\n\n  function parentElement(node) {\n    var parent = node.parentNode;\n    return parent.nodeType == 1 ? parent : null;\n  }\n\n  function getNodeIndex(node) {\n    var i = 0;\n    while (node = node.previousSibling) {\n      i++;\n    }\n    return i;\n  }\n\n  function getNodeLength(node) {\n    var childNodes;\n    return isCharacterDataNode(node) ? node.length : (childNodes = node.childNodes) ? childNodes.length : 0;\n  }\n\n  function getCommonAncestor(node1, node2) {\n    var ancestors = [],\n        n;\n    for (n = node1; n; n = n.parentNode) {\n      ancestors.push(n);\n    }\n\n    for (n = node2; n; n = n.parentNode) {\n      if (arrayContains(ancestors, n)) {\n        return n;\n      }\n    }\n\n    return null;\n  }\n\n  function isAncestorOf(ancestor, descendant, selfIsAncestor) {\n    var n = selfIsAncestor ? descendant : descendant.parentNode;\n    while (n) {\n      if (n === ancestor) {\n        return true;\n      } else {\n        n = n.parentNode;\n      }\n    }\n    return false;\n  }\n\n  function getClosestAncestorIn(node, ancestor, selfIsAncestor) {\n    var p,\n        n = selfIsAncestor ? node : node.parentNode;\n    while (n) {\n      p = n.parentNode;\n      if (p === ancestor) {\n        return n;\n      }\n      n = p;\n    }\n    return null;\n  }\n\n  function isCharacterDataNode(node) {\n    var t = node.nodeType;\n    return t == 3 || t == 4 || t == 8; // Text, CDataSection or Comment\n  }\n\n  function insertAfter(node, precedingNode) {\n    var nextNode = precedingNode.nextSibling,\n        parent = precedingNode.parentNode;\n    if (nextNode) {\n      parent.insertBefore(node, nextNode);\n    } else {\n      parent.appendChild(node);\n    }\n    return node;\n  }\n\n  // Note that we cannot use splitText() because it is bugridden in IE 9.\n  function splitDataNode(node, index) {\n    var newNode = node.cloneNode(false);\n    newNode.deleteData(0, index);\n    node.deleteData(index, node.length - index);\n    insertAfter(newNode, node);\n    return newNode;\n  }\n\n  function getDocument(node) {\n    if (node.nodeType == 9) {\n      return node;\n    } else if (_typeof(node.ownerDocument) != UNDEF) {\n      return node.ownerDocument;\n    } else if (_typeof(node.document) != UNDEF) {\n      return node.document;\n    } else if (node.parentNode) {\n      return getDocument(node.parentNode);\n    } else {\n      throw new Error(\"getDocument: no document found for node\");\n    }\n  }\n\n  function getWindow(node) {\n    var doc = getDocument(node);\n    if (_typeof(doc.defaultView) != UNDEF) {\n      return doc.defaultView;\n    } else if (_typeof(doc.parentWindow) != UNDEF) {\n      return doc.parentWindow;\n    } else {\n      throw new Error(\"Cannot get a window object for node\");\n    }\n  }\n\n  function getIframeDocument(iframeEl) {\n    if (_typeof(iframeEl.contentDocument) != UNDEF) {\n      return iframeEl.contentDocument;\n    } else if (_typeof(iframeEl.contentWindow) != UNDEF) {\n      return iframeEl.contentWindow.document;\n    } else {\n      throw new Error(\"getIframeWindow: No Document object found for iframe element\");\n    }\n  }\n\n  function getIframeWindow(iframeEl) {\n    if (_typeof(iframeEl.contentWindow) != UNDEF) {\n      return iframeEl.contentWindow;\n    } else if (_typeof(iframeEl.contentDocument) != UNDEF) {\n      return iframeEl.contentDocument.defaultView;\n    } else {\n      throw new Error(\"getIframeWindow: No Window object found for iframe element\");\n    }\n  }\n\n  function getBody(doc) {\n    return util.isHostObject(doc, \"body\") ? doc.body : doc.getElementsByTagName(\"body\")[0];\n  }\n\n  function getRootContainer(node) {\n    var parent;\n    while (parent = node.parentNode) {\n      node = parent;\n    }\n    return node;\n  }\n\n  function comparePoints(nodeA, offsetA, nodeB, offsetB) {\n    // See http://www.w3.org/TR/DOM-Level-2-Traversal-Range/ranges.html#Level-2-Range-Comparing\n    var nodeC, root, childA, childB, n;\n    if (nodeA == nodeB) {\n\n      // Case 1: nodes are the same\n      return offsetA === offsetB ? 0 : offsetA < offsetB ? -1 : 1;\n    } else if (nodeC = getClosestAncestorIn(nodeB, nodeA, true)) {\n\n      // Case 2: node C (container B or an ancestor) is a child node of A\n      return offsetA <= getNodeIndex(nodeC) ? -1 : 1;\n    } else if (nodeC = getClosestAncestorIn(nodeA, nodeB, true)) {\n\n      // Case 3: node C (container A or an ancestor) is a child node of B\n      return getNodeIndex(nodeC) < offsetB ? -1 : 1;\n    } else {\n\n      // Case 4: containers are siblings or descendants of siblings\n      root = getCommonAncestor(nodeA, nodeB);\n      childA = nodeA === root ? root : getClosestAncestorIn(nodeA, root, true);\n      childB = nodeB === root ? root : getClosestAncestorIn(nodeB, root, true);\n\n      if (childA === childB) {\n        // This shouldn't be possible\n\n        throw new Error(\"comparePoints got to case 4 and childA and childB are the same!\");\n      } else {\n        n = root.firstChild;\n        while (n) {\n          if (n === childA) {\n            return -1;\n          } else if (n === childB) {\n            return 1;\n          }\n          n = n.nextSibling;\n        }\n        throw new Error(\"Should not be here!\");\n      }\n    }\n  }\n\n  function fragmentFromNodeChildren(node) {\n    var fragment = getDocument(node).createDocumentFragment(),\n        child;\n    while (child = node.firstChild) {\n      fragment.appendChild(child);\n    }\n    return fragment;\n  }\n\n  function inspectNode(node) {\n    if (!node) {\n      return \"[No node]\";\n    }\n    if (isCharacterDataNode(node)) {\n      return '\"' + node.data + '\"';\n    } else if (node.nodeType == 1) {\n      var idAttr = node.id ? ' id=\"' + node.id + '\"' : \"\";\n      return \"<\" + node.nodeName + idAttr + \">[\" + node.childNodes.length + \"]\";\n    } else {\n      return node.nodeName;\n    }\n  }\n\n  /**\n   * @constructor\n   */\n  function NodeIterator(root) {\n    this.root = root;\n    this._next = root;\n  }\n\n  NodeIterator.prototype = {\n    _current: null,\n\n    hasNext: function hasNext() {\n      return !!this._next;\n    },\n\n    next: function next() {\n      var n = this._current = this._next;\n      var child, next;\n      if (this._current) {\n        child = n.firstChild;\n        if (child) {\n          this._next = child;\n        } else {\n          next = null;\n          while (n !== this.root && !(next = n.nextSibling)) {\n            n = n.parentNode;\n          }\n          this._next = next;\n        }\n      }\n      return this._current;\n    },\n\n    detach: function detach() {\n      this._current = this._next = this.root = null;\n    }\n  };\n\n  function createIterator(root) {\n    return new NodeIterator(root);\n  }\n\n  /**\n   * @constructor\n   */\n  function DomPosition(node, offset) {\n    this.node = node;\n    this.offset = offset;\n  }\n\n  DomPosition.prototype = {\n    equals: function equals(pos) {\n      return this.node === pos.node & this.offset == pos.offset;\n    },\n\n    inspect: function inspect() {\n      return \"[DomPosition(\" + inspectNode(this.node) + \":\" + this.offset + \")]\";\n    }\n  };\n\n  /**\n   * @constructor\n   */\n  function DOMException(codeName) {\n    this.code = this[codeName];\n    this.codeName = codeName;\n    this.message = \"DOMException: \" + this.codeName;\n  }\n\n  DOMException.prototype = {\n    INDEX_SIZE_ERR: 1,\n    HIERARCHY_REQUEST_ERR: 3,\n    WRONG_DOCUMENT_ERR: 4,\n    NO_MODIFICATION_ALLOWED_ERR: 7,\n    NOT_FOUND_ERR: 8,\n    NOT_SUPPORTED_ERR: 9,\n    INVALID_STATE_ERR: 11\n  };\n\n  DOMException.prototype.toString = function () {\n    return this.message;\n  };\n\n  api.dom = {\n    arrayContains: arrayContains,\n    isHtmlNamespace: isHtmlNamespace,\n    parentElement: parentElement,\n    getNodeIndex: getNodeIndex,\n    getNodeLength: getNodeLength,\n    getCommonAncestor: getCommonAncestor,\n    isAncestorOf: isAncestorOf,\n    getClosestAncestorIn: getClosestAncestorIn,\n    isCharacterDataNode: isCharacterDataNode,\n    insertAfter: insertAfter,\n    splitDataNode: splitDataNode,\n    getDocument: getDocument,\n    getWindow: getWindow,\n    getIframeWindow: getIframeWindow,\n    getIframeDocument: getIframeDocument,\n    getBody: getBody,\n    getRootContainer: getRootContainer,\n    comparePoints: comparePoints,\n    inspectNode: inspectNode,\n    fragmentFromNodeChildren: fragmentFromNodeChildren,\n    createIterator: createIterator,\n    DomPosition: DomPosition\n  };\n\n  api.DOMException = DOMException;\n});rangy.createModule(\"DomRange\", function (api, module) {\n  api.requireModules([\"DomUtil\"]);\n\n  var dom = api.dom;\n  var DomPosition = dom.DomPosition;\n  var DOMException = api.DOMException;\n\n  /*----------------------------------------------------------------------------------------------------------------*/\n\n  // Utility functions\n\n  function isNonTextPartiallySelected(node, range) {\n    return node.nodeType != 3 && (dom.isAncestorOf(node, range.startContainer, true) || dom.isAncestorOf(node, range.endContainer, true));\n  }\n\n  function getRangeDocument(range) {\n    return dom.getDocument(range.startContainer);\n  }\n\n  function dispatchEvent(range, type, args) {\n    var listeners = range._listeners[type];\n    if (listeners) {\n      for (var i = 0, len = listeners.length; i < len; ++i) {\n        listeners[i].call(range, { target: range, args: args });\n      }\n    }\n  }\n\n  function getBoundaryBeforeNode(node) {\n    return new DomPosition(node.parentNode, dom.getNodeIndex(node));\n  }\n\n  function getBoundaryAfterNode(node) {\n    return new DomPosition(node.parentNode, dom.getNodeIndex(node) + 1);\n  }\n\n  function insertNodeAtPosition(node, n, o) {\n    var firstNodeInserted = node.nodeType == 11 ? node.firstChild : node;\n    if (dom.isCharacterDataNode(n)) {\n      if (o == n.length) {\n        dom.insertAfter(node, n);\n      } else {\n        n.parentNode.insertBefore(node, o == 0 ? n : dom.splitDataNode(n, o));\n      }\n    } else if (o >= n.childNodes.length) {\n      n.appendChild(node);\n    } else {\n      n.insertBefore(node, n.childNodes[o]);\n    }\n    return firstNodeInserted;\n  }\n\n  function cloneSubtree(iterator) {\n    var partiallySelected;\n    for (var node, frag = getRangeDocument(iterator.range).createDocumentFragment(), subIterator; node = iterator.next();) {\n      partiallySelected = iterator.isPartiallySelectedSubtree();\n\n      node = node.cloneNode(!partiallySelected);\n      if (partiallySelected) {\n        subIterator = iterator.getSubtreeIterator();\n        node.appendChild(cloneSubtree(subIterator));\n        subIterator.detach(true);\n      }\n\n      if (node.nodeType == 10) {\n        // DocumentType\n        throw new DOMException(\"HIERARCHY_REQUEST_ERR\");\n      }\n      frag.appendChild(node);\n    }\n    return frag;\n  }\n\n  function iterateSubtree(rangeIterator, func, iteratorState) {\n    var it, n;\n    iteratorState = iteratorState || { stop: false };\n    for (var node, subRangeIterator; node = rangeIterator.next();) {\n      //log.debug(\"iterateSubtree, partially selected: \" + rangeIterator.isPartiallySelectedSubtree(), nodeToString(node));\n      if (rangeIterator.isPartiallySelectedSubtree()) {\n        // The node is partially selected by the Range, so we can use a new RangeIterator on the portion of the\n        // node selected by the Range.\n        if (func(node) === false) {\n          iteratorState.stop = true;\n          return;\n        } else {\n          subRangeIterator = rangeIterator.getSubtreeIterator();\n          iterateSubtree(subRangeIterator, func, iteratorState);\n          subRangeIterator.detach(true);\n          if (iteratorState.stop) {\n            return;\n          }\n        }\n      } else {\n        // The whole node is selected, so we can use efficient DOM iteration to iterate over the node and its\n        // descendant\n        it = dom.createIterator(node);\n        while (n = it.next()) {\n          if (func(n) === false) {\n            iteratorState.stop = true;\n            return;\n          }\n        }\n      }\n    }\n  }\n\n  function deleteSubtree(iterator) {\n    var subIterator;\n    while (iterator.next()) {\n      if (iterator.isPartiallySelectedSubtree()) {\n        subIterator = iterator.getSubtreeIterator();\n        deleteSubtree(subIterator);\n        subIterator.detach(true);\n      } else {\n        iterator.remove();\n      }\n    }\n  }\n\n  function extractSubtree(iterator) {\n\n    for (var node, frag = getRangeDocument(iterator.range).createDocumentFragment(), subIterator; node = iterator.next();) {\n\n      if (iterator.isPartiallySelectedSubtree()) {\n        node = node.cloneNode(false);\n        subIterator = iterator.getSubtreeIterator();\n        node.appendChild(extractSubtree(subIterator));\n        subIterator.detach(true);\n      } else {\n        iterator.remove();\n      }\n      if (node.nodeType == 10) {\n        // DocumentType\n        throw new DOMException(\"HIERARCHY_REQUEST_ERR\");\n      }\n      frag.appendChild(node);\n    }\n    return frag;\n  }\n\n  function getNodesInRange(range, nodeTypes, filter) {\n    //log.info(\"getNodesInRange, \" + nodeTypes.join(\",\"));\n    var filterNodeTypes = !!(nodeTypes && nodeTypes.length),\n        regex;\n    var filterExists = !!filter;\n    if (filterNodeTypes) {\n      regex = new RegExp(\"^(\" + nodeTypes.join(\"|\") + \")$\");\n    }\n\n    var nodes = [];\n    iterateSubtree(new RangeIterator(range, false), function (node) {\n      if ((!filterNodeTypes || regex.test(node.nodeType)) && (!filterExists || filter(node))) {\n        nodes.push(node);\n      }\n    });\n    return nodes;\n  }\n\n  function _inspect(range) {\n    var name = typeof range.getName == \"undefined\" ? \"Range\" : range.getName();\n    return \"[\" + name + \"(\" + dom.inspectNode(range.startContainer) + \":\" + range.startOffset + \", \" + dom.inspectNode(range.endContainer) + \":\" + range.endOffset + \")]\";\n  }\n\n  /*----------------------------------------------------------------------------------------------------------------*/\n\n  // RangeIterator code partially borrows from IERange by Tim Ryan (http://github.com/timcameronryan/IERange)\n\n  /**\n   * @constructor\n   */\n  function RangeIterator(range, clonePartiallySelectedTextNodes) {\n    this.range = range;\n    this.clonePartiallySelectedTextNodes = clonePartiallySelectedTextNodes;\n\n    if (!range.collapsed) {\n      this.sc = range.startContainer;\n      this.so = range.startOffset;\n      this.ec = range.endContainer;\n      this.eo = range.endOffset;\n      var root = range.commonAncestorContainer;\n\n      if (this.sc === this.ec && dom.isCharacterDataNode(this.sc)) {\n        this.isSingleCharacterDataNode = true;\n        this._first = this._last = this._next = this.sc;\n      } else {\n        this._first = this._next = this.sc === root && !dom.isCharacterDataNode(this.sc) ? this.sc.childNodes[this.so] : dom.getClosestAncestorIn(this.sc, root, true);\n        this._last = this.ec === root && !dom.isCharacterDataNode(this.ec) ? this.ec.childNodes[this.eo - 1] : dom.getClosestAncestorIn(this.ec, root, true);\n      }\n    }\n  }\n\n  RangeIterator.prototype = {\n    _current: null,\n    _next: null,\n    _first: null,\n    _last: null,\n    isSingleCharacterDataNode: false,\n\n    reset: function reset() {\n      this._current = null;\n      this._next = this._first;\n    },\n\n    hasNext: function hasNext() {\n      return !!this._next;\n    },\n\n    next: function next() {\n      // Move to next node\n      var current = this._current = this._next;\n      if (current) {\n        this._next = current !== this._last ? current.nextSibling : null;\n\n        // Check for partially selected text nodes\n        if (dom.isCharacterDataNode(current) && this.clonePartiallySelectedTextNodes) {\n          if (current === this.ec) {\n\n            (current = current.cloneNode(true)).deleteData(this.eo, current.length - this.eo);\n          }\n          if (this._current === this.sc) {\n\n            (current = current.cloneNode(true)).deleteData(0, this.so);\n          }\n        }\n      }\n\n      return current;\n    },\n\n    remove: function remove() {\n      var current = this._current,\n          start,\n          end;\n\n      if (dom.isCharacterDataNode(current) && (current === this.sc || current === this.ec)) {\n        start = current === this.sc ? this.so : 0;\n        end = current === this.ec ? this.eo : current.length;\n        if (start != end) {\n          current.deleteData(start, end - start);\n        }\n      } else {\n        if (current.parentNode) {\n          current.parentNode.removeChild(current);\n        } else {}\n      }\n    },\n\n    // Checks if the current node is partially selected\n    isPartiallySelectedSubtree: function isPartiallySelectedSubtree() {\n      var current = this._current;\n      return isNonTextPartiallySelected(current, this.range);\n    },\n\n    getSubtreeIterator: function getSubtreeIterator() {\n      var subRange;\n      if (this.isSingleCharacterDataNode) {\n        subRange = this.range.cloneRange();\n        subRange.collapse();\n      } else {\n        subRange = new Range(getRangeDocument(this.range));\n        var current = this._current;\n        var startContainer = current,\n            startOffset = 0,\n            endContainer = current,\n            endOffset = dom.getNodeLength(current);\n\n        if (dom.isAncestorOf(current, this.sc, true)) {\n          startContainer = this.sc;\n          startOffset = this.so;\n        }\n        if (dom.isAncestorOf(current, this.ec, true)) {\n          endContainer = this.ec;\n          endOffset = this.eo;\n        }\n\n        updateBoundaries(subRange, startContainer, startOffset, endContainer, endOffset);\n      }\n      return new RangeIterator(subRange, this.clonePartiallySelectedTextNodes);\n    },\n\n    detach: function detach(detachRange) {\n      if (detachRange) {\n        this.range.detach();\n      }\n      this.range = this._current = this._next = this._first = this._last = this.sc = this.so = this.ec = this.eo = null;\n    }\n  };\n\n  /*----------------------------------------------------------------------------------------------------------------*/\n\n  // Exceptions\n\n  /**\n   * @constructor\n   */\n  function RangeException(codeName) {\n    this.code = this[codeName];\n    this.codeName = codeName;\n    this.message = \"RangeException: \" + this.codeName;\n  }\n\n  RangeException.prototype = {\n    BAD_BOUNDARYPOINTS_ERR: 1,\n    INVALID_NODE_TYPE_ERR: 2\n  };\n\n  RangeException.prototype.toString = function () {\n    return this.message;\n  };\n\n  /*----------------------------------------------------------------------------------------------------------------*/\n\n  /**\n   * Currently iterates through all nodes in the range on creation until I think of a decent way to do it\n   * TODO: Look into making this a proper iterator, not requiring preloading everything first\n   * @constructor\n   */\n  function RangeNodeIterator(range, nodeTypes, filter) {\n    this.nodes = getNodesInRange(range, nodeTypes, filter);\n    this._next = this.nodes[0];\n    this._position = 0;\n  }\n\n  RangeNodeIterator.prototype = {\n    _current: null,\n\n    hasNext: function hasNext() {\n      return !!this._next;\n    },\n\n    next: function next() {\n      this._current = this._next;\n      this._next = this.nodes[++this._position];\n      return this._current;\n    },\n\n    detach: function detach() {\n      this._current = this._next = this.nodes = null;\n    }\n  };\n\n  var beforeAfterNodeTypes = [1, 3, 4, 5, 7, 8, 10];\n  var rootContainerNodeTypes = [2, 9, 11];\n  var readonlyNodeTypes = [5, 6, 10, 12];\n  var insertableNodeTypes = [1, 3, 4, 5, 7, 8, 10, 11];\n  var surroundNodeTypes = [1, 3, 4, 5, 7, 8];\n\n  function createAncestorFinder(nodeTypes) {\n    return function (node, selfIsAncestor) {\n      var t,\n          n = selfIsAncestor ? node : node.parentNode;\n      while (n) {\n        t = n.nodeType;\n        if (dom.arrayContains(nodeTypes, t)) {\n          return n;\n        }\n        n = n.parentNode;\n      }\n      return null;\n    };\n  }\n\n  var getRootContainer = dom.getRootContainer;\n  var getDocumentOrFragmentContainer = createAncestorFinder([9, 11]);\n  var getReadonlyAncestor = createAncestorFinder(readonlyNodeTypes);\n  var getDocTypeNotationEntityAncestor = createAncestorFinder([6, 10, 12]);\n\n  function assertNoDocTypeNotationEntityAncestor(node, allowSelf) {\n    if (getDocTypeNotationEntityAncestor(node, allowSelf)) {\n      throw new RangeException(\"INVALID_NODE_TYPE_ERR\");\n    }\n  }\n\n  function assertNotDetached(range) {\n    if (!range.startContainer) {\n      throw new DOMException(\"INVALID_STATE_ERR\");\n    }\n  }\n\n  function assertValidNodeType(node, invalidTypes) {\n    if (!dom.arrayContains(invalidTypes, node.nodeType)) {\n      throw new RangeException(\"INVALID_NODE_TYPE_ERR\");\n    }\n  }\n\n  function assertValidOffset(node, offset) {\n    if (offset < 0 || offset > (dom.isCharacterDataNode(node) ? node.length : node.childNodes.length)) {\n      throw new DOMException(\"INDEX_SIZE_ERR\");\n    }\n  }\n\n  function assertSameDocumentOrFragment(node1, node2) {\n    if (getDocumentOrFragmentContainer(node1, true) !== getDocumentOrFragmentContainer(node2, true)) {\n      throw new DOMException(\"WRONG_DOCUMENT_ERR\");\n    }\n  }\n\n  function assertNodeNotReadOnly(node) {\n    if (getReadonlyAncestor(node, true)) {\n      throw new DOMException(\"NO_MODIFICATION_ALLOWED_ERR\");\n    }\n  }\n\n  function assertNode(node, codeName) {\n    if (!node) {\n      throw new DOMException(codeName);\n    }\n  }\n\n  function isOrphan(node) {\n    return !dom.arrayContains(rootContainerNodeTypes, node.nodeType) && !getDocumentOrFragmentContainer(node, true);\n  }\n\n  function isValidOffset(node, offset) {\n    return offset <= (dom.isCharacterDataNode(node) ? node.length : node.childNodes.length);\n  }\n\n  function assertRangeValid(range) {\n    assertNotDetached(range);\n    if (isOrphan(range.startContainer) || isOrphan(range.endContainer) || !isValidOffset(range.startContainer, range.startOffset) || !isValidOffset(range.endContainer, range.endOffset)) {\n      throw new Error(\"Range error: Range is no longer valid after DOM mutation (\" + range.inspect() + \")\");\n    }\n  }\n\n  /*----------------------------------------------------------------------------------------------------------------*/\n\n  // Test the browser's innerHTML support to decide how to implement createContextualFragment\n  var styleEl = document.createElement(\"style\");\n  var htmlParsingConforms = false;\n  try {\n    styleEl.innerHTML = \"<b>x</b>\";\n    htmlParsingConforms = styleEl.firstChild.nodeType == 3; // Opera incorrectly creates an element node\n  } catch (e) {\n    // IE 6 and 7 throw\n  }\n\n  api.features.htmlParsingConforms = htmlParsingConforms;\n\n  var createContextualFragment = htmlParsingConforms ?\n\n  // Implementation as per HTML parsing spec, trusting in the browser's implementation of innerHTML. See\n  // discussion and base code for this implementation at issue 67.\n  // Spec: http://html5.org/specs/dom-parsing.html#extensions-to-the-range-interface\n  // Thanks to Aleks Williams.\n  function (fragmentStr) {\n    // \"Let node the context object's start's node.\"\n    var node = this.startContainer;\n    var doc = dom.getDocument(node);\n\n    // \"If the context object's start's node is null, raise an INVALID_STATE_ERR\n    // exception and abort these steps.\"\n    if (!node) {\n      throw new DOMException(\"INVALID_STATE_ERR\");\n    }\n\n    // \"Let element be as follows, depending on node's interface:\"\n    // Document, Document Fragment: null\n    var el = null;\n\n    // \"Element: node\"\n    if (node.nodeType == 1) {\n      el = node;\n\n      // \"Text, Comment: node's parentElement\"\n    } else if (dom.isCharacterDataNode(node)) {\n      el = dom.parentElement(node);\n    }\n\n    // \"If either element is null or element's ownerDocument is an HTML document\n    // and element's local name is \"html\" and element's namespace is the HTML\n    // namespace\"\n    if (el === null || el.nodeName == \"HTML\" && dom.isHtmlNamespace(dom.getDocument(el).documentElement) && dom.isHtmlNamespace(el)) {\n\n      // \"let element be a new Element with \"body\" as its local name and the HTML\n      // namespace as its namespace.\"\"\n      el = doc.createElement(\"body\");\n    } else {\n      el = el.cloneNode(false);\n    }\n\n    // \"If the node's document is an HTML document: Invoke the HTML fragment parsing algorithm.\"\n    // \"If the node's document is an XML document: Invoke the XML fragment parsing algorithm.\"\n    // \"In either case, the algorithm must be invoked with fragment as the input\n    // and element as the context element.\"\n    el.innerHTML = fragmentStr;\n\n    // \"If this raises an exception, then abort these steps. Otherwise, let new\n    // children be the nodes returned.\"\n\n    // \"Let fragment be a new DocumentFragment.\"\n    // \"Append all new children to fragment.\"\n    // \"Return fragment.\"\n    return dom.fragmentFromNodeChildren(el);\n  } :\n\n  // In this case, innerHTML cannot be trusted, so fall back to a simpler, non-conformant implementation that\n  // previous versions of Rangy used (with the exception of using a body element rather than a div)\n  function (fragmentStr) {\n    assertNotDetached(this);\n    var doc = getRangeDocument(this);\n    var el = doc.createElement(\"body\");\n    el.innerHTML = fragmentStr;\n\n    return dom.fragmentFromNodeChildren(el);\n  };\n\n  /*----------------------------------------------------------------------------------------------------------------*/\n\n  var rangeProperties = [\"startContainer\", \"startOffset\", \"endContainer\", \"endOffset\", \"collapsed\", \"commonAncestorContainer\"];\n\n  var s2s = 0,\n      s2e = 1,\n      e2e = 2,\n      e2s = 3;\n  var n_b = 0,\n      n_a = 1,\n      n_b_a = 2,\n      n_i = 3;\n\n  function RangePrototype() {}\n\n  RangePrototype.prototype = {\n    attachListener: function attachListener(type, listener) {\n      this._listeners[type].push(listener);\n    },\n\n    compareBoundaryPoints: function compareBoundaryPoints(how, range) {\n      assertRangeValid(this);\n      assertSameDocumentOrFragment(this.startContainer, range.startContainer);\n\n      var nodeA, offsetA, nodeB, offsetB;\n      var prefixA = how == e2s || how == s2s ? \"start\" : \"end\";\n      var prefixB = how == s2e || how == s2s ? \"start\" : \"end\";\n      nodeA = this[prefixA + \"Container\"];\n      offsetA = this[prefixA + \"Offset\"];\n      nodeB = range[prefixB + \"Container\"];\n      offsetB = range[prefixB + \"Offset\"];\n      return dom.comparePoints(nodeA, offsetA, nodeB, offsetB);\n    },\n\n    insertNode: function insertNode(node) {\n      assertRangeValid(this);\n      assertValidNodeType(node, insertableNodeTypes);\n      assertNodeNotReadOnly(this.startContainer);\n\n      if (dom.isAncestorOf(node, this.startContainer, true)) {\n        throw new DOMException(\"HIERARCHY_REQUEST_ERR\");\n      }\n\n      // No check for whether the container of the start of the Range is of a type that does not allow\n      // children of the type of node: the browser's DOM implementation should do this for us when we attempt\n      // to add the node\n\n      var firstNodeInserted = insertNodeAtPosition(node, this.startContainer, this.startOffset);\n      this.setStartBefore(firstNodeInserted);\n    },\n\n    cloneContents: function cloneContents() {\n      assertRangeValid(this);\n\n      var clone, frag;\n      if (this.collapsed) {\n        return getRangeDocument(this).createDocumentFragment();\n      } else {\n        if (this.startContainer === this.endContainer && dom.isCharacterDataNode(this.startContainer)) {\n          clone = this.startContainer.cloneNode(true);\n          clone.data = clone.data.slice(this.startOffset, this.endOffset);\n          frag = getRangeDocument(this).createDocumentFragment();\n          frag.appendChild(clone);\n          return frag;\n        } else {\n          var iterator = new RangeIterator(this, true);\n          clone = cloneSubtree(iterator);\n          iterator.detach();\n        }\n        return clone;\n      }\n    },\n\n    canSurroundContents: function canSurroundContents() {\n      assertRangeValid(this);\n      assertNodeNotReadOnly(this.startContainer);\n      assertNodeNotReadOnly(this.endContainer);\n\n      // Check if the contents can be surrounded. Specifically, this means whether the range partially selects\n      // no non-text nodes.\n      var iterator = new RangeIterator(this, true);\n      var boundariesInvalid = iterator._first && isNonTextPartiallySelected(iterator._first, this) || iterator._last && isNonTextPartiallySelected(iterator._last, this);\n      iterator.detach();\n      return !boundariesInvalid;\n    },\n\n    surroundContents: function surroundContents(node) {\n      assertValidNodeType(node, surroundNodeTypes);\n\n      if (!this.canSurroundContents()) {\n        throw new RangeException(\"BAD_BOUNDARYPOINTS_ERR\");\n      }\n\n      // Extract the contents\n      var content = this.extractContents();\n\n      // Clear the children of the node\n      if (node.hasChildNodes()) {\n        while (node.lastChild) {\n          node.removeChild(node.lastChild);\n        }\n      }\n\n      // Insert the new node and add the extracted contents\n      insertNodeAtPosition(node, this.startContainer, this.startOffset);\n      node.appendChild(content);\n\n      this.selectNode(node);\n    },\n\n    cloneRange: function cloneRange() {\n      assertRangeValid(this);\n      var range = new Range(getRangeDocument(this));\n      var i = rangeProperties.length,\n          prop;\n      while (i--) {\n        prop = rangeProperties[i];\n        range[prop] = this[prop];\n      }\n      return range;\n    },\n\n    toString: function toString() {\n      assertRangeValid(this);\n      var sc = this.startContainer;\n      if (sc === this.endContainer && dom.isCharacterDataNode(sc)) {\n        return sc.nodeType == 3 || sc.nodeType == 4 ? sc.data.slice(this.startOffset, this.endOffset) : \"\";\n      } else {\n        var textBits = [],\n            iterator = new RangeIterator(this, true);\n\n        iterateSubtree(iterator, function (node) {\n          // Accept only text or CDATA nodes, not comments\n\n          if (node.nodeType == 3 || node.nodeType == 4) {\n            textBits.push(node.data);\n          }\n        });\n        iterator.detach();\n        return textBits.join(\"\");\n      }\n    },\n\n    // The methods below are all non-standard. The following batch were introduced by Mozilla but have since\n    // been removed from Mozilla.\n\n    compareNode: function compareNode(node) {\n      assertRangeValid(this);\n\n      var parent = node.parentNode;\n      var nodeIndex = dom.getNodeIndex(node);\n\n      if (!parent) {\n        throw new DOMException(\"NOT_FOUND_ERR\");\n      }\n\n      var startComparison = this.comparePoint(parent, nodeIndex),\n          endComparison = this.comparePoint(parent, nodeIndex + 1);\n\n      if (startComparison < 0) {\n        // Node starts before\n        return endComparison > 0 ? n_b_a : n_b;\n      } else {\n        return endComparison > 0 ? n_a : n_i;\n      }\n    },\n\n    comparePoint: function comparePoint(node, offset) {\n      assertRangeValid(this);\n      assertNode(node, \"HIERARCHY_REQUEST_ERR\");\n      assertSameDocumentOrFragment(node, this.startContainer);\n\n      if (dom.comparePoints(node, offset, this.startContainer, this.startOffset) < 0) {\n        return -1;\n      } else if (dom.comparePoints(node, offset, this.endContainer, this.endOffset) > 0) {\n        return 1;\n      }\n      return 0;\n    },\n\n    createContextualFragment: createContextualFragment,\n\n    toHtml: function toHtml() {\n      assertRangeValid(this);\n      var container = getRangeDocument(this).createElement(\"div\");\n      container.appendChild(this.cloneContents());\n      return container.innerHTML;\n    },\n\n    // touchingIsIntersecting determines whether this method considers a node that borders a range intersects\n    // with it (as in WebKit) or not (as in Gecko pre-1.9, and the default)\n    intersectsNode: function intersectsNode(node, touchingIsIntersecting) {\n      assertRangeValid(this);\n      assertNode(node, \"NOT_FOUND_ERR\");\n      if (dom.getDocument(node) !== getRangeDocument(this)) {\n        return false;\n      }\n\n      var parent = node.parentNode,\n          offset = dom.getNodeIndex(node);\n      assertNode(parent, \"NOT_FOUND_ERR\");\n\n      var startComparison = dom.comparePoints(parent, offset, this.endContainer, this.endOffset),\n          endComparison = dom.comparePoints(parent, offset + 1, this.startContainer, this.startOffset);\n\n      return touchingIsIntersecting ? startComparison <= 0 && endComparison >= 0 : startComparison < 0 && endComparison > 0;\n    },\n\n    isPointInRange: function isPointInRange(node, offset) {\n      assertRangeValid(this);\n      assertNode(node, \"HIERARCHY_REQUEST_ERR\");\n      assertSameDocumentOrFragment(node, this.startContainer);\n\n      return dom.comparePoints(node, offset, this.startContainer, this.startOffset) >= 0 && dom.comparePoints(node, offset, this.endContainer, this.endOffset) <= 0;\n    },\n\n    // The methods below are non-standard and invented by me.\n\n    // Sharing a boundary start-to-end or end-to-start does not count as intersection.\n    intersectsRange: function intersectsRange(range, touchingIsIntersecting) {\n      assertRangeValid(this);\n\n      if (getRangeDocument(range) != getRangeDocument(this)) {\n        throw new DOMException(\"WRONG_DOCUMENT_ERR\");\n      }\n\n      var startComparison = dom.comparePoints(this.startContainer, this.startOffset, range.endContainer, range.endOffset),\n          endComparison = dom.comparePoints(this.endContainer, this.endOffset, range.startContainer, range.startOffset);\n\n      return touchingIsIntersecting ? startComparison <= 0 && endComparison >= 0 : startComparison < 0 && endComparison > 0;\n    },\n\n    intersection: function intersection(range) {\n      if (this.intersectsRange(range)) {\n        var startComparison = dom.comparePoints(this.startContainer, this.startOffset, range.startContainer, range.startOffset),\n            endComparison = dom.comparePoints(this.endContainer, this.endOffset, range.endContainer, range.endOffset);\n\n        var intersectionRange = this.cloneRange();\n\n        if (startComparison == -1) {\n          intersectionRange.setStart(range.startContainer, range.startOffset);\n        }\n        if (endComparison == 1) {\n          intersectionRange.setEnd(range.endContainer, range.endOffset);\n        }\n        return intersectionRange;\n      }\n      return null;\n    },\n\n    union: function union(range) {\n      if (this.intersectsRange(range, true)) {\n        var unionRange = this.cloneRange();\n        if (dom.comparePoints(range.startContainer, range.startOffset, this.startContainer, this.startOffset) == -1) {\n          unionRange.setStart(range.startContainer, range.startOffset);\n        }\n        if (dom.comparePoints(range.endContainer, range.endOffset, this.endContainer, this.endOffset) == 1) {\n          unionRange.setEnd(range.endContainer, range.endOffset);\n        }\n        return unionRange;\n      } else {\n        throw new RangeException(\"Ranges do not intersect\");\n      }\n    },\n\n    containsNode: function containsNode(node, allowPartial) {\n      if (allowPartial) {\n        return this.intersectsNode(node, false);\n      } else {\n        return this.compareNode(node) == n_i;\n      }\n    },\n\n    containsNodeContents: function containsNodeContents(node) {\n      return this.comparePoint(node, 0) >= 0 && this.comparePoint(node, dom.getNodeLength(node)) <= 0;\n    },\n\n    containsRange: function containsRange(range) {\n      return this.intersection(range).equals(range);\n    },\n\n    containsNodeText: function containsNodeText(node) {\n      var nodeRange = this.cloneRange();\n      nodeRange.selectNode(node);\n      var textNodes = nodeRange.getNodes([3]);\n      if (textNodes.length > 0) {\n        nodeRange.setStart(textNodes[0], 0);\n        var lastTextNode = textNodes.pop();\n        nodeRange.setEnd(lastTextNode, lastTextNode.length);\n        var contains = this.containsRange(nodeRange);\n        nodeRange.detach();\n        return contains;\n      } else {\n        return this.containsNodeContents(node);\n      }\n    },\n\n    createNodeIterator: function createNodeIterator(nodeTypes, filter) {\n      assertRangeValid(this);\n      return new RangeNodeIterator(this, nodeTypes, filter);\n    },\n\n    getNodes: function getNodes(nodeTypes, filter) {\n      assertRangeValid(this);\n      return getNodesInRange(this, nodeTypes, filter);\n    },\n\n    getDocument: function getDocument() {\n      return getRangeDocument(this);\n    },\n\n    collapseBefore: function collapseBefore(node) {\n      assertNotDetached(this);\n\n      this.setEndBefore(node);\n      this.collapse(false);\n    },\n\n    collapseAfter: function collapseAfter(node) {\n      assertNotDetached(this);\n\n      this.setStartAfter(node);\n      this.collapse(true);\n    },\n\n    getName: function getName() {\n      return \"DomRange\";\n    },\n\n    equals: function equals(range) {\n      return Range.rangesEqual(this, range);\n    },\n\n    inspect: function inspect() {\n      return _inspect(this);\n    }\n  };\n\n  function copyComparisonConstantsToObject(obj) {\n    obj.START_TO_START = s2s;\n    obj.START_TO_END = s2e;\n    obj.END_TO_END = e2e;\n    obj.END_TO_START = e2s;\n\n    obj.NODE_BEFORE = n_b;\n    obj.NODE_AFTER = n_a;\n    obj.NODE_BEFORE_AND_AFTER = n_b_a;\n    obj.NODE_INSIDE = n_i;\n  }\n\n  function copyComparisonConstants(constructor) {\n    copyComparisonConstantsToObject(constructor);\n    copyComparisonConstantsToObject(constructor.prototype);\n  }\n\n  function createRangeContentRemover(remover, boundaryUpdater) {\n    return function () {\n      assertRangeValid(this);\n\n      var sc = this.startContainer,\n          so = this.startOffset,\n          root = this.commonAncestorContainer;\n\n      var iterator = new RangeIterator(this, true);\n\n      // Work out where to position the range after content removal\n      var node, boundary;\n      if (sc !== root) {\n        node = dom.getClosestAncestorIn(sc, root, true);\n        boundary = getBoundaryAfterNode(node);\n        sc = boundary.node;\n        so = boundary.offset;\n      }\n\n      // Check none of the range is read-only\n      iterateSubtree(iterator, assertNodeNotReadOnly);\n\n      iterator.reset();\n\n      // Remove the content\n      var returnValue = remover(iterator);\n      iterator.detach();\n\n      // Move to the new position\n      boundaryUpdater(this, sc, so, sc, so);\n\n      return returnValue;\n    };\n  }\n\n  function createPrototypeRange(constructor, boundaryUpdater, detacher) {\n    function createBeforeAfterNodeSetter(isBefore, isStart) {\n      return function (node) {\n        assertNotDetached(this);\n        assertValidNodeType(node, beforeAfterNodeTypes);\n        assertValidNodeType(getRootContainer(node), rootContainerNodeTypes);\n\n        var boundary = (isBefore ? getBoundaryBeforeNode : getBoundaryAfterNode)(node);\n        (isStart ? setRangeStart : setRangeEnd)(this, boundary.node, boundary.offset);\n      };\n    }\n\n    function setRangeStart(range, node, offset) {\n      var ec = range.endContainer,\n          eo = range.endOffset;\n      if (node !== range.startContainer || offset !== range.startOffset) {\n        // Check the root containers of the range and the new boundary, and also check whether the new boundary\n        // is after the current end. In either case, collapse the range to the new position\n        if (getRootContainer(node) != getRootContainer(ec) || dom.comparePoints(node, offset, ec, eo) == 1) {\n          ec = node;\n          eo = offset;\n        }\n        boundaryUpdater(range, node, offset, ec, eo);\n      }\n    }\n\n    function setRangeEnd(range, node, offset) {\n      var sc = range.startContainer,\n          so = range.startOffset;\n      if (node !== range.endContainer || offset !== range.endOffset) {\n        // Check the root containers of the range and the new boundary, and also check whether the new boundary\n        // is after the current end. In either case, collapse the range to the new position\n        if (getRootContainer(node) != getRootContainer(sc) || dom.comparePoints(node, offset, sc, so) == -1) {\n          sc = node;\n          so = offset;\n        }\n        boundaryUpdater(range, sc, so, node, offset);\n      }\n    }\n\n    function setRangeStartAndEnd(range, node, offset) {\n      if (node !== range.startContainer || offset !== range.startOffset || node !== range.endContainer || offset !== range.endOffset) {\n        boundaryUpdater(range, node, offset, node, offset);\n      }\n    }\n\n    constructor.prototype = new RangePrototype();\n\n    api.util.extend(constructor.prototype, {\n      setStart: function setStart(node, offset) {\n        assertNotDetached(this);\n        assertNoDocTypeNotationEntityAncestor(node, true);\n        assertValidOffset(node, offset);\n\n        setRangeStart(this, node, offset);\n      },\n\n      setEnd: function setEnd(node, offset) {\n        assertNotDetached(this);\n        assertNoDocTypeNotationEntityAncestor(node, true);\n        assertValidOffset(node, offset);\n\n        setRangeEnd(this, node, offset);\n      },\n\n      setStartBefore: createBeforeAfterNodeSetter(true, true),\n      setStartAfter: createBeforeAfterNodeSetter(false, true),\n      setEndBefore: createBeforeAfterNodeSetter(true, false),\n      setEndAfter: createBeforeAfterNodeSetter(false, false),\n\n      collapse: function collapse(isStart) {\n        assertRangeValid(this);\n        if (isStart) {\n          boundaryUpdater(this, this.startContainer, this.startOffset, this.startContainer, this.startOffset);\n        } else {\n          boundaryUpdater(this, this.endContainer, this.endOffset, this.endContainer, this.endOffset);\n        }\n      },\n\n      selectNodeContents: function selectNodeContents(node) {\n        // This doesn't seem well specified: the spec talks only about selecting the node's contents, which\n        // could be taken to mean only its children. However, browsers implement this the same as selectNode for\n        // text nodes, so I shall do likewise\n        assertNotDetached(this);\n        assertNoDocTypeNotationEntityAncestor(node, true);\n\n        boundaryUpdater(this, node, 0, node, dom.getNodeLength(node));\n      },\n\n      selectNode: function selectNode(node) {\n        assertNotDetached(this);\n        assertNoDocTypeNotationEntityAncestor(node, false);\n        assertValidNodeType(node, beforeAfterNodeTypes);\n\n        var start = getBoundaryBeforeNode(node),\n            end = getBoundaryAfterNode(node);\n        boundaryUpdater(this, start.node, start.offset, end.node, end.offset);\n      },\n\n      extractContents: createRangeContentRemover(extractSubtree, boundaryUpdater),\n\n      deleteContents: createRangeContentRemover(deleteSubtree, boundaryUpdater),\n\n      canSurroundContents: function canSurroundContents() {\n        assertRangeValid(this);\n        assertNodeNotReadOnly(this.startContainer);\n        assertNodeNotReadOnly(this.endContainer);\n\n        // Check if the contents can be surrounded. Specifically, this means whether the range partially selects\n        // no non-text nodes.\n        var iterator = new RangeIterator(this, true);\n        var boundariesInvalid = iterator._first && isNonTextPartiallySelected(iterator._first, this) || iterator._last && isNonTextPartiallySelected(iterator._last, this);\n        iterator.detach();\n        return !boundariesInvalid;\n      },\n\n      detach: function detach() {\n        detacher(this);\n      },\n\n      splitBoundaries: function splitBoundaries() {\n        assertRangeValid(this);\n\n        var sc = this.startContainer,\n            so = this.startOffset,\n            ec = this.endContainer,\n            eo = this.endOffset;\n        var startEndSame = sc === ec;\n\n        if (dom.isCharacterDataNode(ec) && eo > 0 && eo < ec.length) {\n          dom.splitDataNode(ec, eo);\n        }\n\n        if (dom.isCharacterDataNode(sc) && so > 0 && so < sc.length) {\n\n          sc = dom.splitDataNode(sc, so);\n          if (startEndSame) {\n            eo -= so;\n            ec = sc;\n          } else if (ec == sc.parentNode && eo >= dom.getNodeIndex(sc)) {\n            eo++;\n          }\n          so = 0;\n        }\n        boundaryUpdater(this, sc, so, ec, eo);\n      },\n\n      normalizeBoundaries: function normalizeBoundaries() {\n        assertRangeValid(this);\n\n        var sc = this.startContainer,\n            so = this.startOffset,\n            ec = this.endContainer,\n            eo = this.endOffset;\n\n        var mergeForward = function mergeForward(node) {\n          var sibling = node.nextSibling;\n          if (sibling && sibling.nodeType == node.nodeType) {\n            ec = node;\n            eo = node.length;\n            node.appendData(sibling.data);\n            sibling.parentNode.removeChild(sibling);\n          }\n        };\n\n        var mergeBackward = function mergeBackward(node) {\n          var sibling = node.previousSibling;\n          if (sibling && sibling.nodeType == node.nodeType) {\n            sc = node;\n            var nodeLength = node.length;\n            so = sibling.length;\n            node.insertData(0, sibling.data);\n            sibling.parentNode.removeChild(sibling);\n            if (sc == ec) {\n              eo += so;\n              ec = sc;\n            } else if (ec == node.parentNode) {\n              var nodeIndex = dom.getNodeIndex(node);\n              if (eo == nodeIndex) {\n                ec = node;\n                eo = nodeLength;\n              } else if (eo > nodeIndex) {\n                eo--;\n              }\n            }\n          }\n        };\n\n        var normalizeStart = true;\n\n        if (dom.isCharacterDataNode(ec)) {\n          if (ec.length == eo) {\n            mergeForward(ec);\n          }\n        } else {\n          if (eo > 0) {\n            var endNode = ec.childNodes[eo - 1];\n            if (endNode && dom.isCharacterDataNode(endNode)) {\n              mergeForward(endNode);\n            }\n          }\n          normalizeStart = !this.collapsed;\n        }\n\n        if (normalizeStart) {\n          if (dom.isCharacterDataNode(sc)) {\n            if (so == 0) {\n              mergeBackward(sc);\n            }\n          } else {\n            if (so < sc.childNodes.length) {\n              var startNode = sc.childNodes[so];\n              if (startNode && dom.isCharacterDataNode(startNode)) {\n                mergeBackward(startNode);\n              }\n            }\n          }\n        } else {\n          sc = ec;\n          so = eo;\n        }\n\n        boundaryUpdater(this, sc, so, ec, eo);\n      },\n\n      collapseToPoint: function collapseToPoint(node, offset) {\n        assertNotDetached(this);\n\n        assertNoDocTypeNotationEntityAncestor(node, true);\n        assertValidOffset(node, offset);\n\n        setRangeStartAndEnd(this, node, offset);\n      }\n    });\n\n    copyComparisonConstants(constructor);\n  }\n\n  /*----------------------------------------------------------------------------------------------------------------*/\n\n  // Updates commonAncestorContainer and collapsed after boundary change\n  function updateCollapsedAndCommonAncestor(range) {\n    range.collapsed = range.startContainer === range.endContainer && range.startOffset === range.endOffset;\n    range.commonAncestorContainer = range.collapsed ? range.startContainer : dom.getCommonAncestor(range.startContainer, range.endContainer);\n  }\n\n  function updateBoundaries(range, startContainer, startOffset, endContainer, endOffset) {\n    var startMoved = range.startContainer !== startContainer || range.startOffset !== startOffset;\n    var endMoved = range.endContainer !== endContainer || range.endOffset !== endOffset;\n\n    range.startContainer = startContainer;\n    range.startOffset = startOffset;\n    range.endContainer = endContainer;\n    range.endOffset = endOffset;\n\n    updateCollapsedAndCommonAncestor(range);\n    dispatchEvent(range, \"boundarychange\", { startMoved: startMoved, endMoved: endMoved });\n  }\n\n  function detach(range) {\n    assertNotDetached(range);\n    range.startContainer = range.startOffset = range.endContainer = range.endOffset = null;\n    range.collapsed = range.commonAncestorContainer = null;\n    dispatchEvent(range, \"detach\", null);\n    range._listeners = null;\n  }\n\n  /**\n   * @constructor\n   */\n  function Range(doc) {\n    this.startContainer = doc;\n    this.startOffset = 0;\n    this.endContainer = doc;\n    this.endOffset = 0;\n    this._listeners = {\n      boundarychange: [],\n      detach: []\n    };\n    updateCollapsedAndCommonAncestor(this);\n  }\n\n  createPrototypeRange(Range, updateBoundaries, detach);\n\n  api.rangePrototype = RangePrototype.prototype;\n\n  Range.rangeProperties = rangeProperties;\n  Range.RangeIterator = RangeIterator;\n  Range.copyComparisonConstants = copyComparisonConstants;\n  Range.createPrototypeRange = createPrototypeRange;\n  Range.inspect = _inspect;\n  Range.getRangeDocument = getRangeDocument;\n  Range.rangesEqual = function (r1, r2) {\n    return r1.startContainer === r2.startContainer && r1.startOffset === r2.startOffset && r1.endContainer === r2.endContainer && r1.endOffset === r2.endOffset;\n  };\n\n  api.DomRange = Range;\n  api.RangeException = RangeException;\n});rangy.createModule(\"WrappedRange\", function (api, module) {\n  api.requireModules([\"DomUtil\", \"DomRange\"]);\n\n  /**\n   * @constructor\n   */\n  var WrappedRange;\n  var dom = api.dom;\n  var DomPosition = dom.DomPosition;\n  var DomRange = api.DomRange;\n\n  /*----------------------------------------------------------------------------------------------------------------*/\n\n  /*\n  This is a workaround for a bug where IE returns the wrong container element from the TextRange's parentElement()\n  method. For example, in the following (where pipes denote the selection boundaries):\n   <ul id=\"ul\"><li id=\"a\">| a </li><li id=\"b\"> b |</li></ul>\n   var range = document.selection.createRange();\n  alert(range.parentElement().id); // Should alert \"ul\" but alerts \"b\"\n   This method returns the common ancestor node of the following:\n  - the parentElement() of the textRange\n  - the parentElement() of the textRange after calling collapse(true)\n  - the parentElement() of the textRange after calling collapse(false)\n   */\n  function getTextRangeContainerElement(textRange) {\n    var parentEl = textRange.parentElement();\n\n    var range = textRange.duplicate();\n    range.collapse(true);\n    var startEl = range.parentElement();\n    range = textRange.duplicate();\n    range.collapse(false);\n    var endEl = range.parentElement();\n    var startEndContainer = startEl == endEl ? startEl : dom.getCommonAncestor(startEl, endEl);\n\n    return startEndContainer == parentEl ? startEndContainer : dom.getCommonAncestor(parentEl, startEndContainer);\n  }\n\n  function textRangeIsCollapsed(textRange) {\n    return textRange.compareEndPoints(\"StartToEnd\", textRange) == 0;\n  }\n\n  // Gets the boundary of a TextRange expressed as a node and an offset within that node. This function started out as\n  // an improved version of code found in Tim Cameron Ryan's IERange (http://code.google.com/p/ierange/) but has\n  // grown, fixing problems with line breaks in preformatted text, adding workaround for IE TextRange bugs, handling\n  // for inputs and images, plus optimizations.\n  function getTextRangeBoundaryPosition(textRange, wholeRangeContainerElement, isStart, isCollapsed) {\n    var workingRange = textRange.duplicate();\n\n    workingRange.collapse(isStart);\n    var containerElement = workingRange.parentElement();\n\n    // Sometimes collapsing a TextRange that's at the start of a text node can move it into the previous node, so\n    // check for that\n    // TODO: Find out when. Workaround for wholeRangeContainerElement may break this\n    if (!dom.isAncestorOf(wholeRangeContainerElement, containerElement, true)) {\n      containerElement = wholeRangeContainerElement;\n    }\n\n    // Deal with nodes that cannot \"contain rich HTML markup\". In practice, this means form inputs, images and\n    // similar. See http://msdn.microsoft.com/en-us/library/aa703950%28VS.85%29.aspx\n    if (!containerElement.canHaveHTML) {\n      return new DomPosition(containerElement.parentNode, dom.getNodeIndex(containerElement));\n    }\n\n    var workingNode = dom.getDocument(containerElement).createElement(\"span\");\n    var comparison,\n        workingComparisonType = isStart ? \"StartToStart\" : \"StartToEnd\";\n    var previousNode, nextNode, boundaryPosition, boundaryNode;\n\n    // Move the working range through the container's children, starting at the end and working backwards, until the\n    // working range reaches or goes past the boundary we're interested in\n    do {\n      containerElement.insertBefore(workingNode, workingNode.previousSibling);\n      workingRange.moveToElementText(workingNode);\n    } while ((comparison = workingRange.compareEndPoints(workingComparisonType, textRange)) > 0 && workingNode.previousSibling);\n\n    // We've now reached or gone past the boundary of the text range we're interested in\n    // so have identified the node we want\n    boundaryNode = workingNode.nextSibling;\n\n    if (comparison == -1 && boundaryNode && dom.isCharacterDataNode(boundaryNode)) {\n      // This is a character data node (text, comment, cdata). The working range is collapsed at the start of the\n      // node containing the text range's boundary, so we move the end of the working range to the boundary point\n      // and measure the length of its text to get the boundary's offset within the node.\n      workingRange.setEndPoint(isStart ? \"EndToStart\" : \"EndToEnd\", textRange);\n\n      var offset;\n\n      if (/[\\r\\n]/.test(boundaryNode.data)) {\n        /*\n        For the particular case of a boundary within a text node containing line breaks (within a <pre> element,\n        for example), we need a slightly complicated approach to get the boundary's offset in IE. The facts:\n         - Each line break is represented as \\r in the text node's data/nodeValue properties\n        - Each line break is represented as \\r\\n in the TextRange's 'text' property\n        - The 'text' property of the TextRange does not contain trailing line breaks\n         To get round the problem presented by the final fact above, we can use the fact that TextRange's\n        moveStart() and moveEnd() methods return the actual number of characters moved, which is not necessarily\n        the same as the number of characters it was instructed to move. The simplest approach is to use this to\n        store the characters moved when moving both the start and end of the range to the start of the document\n        body and subtracting the start offset from the end offset (the \"move-negative-gazillion\" method).\n        However, this is extremely slow when the document is large and the range is near the end of it. Clearly\n        doing the mirror image (i.e. moving the range boundaries to the end of the document) has the same\n        problem.\n         Another approach that works is to use moveStart() to move the start boundary of the range up to the end\n        boundary one character at a time and incrementing a counter with the value returned by the moveStart()\n        call. However, the check for whether the start boundary has reached the end boundary is expensive, so\n        this method is slow (although unlike \"move-negative-gazillion\" is largely unaffected by the location of\n        the range within the document).\n         The method below is a hybrid of the two methods above. It uses the fact that a string containing the\n        TextRange's 'text' property with each \\r\\n converted to a single \\r character cannot be longer than the\n        text of the TextRange, so the start of the range is moved that length initially and then a character at\n        a time to make up for any trailing line breaks not contained in the 'text' property. This has good\n        performance in most situations compared to the previous two methods.\n        */\n        var tempRange = workingRange.duplicate();\n        var rangeLength = tempRange.text.replace(/\\r\\n/g, \"\\r\").length;\n\n        offset = tempRange.moveStart(\"character\", rangeLength);\n        while ((comparison = tempRange.compareEndPoints(\"StartToEnd\", tempRange)) == -1) {\n          offset++;\n          tempRange.moveStart(\"character\", 1);\n        }\n      } else {\n        offset = workingRange.text.length;\n      }\n      boundaryPosition = new DomPosition(boundaryNode, offset);\n    } else {\n\n      // If the boundary immediately follows a character data node and this is the end boundary, we should favour\n      // a position within that, and likewise for a start boundary preceding a character data node\n      previousNode = (isCollapsed || !isStart) && workingNode.previousSibling;\n      nextNode = (isCollapsed || isStart) && workingNode.nextSibling;\n\n      if (nextNode && dom.isCharacterDataNode(nextNode)) {\n        boundaryPosition = new DomPosition(nextNode, 0);\n      } else if (previousNode && dom.isCharacterDataNode(previousNode)) {\n        boundaryPosition = new DomPosition(previousNode, previousNode.length);\n      } else {\n        boundaryPosition = new DomPosition(containerElement, dom.getNodeIndex(workingNode));\n      }\n    }\n\n    // Clean up\n    workingNode.parentNode.removeChild(workingNode);\n\n    return boundaryPosition;\n  }\n\n  // Returns a TextRange representing the boundary of a TextRange expressed as a node and an offset within that node.\n  // This function started out as an optimized version of code found in Tim Cameron Ryan's IERange\n  // (http://code.google.com/p/ierange/)\n  function createBoundaryTextRange(boundaryPosition, isStart) {\n    var boundaryNode,\n        boundaryParent,\n        boundaryOffset = boundaryPosition.offset;\n    var doc = dom.getDocument(boundaryPosition.node);\n    var workingNode,\n        childNodes,\n        workingRange = doc.body.createTextRange();\n    var nodeIsDataNode = dom.isCharacterDataNode(boundaryPosition.node);\n\n    if (nodeIsDataNode) {\n      boundaryNode = boundaryPosition.node;\n      boundaryParent = boundaryNode.parentNode;\n    } else {\n      childNodes = boundaryPosition.node.childNodes;\n      boundaryNode = boundaryOffset < childNodes.length ? childNodes[boundaryOffset] : null;\n      boundaryParent = boundaryPosition.node;\n    }\n\n    // Position the range immediately before the node containing the boundary\n    workingNode = doc.createElement(\"span\");\n\n    // Making the working element non-empty element persuades IE to consider the TextRange boundary to be within the\n    // element rather than immediately before or after it, which is what we want\n    workingNode.innerHTML = \"&#feff;\";\n\n    // insertBefore is supposed to work like appendChild if the second parameter is null. However, a bug report\n    // for IERange suggests that it can crash the browser: http://code.google.com/p/ierange/issues/detail?id=12\n    if (boundaryNode) {\n      boundaryParent.insertBefore(workingNode, boundaryNode);\n    } else {\n      boundaryParent.appendChild(workingNode);\n    }\n\n    workingRange.moveToElementText(workingNode);\n    workingRange.collapse(!isStart);\n\n    // Clean up\n    boundaryParent.removeChild(workingNode);\n\n    // Move the working range to the text offset, if required\n    if (nodeIsDataNode) {\n      workingRange[isStart ? \"moveStart\" : \"moveEnd\"](\"character\", boundaryOffset);\n    }\n\n    return workingRange;\n  }\n\n  /*----------------------------------------------------------------------------------------------------------------*/\n\n  if (api.features.implementsDomRange && (!api.features.implementsTextRange || !api.config.preferTextRange)) {\n    // This is a wrapper around the browser's native DOM Range. It has two aims:\n    // - Provide workarounds for specific browser bugs\n    // - provide convenient extensions, which are inherited from Rangy's DomRange\n\n    (function () {\n      var rangeProto;\n      var rangeProperties = DomRange.rangeProperties;\n      var canSetRangeStartAfterEnd;\n\n      function updateRangeProperties(range) {\n        var i = rangeProperties.length,\n            prop;\n        while (i--) {\n          prop = rangeProperties[i];\n          range[prop] = range.nativeRange[prop];\n        }\n      }\n\n      function updateNativeRange(range, startContainer, startOffset, endContainer, endOffset) {\n        var startMoved = range.startContainer !== startContainer || range.startOffset != startOffset;\n        var endMoved = range.endContainer !== endContainer || range.endOffset != endOffset;\n\n        // Always set both boundaries for the benefit of IE9 (see issue 35)\n        if (startMoved || endMoved) {\n          range.setEnd(endContainer, endOffset);\n          range.setStart(startContainer, startOffset);\n        }\n      }\n\n      function detach(range) {\n        range.nativeRange.detach();\n        range.detached = true;\n        var i = rangeProperties.length,\n            prop;\n        while (i--) {\n          prop = rangeProperties[i];\n          range[prop] = null;\n        }\n      }\n\n      var createBeforeAfterNodeSetter;\n\n      WrappedRange = function WrappedRange(range) {\n        if (!range) {\n          throw new Error(\"Range must be specified\");\n        }\n        this.nativeRange = range;\n        updateRangeProperties(this);\n      };\n\n      DomRange.createPrototypeRange(WrappedRange, updateNativeRange, detach);\n\n      rangeProto = WrappedRange.prototype;\n\n      rangeProto.selectNode = function (node) {\n        this.nativeRange.selectNode(node);\n        updateRangeProperties(this);\n      };\n\n      rangeProto.deleteContents = function () {\n        this.nativeRange.deleteContents();\n        updateRangeProperties(this);\n      };\n\n      rangeProto.extractContents = function () {\n        var frag = this.nativeRange.extractContents();\n        updateRangeProperties(this);\n        return frag;\n      };\n\n      rangeProto.cloneContents = function () {\n        return this.nativeRange.cloneContents();\n      };\n\n      // TODO: Until I can find a way to programmatically trigger the Firefox bug (apparently long-standing, still\n      // present in 3.6.8) that throws \"Index or size is negative or greater than the allowed amount\" for\n      // insertNode in some circumstances, all browsers will have to use the Rangy's own implementation of\n      // insertNode, which works but is almost certainly slower than the native implementation.\n      /*\n                  rangeProto.insertNode = function(node) {\n                      this.nativeRange.insertNode(node);\n                      updateRangeProperties(this);\n                  };\n      */\n\n      rangeProto.surroundContents = function (node) {\n        this.nativeRange.surroundContents(node);\n        updateRangeProperties(this);\n      };\n\n      rangeProto.collapse = function (isStart) {\n        this.nativeRange.collapse(isStart);\n        updateRangeProperties(this);\n      };\n\n      rangeProto.cloneRange = function () {\n        return new WrappedRange(this.nativeRange.cloneRange());\n      };\n\n      rangeProto.refresh = function () {\n        updateRangeProperties(this);\n      };\n\n      rangeProto.toString = function () {\n        return this.nativeRange.toString();\n      };\n\n      // Create test range and node for feature detection\n\n      var testTextNode = document.createTextNode(\"test\");\n      dom.getBody(document).appendChild(testTextNode);\n      var range = document.createRange();\n\n      /*--------------------------------------------------------------------------------------------------------*/\n\n      // Test for Firefox 2 bug that prevents moving the start of a Range to a point after its current end and\n      // correct for it\n\n      range.setStart(testTextNode, 0);\n      range.setEnd(testTextNode, 0);\n\n      try {\n        range.setStart(testTextNode, 1);\n        canSetRangeStartAfterEnd = true;\n\n        rangeProto.setStart = function (node, offset) {\n          this.nativeRange.setStart(node, offset);\n          updateRangeProperties(this);\n        };\n\n        rangeProto.setEnd = function (node, offset) {\n          this.nativeRange.setEnd(node, offset);\n          updateRangeProperties(this);\n        };\n\n        createBeforeAfterNodeSetter = function createBeforeAfterNodeSetter(name) {\n          return function (node) {\n            this.nativeRange[name](node);\n            updateRangeProperties(this);\n          };\n        };\n      } catch (ex) {\n\n        canSetRangeStartAfterEnd = false;\n\n        rangeProto.setStart = function (node, offset) {\n          try {\n            this.nativeRange.setStart(node, offset);\n          } catch (ex) {\n            this.nativeRange.setEnd(node, offset);\n            this.nativeRange.setStart(node, offset);\n          }\n          updateRangeProperties(this);\n        };\n\n        rangeProto.setEnd = function (node, offset) {\n          try {\n            this.nativeRange.setEnd(node, offset);\n          } catch (ex) {\n            this.nativeRange.setStart(node, offset);\n            this.nativeRange.setEnd(node, offset);\n          }\n          updateRangeProperties(this);\n        };\n\n        createBeforeAfterNodeSetter = function createBeforeAfterNodeSetter(name, oppositeName) {\n          return function (node) {\n            try {\n              this.nativeRange[name](node);\n            } catch (ex) {\n              this.nativeRange[oppositeName](node);\n              this.nativeRange[name](node);\n            }\n            updateRangeProperties(this);\n          };\n        };\n      }\n\n      rangeProto.setStartBefore = createBeforeAfterNodeSetter(\"setStartBefore\", \"setEndBefore\");\n      rangeProto.setStartAfter = createBeforeAfterNodeSetter(\"setStartAfter\", \"setEndAfter\");\n      rangeProto.setEndBefore = createBeforeAfterNodeSetter(\"setEndBefore\", \"setStartBefore\");\n      rangeProto.setEndAfter = createBeforeAfterNodeSetter(\"setEndAfter\", \"setStartAfter\");\n\n      /*--------------------------------------------------------------------------------------------------------*/\n\n      // Test for and correct Firefox 2 behaviour with selectNodeContents on text nodes: it collapses the range to\n      // the 0th character of the text node\n      range.selectNodeContents(testTextNode);\n      if (range.startContainer == testTextNode && range.endContainer == testTextNode && range.startOffset == 0 && range.endOffset == testTextNode.length) {\n        rangeProto.selectNodeContents = function (node) {\n          this.nativeRange.selectNodeContents(node);\n          updateRangeProperties(this);\n        };\n      } else {\n        rangeProto.selectNodeContents = function (node) {\n          this.setStart(node, 0);\n          this.setEnd(node, DomRange.getEndOffset(node));\n        };\n      }\n\n      /*--------------------------------------------------------------------------------------------------------*/\n\n      // Test for WebKit bug that has the beahviour of compareBoundaryPoints round the wrong way for constants\n      // START_TO_END and END_TO_START: https://bugs.webkit.org/show_bug.cgi?id=20738\n\n      range.selectNodeContents(testTextNode);\n      range.setEnd(testTextNode, 3);\n\n      var range2 = document.createRange();\n      range2.selectNodeContents(testTextNode);\n      range2.setEnd(testTextNode, 4);\n      range2.setStart(testTextNode, 2);\n\n      if (range.compareBoundaryPoints(range.START_TO_END, range2) == -1 & range.compareBoundaryPoints(range.END_TO_START, range2) == 1) {\n        // This is the wrong way round, so correct for it\n\n\n        rangeProto.compareBoundaryPoints = function (type, range) {\n          range = range.nativeRange || range;\n          if (type == range.START_TO_END) {\n            type = range.END_TO_START;\n          } else if (type == range.END_TO_START) {\n            type = range.START_TO_END;\n          }\n          return this.nativeRange.compareBoundaryPoints(type, range);\n        };\n      } else {\n        rangeProto.compareBoundaryPoints = function (type, range) {\n          return this.nativeRange.compareBoundaryPoints(type, range.nativeRange || range);\n        };\n      }\n\n      /*--------------------------------------------------------------------------------------------------------*/\n\n      // Test for existence of createContextualFragment and delegate to it if it exists\n      if (api.util.isHostMethod(range, \"createContextualFragment\")) {\n        rangeProto.createContextualFragment = function (fragmentStr) {\n          return this.nativeRange.createContextualFragment(fragmentStr);\n        };\n      }\n\n      /*--------------------------------------------------------------------------------------------------------*/\n\n      // Clean up\n      dom.getBody(document).removeChild(testTextNode);\n      range.detach();\n      range2.detach();\n    })();\n\n    api.createNativeRange = function (doc) {\n      doc = doc || document;\n      return doc.createRange();\n    };\n  } else if (api.features.implementsTextRange) {\n    // This is a wrapper around a TextRange, providing full DOM Range functionality using rangy's DomRange as a\n    // prototype\n\n    WrappedRange = function WrappedRange(textRange) {\n      this.textRange = textRange;\n      this.refresh();\n    };\n\n    WrappedRange.prototype = new DomRange(document);\n\n    WrappedRange.prototype.refresh = function () {\n      var start, end;\n\n      // TextRange's parentElement() method cannot be trusted. getTextRangeContainerElement() works around that.\n      var rangeContainerElement = getTextRangeContainerElement(this.textRange);\n\n      if (textRangeIsCollapsed(this.textRange)) {\n        end = start = getTextRangeBoundaryPosition(this.textRange, rangeContainerElement, true, true);\n      } else {\n\n        start = getTextRangeBoundaryPosition(this.textRange, rangeContainerElement, true, false);\n        end = getTextRangeBoundaryPosition(this.textRange, rangeContainerElement, false, false);\n      }\n\n      this.setStart(start.node, start.offset);\n      this.setEnd(end.node, end.offset);\n    };\n\n    DomRange.copyComparisonConstants(WrappedRange);\n\n    // Add WrappedRange as the Range property of the global object to allow expression like Range.END_TO_END to work\n    var globalObj = function () {\n      return this;\n    }();\n    if (typeof globalObj.Range == \"undefined\") {\n      globalObj.Range = WrappedRange;\n    }\n\n    api.createNativeRange = function (doc) {\n      doc = doc || document;\n      return doc.body.createTextRange();\n    };\n  }\n\n  if (api.features.implementsTextRange) {\n    WrappedRange.rangeToTextRange = function (range) {\n      if (range.collapsed) {\n        var tr = createBoundaryTextRange(new DomPosition(range.startContainer, range.startOffset), true);\n\n        return tr;\n\n        //return createBoundaryTextRange(new DomPosition(range.startContainer, range.startOffset), true);\n      } else {\n        var startRange = createBoundaryTextRange(new DomPosition(range.startContainer, range.startOffset), true);\n        var endRange = createBoundaryTextRange(new DomPosition(range.endContainer, range.endOffset), false);\n        var textRange = dom.getDocument(range.startContainer).body.createTextRange();\n        textRange.setEndPoint(\"StartToStart\", startRange);\n        textRange.setEndPoint(\"EndToEnd\", endRange);\n        return textRange;\n      }\n    };\n  }\n\n  WrappedRange.prototype.getName = function () {\n    return \"WrappedRange\";\n  };\n\n  api.WrappedRange = WrappedRange;\n\n  api.createRange = function (doc) {\n    doc = doc || document;\n    return new WrappedRange(api.createNativeRange(doc));\n  };\n\n  api.createRangyRange = function (doc) {\n    doc = doc || document;\n    return new DomRange(doc);\n  };\n\n  api.createIframeRange = function (iframeEl) {\n    return api.createRange(dom.getIframeDocument(iframeEl));\n  };\n\n  api.createIframeRangyRange = function (iframeEl) {\n    return api.createRangyRange(dom.getIframeDocument(iframeEl));\n  };\n\n  api.addCreateMissingNativeApiListener(function (win) {\n    var doc = win.document;\n    if (typeof doc.createRange == \"undefined\") {\n      doc.createRange = function () {\n        return api.createRange(this);\n      };\n    }\n    doc = win = null;\n  });\n});rangy.createModule(\"WrappedSelection\", function (api, module) {\n  // This will create a selection object wrapper that follows the Selection object found in the WHATWG draft DOM Range\n  // spec (http://html5.org/specs/dom-range.html)\n\n  api.requireModules([\"DomUtil\", \"DomRange\", \"WrappedRange\"]);\n\n  api.config.checkSelectionRanges = true;\n\n  var BOOLEAN = \"boolean\",\n      windowPropertyName = \"_rangySelection\",\n      dom = api.dom,\n      util = api.util,\n      DomRange = api.DomRange,\n      WrappedRange = api.WrappedRange,\n      DOMException = api.DOMException,\n      DomPosition = dom.DomPosition,\n      getSelection,\n      selectionIsCollapsed,\n      CONTROL = \"Control\";\n\n  function getWinSelection(winParam) {\n    return (winParam || window).getSelection();\n  }\n\n  function getDocSelection(winParam) {\n    return (winParam || window).document.selection;\n  }\n\n  // Test for the Range/TextRange and Selection features required\n  // Test for ability to retrieve selection\n  var implementsWinGetSelection = api.util.isHostMethod(window, \"getSelection\"),\n      implementsDocSelection = api.util.isHostObject(document, \"selection\");\n\n  var useDocumentSelection = implementsDocSelection && (!implementsWinGetSelection || api.config.preferTextRange);\n\n  if (useDocumentSelection) {\n    getSelection = getDocSelection;\n    api.isSelectionValid = function (winParam) {\n      var doc = (winParam || window).document,\n          nativeSel = doc.selection;\n\n      // Check whether the selection TextRange is actually contained within the correct document\n      return nativeSel.type != \"None\" || dom.getDocument(nativeSel.createRange().parentElement()) == doc;\n    };\n  } else if (implementsWinGetSelection) {\n    getSelection = getWinSelection;\n    api.isSelectionValid = function () {\n      return true;\n    };\n  } else {\n    module.fail(\"Neither document.selection or window.getSelection() detected.\");\n  }\n\n  api.getNativeSelection = getSelection;\n\n  var testSelection = getSelection();\n  var testRange = api.createNativeRange(document);\n  var body = dom.getBody(document);\n\n  // Obtaining a range from a selection\n  var selectionHasAnchorAndFocus = util.areHostObjects(testSelection, [\"anchorNode\", \"focusNode\"] && util.areHostProperties(testSelection, [\"anchorOffset\", \"focusOffset\"]));\n  api.features.selectionHasAnchorAndFocus = selectionHasAnchorAndFocus;\n\n  // Test for existence of native selection extend() method\n  var selectionHasExtend = util.isHostMethod(testSelection, \"extend\");\n  api.features.selectionHasExtend = selectionHasExtend;\n\n  // Test if rangeCount exists\n  var selectionHasRangeCount = typeof testSelection.rangeCount == \"number\";\n  api.features.selectionHasRangeCount = selectionHasRangeCount;\n\n  var selectionSupportsMultipleRanges = false;\n  var collapsedNonEditableSelectionsSupported = true;\n\n  if (util.areHostMethods(testSelection, [\"addRange\", \"getRangeAt\", \"removeAllRanges\"]) && typeof testSelection.rangeCount == \"number\" && api.features.implementsDomRange) {\n\n    (function () {\n      var iframe = document.createElement(\"iframe\");\n      body.appendChild(iframe);\n\n      var iframeDoc = dom.getIframeDocument(iframe);\n      iframeDoc.open();\n      iframeDoc.write(\"<html><head></head><body>12</body></html>\");\n      iframeDoc.close();\n\n      var sel = dom.getIframeWindow(iframe).getSelection();\n      var docEl = iframeDoc.documentElement;\n      var iframeBody = docEl.lastChild,\n          textNode = iframeBody.firstChild;\n\n      // Test whether the native selection will allow a collapsed selection within a non-editable element\n      var r1 = iframeDoc.createRange();\n      r1.setStart(textNode, 1);\n      r1.collapse(true);\n      sel.addRange(r1);\n      collapsedNonEditableSelectionsSupported = sel.rangeCount == 1;\n      sel.removeAllRanges();\n\n      // Test whether the native selection is capable of supporting multiple ranges\n      var r2 = r1.cloneRange();\n      r1.setStart(textNode, 0);\n      r2.setEnd(textNode, 2);\n      sel.addRange(r1);\n      sel.addRange(r2);\n\n      selectionSupportsMultipleRanges = sel.rangeCount == 2;\n\n      // Clean up\n      r1.detach();\n      r2.detach();\n\n      body.removeChild(iframe);\n    })();\n  }\n\n  api.features.selectionSupportsMultipleRanges = selectionSupportsMultipleRanges;\n  api.features.collapsedNonEditableSelectionsSupported = collapsedNonEditableSelectionsSupported;\n\n  // ControlRanges\n  var implementsControlRange = false,\n      testControlRange;\n\n  if (body && util.isHostMethod(body, \"createControlRange\")) {\n    testControlRange = body.createControlRange();\n    if (util.areHostProperties(testControlRange, [\"item\", \"add\"])) {\n      implementsControlRange = true;\n    }\n  }\n  api.features.implementsControlRange = implementsControlRange;\n\n  // Selection collapsedness\n  if (selectionHasAnchorAndFocus) {\n    selectionIsCollapsed = function selectionIsCollapsed(sel) {\n      return sel.anchorNode === sel.focusNode && sel.anchorOffset === sel.focusOffset;\n    };\n  } else {\n    selectionIsCollapsed = function selectionIsCollapsed(sel) {\n      return sel.rangeCount ? sel.getRangeAt(sel.rangeCount - 1).collapsed : false;\n    };\n  }\n\n  function updateAnchorAndFocusFromRange(sel, range, backwards) {\n    var anchorPrefix = backwards ? \"end\" : \"start\",\n        focusPrefix = backwards ? \"start\" : \"end\";\n    sel.anchorNode = range[anchorPrefix + \"Container\"];\n    sel.anchorOffset = range[anchorPrefix + \"Offset\"];\n    sel.focusNode = range[focusPrefix + \"Container\"];\n    sel.focusOffset = range[focusPrefix + \"Offset\"];\n  }\n\n  function updateAnchorAndFocusFromNativeSelection(sel) {\n    var nativeSel = sel.nativeSelection;\n    sel.anchorNode = nativeSel.anchorNode;\n    sel.anchorOffset = nativeSel.anchorOffset;\n    sel.focusNode = nativeSel.focusNode;\n    sel.focusOffset = nativeSel.focusOffset;\n  }\n\n  function updateEmptySelection(sel) {\n    sel.anchorNode = sel.focusNode = null;\n    sel.anchorOffset = sel.focusOffset = 0;\n    sel.rangeCount = 0;\n    sel.isCollapsed = true;\n    sel._ranges.length = 0;\n  }\n\n  function getNativeRange(range) {\n    var nativeRange;\n    if (range instanceof DomRange) {\n      nativeRange = range._selectionNativeRange;\n      if (!nativeRange) {\n        nativeRange = api.createNativeRange(dom.getDocument(range.startContainer));\n        nativeRange.setEnd(range.endContainer, range.endOffset);\n        nativeRange.setStart(range.startContainer, range.startOffset);\n        range._selectionNativeRange = nativeRange;\n        range.attachListener(\"detach\", function () {\n\n          this._selectionNativeRange = null;\n        });\n      }\n    } else if (range instanceof WrappedRange) {\n      nativeRange = range.nativeRange;\n    } else if (api.features.implementsDomRange && range instanceof dom.getWindow(range.startContainer).Range) {\n      nativeRange = range;\n    }\n    return nativeRange;\n  }\n\n  function rangeContainsSingleElement(rangeNodes) {\n    if (!rangeNodes.length || rangeNodes[0].nodeType != 1) {\n      return false;\n    }\n    for (var i = 1, len = rangeNodes.length; i < len; ++i) {\n      if (!dom.isAncestorOf(rangeNodes[0], rangeNodes[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function getSingleElementFromRange(range) {\n    var nodes = range.getNodes();\n    if (!rangeContainsSingleElement(nodes)) {\n      throw new Error(\"getSingleElementFromRange: range \" + range.inspect() + \" did not consist of a single element\");\n    }\n    return nodes[0];\n  }\n\n  function isTextRange(range) {\n    return !!range && typeof range.text != \"undefined\";\n  }\n\n  function updateFromTextRange(sel, range) {\n    // Create a Range from the selected TextRange\n    var wrappedRange = new WrappedRange(range);\n    sel._ranges = [wrappedRange];\n\n    updateAnchorAndFocusFromRange(sel, wrappedRange, false);\n    sel.rangeCount = 1;\n    sel.isCollapsed = wrappedRange.collapsed;\n  }\n\n  function updateControlSelection(sel) {\n    // Update the wrapped selection based on what's now in the native selection\n    sel._ranges.length = 0;\n    if (sel.docSelection.type == \"None\") {\n      updateEmptySelection(sel);\n    } else {\n      var controlRange = sel.docSelection.createRange();\n      if (isTextRange(controlRange)) {\n        // This case (where the selection type is \"Control\" and calling createRange() on the selection returns\n        // a TextRange) can happen in IE 9. It happens, for example, when all elements in the selected\n        // ControlRange have been removed from the ControlRange and removed from the document.\n        updateFromTextRange(sel, controlRange);\n      } else {\n        sel.rangeCount = controlRange.length;\n        var range,\n            doc = dom.getDocument(controlRange.item(0));\n        for (var i = 0; i < sel.rangeCount; ++i) {\n          range = api.createRange(doc);\n          range.selectNode(controlRange.item(i));\n          sel._ranges.push(range);\n        }\n        sel.isCollapsed = sel.rangeCount == 1 && sel._ranges[0].collapsed;\n        updateAnchorAndFocusFromRange(sel, sel._ranges[sel.rangeCount - 1], false);\n      }\n    }\n  }\n\n  function addRangeToControlSelection(sel, range) {\n    var controlRange = sel.docSelection.createRange();\n    var rangeElement = getSingleElementFromRange(range);\n\n    // Create a new ControlRange containing all the elements in the selected ControlRange plus the element\n    // contained by the supplied range\n    var doc = dom.getDocument(controlRange.item(0));\n    var newControlRange = dom.getBody(doc).createControlRange();\n    for (var i = 0, len = controlRange.length; i < len; ++i) {\n      newControlRange.add(controlRange.item(i));\n    }\n    try {\n      newControlRange.add(rangeElement);\n    } catch (ex) {\n      throw new Error(\"addRange(): Element within the specified Range could not be added to control selection (does it have layout?)\");\n    }\n    newControlRange.select();\n\n    // Update the wrapped selection based on what's now in the native selection\n    updateControlSelection(sel);\n  }\n\n  var getSelectionRangeAt;\n\n  if (util.isHostMethod(testSelection, \"getRangeAt\")) {\n    getSelectionRangeAt = function getSelectionRangeAt(sel, index) {\n      try {\n        return sel.getRangeAt(index);\n      } catch (ex) {\n        return null;\n      }\n    };\n  } else if (selectionHasAnchorAndFocus) {\n    getSelectionRangeAt = function getSelectionRangeAt(sel) {\n      var doc = dom.getDocument(sel.anchorNode);\n      var range = api.createRange(doc);\n      range.setStart(sel.anchorNode, sel.anchorOffset);\n      range.setEnd(sel.focusNode, sel.focusOffset);\n\n      // Handle the case when the selection was selected backwards (from the end to the start in the\n      // document)\n      if (range.collapsed !== this.isCollapsed) {\n        range.setStart(sel.focusNode, sel.focusOffset);\n        range.setEnd(sel.anchorNode, sel.anchorOffset);\n      }\n\n      return range;\n    };\n  }\n\n  /**\n   * @constructor\n   */\n  function WrappedSelection(selection, docSelection, win) {\n    this.nativeSelection = selection;\n    this.docSelection = docSelection;\n    this._ranges = [];\n    this.win = win;\n    this.refresh();\n  }\n\n  api.getSelection = function (win) {\n    win = win || window;\n    var sel = win[windowPropertyName];\n    var nativeSel = getSelection(win),\n        docSel = implementsDocSelection ? getDocSelection(win) : null;\n    if (sel) {\n      sel.nativeSelection = nativeSel;\n      sel.docSelection = docSel;\n      sel.refresh(win);\n    } else {\n      sel = new WrappedSelection(nativeSel, docSel, win);\n      win[windowPropertyName] = sel;\n    }\n    return sel;\n  };\n\n  api.getIframeSelection = function (iframeEl) {\n    return api.getSelection(dom.getIframeWindow(iframeEl));\n  };\n\n  var selProto = WrappedSelection.prototype;\n\n  function createControlSelection(sel, ranges) {\n    // Ensure that the selection becomes of type \"Control\"\n    var doc = dom.getDocument(ranges[0].startContainer);\n    var controlRange = dom.getBody(doc).createControlRange();\n    for (var i = 0, el; i < rangeCount; ++i) {\n      el = getSingleElementFromRange(ranges[i]);\n      try {\n        controlRange.add(el);\n      } catch (ex) {\n        throw new Error(\"setRanges(): Element within the one of the specified Ranges could not be added to control selection (does it have layout?)\");\n      }\n    }\n    controlRange.select();\n\n    // Update the wrapped selection based on what's now in the native selection\n    updateControlSelection(sel);\n  }\n\n  // Selecting a range\n  if (!useDocumentSelection && selectionHasAnchorAndFocus && util.areHostMethods(testSelection, [\"removeAllRanges\", \"addRange\"])) {\n    selProto.removeAllRanges = function () {\n      this.nativeSelection.removeAllRanges();\n      updateEmptySelection(this);\n    };\n\n    var addRangeBackwards = function addRangeBackwards(sel, range) {\n      var doc = DomRange.getRangeDocument(range);\n      var endRange = api.createRange(doc);\n      endRange.collapseToPoint(range.endContainer, range.endOffset);\n      sel.nativeSelection.addRange(getNativeRange(endRange));\n      sel.nativeSelection.extend(range.startContainer, range.startOffset);\n      sel.refresh();\n    };\n\n    if (selectionHasRangeCount) {\n      selProto.addRange = function (range, backwards) {\n        if (implementsControlRange && implementsDocSelection && this.docSelection.type == CONTROL) {\n          addRangeToControlSelection(this, range);\n        } else {\n          if (backwards && selectionHasExtend) {\n            addRangeBackwards(this, range);\n          } else {\n            var previousRangeCount;\n            if (selectionSupportsMultipleRanges) {\n              previousRangeCount = this.rangeCount;\n            } else {\n              this.removeAllRanges();\n              previousRangeCount = 0;\n            }\n            this.nativeSelection.addRange(getNativeRange(range));\n\n            // Check whether adding the range was successful\n            this.rangeCount = this.nativeSelection.rangeCount;\n\n            if (this.rangeCount == previousRangeCount + 1) {\n              // The range was added successfully\n\n              // Check whether the range that we added to the selection is reflected in the last range extracted from\n              // the selection\n              if (api.config.checkSelectionRanges) {\n                var nativeRange = getSelectionRangeAt(this.nativeSelection, this.rangeCount - 1);\n                if (nativeRange && !DomRange.rangesEqual(nativeRange, range)) {\n                  // Happens in WebKit with, for example, a selection placed at the start of a text node\n                  range = new WrappedRange(nativeRange);\n                }\n              }\n              this._ranges[this.rangeCount - 1] = range;\n              updateAnchorAndFocusFromRange(this, range, selectionIsBackwards(this.nativeSelection));\n              this.isCollapsed = selectionIsCollapsed(this);\n            } else {\n              // The range was not added successfully. The simplest thing is to refresh\n              this.refresh();\n            }\n          }\n        }\n      };\n    } else {\n      selProto.addRange = function (range, backwards) {\n        if (backwards && selectionHasExtend) {\n          addRangeBackwards(this, range);\n        } else {\n          this.nativeSelection.addRange(getNativeRange(range));\n          this.refresh();\n        }\n      };\n    }\n\n    selProto.setRanges = function (ranges) {\n      if (implementsControlRange && ranges.length > 1) {\n        createControlSelection(this, ranges);\n      } else {\n        this.removeAllRanges();\n        for (var i = 0, len = ranges.length; i < len; ++i) {\n          this.addRange(ranges[i]);\n        }\n      }\n    };\n  } else if (util.isHostMethod(testSelection, \"empty\") && util.isHostMethod(testRange, \"select\") && implementsControlRange && useDocumentSelection) {\n\n    selProto.removeAllRanges = function () {\n      // Added try/catch as fix for issue #21\n      try {\n        this.docSelection.empty();\n\n        // Check for empty() not working (issue #24)\n        if (this.docSelection.type != \"None\") {\n          // Work around failure to empty a control selection by instead selecting a TextRange and then\n          // calling empty()\n          var doc;\n          if (this.anchorNode) {\n            doc = dom.getDocument(this.anchorNode);\n          } else if (this.docSelection.type == CONTROL) {\n            var controlRange = this.docSelection.createRange();\n            if (controlRange.length) {\n              doc = dom.getDocument(controlRange.item(0)).body.createTextRange();\n            }\n          }\n          if (doc) {\n            var textRange = doc.body.createTextRange();\n            textRange.select();\n            this.docSelection.empty();\n          }\n        }\n      } catch (ex) {}\n      updateEmptySelection(this);\n    };\n\n    selProto.addRange = function (range) {\n      if (this.docSelection.type == CONTROL) {\n        addRangeToControlSelection(this, range);\n      } else {\n        WrappedRange.rangeToTextRange(range).select();\n        this._ranges[0] = range;\n        this.rangeCount = 1;\n        this.isCollapsed = this._ranges[0].collapsed;\n        updateAnchorAndFocusFromRange(this, range, false);\n      }\n    };\n\n    selProto.setRanges = function (ranges) {\n      this.removeAllRanges();\n      var rangeCount = ranges.length;\n      if (rangeCount > 1) {\n        createControlSelection(this, ranges);\n      } else if (rangeCount) {\n        this.addRange(ranges[0]);\n      }\n    };\n  } else {\n    module.fail(\"No means of selecting a Range or TextRange was found\");\n    return false;\n  }\n\n  selProto.getRangeAt = function (index) {\n    if (index < 0 || index >= this.rangeCount) {\n      throw new DOMException(\"INDEX_SIZE_ERR\");\n    } else {\n      return this._ranges[index];\n    }\n  };\n\n  var refreshSelection;\n\n  if (useDocumentSelection) {\n    refreshSelection = function refreshSelection(sel) {\n      var range;\n      if (api.isSelectionValid(sel.win)) {\n        range = sel.docSelection.createRange();\n      } else {\n        range = dom.getBody(sel.win.document).createTextRange();\n        range.collapse(true);\n      }\n\n      if (sel.docSelection.type == CONTROL) {\n        updateControlSelection(sel);\n      } else if (isTextRange(range)) {\n        updateFromTextRange(sel, range);\n      } else {\n        updateEmptySelection(sel);\n      }\n    };\n  } else if (util.isHostMethod(testSelection, \"getRangeAt\") && typeof testSelection.rangeCount == \"number\") {\n    refreshSelection = function refreshSelection(sel) {\n      if (implementsControlRange && implementsDocSelection && sel.docSelection.type == CONTROL) {\n        updateControlSelection(sel);\n      } else {\n        sel._ranges.length = sel.rangeCount = sel.nativeSelection.rangeCount;\n        if (sel.rangeCount) {\n          for (var i = 0, len = sel.rangeCount; i < len; ++i) {\n            sel._ranges[i] = new api.WrappedRange(sel.nativeSelection.getRangeAt(i));\n          }\n          updateAnchorAndFocusFromRange(sel, sel._ranges[sel.rangeCount - 1], selectionIsBackwards(sel.nativeSelection));\n          sel.isCollapsed = selectionIsCollapsed(sel);\n        } else {\n          updateEmptySelection(sel);\n        }\n      }\n    };\n  } else if (selectionHasAnchorAndFocus && _typeof(testSelection.isCollapsed) == BOOLEAN && _typeof(testRange.collapsed) == BOOLEAN && api.features.implementsDomRange) {\n    refreshSelection = function refreshSelection(sel) {\n      var range,\n          nativeSel = sel.nativeSelection;\n      if (nativeSel.anchorNode) {\n        range = getSelectionRangeAt(nativeSel, 0);\n        sel._ranges = [range];\n        sel.rangeCount = 1;\n        updateAnchorAndFocusFromNativeSelection(sel);\n        sel.isCollapsed = selectionIsCollapsed(sel);\n      } else {\n        updateEmptySelection(sel);\n      }\n    };\n  } else {\n    module.fail(\"No means of obtaining a Range or TextRange from the user's selection was found\");\n    return false;\n  }\n\n  selProto.refresh = function (checkForChanges) {\n    var oldRanges = checkForChanges ? this._ranges.slice(0) : null;\n    refreshSelection(this);\n    if (checkForChanges) {\n      var i = oldRanges.length;\n      if (i != this._ranges.length) {\n        return false;\n      }\n      while (i--) {\n        if (!DomRange.rangesEqual(oldRanges[i], this._ranges[i])) {\n          return false;\n        }\n      }\n      return true;\n    }\n  };\n\n  // Removal of a single range\n  var removeRangeManually = function removeRangeManually(sel, range) {\n    var ranges = sel.getAllRanges(),\n        removed = false;\n    sel.removeAllRanges();\n    for (var i = 0, len = ranges.length; i < len; ++i) {\n      if (removed || range !== ranges[i]) {\n        sel.addRange(ranges[i]);\n      } else {\n        // According to the draft WHATWG Range spec, the same range may be added to the selection multiple\n        // times. removeRange should only remove the first instance, so the following ensures only the first\n        // instance is removed\n        removed = true;\n      }\n    }\n    if (!sel.rangeCount) {\n      updateEmptySelection(sel);\n    }\n  };\n\n  if (implementsControlRange) {\n    selProto.removeRange = function (range) {\n      if (this.docSelection.type == CONTROL) {\n        var controlRange = this.docSelection.createRange();\n        var rangeElement = getSingleElementFromRange(range);\n\n        // Create a new ControlRange containing all the elements in the selected ControlRange minus the\n        // element contained by the supplied range\n        var doc = dom.getDocument(controlRange.item(0));\n        var newControlRange = dom.getBody(doc).createControlRange();\n        var el,\n            removed = false;\n        for (var i = 0, len = controlRange.length; i < len; ++i) {\n          el = controlRange.item(i);\n          if (el !== rangeElement || removed) {\n            newControlRange.add(controlRange.item(i));\n          } else {\n            removed = true;\n          }\n        }\n        newControlRange.select();\n\n        // Update the wrapped selection based on what's now in the native selection\n        updateControlSelection(this);\n      } else {\n        removeRangeManually(this, range);\n      }\n    };\n  } else {\n    selProto.removeRange = function (range) {\n      removeRangeManually(this, range);\n    };\n  }\n\n  // Detecting if a selection is backwards\n  var selectionIsBackwards;\n  if (!useDocumentSelection && selectionHasAnchorAndFocus && api.features.implementsDomRange) {\n    selectionIsBackwards = function selectionIsBackwards(sel) {\n      var backwards = false;\n      if (sel.anchorNode) {\n        backwards = dom.comparePoints(sel.anchorNode, sel.anchorOffset, sel.focusNode, sel.focusOffset) == 1;\n      }\n      return backwards;\n    };\n\n    selProto.isBackwards = function () {\n      return selectionIsBackwards(this);\n    };\n  } else {\n    selectionIsBackwards = selProto.isBackwards = function () {\n      return false;\n    };\n  }\n\n  // Selection text\n  // This is conformant to the new WHATWG DOM Range draft spec but differs from WebKit and Mozilla's implementation\n  selProto.toString = function () {\n\n    var rangeTexts = [];\n    for (var i = 0, len = this.rangeCount; i < len; ++i) {\n      rangeTexts[i] = \"\" + this._ranges[i];\n    }\n    return rangeTexts.join(\"\");\n  };\n\n  function assertNodeInSameDocument(sel, node) {\n    if (sel.anchorNode && dom.getDocument(sel.anchorNode) !== dom.getDocument(node)) {\n      throw new DOMException(\"WRONG_DOCUMENT_ERR\");\n    }\n  }\n\n  // No current browsers conform fully to the HTML 5 draft spec for this method, so Rangy's own method is always used\n  selProto.collapse = function (node, offset) {\n    assertNodeInSameDocument(this, node);\n    var range = api.createRange(dom.getDocument(node));\n    range.collapseToPoint(node, offset);\n    this.removeAllRanges();\n    this.addRange(range);\n    this.isCollapsed = true;\n  };\n\n  selProto.collapseToStart = function () {\n    if (this.rangeCount) {\n      var range = this._ranges[0];\n      this.collapse(range.startContainer, range.startOffset);\n    } else {\n      throw new DOMException(\"INVALID_STATE_ERR\");\n    }\n  };\n\n  selProto.collapseToEnd = function () {\n    if (this.rangeCount) {\n      var range = this._ranges[this.rangeCount - 1];\n      this.collapse(range.endContainer, range.endOffset);\n    } else {\n      throw new DOMException(\"INVALID_STATE_ERR\");\n    }\n  };\n\n  // The HTML 5 spec is very specific on how selectAllChildren should be implemented so the native implementation is\n  // never used by Rangy.\n  selProto.selectAllChildren = function (node) {\n    assertNodeInSameDocument(this, node);\n    var range = api.createRange(dom.getDocument(node));\n    range.selectNodeContents(node);\n    this.removeAllRanges();\n    this.addRange(range);\n  };\n\n  selProto.deleteFromDocument = function () {\n    // Sepcial behaviour required for Control selections\n    if (implementsControlRange && implementsDocSelection && this.docSelection.type == CONTROL) {\n      var controlRange = this.docSelection.createRange();\n      var element;\n      while (controlRange.length) {\n        element = controlRange.item(0);\n        controlRange.remove(element);\n        element.parentNode.removeChild(element);\n      }\n      this.refresh();\n    } else if (this.rangeCount) {\n      var ranges = this.getAllRanges();\n      this.removeAllRanges();\n      for (var i = 0, len = ranges.length; i < len; ++i) {\n        ranges[i].deleteContents();\n      }\n      // The HTML5 spec says nothing about what the selection should contain after calling deleteContents on each\n      // range. Firefox moves the selection to where the final selected range was, so we emulate that\n      this.addRange(ranges[len - 1]);\n    }\n  };\n\n  // The following are non-standard extensions\n  selProto.getAllRanges = function () {\n    return this._ranges.slice(0);\n  };\n\n  selProto.setSingleRange = function (range) {\n    this.setRanges([range]);\n  };\n\n  selProto.containsNode = function (node, allowPartial) {\n    for (var i = 0, len = this._ranges.length; i < len; ++i) {\n      if (this._ranges[i].containsNode(node, allowPartial)) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  selProto.toHtml = function () {\n    var html = \"\";\n    if (this.rangeCount) {\n      var container = DomRange.getRangeDocument(this._ranges[0]).createElement(\"div\");\n      for (var i = 0, len = this._ranges.length; i < len; ++i) {\n        container.appendChild(this._ranges[i].cloneContents());\n      }\n      html = container.innerHTML;\n    }\n    return html;\n  };\n\n  function inspect(sel) {\n    var rangeInspects = [];\n    var anchor = new DomPosition(sel.anchorNode, sel.anchorOffset);\n    var focus = new DomPosition(sel.focusNode, sel.focusOffset);\n    var name = typeof sel.getName == \"function\" ? sel.getName() : \"Selection\";\n\n    if (typeof sel.rangeCount != \"undefined\") {\n      for (var i = 0, len = sel.rangeCount; i < len; ++i) {\n        rangeInspects[i] = DomRange.inspect(sel.getRangeAt(i));\n      }\n    }\n    return \"[\" + name + \"(Ranges: \" + rangeInspects.join(\", \") + \")(anchor: \" + anchor.inspect() + \", focus: \" + focus.inspect() + \"]\";\n  }\n\n  selProto.getName = function () {\n    return \"WrappedSelection\";\n  };\n\n  selProto.inspect = function () {\n    return inspect(this);\n  };\n\n  selProto.detach = function () {\n    this.win[windowPropertyName] = null;\n    this.win = this.anchorNode = this.focusNode = null;\n  };\n\n  WrappedSelection.inspect = inspect;\n\n  api.Selection = WrappedSelection;\n\n  api.selectionPrototype = selProto;\n\n  api.addCreateMissingNativeApiListener(function (win) {\n    if (typeof win.getSelection == \"undefined\") {\n      win.getSelection = function () {\n        return api.getSelection(this);\n      };\n    }\n    win = null;\n  });\n});\n/*\n\tBase.js, version 1.1a\n\tCopyright 2006-2010, Dean Edwards\n\tLicense: http://www.opensource.org/licenses/mit-license.php\n*/\n\nvar Base = function Base() {\n  // dummy\n};\n\nBase.extend = function (_instance, _static) {\n  // subclass\n  var extend = Base.prototype.extend;\n\n  // build the prototype\n  Base._prototyping = true;\n  var proto = new this();\n  extend.call(proto, _instance);\n  proto.base = function () {\n    // call this method from any other method to invoke that method's ancestor\n  };\n  delete Base._prototyping;\n\n  // create the wrapper for the constructor function\n  //var constructor = proto.constructor.valueOf(); //-dean\n  var constructor = proto.constructor;\n  var klass = proto.constructor = function () {\n    if (!Base._prototyping) {\n      if (this._constructing || this.constructor == klass) {\n        // instantiation\n        this._constructing = true;\n        constructor.apply(this, arguments);\n        delete this._constructing;\n      } else if (arguments[0] != null) {\n        // casting\n        return (arguments[0].extend || extend).call(arguments[0], proto);\n      }\n    }\n  };\n\n  // build the class interface\n  klass.ancestor = this;\n  klass.extend = this.extend;\n  klass.forEach = this.forEach;\n  klass.implement = this.implement;\n  klass.prototype = proto;\n  klass.toString = this.toString;\n  klass.valueOf = function (type) {\n    //return (type == \"object\") ? klass : constructor; //-dean\n    return type == \"object\" ? klass : constructor.valueOf();\n  };\n  extend.call(klass, _static);\n  // class initialisation\n  if (typeof klass.init == \"function\") klass.init();\n  return klass;\n};\n\nBase.prototype = {\n  extend: function extend(source, value) {\n    if (arguments.length > 1) {\n      // extending with a name/value pair\n      var ancestor = this[source];\n      if (ancestor && typeof value == \"function\" && ( // overriding a method?\n      // the valueOf() comparison is to avoid circular references\n      !ancestor.valueOf || ancestor.valueOf() != value.valueOf()) && /\\bbase\\b/.test(value)) {\n        // get the underlying method\n        var method = value.valueOf();\n        // override\n        value = function value() {\n          var previous = this.base || Base.prototype.base;\n          this.base = ancestor;\n          var returnValue = method.apply(this, arguments);\n          this.base = previous;\n          return returnValue;\n        };\n        // point to the underlying method\n        value.valueOf = function (type) {\n          return type == \"object\" ? value : method;\n        };\n        value.toString = Base.toString;\n      }\n      this[source] = value;\n    } else if (source) {\n      // extending with an object literal\n      var extend = Base.prototype.extend;\n      // if this object has a customised extend method then use it\n      if (!Base._prototyping && typeof this != \"function\") {\n        extend = this.extend || extend;\n      }\n      var proto = { toSource: null };\n      // do the \"toString\" and other methods manually\n      var hidden = [\"constructor\", \"toString\", \"valueOf\"];\n      // if we are prototyping then include the constructor\n      var i = Base._prototyping ? 0 : 1;\n      while (key = hidden[i++]) {\n        if (source[key] != proto[key]) {\n          extend.call(this, key, source[key]);\n        }\n      }\n      // copy each of the source object's properties to this object\n      for (var key in source) {\n        if (!proto[key]) extend.call(this, key, source[key]);\n      }\n    }\n    return this;\n  }\n};\n\n// initialise\nBase = Base.extend({\n  constructor: function constructor() {\n    this.extend(arguments[0]);\n  }\n}, {\n  ancestor: Object,\n  version: \"1.1\",\n\n  forEach: function forEach(object, block, context) {\n    for (var key in object) {\n      if (this.prototype[key] === undefined) {\n        block.call(context, object[key], key, object);\n      }\n    }\n  },\n\n  implement: function implement() {\n    for (var i = 0; i < arguments.length; i++) {\n      if (typeof arguments[i] == \"function\") {\n        // if it's a function, call it\n        arguments[i](this.prototype);\n      } else {\n        // add the interface using the extend method\n        this.prototype.extend(arguments[i]);\n      }\n    }\n    return this;\n  },\n\n  toString: function toString() {\n    return String(this.valueOf());\n  }\n}); /**\n    * Detect browser support for specific features\n    */\nwysihtml5.browser = function () {\n  var userAgent = navigator.userAgent,\n      testElement = document.createElement(\"div\"),\n\n\n  // Browser sniffing is unfortunately needed since some behaviors are impossible to feature detect\n  isIE = userAgent.indexOf(\"MSIE\") !== -1 && userAgent.indexOf(\"Opera\") === -1,\n      isGecko = userAgent.indexOf(\"Gecko\") !== -1 && userAgent.indexOf(\"KHTML\") === -1,\n      isWebKit = userAgent.indexOf(\"AppleWebKit/\") !== -1,\n      isChrome = userAgent.indexOf(\"Chrome/\") !== -1,\n      isOpera = userAgent.indexOf(\"Opera/\") !== -1;\n\n  function iosVersion(userAgent) {\n    return (/ipad|iphone|ipod/.test(userAgent) && userAgent.match(/ os (\\d+).+? like mac os x/) || [, 0])[1];\n  }\n\n  return {\n    // Static variable needed, publicly accessible, to be able override it in unit tests\n    USER_AGENT: userAgent,\n\n    /**\n     * Exclude browsers that are not capable of displaying and handling\n     * contentEditable as desired:\n     *    - iPhone, iPad (tested iOS 4.2.2) and Android (tested 2.2) refuse to make contentEditables focusable\n     *    - IE < 8 create invalid markup and crash randomly from time to time\n     *\n     * @return {Boolean}\n     */\n    supported: function supported() {\n      var userAgent = this.USER_AGENT.toLowerCase(),\n\n\n      // Essential for making html elements editable\n      hasContentEditableSupport = \"contentEditable\" in testElement,\n\n\n      // Following methods are needed in order to interact with the contentEditable area\n      hasEditingApiSupport = document.execCommand && document.queryCommandSupported && document.queryCommandState,\n\n\n      // document selector apis are only supported by IE 8+, Safari 4+, Chrome and Firefox 3.5+\n      hasQuerySelectorSupport = document.querySelector && document.querySelectorAll,\n\n\n      // contentEditable is unusable in mobile browsers (tested iOS 4.2.2, Android 2.2, Opera Mobile, WebOS 3.05)\n      isIncompatibleMobileBrowser = this.isIos() && iosVersion(userAgent) < 5 || userAgent.indexOf(\"opera mobi\") !== -1 || userAgent.indexOf(\"hpwos/\") !== -1;\n\n      return hasContentEditableSupport && hasEditingApiSupport && hasQuerySelectorSupport && !isIncompatibleMobileBrowser;\n    },\n\n    isTouchDevice: function isTouchDevice() {\n      return this.supportsEvent(\"touchmove\");\n    },\n\n    isIos: function isIos() {\n      var userAgent = this.USER_AGENT.toLowerCase();\n      return userAgent.indexOf(\"webkit\") !== -1 && userAgent.indexOf(\"mobile\") !== -1;\n    },\n\n    /**\n     * Whether the browser supports sandboxed iframes\n     * Currently only IE 6+ offers such feature <iframe security=\"restricted\">\n     *\n     * http://msdn.microsoft.com/en-us/library/ms534622(v=vs.85).aspx\n     * http://blogs.msdn.com/b/ie/archive/2008/01/18/using-frames-more-securely.aspx\n     *\n     * HTML5 sandboxed iframes are still buggy and their DOM is not reachable from the outside (except when using postMessage)\n     */\n    supportsSandboxedIframes: function supportsSandboxedIframes() {\n      return isIE;\n    },\n\n    /**\n     * IE6+7 throw a mixed content warning when the src of an iframe\n     * is empty/unset or about:blank\n     * window.querySelector is implemented as of IE8\n     */\n    throwsMixedContentWarningWhenIframeSrcIsEmpty: function throwsMixedContentWarningWhenIframeSrcIsEmpty() {\n      return !(\"querySelector\" in document);\n    },\n\n    /**\n     * Whether the caret is correctly displayed in contentEditable elements\n     * Firefox sometimes shows a huge caret in the beginning after focusing\n     */\n    displaysCaretInEmptyContentEditableCorrectly: function displaysCaretInEmptyContentEditableCorrectly() {\n      return !isGecko;\n    },\n\n    /**\n     * Opera and IE are the only browsers who offer the css value\n     * in the original unit, thx to the currentStyle object\n     * All other browsers provide the computed style in px via window.getComputedStyle\n     */\n    hasCurrentStyleProperty: function hasCurrentStyleProperty() {\n      return \"currentStyle\" in testElement;\n    },\n\n    /**\n     * Whether the browser inserts a <br> when pressing enter in a contentEditable element\n     */\n    insertsLineBreaksOnReturn: function insertsLineBreaksOnReturn() {\n      return isGecko;\n    },\n\n    supportsPlaceholderAttributeOn: function supportsPlaceholderAttributeOn(element) {\n      return \"placeholder\" in element;\n    },\n\n    supportsEvent: function supportsEvent(eventName) {\n      return \"on\" + eventName in testElement || function () {\n        testElement.setAttribute(\"on\" + eventName, \"return;\");\n        return typeof testElement[\"on\" + eventName] === \"function\";\n      }();\n    },\n\n    /**\n     * Opera doesn't correctly fire focus/blur events when clicking in- and outside of iframe\n     */\n    supportsEventsInIframeCorrectly: function supportsEventsInIframeCorrectly() {\n      return !isOpera;\n    },\n\n    /**\n     * Chrome & Safari only fire the ondrop/ondragend/... events when the ondragover event is cancelled\n     * with event.preventDefault\n     * Firefox 3.6 fires those events anyway, but the mozilla doc says that the dragover/dragenter event needs\n     * to be cancelled\n     */\n    firesOnDropOnlyWhenOnDragOverIsCancelled: function firesOnDropOnlyWhenOnDragOverIsCancelled() {\n      return isWebKit || isGecko;\n    },\n\n    /**\n     * Whether the browser supports the event.dataTransfer property in a proper way\n     */\n    supportsDataTransfer: function supportsDataTransfer() {\n      try {\n        // Firefox doesn't support dataTransfer in a safe way, it doesn't strip script code in the html payload (like Chrome does)\n        return isWebKit && (window.Clipboard || window.DataTransfer).prototype.getData;\n      } catch (e) {\n        return false;\n      }\n    },\n\n    /**\n     * Everything below IE9 doesn't know how to treat HTML5 tags\n     *\n     * @param {Object} context The document object on which to check HTML5 support\n     *\n     * @example\n     *    wysihtml5.browser.supportsHTML5Tags(document);\n     */\n    supportsHTML5Tags: function supportsHTML5Tags(context) {\n      var element = context.createElement(\"div\"),\n          html5 = \"<article>foo</article>\";\n      element.innerHTML = html5;\n      return element.innerHTML.toLowerCase() === html5;\n    },\n\n    /**\n     * Checks whether a document supports a certain queryCommand\n     * In particular, Opera needs a reference to a document that has a contentEditable in it's dom tree\n     * in oder to report correct results\n     *\n     * @param {Object} doc Document object on which to check for a query command\n     * @param {String} command The query command to check for\n     * @return {Boolean}\n     *\n     * @example\n     *    wysihtml5.browser.supportsCommand(document, \"bold\");\n     */\n    supportsCommand: function () {\n      // Following commands are supported but contain bugs in some browsers\n      var buggyCommands = {\n        // formatBlock fails with some tags (eg. <blockquote>)\n        \"formatBlock\": isIE,\n        // When inserting unordered or ordered lists in Firefox, Chrome or Safari, the current selection or line gets\n        // converted into a list (<ul><li>...</li></ul>, <ol><li>...</li></ol>)\n        // IE and Opera act a bit different here as they convert the entire content of the current block element into a list\n        \"insertUnorderedList\": isIE || isOpera || isWebKit,\n        \"insertOrderedList\": isIE || isOpera || isWebKit\n      };\n\n      // Firefox throws errors for queryCommandSupported, so we have to build up our own object of supported commands\n      var supported = {\n        \"insertHTML\": isGecko\n      };\n\n      return function (doc, command) {\n        var isBuggy = buggyCommands[command];\n        if (!isBuggy) {\n          // Firefox throws errors when invoking queryCommandSupported or queryCommandEnabled\n          try {\n            return doc.queryCommandSupported(command);\n          } catch (e1) {}\n\n          try {\n            return doc.queryCommandEnabled(command);\n          } catch (e2) {\n            return !!supported[command];\n          }\n        }\n        return false;\n      };\n    }(),\n\n    /**\n     * IE: URLs starting with:\n     *    www., http://, https://, ftp://, gopher://, mailto:, new:, snews:, telnet:, wasis:, file://,\n     *    nntp://, newsrc:, ldap://, ldaps://, outlook:, mic:// and url:\n     * will automatically be auto-linked when either the user inserts them via copy&paste or presses the\n     * space bar when the caret is directly after such an url.\n     * This behavior cannot easily be avoided in IE < 9 since the logic is hardcoded in the mshtml.dll\n     * (related blog post on msdn\n     * http://blogs.msdn.com/b/ieinternals/archive/2009/09/17/prevent-automatic-hyperlinking-in-contenteditable-html.aspx).\n     */\n    doesAutoLinkingInContentEditable: function doesAutoLinkingInContentEditable() {\n      return isIE;\n    },\n\n    /**\n     * As stated above, IE auto links urls typed into contentEditable elements\n     * Since IE9 it's possible to prevent this behavior\n     */\n    canDisableAutoLinking: function canDisableAutoLinking() {\n      return this.supportsCommand(document, \"AutoUrlDetect\");\n    },\n\n    /**\n     * IE leaves an empty paragraph in the contentEditable element after clearing it\n     * Chrome/Safari sometimes an empty <div>\n     */\n    clearsContentEditableCorrectly: function clearsContentEditableCorrectly() {\n      return isGecko || isOpera || isWebKit;\n    },\n\n    /**\n     * IE gives wrong results for getAttribute\n     */\n    supportsGetAttributeCorrectly: function supportsGetAttributeCorrectly() {\n      var td = document.createElement(\"td\");\n      return td.getAttribute(\"rowspan\") != \"1\";\n    },\n\n    /**\n     * When clicking on images in IE, Opera and Firefox, they are selected, which makes it easy to interact with them.\n     * Chrome and Safari both don't support this\n     */\n    canSelectImagesInContentEditable: function canSelectImagesInContentEditable() {\n      return isGecko || isIE || isOpera;\n    },\n\n    /**\n     * When the caret is in an empty list (<ul><li>|</li></ul>) which is the first child in an contentEditable container\n     * pressing backspace doesn't remove the entire list as done in other browsers\n     */\n    clearsListsInContentEditableCorrectly: function clearsListsInContentEditableCorrectly() {\n      return isGecko || isIE || isWebKit;\n    },\n\n    /**\n     * All browsers except Safari and Chrome automatically scroll the range/caret position into view\n     */\n    autoScrollsToCaret: function autoScrollsToCaret() {\n      return !isWebKit;\n    },\n\n    /**\n     * Check whether the browser automatically closes tags that don't need to be opened\n     */\n    autoClosesUnclosedTags: function autoClosesUnclosedTags() {\n      var clonedTestElement = testElement.cloneNode(false),\n          returnValue,\n          innerHTML;\n\n      clonedTestElement.innerHTML = \"<p><div></div>\";\n      innerHTML = clonedTestElement.innerHTML.toLowerCase();\n      returnValue = innerHTML === \"<p></p><div></div>\" || innerHTML === \"<p><div></div></p>\";\n\n      // Cache result by overwriting current function\n      this.autoClosesUnclosedTags = function () {\n        return returnValue;\n      };\n\n      return returnValue;\n    },\n\n    /**\n     * Whether the browser supports the native document.getElementsByClassName which returns live NodeLists\n     */\n    supportsNativeGetElementsByClassName: function supportsNativeGetElementsByClassName() {\n      return String(document.getElementsByClassName).indexOf(\"[native code]\") !== -1;\n    },\n\n    /**\n     * As of now (19.04.2011) only supported by Firefox 4 and Chrome\n     * See https://developer.mozilla.org/en/DOM/Selection/modify\n     */\n    supportsSelectionModify: function supportsSelectionModify() {\n      return \"getSelection\" in window && \"modify\" in window.getSelection();\n    },\n\n    /**\n     * Whether the browser supports the classList object for fast className manipulation\n     * See https://developer.mozilla.org/en/DOM/element.classList\n     */\n    supportsClassList: function supportsClassList() {\n      return \"classList\" in testElement;\n    },\n\n    /**\n     * Opera needs a white space after a <br> in order to position the caret correctly\n     */\n    needsSpaceAfterLineBreak: function needsSpaceAfterLineBreak() {\n      return isOpera;\n    },\n\n    /**\n     * Whether the browser supports the speech api on the given element\n     * See http://mikepultz.com/2011/03/accessing-google-speech-api-chrome-11/\n     *\n     * @example\n     *    var input = document.createElement(\"input\");\n     *    if (wysihtml5.browser.supportsSpeechApiOn(input)) {\n     *      // ...\n     *    }\n     */\n    supportsSpeechApiOn: function supportsSpeechApiOn(input) {\n      var chromeVersion = userAgent.match(/Chrome\\/(\\d+)/) || [, 0];\n      return chromeVersion[1] >= 11 && (\"onwebkitspeechchange\" in input || \"speech\" in input);\n    },\n\n    /**\n     * IE9 crashes when setting a getter via Object.defineProperty on XMLHttpRequest or XDomainRequest\n     * See https://connect.microsoft.com/ie/feedback/details/650112\n     * or try the POC http://tifftiff.de/ie9_crash/\n     */\n    crashesWhenDefineProperty: function crashesWhenDefineProperty(property) {\n      return isIE && (property === \"XMLHttpRequest\" || property === \"XDomainRequest\");\n    },\n\n    /**\n     * IE is the only browser who fires the \"focus\" event not immediately when .focus() is called on an element\n     */\n    doesAsyncFocus: function doesAsyncFocus() {\n      return isIE;\n    },\n\n    /**\n     * In IE it's impssible for the user and for the selection library to set the caret after an <img> when it's the lastChild in the document\n     */\n    hasProblemsSettingCaretAfterImg: function hasProblemsSettingCaretAfterImg() {\n      return isIE;\n    },\n\n    hasUndoInContextMenu: function hasUndoInContextMenu() {\n      return isGecko || isChrome || isOpera;\n    }\n  };\n}();wysihtml5.lang.array = function (arr) {\n  return {\n    /**\n     * Check whether a given object exists in an array\n     *\n     * @example\n     *    wysihtml5.lang.array([1, 2]).contains(1);\n     *    // => true\n     */\n    contains: function contains(needle) {\n      if (arr.indexOf) {\n        return arr.indexOf(needle) !== -1;\n      } else {\n        for (var i = 0, length = arr.length; i < length; i++) {\n          if (arr[i] === needle) {\n            return true;\n          }\n        }\n        return false;\n      }\n    },\n\n    /**\n     * Substract one array from another\n     *\n     * @example\n     *    wysihtml5.lang.array([1, 2, 3, 4]).without([3, 4]);\n     *    // => [1, 2]\n     */\n    without: function without(arrayToSubstract) {\n      arrayToSubstract = wysihtml5.lang.array(arrayToSubstract);\n      var newArr = [],\n          i = 0,\n          length = arr.length;\n      for (; i < length; i++) {\n        if (!arrayToSubstract.contains(arr[i])) {\n          newArr.push(arr[i]);\n        }\n      }\n      return newArr;\n    },\n\n    /**\n     * Return a clean native array\n     * \n     * Following will convert a Live NodeList to a proper Array\n     * @example\n     *    var childNodes = wysihtml5.lang.array(document.body.childNodes).get();\n     */\n    get: function get() {\n      var i = 0,\n          length = arr.length,\n          newArray = [];\n      for (; i < length; i++) {\n        newArray.push(arr[i]);\n      }\n      return newArray;\n    }\n  };\n};wysihtml5.lang.Dispatcher = Base.extend(\n/** @scope wysihtml5.lang.Dialog.prototype */{\n  observe: function observe(eventName, handler) {\n    this.events = this.events || {};\n    this.events[eventName] = this.events[eventName] || [];\n    this.events[eventName].push(handler);\n    return this;\n  },\n\n  on: function on() {\n    return this.observe.apply(this, wysihtml5.lang.array(arguments).get());\n  },\n\n  fire: function fire(eventName, payload) {\n    this.events = this.events || {};\n    var handlers = this.events[eventName] || [],\n        i = 0;\n    for (; i < handlers.length; i++) {\n      handlers[i].call(this, payload);\n    }\n    return this;\n  },\n\n  stopObserving: function stopObserving(eventName, handler) {\n    this.events = this.events || {};\n    var i = 0,\n        handlers,\n        newHandlers;\n    if (eventName) {\n      handlers = this.events[eventName] || [], newHandlers = [];\n      for (; i < handlers.length; i++) {\n        if (handlers[i] !== handler && handler) {\n          newHandlers.push(handlers[i]);\n        }\n      }\n      this.events[eventName] = newHandlers;\n    } else {\n      // Clean up all events\n      this.events = {};\n    }\n    return this;\n  }\n});wysihtml5.lang.object = function (obj) {\n  return {\n    /**\n     * @example\n     *    wysihtml5.lang.object({ foo: 1, bar: 1 }).merge({ bar: 2, baz: 3 }).get();\n     *    // => { foo: 1, bar: 2, baz: 3 }\n     */\n    merge: function merge(otherObj) {\n      for (var i in otherObj) {\n        obj[i] = otherObj[i];\n      }\n      return this;\n    },\n\n    get: function get() {\n      return obj;\n    },\n\n    /**\n     * @example\n     *    wysihtml5.lang.object({ foo: 1 }).clone();\n     *    // => { foo: 1 }\n     */\n    clone: function clone() {\n      var newObj = {},\n          i;\n      for (i in obj) {\n        newObj[i] = obj[i];\n      }\n      return newObj;\n    },\n\n    /**\n     * @example\n     *    wysihtml5.lang.object([]).isArray();\n     *    // => true\n     */\n    isArray: function isArray() {\n      return Object.prototype.toString.call(obj) === \"[object Array]\";\n    }\n  };\n};(function () {\n  var WHITE_SPACE_START = /^\\s+/,\n      WHITE_SPACE_END = /\\s+$/;\n  wysihtml5.lang.string = function (str) {\n    str = String(str);\n    return {\n      /**\n       * @example\n       *    wysihtml5.lang.string(\"   foo   \").trim();\n       *    // => \"foo\"\n       */\n      trim: function trim() {\n        return str.replace(WHITE_SPACE_START, \"\").replace(WHITE_SPACE_END, \"\");\n      },\n\n      /**\n       * @example\n       *    wysihtml5.lang.string(\"Hello #{name}\").interpolate({ name: \"Christopher\" });\n       *    // => \"Hello Christopher\"\n       */\n      interpolate: function interpolate(vars) {\n        for (var i in vars) {\n          str = this.replace(\"#{\" + i + \"}\").by(vars[i]);\n        }\n        return str;\n      },\n\n      /**\n       * @example\n       *    wysihtml5.lang.string(\"Hello Tom\").replace(\"Tom\").with(\"Hans\");\n       *    // => \"Hello Hans\"\n       */\n      replace: function replace(search) {\n        return {\n          by: function by(replace) {\n            return str.split(search).join(replace);\n          }\n        };\n      }\n    };\n  };\n})(); /**\n      * Find urls in descendant text nodes of an element and auto-links them\n      * Inspired by http://james.padolsey.com/javascript/find-and-replace-text-with-javascript/\n      *\n      * @param {Element} element Container element in which to search for urls\n      *\n      * @example\n      *    <div id=\"text-container\">Please click here: www.google.com</div>\n      *    <script>wysihtml5.dom.autoLink(document.getElementById(\"text-container\"));</script>\n      */\n(function (wysihtml5) {\n  var /**\n       * Don't auto-link urls that are contained in the following elements:\n       */\n  IGNORE_URLS_IN = wysihtml5.lang.array([\"CODE\", \"PRE\", \"A\", \"SCRIPT\", \"HEAD\", \"TITLE\", \"STYLE\"]),\n\n\n  /**\n   * revision 1:\n   *    /(\\S+\\.{1}[^\\s\\,\\.\\!]+)/g\n   *\n   * revision 2:\n   *    /(\\b(((https?|ftp):\\/\\/)|(www\\.))[-A-Z0-9+&@#\\/%?=~_|!:,.;\\[\\]]*[-A-Z0-9+&@#\\/%=~_|])/gim\n   *\n   * put this in the beginning if you don't wan't to match within a word\n   *    (^|[\\>\\(\\{\\[\\s\\>])\n   */\n  URL_REG_EXP = /((https?:\\/\\/|www\\.)[^\\s<]{3,})/gi,\n      TRAILING_CHAR_REG_EXP = /([^\\w\\/\\-](,?))$/i,\n      MAX_DISPLAY_LENGTH = 100,\n      BRACKETS = { \")\": \"(\", \"]\": \"[\", \"}\": \"{\" };\n\n  function autoLink(element) {\n    if (_hasParentThatShouldBeIgnored(element)) {\n      return element;\n    }\n\n    if (element === element.ownerDocument.documentElement) {\n      element = element.ownerDocument.body;\n    }\n\n    return _parseNode(element);\n  }\n\n  /**\n   * This is basically a rebuild of\n   * the rails auto_link_urls text helper\n   */\n  function _convertUrlsToLinks(str) {\n    return str.replace(URL_REG_EXP, function (match, url) {\n      var punctuation = (url.match(TRAILING_CHAR_REG_EXP) || [])[1] || \"\",\n          opening = BRACKETS[punctuation];\n      url = url.replace(TRAILING_CHAR_REG_EXP, \"\");\n\n      if (url.split(opening).length > url.split(punctuation).length) {\n        url = url + punctuation;\n        punctuation = \"\";\n      }\n      var realUrl = url,\n          displayUrl = url;\n      if (url.length > MAX_DISPLAY_LENGTH) {\n        displayUrl = displayUrl.substr(0, MAX_DISPLAY_LENGTH) + \"...\";\n      }\n      // Add http prefix if necessary\n      if (realUrl.substr(0, 4) === \"www.\") {\n        realUrl = \"http://\" + realUrl;\n      }\n\n      return '<a href=\"' + realUrl + '\">' + realUrl + '</a>' + punctuation;\n    });\n  }\n\n  /**\n   * Creates or (if already cached) returns a temp element\n   * for the given document object\n   */\n  function _getTempElement(context) {\n    var tempElement = context._wysihtml5_tempElement;\n    if (!tempElement) {\n      tempElement = context._wysihtml5_tempElement = context.createElement(\"div\");\n    }\n    return tempElement;\n  }\n\n  /**\n   * Replaces the original text nodes with the newly auto-linked dom tree\n   */\n  function _wrapMatchesInNode(textNode) {\n    var parentNode = textNode.parentNode,\n        tempElement = _getTempElement(parentNode.ownerDocument);\n\n    // We need to insert an empty/temporary <span /> to fix IE quirks\n    // Elsewise IE would strip white space in the beginning\n    tempElement.innerHTML = \"<span></span>\" + _convertUrlsToLinks(textNode.data);\n    tempElement.removeChild(tempElement.firstChild);\n\n    while (tempElement.firstChild) {\n      // inserts tempElement.firstChild before textNode\n      parentNode.insertBefore(tempElement.firstChild, textNode);\n    }\n    parentNode.removeChild(textNode);\n  }\n\n  function _hasParentThatShouldBeIgnored(node) {\n    var nodeName;\n    while (node.parentNode) {\n      node = node.parentNode;\n      nodeName = node.nodeName;\n      if (IGNORE_URLS_IN.contains(nodeName)) {\n        return true;\n      } else if (nodeName === \"body\") {\n        return false;\n      }\n    }\n    return false;\n  }\n\n  function _parseNode(element) {\n    if (IGNORE_URLS_IN.contains(element.nodeName)) {\n      return;\n    }\n\n    if (element.nodeType === wysihtml5.TEXT_NODE && element.data.match(URL_REG_EXP)) {\n      _wrapMatchesInNode(element);\n      return;\n    }\n\n    var childNodes = wysihtml5.lang.array(element.childNodes).get(),\n        childNodesLength = childNodes.length,\n        i = 0;\n\n    for (; i < childNodesLength; i++) {\n      _parseNode(childNodes[i]);\n    }\n\n    return element;\n  }\n\n  wysihtml5.dom.autoLink = autoLink;\n\n  // Reveal url reg exp to the outside\n  wysihtml5.dom.autoLink.URL_REG_EXP = URL_REG_EXP;\n})(wysihtml5);(function (wysihtml5) {\n  var supportsClassList = wysihtml5.browser.supportsClassList(),\n      api = wysihtml5.dom;\n\n  api.addClass = function (element, className) {\n    if (supportsClassList) {\n      return element.classList.add(className);\n    }\n    if (api.hasClass(element, className)) {\n      return;\n    }\n    element.className += \" \" + className;\n  };\n\n  api.removeClass = function (element, className) {\n    if (supportsClassList) {\n      return element.classList.remove(className);\n    }\n\n    element.className = element.className.replace(new RegExp(\"(^|\\\\s+)\" + className + \"(\\\\s+|$)\"), \" \");\n  };\n\n  api.hasClass = function (element, className) {\n    if (supportsClassList) {\n      return element.classList.contains(className);\n    }\n\n    var elementClassName = element.className;\n    return elementClassName.length > 0 && (elementClassName == className || new RegExp(\"(^|\\\\s)\" + className + \"(\\\\s|$)\").test(elementClassName));\n  };\n})(wysihtml5);\nwysihtml5.dom.contains = function () {\n  var documentElement = document.documentElement;\n  if (documentElement.contains) {\n    return function (container, element) {\n      if (element.nodeType !== wysihtml5.ELEMENT_NODE) {\n        element = element.parentNode;\n      }\n      return container !== element && container.contains(element);\n    };\n  } else if (documentElement.compareDocumentPosition) {\n    return function (container, element) {\n      // https://developer.mozilla.org/en/DOM/Node.compareDocumentPosition\n      return !!(container.compareDocumentPosition(element) & 16);\n    };\n  }\n}(); /**\n     * Converts an HTML fragment/element into a unordered/ordered list\n     *\n     * @param {Element} element The element which should be turned into a list\n     * @param {String} listType The list type in which to convert the tree (either \"ul\" or \"ol\")\n     * @return {Element} The created list\n     *\n     * @example\n     *    <!-- Assume the following dom: -->\n     *    <span id=\"pseudo-list\">\n     *      eminem<br>\n     *      dr. dre\n     *      <div>50 Cent</div>\n     *    </span>\n     *\n     *    <script>\n     *      wysihtml5.dom.convertToList(document.getElementById(\"pseudo-list\"), \"ul\");\n     *    </script>\n     *\n     *    <!-- Will result in: -->\n     *    <ul>\n     *      <li>eminem</li>\n     *      <li>dr. dre</li>\n     *      <li>50 Cent</li>\n     *    </ul>\n     */\nwysihtml5.dom.convertToList = function () {\n  function _createListItem(doc, list) {\n    var listItem = doc.createElement(\"li\");\n    list.appendChild(listItem);\n    return listItem;\n  }\n\n  function _createList(doc, type) {\n    return doc.createElement(type);\n  }\n\n  function convertToList(element, listType) {\n    if (element.nodeName === \"UL\" || element.nodeName === \"OL\" || element.nodeName === \"MENU\") {\n      // Already a list\n      return element;\n    }\n\n    var doc = element.ownerDocument,\n        list = _createList(doc, listType),\n        lineBreaks = element.querySelectorAll(\"br\"),\n        lineBreaksLength = lineBreaks.length,\n        childNodes,\n        childNodesLength,\n        childNode,\n        lineBreak,\n        parentNode,\n        isBlockElement,\n        isLineBreak,\n        currentListItem,\n        i;\n\n    // First find <br> at the end of inline elements and move them behind them\n    for (i = 0; i < lineBreaksLength; i++) {\n      lineBreak = lineBreaks[i];\n      while ((parentNode = lineBreak.parentNode) && parentNode !== element && parentNode.lastChild === lineBreak) {\n        if (wysihtml5.dom.getStyle(\"display\").from(parentNode) === \"block\") {\n          parentNode.removeChild(lineBreak);\n          break;\n        }\n        wysihtml5.dom.insert(lineBreak).after(lineBreak.parentNode);\n      }\n    }\n\n    childNodes = wysihtml5.lang.array(element.childNodes).get();\n    childNodesLength = childNodes.length;\n\n    for (i = 0; i < childNodesLength; i++) {\n      currentListItem = currentListItem || _createListItem(doc, list);\n      childNode = childNodes[i];\n      isBlockElement = wysihtml5.dom.getStyle(\"display\").from(childNode) === \"block\";\n      isLineBreak = childNode.nodeName === \"BR\";\n\n      if (isBlockElement) {\n        // Append blockElement to current <li> if empty, otherwise create a new one\n        currentListItem = currentListItem.firstChild ? _createListItem(doc, list) : currentListItem;\n        currentListItem.appendChild(childNode);\n        currentListItem = null;\n        continue;\n      }\n\n      if (isLineBreak) {\n        // Only create a new list item in the next iteration when the current one has already content\n        currentListItem = currentListItem.firstChild ? null : currentListItem;\n        continue;\n      }\n\n      currentListItem.appendChild(childNode);\n    }\n\n    element.parentNode.replaceChild(list, element);\n    return list;\n  }\n\n  return convertToList;\n}(); /**\n     * Copy a set of attributes from one element to another\n     *\n     * @param {Array} attributesToCopy List of attributes which should be copied\n     * @return {Object} Returns an object which offers the \"from\" method which can be invoked with the element where to\n     *    copy the attributes from., this again returns an object which provides a method named \"to\" which can be invoked \n     *    with the element where to copy the attributes to (see example)\n     *\n     * @example\n     *    var textarea    = document.querySelector(\"textarea\"),\n     *        div         = document.querySelector(\"div[contenteditable=true]\"),\n     *        anotherDiv  = document.querySelector(\"div.preview\");\n     *    wysihtml5.dom.copyAttributes([\"spellcheck\", \"value\", \"placeholder\"]).from(textarea).to(div).andTo(anotherDiv);\n     *\n     */\nwysihtml5.dom.copyAttributes = function (attributesToCopy) {\n  return {\n    from: function from(elementToCopyFrom) {\n      return {\n        to: function to(elementToCopyTo) {\n          var attribute,\n              i = 0,\n              length = attributesToCopy.length;\n          for (; i < length; i++) {\n            attribute = attributesToCopy[i];\n            if (typeof elementToCopyFrom[attribute] !== \"undefined\" && elementToCopyFrom[attribute] !== \"\") {\n              elementToCopyTo[attribute] = elementToCopyFrom[attribute];\n            }\n          }\n          return { andTo: arguments.callee };\n        }\n      };\n    }\n  };\n}; /**\n   * Copy a set of styles from one element to another\n   * Please note that this only works properly across browsers when the element from which to copy the styles\n   * is in the dom\n   *\n   * Interesting article on how to copy styles\n   *\n   * @param {Array} stylesToCopy List of styles which should be copied\n   * @return {Object} Returns an object which offers the \"from\" method which can be invoked with the element where to\n   *    copy the styles from., this again returns an object which provides a method named \"to\" which can be invoked \n   *    with the element where to copy the styles to (see example)\n   *\n   * @example\n   *    var textarea    = document.querySelector(\"textarea\"),\n   *        div         = document.querySelector(\"div[contenteditable=true]\"),\n   *        anotherDiv  = document.querySelector(\"div.preview\");\n   *    wysihtml5.dom.copyStyles([\"overflow-y\", \"width\", \"height\"]).from(textarea).to(div).andTo(anotherDiv);\n   *\n   */\n(function (dom) {\n\n  /**\n   * Mozilla, WebKit and Opera recalculate the computed width when box-sizing: boder-box; is set\n   * So if an element has \"width: 200px; -moz-box-sizing: border-box; border: 1px;\" then \n   * its computed css width will be 198px\n   */\n  var BOX_SIZING_PROPERTIES = [\"-webkit-box-sizing\", \"-moz-box-sizing\", \"-ms-box-sizing\", \"box-sizing\"];\n\n  var shouldIgnoreBoxSizingBorderBox = function shouldIgnoreBoxSizingBorderBox(element) {\n    if (hasBoxSizingBorderBox(element)) {\n      return parseInt(dom.getStyle(\"width\").from(element), 10) < element.offsetWidth;\n    }\n    return false;\n  };\n\n  var hasBoxSizingBorderBox = function hasBoxSizingBorderBox(element) {\n    var i = 0,\n        length = BOX_SIZING_PROPERTIES.length;\n    for (; i < length; i++) {\n      if (dom.getStyle(BOX_SIZING_PROPERTIES[i]).from(element) === \"border-box\") {\n        return BOX_SIZING_PROPERTIES[i];\n      }\n    }\n  };\n\n  dom.copyStyles = function (stylesToCopy) {\n    return {\n      from: function from(element) {\n        if (shouldIgnoreBoxSizingBorderBox(element)) {\n          stylesToCopy = wysihtml5.lang.array(stylesToCopy).without(BOX_SIZING_PROPERTIES);\n        }\n\n        var cssText = \"\",\n            length = stylesToCopy.length,\n            i = 0,\n            property;\n        for (; i < length; i++) {\n          property = stylesToCopy[i];\n          cssText += property + \":\" + dom.getStyle(property).from(element) + \";\";\n        }\n\n        return {\n          to: function to(element) {\n            var height_r = /\\;height\\:/;\n            if (cssText.match(height_r) && element) {\n              list = cssText.split(height_r);\n              height = parseInt(list[1], 10);\n              if (element.offsetHeight > height) {\n                cssText = list[0] + 'height:' + element.offsetHeight + 'px;';\n              }\n            }\n            dom.setStyles(cssText).on(element);\n            return { andTo: arguments.callee };\n          }\n        };\n      }\n    };\n  };\n})(wysihtml5.dom); /**\n                   * Event Delegation\n                   *\n                   * @example\n                   *    wysihtml5.dom.delegate(document.body, \"a\", \"click\", function() {\n                   *      // foo\n                   *    });\n                   */\n(function (wysihtml5) {\n\n  wysihtml5.dom.delegate = function (container, selector, eventName, handler) {\n    return wysihtml5.dom.observe(container, eventName, function (event) {\n      var target = event.target,\n          match = wysihtml5.lang.array(container.querySelectorAll(selector));\n\n      while (target && target !== container) {\n        if (match.contains(target)) {\n          handler.call(target, event);\n          break;\n        }\n        target = target.parentNode;\n      }\n    });\n  };\n})(wysihtml5); /**\n               * Returns the given html wrapped in a div element\n               *\n               * Fixing IE's inability to treat unknown elements (HTML5 section, article, ...) correctly\n               * when inserted via innerHTML\n               * \n               * @param {String} html The html which should be wrapped in a dom element\n               * @param {Obejct} [context] Document object of the context the html belongs to\n               *\n               * @example\n               *    wysihtml5.dom.getAsDom(\"<article>foo</article>\");\n               */\nwysihtml5.dom.getAsDom = function () {\n\n  var _innerHTMLShiv = function _innerHTMLShiv(html, context) {\n    var tempElement = context.createElement(\"div\");\n    tempElement.style.display = \"none\";\n    context.body.appendChild(tempElement);\n    // IE throws an exception when trying to insert <frameset></frameset> via innerHTML\n    try {\n      tempElement.innerHTML = html;\n    } catch (e) {}\n    context.body.removeChild(tempElement);\n    return tempElement;\n  };\n\n  /**\n   * Make sure IE supports HTML5 tags, which is accomplished by simply creating one instance of each element\n   */\n  var _ensureHTML5Compatibility = function _ensureHTML5Compatibility(context) {\n    if (context._wysihtml5_supportsHTML5Tags) {\n      return;\n    }\n    for (var i = 0, length = HTML5_ELEMENTS.length; i < length; i++) {\n      context.createElement(HTML5_ELEMENTS[i]);\n    }\n    context._wysihtml5_supportsHTML5Tags = true;\n  };\n\n  /**\n   * List of html5 tags\n   * taken from http://simon.html5.org/html5-elements\n   */\n  var HTML5_ELEMENTS = [\"abbr\", \"article\", \"aside\", \"audio\", \"bdi\", \"canvas\", \"command\", \"datalist\", \"details\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"keygen\", \"mark\", \"meter\", \"nav\", \"output\", \"progress\", \"rp\", \"rt\", \"ruby\", \"svg\", \"section\", \"source\", \"summary\", \"time\", \"track\", \"video\", \"wbr\"];\n\n  return function (html, context) {\n    context = context || document;\n    var tempElement;\n    if ((typeof html === \"undefined\" ? \"undefined\" : _typeof(html)) === \"object\" && html.nodeType) {\n      tempElement = context.createElement(\"div\");\n      tempElement.appendChild(html);\n    } else if (wysihtml5.browser.supportsHTML5Tags(context)) {\n      tempElement = context.createElement(\"div\");\n      tempElement.innerHTML = html;\n    } else {\n      _ensureHTML5Compatibility(context);\n      tempElement = _innerHTMLShiv(html, context);\n    }\n    return tempElement;\n  };\n}(); /**\n     * Walks the dom tree from the given node up until it finds a match\n     * Designed for optimal performance.\n     *\n     * @param {Element} node The from which to check the parent nodes\n     * @param {Object} matchingSet Object to match against (possible properties: nodeName, className, classRegExp)\n     * @param {Number} [levels] How many parents should the function check up from the current node (defaults to 50)\n     * @return {null|Element} Returns the first element that matched the desiredNodeName(s)\n     * @example\n     *    var listElement = wysihtml5.dom.getParentElement(document.querySelector(\"li\"), { nodeName: [\"MENU\", \"UL\", \"OL\"] });\n     *    // ... or ...\n     *    var unorderedListElement = wysihtml5.dom.getParentElement(document.querySelector(\"li\"), { nodeName: \"UL\" });\n     *    // ... or ...\n     *    var coloredElement = wysihtml5.dom.getParentElement(myTextNode, { nodeName: \"SPAN\", className: \"wysiwyg-color-red\", classRegExp: /wysiwyg-color-[a-z]/g });\n     */\nwysihtml5.dom.getParentElement = function () {\n\n  function _isSameNodeName(nodeName, desiredNodeNames) {\n    if (!desiredNodeNames || !desiredNodeNames.length) {\n      return true;\n    }\n\n    if (typeof desiredNodeNames === \"string\") {\n      return nodeName === desiredNodeNames;\n    } else {\n      return wysihtml5.lang.array(desiredNodeNames).contains(nodeName);\n    }\n  }\n\n  function _isElement(node) {\n    return node.nodeType === wysihtml5.ELEMENT_NODE;\n  }\n\n  function _hasClassName(element, className, classRegExp) {\n    var classNames = (element.className || \"\").match(classRegExp) || [];\n    if (!className) {\n      return !!classNames.length;\n    }\n    return classNames[classNames.length - 1] === className;\n  }\n\n  function _getParentElementWithNodeName(node, nodeName, levels) {\n    while (levels-- && node && node.nodeName !== \"BODY\") {\n      if (_isSameNodeName(node.nodeName, nodeName)) {\n        return node;\n      }\n      node = node.parentNode;\n    }\n    return null;\n  }\n\n  function _getParentElementWithNodeNameAndClassName(node, nodeName, className, classRegExp, levels) {\n    while (levels-- && node && node.nodeName !== \"BODY\") {\n      if (_isElement(node) && _isSameNodeName(node.nodeName, nodeName) && _hasClassName(node, className, classRegExp)) {\n        return node;\n      }\n      node = node.parentNode;\n    }\n    return null;\n  }\n\n  return function (node, matchingSet, levels) {\n    levels = levels || 50; // Go max 50 nodes upwards from current node\n    if (matchingSet.className || matchingSet.classRegExp) {\n      return _getParentElementWithNodeNameAndClassName(node, matchingSet.nodeName, matchingSet.className, matchingSet.classRegExp, levels);\n    } else {\n      return _getParentElementWithNodeName(node, matchingSet.nodeName, levels);\n    }\n  };\n}();\n/**\n * Get element's style for a specific css property\n *\n * @param {Element} element The element on which to retrieve the style\n * @param {String} property The CSS property to retrieve (\"float\", \"display\", \"text-align\", ...)\n *\n * @example\n *    wysihtml5.dom.getStyle(\"display\").from(document.body);\n *    // => \"block\"\n */\nwysihtml5.dom.getStyle = function () {\n  var stylePropertyMapping = {\n    \"float\": \"styleFloat\" in document.createElement(\"div\").style ? \"styleFloat\" : \"cssFloat\"\n  },\n      REG_EXP_CAMELIZE = /\\-[a-z]/g;\n\n  function camelize(str) {\n    return str.replace(REG_EXP_CAMELIZE, function (match) {\n      return match.charAt(1).toUpperCase();\n    });\n  }\n\n  return function (property) {\n    return {\n      from: function from(element) {\n        if (element.nodeType !== wysihtml5.ELEMENT_NODE) {\n          return;\n        }\n\n        var doc = element.ownerDocument,\n            camelizedProperty = stylePropertyMapping[property] || camelize(property),\n            style = element.style,\n            currentStyle = element.currentStyle,\n            styleValue = style[camelizedProperty];\n        if (styleValue) {\n          return styleValue;\n        }\n\n        // currentStyle is no standard and only supported by Opera and IE but it has one important advantage over the standard-compliant\n        // window.getComputedStyle, since it returns css property values in their original unit:\n        // If you set an elements width to \"50%\", window.getComputedStyle will give you it's current width in px while currentStyle\n        // gives you the original \"50%\".\n        // Opera supports both, currentStyle and window.getComputedStyle, that's why checking for currentStyle should have higher prio\n        if (currentStyle) {\n          try {\n            return currentStyle[camelizedProperty];\n          } catch (e) {\n            //ie will occasionally fail for unknown reasons. swallowing exception\n          }\n        }\n\n        var win = doc.defaultView || doc.parentWindow,\n            needsOverflowReset = (property === \"height\" || property === \"width\") && element.nodeName === \"TEXTAREA\",\n            originalOverflow,\n            returnValue;\n\n        if (win.getComputedStyle) {\n          // Chrome and Safari both calculate a wrong width and height for textareas when they have scroll bars\n          // therfore we remove and restore the scrollbar and calculate the value in between\n          if (needsOverflowReset) {\n            originalOverflow = style.overflow;\n            style.overflow = \"hidden\";\n          }\n          returnValue = win.getComputedStyle(element, null).getPropertyValue(property);\n          if (needsOverflowReset) {\n            style.overflow = originalOverflow || \"\";\n          }\n          return returnValue;\n        }\n      }\n    };\n  };\n}(); /**\n     * High performant way to check whether an element with a specific tag name is in the given document\n     * Optimized for being heavily executed\n     * Unleashes the power of live node lists\n     *\n     * @param {Object} doc The document object of the context where to check\n     * @param {String} tagName Upper cased tag name\n     * @example\n     *    wysihtml5.dom.hasElementWithTagName(document, \"IMG\");\n     */\nwysihtml5.dom.hasElementWithTagName = function () {\n  var LIVE_CACHE = {},\n      DOCUMENT_IDENTIFIER = 1;\n\n  function _getDocumentIdentifier(doc) {\n    return doc._wysihtml5_identifier || (doc._wysihtml5_identifier = DOCUMENT_IDENTIFIER++);\n  }\n\n  return function (doc, tagName) {\n    var key = _getDocumentIdentifier(doc) + \":\" + tagName,\n        cacheEntry = LIVE_CACHE[key];\n    if (!cacheEntry) {\n      cacheEntry = LIVE_CACHE[key] = doc.getElementsByTagName(tagName);\n    }\n\n    return cacheEntry.length > 0;\n  };\n}(); /**\n     * High performant way to check whether an element with a specific class name is in the given document\n     * Optimized for being heavily executed\n     * Unleashes the power of live node lists\n     *\n     * @param {Object} doc The document object of the context where to check\n     * @param {String} tagName Upper cased tag name\n     * @example\n     *    wysihtml5.dom.hasElementWithClassName(document, \"foobar\");\n     */\n(function (wysihtml5) {\n  var LIVE_CACHE = {},\n      DOCUMENT_IDENTIFIER = 1;\n\n  function _getDocumentIdentifier(doc) {\n    return doc._wysihtml5_identifier || (doc._wysihtml5_identifier = DOCUMENT_IDENTIFIER++);\n  }\n\n  wysihtml5.dom.hasElementWithClassName = function (doc, className) {\n    // getElementsByClassName is not supported by IE<9\n    // but is sometimes mocked via library code (which then doesn't return live node lists)\n    if (!wysihtml5.browser.supportsNativeGetElementsByClassName()) {\n      return !!doc.querySelector(\".\" + className);\n    }\n\n    var key = _getDocumentIdentifier(doc) + \":\" + className,\n        cacheEntry = LIVE_CACHE[key];\n    if (!cacheEntry) {\n      cacheEntry = LIVE_CACHE[key] = doc.getElementsByClassName(className);\n    }\n\n    return cacheEntry.length > 0;\n  };\n})(wysihtml5);\nwysihtml5.dom.insert = function (elementToInsert) {\n  return {\n    after: function after(element) {\n      element.parentNode.insertBefore(elementToInsert, element.nextSibling);\n    },\n\n    before: function before(element) {\n      element.parentNode.insertBefore(elementToInsert, element);\n    },\n\n    into: function into(element) {\n      element.appendChild(elementToInsert);\n    }\n  };\n};wysihtml5.dom.insertCSS = function (rules) {\n  rules = rules.join(\"\\n\");\n\n  return {\n    into: function into(doc) {\n      var head = doc.head || doc.getElementsByTagName(\"head\")[0],\n          styleElement = doc.createElement(\"style\");\n\n      styleElement.type = \"text/css\";\n\n      if (styleElement.styleSheet) {\n        styleElement.styleSheet.cssText = rules;\n      } else {\n        styleElement.appendChild(doc.createTextNode(rules));\n      }\n\n      if (head) {\n        head.appendChild(styleElement);\n      }\n    }\n  };\n}; /**\n   * Method to set dom events\n   *\n   * @example\n   *    wysihtml5.dom.observe(iframe.contentWindow.document.body, [\"focus\", \"blur\"], function() { ... });\n   */\nwysihtml5.dom.observe = function (element, eventNames, handler) {\n  eventNames = typeof eventNames === \"string\" ? [eventNames] : eventNames;\n\n  var handlerWrapper,\n      eventName,\n      i = 0,\n      length = eventNames.length;\n\n  for (; i < length; i++) {\n    eventName = eventNames[i];\n    if (element.addEventListener) {\n      element.addEventListener(eventName, handler, false);\n    } else {\n      handlerWrapper = function handlerWrapper(event) {\n        if (!(\"target\" in event)) {\n          event.target = event.srcElement;\n        }\n        event.preventDefault = event.preventDefault || function () {\n          this.returnValue = false;\n        };\n        event.stopPropagation = event.stopPropagation || function () {\n          this.cancelBubble = true;\n        };\n        handler.call(element, event);\n      };\n      element.attachEvent(\"on\" + eventName, handlerWrapper);\n    }\n  }\n\n  return {\n    stop: function stop() {\n      var eventName,\n          i = 0,\n          length = eventNames.length;\n      for (; i < length; i++) {\n        eventName = eventNames[i];\n        if (element.removeEventListener) {\n          element.removeEventListener(eventName, handler, false);\n        } else {\n          element.detachEvent(\"on\" + eventName, handlerWrapper);\n        }\n      }\n    }\n  };\n};\n/**\n * HTML Sanitizer\n * Rewrites the HTML based on given rules\n *\n * @param {Element|String} elementOrHtml HTML String to be sanitized OR element whose content should be sanitized\n * @param {Object} [rules] List of rules for rewriting the HTML, if there's no rule for an element it will\n *    be converted to a \"span\". Each rule is a key/value pair where key is the tag to convert, and value the\n *    desired substitution.\n * @param {Object} context Document object in which to parse the html, needed to sandbox the parsing\n *\n * @return {Element|String} Depends on the elementOrHtml parameter. When html then the sanitized html as string elsewise the element.\n *\n * @example\n *    var userHTML = '<div id=\"foo\" onclick=\"alert(1);\"><p><font color=\"red\">foo</font><script>alert(1);</script></p></div>';\n *    wysihtml5.dom.parse(userHTML, {\n *      tags {\n *        p:      \"div\",      // Rename p tags to div tags\n *        font:   \"span\"      // Rename font tags to span tags\n *        div:    true,       // Keep them, also possible (same result when passing: \"div\" or true)\n *        script: undefined   // Remove script elements\n *      }\n *    });\n *    // => <div><div><span>foo bar</span></div></div>\n *\n *    var userHTML = '<table><tbody><tr><td>I'm a table!</td></tr></tbody></table>';\n *    wysihtml5.dom.parse(userHTML);\n *    // => '<span><span><span><span>I'm a table!</span></span></span></span>'\n *\n *    var userHTML = '<div>foobar<br>foobar</div>';\n *    wysihtml5.dom.parse(userHTML, {\n *      tags: {\n *        div: undefined,\n *        br:  true\n *      }\n *    });\n *    // => ''\n *\n *    var userHTML = '<div class=\"red\">foo</div><div class=\"pink\">bar</div>';\n *    wysihtml5.dom.parse(userHTML, {\n *      classes: {\n *        red:    1,\n *        green:  1\n *      },\n *      tags: {\n *        div: {\n *          rename_tag:     \"p\"\n *        }\n *      }\n *    });\n *    // => '<p class=\"red\">foo</p><p>bar</p>'\n */\nwysihtml5.dom.parse = function () {\n\n  /**\n   * It's not possible to use a XMLParser/DOMParser as HTML5 is not always well-formed XML\n   * new DOMParser().parseFromString('<img src=\"foo.gif\">') will cause a parseError since the\n   * node isn't closed\n   *\n   * Therefore we've to use the browser's ordinary HTML parser invoked by setting innerHTML.\n   */\n  var NODE_TYPE_MAPPING = {\n    \"1\": _handleElement,\n    \"3\": _handleText\n  },\n\n\n  // Rename unknown tags to this\n  DEFAULT_NODE_NAME = \"span\",\n      WHITE_SPACE_REG_EXP = /\\s+/,\n      defaultRules = { tags: {}, classes: {} },\n      currentRules = {};\n\n  /**\n   * Iterates over all childs of the element, recreates them, appends them into a document fragment\n   * which later replaces the entire body content\n   */\n  function parse(elementOrHtml, rules, context, cleanUp) {\n    wysihtml5.lang.object(currentRules).merge(defaultRules).merge(rules).get();\n\n    context = context || elementOrHtml.ownerDocument || document;\n    var fragment = context.createDocumentFragment(),\n        isString = typeof elementOrHtml === \"string\",\n        element,\n        newNode,\n        firstChild;\n\n    if (isString) {\n      element = wysihtml5.dom.getAsDom(elementOrHtml, context);\n    } else {\n      element = elementOrHtml;\n    }\n\n    while (element.firstChild) {\n      firstChild = element.firstChild;\n      element.removeChild(firstChild);\n      newNode = _convert(firstChild, cleanUp);\n      if (newNode) {\n        fragment.appendChild(newNode);\n      }\n    }\n\n    // Clear element contents\n    element.innerHTML = \"\";\n\n    // Insert new DOM tree\n    element.appendChild(fragment);\n\n    return isString ? wysihtml5.quirks.getCorrectInnerHTML(element) : element;\n  }\n\n  function _convert(oldNode, cleanUp) {\n    var oldNodeType = oldNode.nodeType,\n        oldChilds = oldNode.childNodes,\n        oldChildsLength = oldChilds.length,\n        newNode,\n        method = NODE_TYPE_MAPPING[oldNodeType],\n        i = 0;\n\n    newNode = method && method(oldNode);\n\n    if (!newNode) {\n      return null;\n    }\n\n    for (i = 0; i < oldChildsLength; i++) {\n      newChild = _convert(oldChilds[i], cleanUp);\n      if (newChild) {\n        newNode.appendChild(newChild);\n      }\n    }\n\n    // Cleanup senseless <span> elements\n    if (cleanUp && newNode.childNodes.length <= 1 && newNode.nodeName.toLowerCase() === DEFAULT_NODE_NAME && !newNode.attributes.length) {\n      return newNode.firstChild;\n    }\n\n    return newNode;\n  }\n\n  function _handleElement(oldNode) {\n    var rule,\n        newNode,\n        endTag,\n        tagRules = currentRules.tags,\n        nodeName = oldNode.nodeName.toLowerCase(),\n        scopeName = oldNode.scopeName;\n\n    /**\n     * We already parsed that element\n     * ignore it! (yes, this sometimes happens in IE8 when the html is invalid)\n     */\n    if (oldNode._wysihtml5) {\n      return null;\n    }\n    oldNode._wysihtml5 = 1;\n\n    if (oldNode.className === \"wysihtml5-temp\") {\n      return null;\n    }\n\n    /**\n     * IE is the only browser who doesn't include the namespace in the\n     * nodeName, that's why we have to prepend it by ourselves\n     * scopeName is a proprietary IE feature\n     * read more here http://msdn.microsoft.com/en-us/library/ms534388(v=vs.85).aspx\n     */\n    if (scopeName && scopeName != \"HTML\") {\n      nodeName = scopeName + \":\" + nodeName;\n    }\n\n    /**\n     * Repair node\n     * IE is a bit bitchy when it comes to invalid nested markup which includes unclosed tags\n     * A <p> doesn't need to be closed according HTML4-5 spec, we simply replace it with a <div> to preserve its content and layout\n     */\n    if (\"outerHTML\" in oldNode) {\n      if (!wysihtml5.browser.autoClosesUnclosedTags() && oldNode.nodeName === \"P\" && oldNode.outerHTML.slice(-4).toLowerCase() !== \"</p>\") {\n        nodeName = \"div\";\n      }\n    }\n\n    if (nodeName in tagRules) {\n      rule = tagRules[nodeName];\n      if (!rule || rule.remove) {\n        return null;\n      }\n\n      rule = typeof rule === \"string\" ? { rename_tag: rule } : rule;\n    } else if (oldNode.firstChild) {\n      rule = { rename_tag: DEFAULT_NODE_NAME };\n    } else {\n      // Remove empty unknown elements\n      return null;\n    }\n\n    newNode = oldNode.ownerDocument.createElement(rule.rename_tag || nodeName);\n    _handleAttributes(oldNode, newNode, rule);\n\n    oldNode = null;\n    return newNode;\n  }\n\n  function _handleAttributes(oldNode, newNode, rule) {\n    var attributes = {},\n\n    // fresh new set of attributes to set on newNode\n    setClass = rule.set_class,\n\n    // classes to set\n    addClass = rule.add_class,\n\n    // add classes based on existing attributes\n    setAttributes = rule.set_attributes,\n\n    // attributes to set on the current node\n    checkAttributes = rule.check_attributes,\n\n    // check/convert values of attributes\n    allowedClasses = currentRules.classes,\n        i = 0,\n        classes = [],\n        newClasses = [],\n        newUniqueClasses = [],\n        oldClasses = [],\n        classesLength,\n        newClassesLength,\n        currentClass,\n        newClass,\n        attributeName,\n        newAttributeValue,\n        method;\n\n    if (setAttributes) {\n      attributes = wysihtml5.lang.object(setAttributes).clone();\n    }\n\n    if (checkAttributes) {\n      for (attributeName in checkAttributes) {\n        method = attributeCheckMethods[checkAttributes[attributeName]];\n        if (!method) {\n          continue;\n        }\n        newAttributeValue = method(_getAttribute(oldNode, attributeName));\n        if (typeof newAttributeValue === \"string\") {\n          attributes[attributeName] = newAttributeValue;\n        }\n      }\n    }\n\n    if (setClass) {\n      classes.push(setClass);\n    }\n\n    if (addClass) {\n      for (attributeName in addClass) {\n        method = addClassMethods[addClass[attributeName]];\n        if (!method) {\n          continue;\n        }\n        newClass = method(_getAttribute(oldNode, attributeName));\n        if (typeof newClass === \"string\") {\n          classes.push(newClass);\n        }\n      }\n    }\n\n    // make sure that wysihtml5 temp class doesn't get stripped out\n    allowedClasses[\"_wysihtml5-temp-placeholder\"] = 1;\n\n    // add old classes last\n    oldClasses = oldNode.getAttribute(\"class\");\n    if (oldClasses) {\n      classes = classes.concat(oldClasses.split(WHITE_SPACE_REG_EXP));\n    }\n    classesLength = classes.length;\n    for (; i < classesLength; i++) {\n      currentClass = classes[i];\n      if (allowedClasses[currentClass]) {\n        newClasses.push(currentClass);\n      }\n    }\n\n    // remove duplicate entries and preserve class specificity\n    newClassesLength = newClasses.length;\n    while (newClassesLength--) {\n      currentClass = newClasses[newClassesLength];\n      if (!wysihtml5.lang.array(newUniqueClasses).contains(currentClass)) {\n        newUniqueClasses.unshift(currentClass);\n      }\n    }\n\n    if (newUniqueClasses.length) {\n      attributes[\"class\"] = newUniqueClasses.join(\" \");\n    }\n\n    // set attributes on newNode\n    for (attributeName in attributes) {\n      // Setting attributes can cause a js error in IE under certain circumstances\n      // eg. on a <img> under https when it's new attribute value is non-https\n      // TODO: Investigate this further and check for smarter handling\n      try {\n        newNode.setAttribute(attributeName, attributes[attributeName]);\n      } catch (e) {}\n    }\n\n    // IE8 sometimes loses the width/height attributes when those are set before the \"src\"\n    // so we make sure to set them again\n    if (attributes.src) {\n      if (typeof attributes.width !== \"undefined\") {\n        newNode.setAttribute(\"width\", attributes.width);\n      }\n      if (typeof attributes.height !== \"undefined\") {\n        newNode.setAttribute(\"height\", attributes.height);\n      }\n    }\n  }\n\n  /**\n   * IE gives wrong results for hasAttribute/getAttribute, for example:\n   *    var td = document.createElement(\"td\");\n   *    td.getAttribute(\"rowspan\"); // => \"1\" in IE\n   *\n   * Therefore we have to check the element's outerHTML for the attribute\n   */\n  var HAS_GET_ATTRIBUTE_BUG = !wysihtml5.browser.supportsGetAttributeCorrectly();\n  function _getAttribute(node, attributeName) {\n    attributeName = attributeName.toLowerCase();\n    var nodeName = node.nodeName;\n    if (nodeName == \"IMG\" && attributeName == \"src\" && _isLoadedImage(node) === true) {\n      // Get 'src' attribute value via object property since this will always contain the\n      // full absolute url (http://...)\n      // this fixes a very annoying bug in firefox (ver 3.6 & 4) and IE 8 where images copied from the same host\n      // will have relative paths, which the sanitizer strips out (see attributeCheckMethods.url)\n      return node.src;\n    } else if (HAS_GET_ATTRIBUTE_BUG && \"outerHTML\" in node) {\n      // Don't trust getAttribute/hasAttribute in IE 6-8, instead check the element's outerHTML\n      var outerHTML = node.outerHTML.toLowerCase(),\n\n\n      // TODO: This might not work for attributes without value: <input disabled>\n      hasAttribute = outerHTML.indexOf(\" \" + attributeName + \"=\") != -1;\n\n      return hasAttribute ? node.getAttribute(attributeName) : null;\n    } else {\n      return node.getAttribute(attributeName);\n    }\n  }\n\n  /**\n   * Check whether the given node is a proper loaded image\n   * FIXME: Returns undefined when unknown (Chrome, Safari)\n   */\n  function _isLoadedImage(node) {\n    try {\n      return node.complete && !node.mozMatchesSelector(\":-moz-broken\");\n    } catch (e) {\n      if (node.complete && node.readyState === \"complete\") {\n        return true;\n      }\n    }\n  }\n\n  function _handleText(oldNode) {\n    return oldNode.ownerDocument.createTextNode(oldNode.data);\n  }\n\n  // ------------ attribute checks ------------ \\\\\n  var attributeCheckMethods = {\n    url: function () {\n      var REG_EXP = /^https?:\\/\\//i;\n      return function (attributeValue) {\n        if (!attributeValue || !attributeValue.match(REG_EXP)) {\n          return null;\n        }\n        return attributeValue.replace(REG_EXP, function (match) {\n          return match.toLowerCase();\n        });\n      };\n    }(),\n\n    alt: function () {\n      var REG_EXP = /[^ a-z0-9_\\-]/gi;\n      return function (attributeValue) {\n        if (!attributeValue) {\n          return \"\";\n        }\n        return attributeValue.replace(REG_EXP, \"\");\n      };\n    }(),\n\n    numbers: function () {\n      var REG_EXP = /\\D/g;\n      return function (attributeValue) {\n        attributeValue = (attributeValue || \"\").replace(REG_EXP, \"\");\n        return attributeValue || null;\n      };\n    }()\n  };\n\n  // ------------ class converter (converts an html attribute to a class name) ------------ \\\\\n  var addClassMethods = {\n    align_img: function () {\n      var mapping = {\n        left: \"wysiwyg-float-left\",\n        right: \"wysiwyg-float-right\"\n      };\n      return function (attributeValue) {\n        return mapping[String(attributeValue).toLowerCase()];\n      };\n    }(),\n\n    align_text: function () {\n      var mapping = {\n        left: \"wysiwyg-text-align-left\",\n        right: \"wysiwyg-text-align-right\",\n        center: \"wysiwyg-text-align-center\",\n        justify: \"wysiwyg-text-align-justify\"\n      };\n      return function (attributeValue) {\n        return mapping[String(attributeValue).toLowerCase()];\n      };\n    }(),\n\n    clear_br: function () {\n      var mapping = {\n        left: \"wysiwyg-clear-left\",\n        right: \"wysiwyg-clear-right\",\n        both: \"wysiwyg-clear-both\",\n        all: \"wysiwyg-clear-both\"\n      };\n      return function (attributeValue) {\n        return mapping[String(attributeValue).toLowerCase()];\n      };\n    }(),\n\n    size_font: function () {\n      var mapping = {\n        \"1\": \"wysiwyg-font-size-xx-small\",\n        \"2\": \"wysiwyg-font-size-small\",\n        \"3\": \"wysiwyg-font-size-medium\",\n        \"4\": \"wysiwyg-font-size-large\",\n        \"5\": \"wysiwyg-font-size-x-large\",\n        \"6\": \"wysiwyg-font-size-xx-large\",\n        \"7\": \"wysiwyg-font-size-xx-large\",\n        \"-\": \"wysiwyg-font-size-smaller\",\n        \"+\": \"wysiwyg-font-size-larger\"\n      };\n      return function (attributeValue) {\n        return mapping[String(attributeValue).charAt(0)];\n      };\n    }()\n  };\n\n  return parse;\n}(); /**\n     * Checks for empty text node childs and removes them\n     *\n     * @param {Element} node The element in which to cleanup\n     * @example\n     *    wysihtml5.dom.removeEmptyTextNodes(element);\n     */\nwysihtml5.dom.removeEmptyTextNodes = function (node) {\n  var childNode,\n      childNodes = wysihtml5.lang.array(node.childNodes).get(),\n      childNodesLength = childNodes.length,\n      i = 0;\n  for (; i < childNodesLength; i++) {\n    childNode = childNodes[i];\n    if (childNode.nodeType === wysihtml5.TEXT_NODE && childNode.data === \"\") {\n      childNode.parentNode.removeChild(childNode);\n    }\n  }\n};\n/**\n * Renames an element (eg. a <div> to a <p>) and keeps its childs\n *\n * @param {Element} element The list element which should be renamed\n * @param {Element} newNodeName The desired tag name\n *\n * @example\n *    <!-- Assume the following dom: -->\n *    <ul id=\"list\">\n *      <li>eminem</li>\n *      <li>dr. dre</li>\n *      <li>50 Cent</li>\n *    </ul>\n *\n *    <script>\n *      wysihtml5.dom.renameElement(document.getElementById(\"list\"), \"ol\");\n *    </script>\n *\n *    <!-- Will result in: -->\n *    <ol>\n *      <li>eminem</li>\n *      <li>dr. dre</li>\n *      <li>50 Cent</li>\n *    </ol>\n */\nwysihtml5.dom.renameElement = function (element, newNodeName) {\n  var newElement = element.ownerDocument.createElement(newNodeName),\n      firstChild;\n  while (firstChild = element.firstChild) {\n    newElement.appendChild(firstChild);\n  }\n  wysihtml5.dom.copyAttributes([\"align\", \"className\"]).from(element).to(newElement);\n  element.parentNode.replaceChild(newElement, element);\n  return newElement;\n}; /**\n   * Takes an element, removes it and replaces it with it's childs\n   * \n   * @param {Object} node The node which to replace with it's child nodes\n   * @example\n   *    <div id=\"foo\">\n   *      <span>hello</span>\n   *    </div>\n   *    <script>\n   *      // Remove #foo and replace with it's children\n   *      wysihtml5.dom.replaceWithChildNodes(document.getElementById(\"foo\"));\n   *    </script>\n   */\nwysihtml5.dom.replaceWithChildNodes = function (node) {\n  if (!node.parentNode) {\n    return;\n  }\n\n  if (!node.firstChild) {\n    node.parentNode.removeChild(node);\n    return;\n  }\n\n  var fragment = node.ownerDocument.createDocumentFragment();\n  while (node.firstChild) {\n    fragment.appendChild(node.firstChild);\n  }\n  node.parentNode.replaceChild(fragment, node);\n  node = fragment = null;\n};\n/**\n * Unwraps an unordered/ordered list\n *\n * @param {Element} element The list element which should be unwrapped\n *\n * @example\n *    <!-- Assume the following dom: -->\n *    <ul id=\"list\">\n *      <li>eminem</li>\n *      <li>dr. dre</li>\n *      <li>50 Cent</li>\n *    </ul>\n *\n *    <script>\n *      wysihtml5.dom.resolveList(document.getElementById(\"list\"));\n *    </script>\n *\n *    <!-- Will result in: -->\n *    eminem<br>\n *    dr. dre<br>\n *    50 Cent<br>\n */\n(function (dom) {\n  function _isBlockElement(node) {\n    return dom.getStyle(\"display\").from(node) === \"block\";\n  }\n\n  function _isLineBreak(node) {\n    return node.nodeName === \"BR\";\n  }\n\n  function _appendLineBreak(element) {\n    var lineBreak = element.ownerDocument.createElement(\"br\");\n    element.appendChild(lineBreak);\n  }\n\n  function resolveList(list) {\n    if (list.nodeName !== \"MENU\" && list.nodeName !== \"UL\" && list.nodeName !== \"OL\") {\n      return;\n    }\n\n    var doc = list.ownerDocument,\n        fragment = doc.createDocumentFragment(),\n        previousSibling = list.previousElementSibling || list.previousSibling,\n        firstChild,\n        lastChild,\n        isLastChild,\n        shouldAppendLineBreak,\n        listItem;\n\n    if (previousSibling && !_isBlockElement(previousSibling)) {\n      _appendLineBreak(fragment);\n    }\n\n    while (listItem = list.firstChild) {\n      lastChild = listItem.lastChild;\n      while (firstChild = listItem.firstChild) {\n        isLastChild = firstChild === lastChild;\n        // This needs to be done before appending it to the fragment, as it otherwise will loose style information\n        shouldAppendLineBreak = isLastChild && !_isBlockElement(firstChild) && !_isLineBreak(firstChild);\n        fragment.appendChild(firstChild);\n        if (shouldAppendLineBreak) {\n          _appendLineBreak(fragment);\n        }\n      }\n\n      listItem.parentNode.removeChild(listItem);\n    }\n    list.parentNode.replaceChild(fragment, list);\n  }\n\n  dom.resolveList = resolveList;\n})(wysihtml5.dom); /**\n                   * Sandbox for executing javascript, parsing css styles and doing dom operations in a secure way\n                   *\n                   * Browser Compatibility:\n                   *  - Secure in MSIE 6+, but only when the user hasn't made changes to his security level \"restricted\"\n                   *  - Partially secure in other browsers (Firefox, Opera, Safari, Chrome, ...)\n                   *\n                   * Please note that this class can't benefit from the HTML5 sandbox attribute for the following reasons:\n                   *    - sandboxing doesn't work correctly with inlined content (src=\"javascript:'<html>...</html>'\")\n                   *    - sandboxing of physical documents causes that the dom isn't accessible anymore from the outside (iframe.contentWindow, ...)\n                   *    - setting the \"allow-same-origin\" flag would fix that, but then still javascript and dom events refuse to fire\n                   *    - therefore the \"allow-scripts\" flag is needed, which then would deactivate any security, as the js executed inside the iframe\n                   *      can do anything as if the sandbox attribute wasn't set\n                   *\n                   * @param {Function} [readyCallback] Method that gets invoked when the sandbox is ready\n                   * @param {Object} [config] Optional parameters\n                   *\n                   * @example\n                   *    new wysihtml5.dom.Sandbox(function(sandbox) {\n                   *      sandbox.getWindow().document.body.innerHTML = '<img src=foo.gif onerror=\"alert(document.cookie)\">';\n                   *    });\n                   */\n(function (wysihtml5) {\n  var /**\n       * Default configuration\n       */\n  doc = document,\n\n\n  /**\n   * Properties to unset/protect on the window object\n   */\n  windowProperties = [\"parent\", \"top\", \"opener\", \"frameElement\", \"frames\", \"localStorage\", \"globalStorage\", \"sessionStorage\", \"indexedDB\"],\n\n\n  /**\n   * Properties on the window object which are set to an empty function\n   */\n  windowProperties2 = [\"open\", \"close\", \"openDialog\", \"showModalDialog\", \"alert\", \"confirm\", \"prompt\", \"openDatabase\", \"postMessage\", \"XMLHttpRequest\", \"XDomainRequest\"],\n\n\n  /**\n   * Properties to unset/protect on the document object\n   */\n  documentProperties = [\"referrer\", \"write\", \"open\", \"close\"];\n\n  wysihtml5.dom.Sandbox = Base.extend(\n  /** @scope wysihtml5.dom.Sandbox.prototype */{\n\n    constructor: function constructor(readyCallback, config) {\n      this.callback = readyCallback || wysihtml5.EMPTY_FUNCTION;\n      this.config = wysihtml5.lang.object({}).merge(config).get();\n      this.iframe = this._createIframe();\n    },\n\n    insertInto: function insertInto(element) {\n      if (typeof element === \"string\") {\n        element = doc.getElementById(element);\n      }\n\n      element.appendChild(this.iframe);\n    },\n\n    getIframe: function getIframe() {\n      return this.iframe;\n    },\n\n    getWindow: function getWindow() {\n      this._readyError();\n    },\n\n    getDocument: function getDocument() {\n      this._readyError();\n    },\n\n    destroy: function destroy() {\n      var iframe = this.getIframe();\n      iframe.parentNode.removeChild(iframe);\n    },\n\n    _readyError: function _readyError() {\n      throw new Error(\"wysihtml5.Sandbox: Sandbox iframe isn't loaded yet\");\n    },\n\n    /**\n     * Creates the sandbox iframe\n     *\n     * Some important notes:\n     *  - We can't use HTML5 sandbox for now:\n     *    setting it causes that the iframe's dom can't be accessed from the outside\n     *    Therefore we need to set the \"allow-same-origin\" flag which enables accessing the iframe's dom\n     *    But then there's another problem, DOM events (focus, blur, change, keypress, ...) aren't fired.\n     *    In order to make this happen we need to set the \"allow-scripts\" flag.\n     *    A combination of allow-scripts and allow-same-origin is almost the same as setting no sandbox attribute at all.\n     *  - Chrome & Safari, doesn't seem to support sandboxing correctly when the iframe's html is inlined (no physical document)\n     *  - IE needs to have the security=\"restricted\" attribute set before the iframe is \n     *    inserted into the dom tree\n     *  - Believe it or not but in IE \"security\" in document.createElement(\"iframe\") is false, even\n     *    though it supports it\n     *  - When an iframe has security=\"restricted\", in IE eval() & execScript() don't work anymore\n     *  - IE doesn't fire the onload event when the content is inlined in the src attribute, therefore we rely\n     *    on the onreadystatechange event\n     */\n    _createIframe: function _createIframe() {\n      var that = this,\n          iframe = doc.createElement(\"iframe\");\n      iframe.className = \"wysihtml5-sandbox\";\n      wysihtml5.dom.setAttributes({\n        \"security\": \"restricted\",\n        \"allowtransparency\": \"true\",\n        \"frameborder\": 0,\n        \"width\": 0,\n        \"height\": 0,\n        \"marginwidth\": 0,\n        \"marginheight\": 0\n      }).on(iframe);\n\n      // Setting the src like this prevents ssl warnings in IE6\n      if (wysihtml5.browser.throwsMixedContentWarningWhenIframeSrcIsEmpty()) {\n        iframe.src = \"javascript:'<html></html>'\";\n      }\n\n      iframe.onload = function () {\n        iframe.onreadystatechange = iframe.onload = null;\n        that._onLoadIframe(iframe);\n      };\n\n      iframe.onreadystatechange = function () {\n        if (/loaded|complete/.test(iframe.readyState)) {\n          iframe.onreadystatechange = iframe.onload = null;\n          that._onLoadIframe(iframe);\n        }\n      };\n\n      return iframe;\n    },\n\n    /**\n     * Callback for when the iframe has finished loading\n     */\n    _onLoadIframe: function _onLoadIframe(iframe) {\n      // don't resume when the iframe got unloaded (eg. by removing it from the dom)\n      if (!wysihtml5.dom.contains(doc.documentElement, iframe)) {\n        return;\n      }\n\n      var that = this,\n          iframeWindow = iframe.contentWindow,\n          iframeDocument = iframe.contentWindow.document,\n          charset = doc.characterSet || doc.charset || \"utf-8\",\n          sandboxHtml = this._getHtml({\n        charset: charset,\n        stylesheets: this.config.stylesheets\n      });\n\n      // Create the basic dom tree including proper DOCTYPE and charset\n      iframeDocument.open(\"text/html\", \"replace\");\n      iframeDocument.write(sandboxHtml);\n      iframeDocument.close();\n\n      this.getWindow = function () {\n        return iframe.contentWindow;\n      };\n      this.getDocument = function () {\n        return iframe.contentWindow.document;\n      };\n\n      // Catch js errors and pass them to the parent's onerror event\n      // addEventListener(\"error\") doesn't work properly in some browsers\n      // TODO: apparently this doesn't work in IE9!\n      iframeWindow.onerror = function (errorMessage, fileName, lineNumber) {\n        throw new Error(\"wysihtml5.Sandbox: \" + errorMessage, fileName, lineNumber);\n      };\n\n      if (!wysihtml5.browser.supportsSandboxedIframes()) {\n        // Unset a bunch of sensitive variables\n        // Please note: This isn't hack safe!  \n        // It more or less just takes care of basic attacks and prevents accidental theft of sensitive information\n        // IE is secure though, which is the most important thing, since IE is the only browser, who\n        // takes over scripts & styles into contentEditable elements when copied from external websites\n        // or applications (Microsoft Word, ...)\n        var i, length;\n        for (i = 0, length = windowProperties.length; i < length; i++) {\n          this._unset(iframeWindow, windowProperties[i]);\n        }\n        for (i = 0, length = windowProperties2.length; i < length; i++) {\n          this._unset(iframeWindow, windowProperties2[i], wysihtml5.EMPTY_FUNCTION);\n        }\n        for (i = 0, length = documentProperties.length; i < length; i++) {\n          this._unset(iframeDocument, documentProperties[i]);\n        }\n        // This doesn't work in Safari 5 \n        // See http://stackoverflow.com/questions/992461/is-it-possible-to-override-document-cookie-in-webkit\n        this._unset(iframeDocument, \"cookie\", \"\", true);\n      }\n\n      this.loaded = true;\n\n      // Trigger the callback\n      setTimeout(function () {\n        that.callback(that);\n      }, 0);\n    },\n\n    _getHtml: function _getHtml(templateVars) {\n      var stylesheets = templateVars.stylesheets,\n          html = \"\",\n          i = 0,\n          length;\n      stylesheets = typeof stylesheets === \"string\" ? [stylesheets] : stylesheets;\n      if (stylesheets) {\n        length = stylesheets.length;\n        for (; i < length; i++) {\n          html += '<link rel=\"stylesheet\" href=\"' + stylesheets[i] + '\">';\n        }\n      }\n      templateVars.stylesheets = html;\n\n      return wysihtml5.lang.string('<!DOCTYPE html><html><head>' + '<meta charset=\"#{charset}\">#{stylesheets}</head>' + '<body></body></html>').interpolate(templateVars);\n    },\n\n    /**\n     * Method to unset/override existing variables\n     * @example\n     *    // Make cookie unreadable and unwritable\n     *    this._unset(document, \"cookie\", \"\", true);\n     */\n    _unset: function _unset(object, property, value, setter) {\n      try {\n        object[property] = value;\n      } catch (e) {}\n\n      try {\n        object.__defineGetter__(property, function () {\n          return value;\n        });\n      } catch (e) {}\n      if (setter) {\n        try {\n          object.__defineSetter__(property, function () {});\n        } catch (e) {}\n      }\n\n      if (!wysihtml5.browser.crashesWhenDefineProperty(property)) {\n        try {\n          var config = {\n            get: function get() {\n              return value;\n            }\n          };\n          if (setter) {\n            config.set = function () {};\n          }\n          Object.defineProperty(object, property, config);\n        } catch (e) {}\n      }\n    }\n  });\n})(wysihtml5);\n(function () {\n  var mapping = {\n    \"className\": \"class\"\n  };\n  wysihtml5.dom.setAttributes = function (attributes) {\n    return {\n      on: function on(element) {\n        for (var i in attributes) {\n          element.setAttribute(mapping[i] || i, attributes[i]);\n        }\n      }\n    };\n  };\n})();wysihtml5.dom.setStyles = function (styles) {\n  return {\n    on: function on(element) {\n      var style = element.style;\n      if (typeof styles === \"string\") {\n        style.cssText += \";\" + styles;\n        return;\n      }\n      for (var i in styles) {\n        if (i === \"float\") {\n          style.cssFloat = styles[i];\n          style.styleFloat = styles[i];\n        } else {\n          style[i] = styles[i];\n        }\n      }\n    }\n  };\n}; /**\n   * Simulate HTML5 placeholder attribute\n   *\n   * Needed since\n   *    - div[contentEditable] elements don't support it\n   *    - older browsers (such as IE8 and Firefox 3.6) don't support it at all\n   *\n   * @param {Object} parent Instance of main wysihtml5.Editor class\n   * @param {Element} view Instance of wysihtml5.views.* class\n   * @param {String} placeholderText\n   *\n   * @example\n   *    wysihtml.dom.simulatePlaceholder(this, composer, \"Foobar\");\n   */\n(function (dom) {\n  dom.simulatePlaceholder = function (editor, view, placeholderText) {\n    var CLASS_NAME = \"placeholder\",\n        unset = function unset() {\n      if (view.hasPlaceholderSet()) {\n        view.clear();\n      }\n      dom.removeClass(view.element, CLASS_NAME);\n    },\n        set = function set() {\n      if (view.isEmpty()) {\n        view.setValue(placeholderText);\n        dom.addClass(view.element, CLASS_NAME);\n      }\n    };\n\n    editor.observe(\"set_placeholder\", set).observe(\"unset_placeholder\", unset).observe(\"focus:composer\", unset).observe(\"paste:composer\", unset).observe(\"blur:composer\", set);\n\n    set();\n  };\n})(wysihtml5.dom);\n(function (dom) {\n  var documentElement = document.documentElement;\n  if (\"textContent\" in documentElement) {\n    dom.setTextContent = function (element, text) {\n      element.textContent = text;\n    };\n\n    dom.getTextContent = function (element) {\n      return element.textContent;\n    };\n  } else if (\"innerText\" in documentElement) {\n    dom.setTextContent = function (element, text) {\n      element.innerText = text;\n    };\n\n    dom.getTextContent = function (element) {\n      return element.innerText;\n    };\n  } else {\n    dom.setTextContent = function (element, text) {\n      element.nodeValue = text;\n    };\n\n    dom.getTextContent = function (element) {\n      return element.nodeValue;\n    };\n  }\n})(wysihtml5.dom);\n\n/**\n * Fix most common html formatting misbehaviors of browsers implementation when inserting\n * content via copy & paste contentEditable\n *\n * @author Christopher Blum\n */\nwysihtml5.quirks.cleanPastedHTML = function () {\n  // TODO: We probably need more rules here\n  var defaultRules = {\n    // When pasting underlined links <a> into a contentEditable, IE thinks, it has to insert <u> to keep the styling\n    \"a u\": wysihtml5.dom.replaceWithChildNodes\n  };\n\n  function cleanPastedHTML(elementOrHtml, rules, context) {\n    rules = rules || defaultRules;\n    context = context || elementOrHtml.ownerDocument || document;\n\n    var element,\n        isString = typeof elementOrHtml === \"string\",\n        method,\n        matches,\n        matchesLength,\n        i,\n        j = 0;\n    if (isString) {\n      element = wysihtml5.dom.getAsDom(elementOrHtml, context);\n    } else {\n      element = elementOrHtml;\n    }\n    if (element.querySelectorAll) {\n      element.innerHTML = element.innerHTML.replace(/\\n/g, '</br>');\n      var els = element.querySelectorAll('style');\n      for (var i = 0; i < els.length; i++) {\n        var el = els[i];\n        el.parentElement.removeChild(el);\n      }\n      var divs = element.querySelectorAll('div');\n      for (var i = 0; i < divs.length; i++) {\n        var div = divs[i];\n        var new_div = document.createElement('p');\n        new_div.innerText = div.innerText;\n        div.replaceWith(new_div);\n      }\n      var p_els = element.querySelectorAll('p');\n      for (var i = 0; i < p_els.length; i++) {\n        var el = p_els[i];\n        if (!$.trim(el.innerText).length) {\n          el.parentElement.removeChild(el);\n        }\n      }\n      var br_els = element.querySelectorAll('br');\n      var i = 0;\n      while (i < br_els.length - 1) {\n        var br = br_els[i];\n        while (br.nextSibling == br_els[i + 1]) {\n          var el = br_els[i + 1];\n          el.parentElement.removeChild(el);\n          i++;\n        }\n        i++;\n      }\n      for (var i = 0; i < br_els.length - 1; i++) {\n        br_els[i];\n      }\n    }\n\n    for (i in rules) {\n      matches = element.querySelectorAll(i);\n      method = rules[i];\n      matchesLength = matches.length;\n      for (; j < matchesLength; j++) {\n        method(matches[j]);\n      }\n    }\n\n    matches = elementOrHtml = rules = null;\n\n    return isString ? element.innerHTML : element;\n  }\n\n  return cleanPastedHTML;\n}(); /**\n     * IE and Opera leave an empty paragraph in the contentEditable element after clearing it\n     *\n     * @param {Object} contentEditableElement The contentEditable element to observe for clearing events\n     * @exaple\n     *    wysihtml5.quirks.ensureProperClearing(myContentEditableElement);\n     */\n(function (wysihtml5) {\n  var dom = wysihtml5.dom;\n\n  wysihtml5.quirks.ensureProperClearing = function () {\n    var clearIfNecessary = function clearIfNecessary(event) {\n      var element = this;\n      setTimeout(function () {\n        var innerHTML = element.innerHTML.toLowerCase();\n        if (innerHTML == \"<p>&nbsp;</p>\" || innerHTML == \"<p>&nbsp;</p><p>&nbsp;</p>\") {\n          element.innerHTML = \"\";\n        }\n      }, 0);\n    };\n\n    return function (composer) {\n      dom.observe(composer.element, [\"cut\", \"keydown\"], clearIfNecessary);\n    };\n  }();\n\n  /**\n   * In Opera when the caret is in the first and only item of a list (<ul><li>|</li></ul>) and the list is the first child of the contentEditable element, it's impossible to delete the list by hitting backspace\n   *\n   * @param {Object} contentEditableElement The contentEditable element to observe for clearing events\n   * @exaple\n   *    wysihtml5.quirks.ensureProperClearing(myContentEditableElement);\n   */\n  wysihtml5.quirks.ensureProperClearingOfLists = function () {\n    var ELEMENTS_THAT_CONTAIN_LI = [\"OL\", \"UL\", \"MENU\"];\n\n    var clearIfNecessary = function clearIfNecessary(element, contentEditableElement) {\n      if (!contentEditableElement.firstChild || !wysihtml5.lang.array(ELEMENTS_THAT_CONTAIN_LI).contains(contentEditableElement.firstChild.nodeName)) {\n        return;\n      }\n\n      var list = dom.getParentElement(element, { nodeName: ELEMENTS_THAT_CONTAIN_LI });\n      if (!list) {\n        return;\n      }\n\n      var listIsFirstChildOfContentEditable = list == contentEditableElement.firstChild;\n      if (!listIsFirstChildOfContentEditable) {\n        return;\n      }\n\n      var hasOnlyOneListItem = list.childNodes.length <= 1;\n      if (!hasOnlyOneListItem) {\n        return;\n      }\n\n      var onlyListItemIsEmpty = list.firstChild ? list.firstChild.innerHTML === \"\" : true;\n      if (!onlyListItemIsEmpty) {\n        return;\n      }\n\n      list.parentNode.removeChild(list);\n    };\n\n    return function (composer) {\n      dom.observe(composer.element, \"keydown\", function (event) {\n        if (event.keyCode !== wysihtml5.BACKSPACE_KEY) {\n          return;\n        }\n\n        var element = composer.selection.getSelectedNode();\n        clearIfNecessary(element, composer.element);\n      });\n    };\n  }();\n})(wysihtml5);\n// See https://bugzilla.mozilla.org/show_bug.cgi?id=664398\n//\n// In Firefox this:\n//      var d = document.createElement(\"div\");\n//      d.innerHTML ='<a href=\"~\"></a>';\n//      d.innerHTML;\n// will result in:\n//      <a href=\"%7E\"></a>\n// which is wrong\n(function (wysihtml5) {\n  var TILDE_ESCAPED = \"%7E\";\n  wysihtml5.quirks.getCorrectInnerHTML = function (element) {\n    var innerHTML = element.innerHTML;\n    if (innerHTML.indexOf(TILDE_ESCAPED) === -1) {\n      return innerHTML;\n    }\n\n    var elementsWithTilde = element.querySelectorAll(\"[href*='~'], [src*='~']\"),\n        url,\n        urlToSearch,\n        length,\n        i;\n    for (i = 0, length = elementsWithTilde.length; i < length; i++) {\n      url = elementsWithTilde[i].href || elementsWithTilde[i].src;\n      urlToSearch = wysihtml5.lang.string(url).replace(\"~\").by(TILDE_ESCAPED);\n      innerHTML = wysihtml5.lang.string(innerHTML).replace(urlToSearch).by(url);\n    }\n    return innerHTML;\n  };\n})(wysihtml5); /**\n               * Some browsers don't insert line breaks when hitting return in a contentEditable element\n               *    - Opera & IE insert new <p> on return\n               *    - Chrome & Safari insert new <div> on return\n               *    - Firefox inserts <br> on return (yippie!)\n               *\n               * @param {Element} element\n               *\n               * @example\n               *    wysihtml5.quirks.insertLineBreakOnReturn(element);\n               */\n(function (wysihtml5) {\n  var dom = wysihtml5.dom,\n      USE_NATIVE_LINE_BREAK_WHEN_CARET_INSIDE_TAGS = [\"LI\", \"P\", \"H1\", \"H2\", \"H3\", \"H4\", \"H5\", \"H6\"],\n      LIST_TAGS = [\"UL\", \"OL\", \"MENU\"];\n\n  wysihtml5.quirks.insertLineBreakOnReturn = function (composer) {\n    function unwrap(selectedNode) {\n      var parentElement = dom.getParentElement(selectedNode, { nodeName: [\"P\", \"DIV\"] }, 2);\n      if (!parentElement) {\n        return;\n      }\n\n      var invisibleSpace = document.createTextNode(wysihtml5.INVISIBLE_SPACE);\n      dom.insert(invisibleSpace).before(parentElement);\n      dom.replaceWithChildNodes(parentElement);\n      composer.selection.selectNode(invisibleSpace);\n    }\n\n    function keyDown(event) {\n      var keyCode = event.keyCode;\n      if (event.shiftKey || keyCode !== wysihtml5.ENTER_KEY && keyCode !== wysihtml5.BACKSPACE_KEY) {\n        return;\n      }\n\n      var element = event.target,\n          selectedNode = composer.selection.getSelectedNode(),\n          blockElement = dom.getParentElement(selectedNode, { nodeName: USE_NATIVE_LINE_BREAK_WHEN_CARET_INSIDE_TAGS }, 4);\n      if (blockElement) {\n        // Some browsers create <p> elements after leaving a list\n        // check after keydown of backspace and return whether a <p> got inserted and unwrap it\n        if (blockElement.nodeName === \"LI\" && (keyCode === wysihtml5.ENTER_KEY || keyCode === wysihtml5.BACKSPACE_KEY)) {\n          setTimeout(function () {\n            var selectedNode = composer.selection.getSelectedNode(),\n                list,\n                div;\n            if (!selectedNode) {\n              return;\n            }\n\n            list = dom.getParentElement(selectedNode, {\n              nodeName: LIST_TAGS\n            }, 2);\n\n            if (list) {\n              return;\n            }\n\n            unwrap(selectedNode);\n          }, 0);\n        } else if (blockElement.nodeName.match(/H[1-6]/) && keyCode === wysihtml5.ENTER_KEY) {\n          setTimeout(function () {\n            unwrap(composer.selection.getSelectedNode());\n          }, 0);\n        }\n        return;\n      }\n\n      if (keyCode === wysihtml5.ENTER_KEY && !wysihtml5.browser.insertsLineBreaksOnReturn()) {\n        composer.commands.exec(\"insertLineBreak\");\n        event.preventDefault();\n      }\n    }\n\n    // keypress doesn't fire when you hit backspace\n    dom.observe(composer.element.ownerDocument, \"keydown\", keyDown);\n  };\n})(wysihtml5); /**\n               * Force rerendering of a given element\n               * Needed to fix display misbehaviors of IE\n               *\n               * @param {Element} element The element object which needs to be rerendered\n               * @example\n               *    wysihtml5.quirks.redraw(document.body);\n               */\n(function (wysihtml5) {\n  var CLASS_NAME = \"wysihtml5-quirks-redraw\";\n\n  wysihtml5.quirks.redraw = function (element) {\n    wysihtml5.dom.addClass(element, CLASS_NAME);\n    wysihtml5.dom.removeClass(element, CLASS_NAME);\n\n    // Following hack is needed for firefox to make sure that image resize handles are properly removed\n    try {\n      var doc = element.ownerDocument;\n      doc.execCommand(\"italic\", false, null);\n      doc.execCommand(\"italic\", false, null);\n    } catch (e) {}\n  };\n})(wysihtml5); /**\n               * Selection API\n               *\n               * @example\n               *    var selection = new wysihtml5.Selection(editor);\n               */\n(function (wysihtml5) {\n  var dom = wysihtml5.dom;\n\n  function _getCumulativeOffsetTop(element) {\n    var top = 0;\n    if (element.parentNode) {\n      do {\n        top += element.offsetTop || 0;\n        element = element.offsetParent;\n      } while (element);\n    }\n    return top;\n  }\n\n  wysihtml5.Selection = Base.extend(\n  /** @scope wysihtml5.Selection.prototype */{\n    constructor: function constructor(editor) {\n      // Make sure that our external range library is initialized\n      window.rangy.init();\n\n      this.editor = editor;\n      this.composer = editor.composer;\n      this.doc = this.composer.doc;\n    },\n\n    /**\n     * Get the current selection as a bookmark to be able to later restore it\n     *\n     * @return {Object} An object that represents the current selection\n     */\n    getBookmark: function getBookmark() {\n      var range = this.getRange();\n      return range && range.cloneRange();\n    },\n\n    /**\n     * Restore a selection retrieved via wysihtml5.Selection.prototype.getBookmark\n     *\n     * @param {Object} bookmark An object that represents the current selection\n     */\n    setBookmark: function setBookmark(bookmark) {\n      if (!bookmark) {\n        return;\n      }\n\n      this.setSelection(bookmark);\n    },\n\n    /**\n     * Set the caret in front of the given node\n     *\n     * @param {Object} node The element or text node where to position the caret in front of\n     * @example\n     *    selection.setBefore(myElement);\n     */\n    setBefore: function setBefore(node) {\n      var range = rangy.createRange(this.doc);\n      range.setStartBefore(node);\n      range.setEndBefore(node);\n      return this.setSelection(range);\n    },\n\n    /**\n     * Set the caret after the given node\n     *\n     * @param {Object} node The element or text node where to position the caret in front of\n     * @example\n     *    selection.setBefore(myElement);\n     */\n    setAfter: function setAfter(node) {\n      var range = rangy.createRange(this.doc);\n      range.setStartAfter(node);\n      range.setEndAfter(node);\n      return this.setSelection(range);\n    },\n\n    /**\n     * Ability to select/mark nodes\n     *\n     * @param {Element} node The node/element to select\n     * @example\n     *    selection.selectNode(document.getElementById(\"my-image\"));\n     */\n    selectNode: function selectNode(node) {\n      var range = rangy.createRange(this.doc),\n          isElement = node.nodeType === wysihtml5.ELEMENT_NODE,\n          canHaveHTML = \"canHaveHTML\" in node ? node.canHaveHTML : node.nodeName !== \"IMG\",\n          content = isElement ? node.innerHTML : node.data,\n          isEmpty = content === \"\" || content === wysihtml5.INVISIBLE_SPACE,\n          displayStyle = dom.getStyle(\"display\").from(node),\n          isBlockElement = displayStyle === \"block\" || displayStyle === \"list-item\";\n\n      if (isEmpty && isElement && canHaveHTML) {\n        // Make sure that caret is visible in node by inserting a zero width no breaking space\n        try {\n          node.innerHTML = wysihtml5.INVISIBLE_SPACE;\n        } catch (e) {}\n      }\n\n      if (canHaveHTML) {\n        range.selectNodeContents(node);\n      } else {\n        range.selectNode(node);\n      }\n\n      if (canHaveHTML && isEmpty && isElement) {\n        range.collapse(isBlockElement);\n      } else if (canHaveHTML && isEmpty) {\n        range.setStartAfter(node);\n        range.setEndAfter(node);\n      }\n\n      this.setSelection(range);\n    },\n\n    /**\n     * Get the node which contains the selection\n     *\n     * @param {Boolean} [controlRange] (only IE) Whether it should return the selected ControlRange element when the selection type is a \"ControlRange\"\n     * @return {Object} The node that contains the caret\n     * @example\n     *    var nodeThatContainsCaret = selection.getSelectedNode();\n     */\n    getSelectedNode: function getSelectedNode(controlRange) {\n      var selection, range;\n\n      if (controlRange && this.doc.selection && this.doc.selection.type === \"Control\") {\n        range = this.doc.selection.createRange();\n        if (range && range.length) {\n          return range.item(0);\n        }\n      }\n\n      selection = this.getSelection(this.doc);\n      if (selection.focusNode === selection.anchorNode) {\n        return selection.focusNode;\n      } else {\n        range = this.getRange(this.doc);\n        return range ? range.commonAncestorContainer : this.doc.body;\n      }\n    },\n\n    executeAndRestore: function executeAndRestore(method, restoreScrollPosition) {\n      var body = this.doc.body,\n          oldScrollTop = restoreScrollPosition && body.scrollTop,\n          oldScrollLeft = restoreScrollPosition && body.scrollLeft,\n          className = \"_wysihtml5-temp-placeholder\",\n          placeholderHTML = '<span class=\"' + className + '\">' + wysihtml5.INVISIBLE_SPACE + '</span>',\n          range = this.getRange(this.doc),\n          newRange;\n\n      // Nothing selected, execute and say goodbye\n      if (!range) {\n        method(body, body);\n        return;\n      }\n\n      var node = range.createContextualFragment(placeholderHTML);\n      range.insertNode(node);\n\n      // Make sure that a potential error doesn't cause our placeholder element to be left as a placeholder\n      try {\n        method(range.startContainer, range.endContainer);\n      } catch (e3) {\n        setTimeout(function () {\n          throw e3;\n        }, 0);\n      }\n\n      caretPlaceholder = this.doc.querySelector(\".\" + className);\n      if (caretPlaceholder) {\n        newRange = rangy.createRange(this.doc);\n        newRange.selectNode(caretPlaceholder);\n        newRange.deleteContents();\n        this.setSelection(newRange);\n      } else {\n        // fallback for when all hell breaks loose\n        body.focus();\n      }\n\n      if (restoreScrollPosition) {\n        body.scrollTop = oldScrollTop;\n        body.scrollLeft = oldScrollLeft;\n      }\n\n      // Remove it again, just to make sure that the placeholder is definitely out of the dom tree\n      try {\n        caretPlaceholder.parentNode.removeChild(caretPlaceholder);\n      } catch (e4) {}\n    },\n\n    /**\n     * Different approach of preserving the selection (doesn't modify the dom)\n     * Takes all text nodes in the selection and saves the selection position in the first and last one\n     */\n    executeAndRestoreSimple: function executeAndRestoreSimple(method) {\n      var range = this.getRange(),\n          body = this.doc.body,\n          newRange,\n          firstNode,\n          lastNode,\n          textNodes,\n          rangeBackup;\n\n      // Nothing selected, execute and say goodbye\n      if (!range) {\n        method(body, body);\n        return;\n      }\n\n      textNodes = range.getNodes([3]);\n      firstNode = textNodes[0] || range.startContainer;\n      lastNode = textNodes[textNodes.length - 1] || range.endContainer;\n\n      rangeBackup = {\n        collapsed: range.collapsed,\n        startContainer: firstNode,\n        startOffset: firstNode === range.startContainer ? range.startOffset : 0,\n        endContainer: lastNode,\n        endOffset: lastNode === range.endContainer ? range.endOffset : lastNode.length\n      };\n\n      try {\n        method(range.startContainer, range.endContainer);\n      } catch (e) {\n        setTimeout(function () {\n          throw e;\n        }, 0);\n      }\n\n      newRange = rangy.createRange(this.doc);\n      try {\n        newRange.setStart(rangeBackup.startContainer, rangeBackup.startOffset);\n      } catch (e1) {}\n      try {\n        newRange.setEnd(rangeBackup.endContainer, rangeBackup.endOffset);\n      } catch (e2) {}\n      try {\n        this.setSelection(newRange);\n      } catch (e3) {}\n    },\n\n    /**\n     * Insert html at the caret position and move the cursor after the inserted html\n     *\n     * @param {String} html HTML string to insert\n     * @example\n     *    selection.insertHTML(\"<p>foobar</p>\");\n     */\n    insertHTML: function insertHTML(html) {\n      var range = rangy.createRange(this.doc),\n          node = range.createContextualFragment(html),\n          lastChild = node.lastChild;\n      this.insertNode(node);\n      if (lastChild) {\n        this.setAfter(lastChild);\n      }\n    },\n\n    /**\n     * Insert a node at the caret position and move the cursor behind it\n     *\n     * @param {Object} node HTML string to insert\n     * @example\n     *    selection.insertNode(document.createTextNode(\"foobar\"));\n     */\n    insertNode: function insertNode(node) {\n      var range = this.getRange();\n      if (range) {\n        range.insertNode(node);\n      }\n    },\n\n    /**\n     * Wraps current selection with the given node\n     *\n     * @param {Object} node The node to surround the selected elements with\n     */\n    surround: function surround(node) {\n      var range = this.getRange();\n      if (!range) {\n        return;\n      }\n\n      try {\n        // This only works when the range boundaries are not overlapping other elements\n        range.surroundContents(node);\n        this.selectNode(node);\n      } catch (e) {\n        // fallback\n        node.appendChild(range.extractContents());\n        range.insertNode(node);\n      }\n    },\n\n    /**\n     * Scroll the current caret position into the view\n     * FIXME: This is a bit hacky, there might be a smarter way of doing this\n     *\n     * @example\n     *    selection.scrollIntoView();\n     */\n    scrollIntoView: function scrollIntoView() {\n      var doc = this.doc,\n          hasScrollBars = doc.documentElement.scrollHeight > doc.documentElement.offsetHeight,\n          tempElement = doc._wysihtml5ScrollIntoViewElement = doc._wysihtml5ScrollIntoViewElement || function () {\n        var element = doc.createElement(\"span\");\n        // The element needs content in order to be able to calculate it's position properly\n        element.innerHTML = wysihtml5.INVISIBLE_SPACE;\n        return element;\n      }(),\n          offsetTop;\n\n      if (hasScrollBars) {\n        this.insertNode(tempElement);\n        offsetTop = _getCumulativeOffsetTop(tempElement);\n        tempElement.parentNode.removeChild(tempElement);\n        if (offsetTop > doc.body.scrollTop) {\n          doc.body.scrollTop = offsetTop;\n        }\n      }\n    },\n\n    /**\n     * Select line where the caret is in\n     */\n    selectLine: function selectLine() {\n      if (wysihtml5.browser.supportsSelectionModify()) {\n        this._selectLine_W3C();\n      } else if (this.doc.selection) {\n        this._selectLine_MSIE();\n      }\n    },\n\n    /**\n     * See https://developer.mozilla.org/en/DOM/Selection/modify\n     */\n    _selectLine_W3C: function _selectLine_W3C() {\n      var win = this.doc.defaultView,\n          selection = win.getSelection();\n      selection.modify(\"extend\", \"left\", \"lineboundary\");\n      selection.modify(\"extend\", \"right\", \"lineboundary\");\n    },\n\n    _selectLine_MSIE: function _selectLine_MSIE() {\n      var range = this.doc.selection.createRange(),\n          rangeTop = range.boundingTop,\n          rangeHeight = range.boundingHeight,\n          scrollWidth = this.doc.body.scrollWidth,\n          rangeBottom,\n          rangeEnd,\n          measureNode,\n          i,\n          j;\n\n      if (!range.moveToPoint) {\n        return;\n      }\n\n      if (rangeTop === 0) {\n        // Don't know why, but when the selection ends at the end of a line\n        // range.boundingTop is 0\n        measureNode = this.doc.createElement(\"span\");\n        this.insertNode(measureNode);\n        rangeTop = measureNode.offsetTop;\n        measureNode.parentNode.removeChild(measureNode);\n      }\n\n      rangeTop += 1;\n\n      for (i = -10; i < scrollWidth; i += 2) {\n        try {\n          range.moveToPoint(i, rangeTop);\n          break;\n        } catch (e1) {}\n      }\n\n      // Investigate the following in order to handle multi line selections\n      // rangeBottom = rangeTop + (rangeHeight ? (rangeHeight - 1) : 0);\n      rangeBottom = rangeTop;\n      rangeEnd = this.doc.selection.createRange();\n      for (j = scrollWidth; j >= 0; j--) {\n        try {\n          rangeEnd.moveToPoint(j, rangeBottom);\n          break;\n        } catch (e2) {}\n      }\n\n      range.setEndPoint(\"EndToEnd\", rangeEnd);\n      range.select();\n    },\n\n    getText: function getText() {\n      var selection = this.getSelection();\n      return selection ? selection.toString() : \"\";\n    },\n\n    getNodes: function getNodes(nodeType, filter) {\n      var range = this.getRange();\n      if (range) {\n        return range.getNodes([nodeType], filter);\n      } else {\n        return [];\n      }\n    },\n\n    getRange: function getRange() {\n      var selection = this.getSelection();\n      return selection && selection.rangeCount && selection.getRangeAt(0);\n    },\n\n    getSelection: function getSelection() {\n      return rangy.getSelection(this.doc.defaultView || this.doc.parentWindow);\n    },\n\n    setSelection: function setSelection(range) {\n      var win = this.doc.defaultView || this.doc.parentWindow,\n          selection = rangy.getSelection(win);\n      return selection.setSingleRange(range);\n    }\n  });\n})(wysihtml5);\n/**\n * Inspired by the rangy CSS Applier module written by Tim Down and licensed under the MIT license.\n * http://code.google.com/p/rangy/\n *\n * changed in order to be able ...\n *    - to use custom tags\n *    - to detect and replace similar css classes via reg exp\n */\n(function (wysihtml5, rangy) {\n  var defaultTagName = \"span\";\n\n  var REG_EXP_WHITE_SPACE = /\\s+/g;\n\n  function hasClass(el, cssClass, regExp) {\n    if (!el.className) {\n      return false;\n    }\n\n    var matchingClassNames = el.className.match(regExp) || [];\n    return matchingClassNames[matchingClassNames.length - 1] === cssClass;\n  }\n\n  function addClass(el, cssClass, regExp) {\n    if (el.className) {\n      removeClass(el, regExp);\n      el.className += \" \" + cssClass;\n    } else {\n      el.className = cssClass;\n    }\n  }\n\n  function removeClass(el, regExp) {\n    if (el.className) {\n      el.className = el.className.replace(regExp, \"\");\n    }\n  }\n\n  function hasSameClasses(el1, el2) {\n    return el1.className.replace(REG_EXP_WHITE_SPACE, \" \") == el2.className.replace(REG_EXP_WHITE_SPACE, \" \");\n  }\n\n  function replaceWithOwnChildren(el) {\n    var parent = el.parentNode;\n    while (el.firstChild) {\n      parent.insertBefore(el.firstChild, el);\n    }\n    parent.removeChild(el);\n  }\n\n  function elementsHaveSameNonClassAttributes(el1, el2) {\n    if (el1.attributes.length != el2.attributes.length) {\n      return false;\n    }\n    for (var i = 0, len = el1.attributes.length, attr1, attr2, name; i < len; ++i) {\n      attr1 = el1.attributes[i];\n      name = attr1.name;\n      if (name != \"class\") {\n        attr2 = el2.attributes.getNamedItem(name);\n        if (attr1.specified != attr2.specified) {\n          return false;\n        }\n        if (attr1.specified && attr1.nodeValue !== attr2.nodeValue) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  function isSplitPoint(node, offset) {\n    if (rangy.dom.isCharacterDataNode(node)) {\n      if (offset == 0) {\n        return !!node.previousSibling;\n      } else if (offset == node.length) {\n        return !!node.nextSibling;\n      } else {\n        return true;\n      }\n    }\n\n    return offset > 0 && offset < node.childNodes.length;\n  }\n\n  function splitNodeAt(node, descendantNode, descendantOffset) {\n    var newNode;\n    if (rangy.dom.isCharacterDataNode(descendantNode)) {\n      if (descendantOffset == 0) {\n        descendantOffset = rangy.dom.getNodeIndex(descendantNode);\n        descendantNode = descendantNode.parentNode;\n      } else if (descendantOffset == descendantNode.length) {\n        descendantOffset = rangy.dom.getNodeIndex(descendantNode) + 1;\n        descendantNode = descendantNode.parentNode;\n      } else {\n        newNode = rangy.dom.splitDataNode(descendantNode, descendantOffset);\n      }\n    }\n    if (!newNode) {\n      newNode = descendantNode.cloneNode(false);\n      if (newNode.id) {\n        newNode.removeAttribute(\"id\");\n      }\n      var child;\n      while (child = descendantNode.childNodes[descendantOffset]) {\n        newNode.appendChild(child);\n      }\n      rangy.dom.insertAfter(newNode, descendantNode);\n    }\n    return descendantNode == node ? newNode : splitNodeAt(node, newNode.parentNode, rangy.dom.getNodeIndex(newNode));\n  }\n\n  function Merge(firstNode) {\n    this.isElementMerge = firstNode.nodeType == wysihtml5.ELEMENT_NODE;\n    this.firstTextNode = this.isElementMerge ? firstNode.lastChild : firstNode;\n    this.textNodes = [this.firstTextNode];\n  }\n\n  Merge.prototype = {\n    doMerge: function doMerge() {\n      var textBits = [],\n          textNode,\n          parent,\n          text;\n      for (var i = 0, len = this.textNodes.length; i < len; ++i) {\n        textNode = this.textNodes[i];\n        parent = textNode.parentNode;\n        textBits[i] = textNode.data;\n        if (i) {\n          parent.removeChild(textNode);\n          if (!parent.hasChildNodes()) {\n            parent.parentNode.removeChild(parent);\n          }\n        }\n      }\n      this.firstTextNode.data = text = textBits.join(\"\");\n      return text;\n    },\n\n    getLength: function getLength() {\n      var i = this.textNodes.length,\n          len = 0;\n      while (i--) {\n        len += this.textNodes[i].length;\n      }\n      return len;\n    },\n\n    toString: function toString() {\n      var textBits = [];\n      for (var i = 0, len = this.textNodes.length; i < len; ++i) {\n        textBits[i] = \"'\" + this.textNodes[i].data + \"'\";\n      }\n      return \"[Merge(\" + textBits.join(\",\") + \")]\";\n    }\n  };\n\n  function HTMLApplier(tagNames, cssClass, similarClassRegExp, normalize) {\n    this.tagNames = tagNames || [defaultTagName];\n    this.cssClass = cssClass || \"\";\n    this.similarClassRegExp = similarClassRegExp;\n    this.normalize = normalize;\n    this.applyToAnyTagName = false;\n  }\n\n  HTMLApplier.prototype = {\n    getAncestorWithClass: function getAncestorWithClass(node) {\n      var cssClassMatch;\n      while (node) {\n        cssClassMatch = this.cssClass ? hasClass(node, this.cssClass, this.similarClassRegExp) : true;\n        if (node.nodeType == wysihtml5.ELEMENT_NODE && rangy.dom.arrayContains(this.tagNames, node.tagName.toLowerCase()) && cssClassMatch) {\n          return node;\n        }\n        node = node.parentNode;\n      }\n      return false;\n    },\n\n    // Normalizes nodes after applying a CSS class to a Range.\n    postApply: function postApply(textNodes, range) {\n      var firstNode = textNodes[0],\n          lastNode = textNodes[textNodes.length - 1];\n\n      var merges = [],\n          currentMerge;\n\n      var rangeStartNode = firstNode,\n          rangeEndNode = lastNode;\n      var rangeStartOffset = 0,\n          rangeEndOffset = lastNode.length;\n\n      var textNode, precedingTextNode;\n\n      for (var i = 0, len = textNodes.length; i < len; ++i) {\n        textNode = textNodes[i];\n        precedingTextNode = this.getAdjacentMergeableTextNode(textNode.parentNode, false);\n        if (precedingTextNode) {\n          if (!currentMerge) {\n            currentMerge = new Merge(precedingTextNode);\n            merges.push(currentMerge);\n          }\n          currentMerge.textNodes.push(textNode);\n          if (textNode === firstNode) {\n            rangeStartNode = currentMerge.firstTextNode;\n            rangeStartOffset = rangeStartNode.length;\n          }\n          if (textNode === lastNode) {\n            rangeEndNode = currentMerge.firstTextNode;\n            rangeEndOffset = currentMerge.getLength();\n          }\n        } else {\n          currentMerge = null;\n        }\n      }\n\n      // Test whether the first node after the range needs merging\n      var nextTextNode = this.getAdjacentMergeableTextNode(lastNode.parentNode, true);\n      if (nextTextNode) {\n        if (!currentMerge) {\n          currentMerge = new Merge(lastNode);\n          merges.push(currentMerge);\n        }\n        currentMerge.textNodes.push(nextTextNode);\n      }\n\n      // Do the merges\n      if (merges.length) {\n        for (i = 0, len = merges.length; i < len; ++i) {\n          merges[i].doMerge();\n        }\n        // Set the range boundaries\n        range.setStart(rangeStartNode, rangeStartOffset);\n        range.setEnd(rangeEndNode, rangeEndOffset);\n      }\n    },\n\n    getAdjacentMergeableTextNode: function getAdjacentMergeableTextNode(node, forward) {\n      var isTextNode = node.nodeType == wysihtml5.TEXT_NODE;\n      var el = isTextNode ? node.parentNode : node;\n      var adjacentNode;\n      var propName = forward ? \"nextSibling\" : \"previousSibling\";\n      if (isTextNode) {\n        // Can merge if the node's previous/next sibling is a text node\n        adjacentNode = node[propName];\n        if (adjacentNode && adjacentNode.nodeType == wysihtml5.TEXT_NODE) {\n          return adjacentNode;\n        }\n      } else {\n        // Compare element with its sibling\n        adjacentNode = el[propName];\n        if (adjacentNode && this.areElementsMergeable(node, adjacentNode)) {\n          return adjacentNode[forward ? \"firstChild\" : \"lastChild\"];\n        }\n      }\n      return null;\n    },\n\n    areElementsMergeable: function areElementsMergeable(el1, el2) {\n      return rangy.dom.arrayContains(this.tagNames, (el1.tagName || \"\").toLowerCase()) && rangy.dom.arrayContains(this.tagNames, (el2.tagName || \"\").toLowerCase()) && hasSameClasses(el1, el2) && elementsHaveSameNonClassAttributes(el1, el2);\n    },\n\n    createContainer: function createContainer(doc) {\n      var el = doc.createElement(this.tagNames[0]);\n      if (this.cssClass) {\n        el.className = this.cssClass;\n      }\n      return el;\n    },\n\n    applyToTextNode: function applyToTextNode(textNode) {\n      var parent = textNode.parentNode;\n      if (parent.childNodes.length == 1 && rangy.dom.arrayContains(this.tagNames, parent.tagName.toLowerCase())) {\n        if (this.cssClass) {\n          addClass(parent, this.cssClass, this.similarClassRegExp);\n        }\n      } else {\n        var el = this.createContainer(rangy.dom.getDocument(textNode));\n        textNode.parentNode.insertBefore(el, textNode);\n        el.appendChild(textNode);\n      }\n    },\n\n    isRemovable: function isRemovable(el) {\n      return rangy.dom.arrayContains(this.tagNames, el.tagName.toLowerCase()) && wysihtml5.lang.string(el.className).trim() == this.cssClass;\n    },\n\n    undoToTextNode: function undoToTextNode(textNode, range, ancestorWithClass) {\n      if (!range.containsNode(ancestorWithClass)) {\n        // Split out the portion of the ancestor from which we can remove the CSS class\n        var ancestorRange = range.cloneRange();\n        ancestorRange.selectNode(ancestorWithClass);\n\n        if (ancestorRange.isPointInRange(range.endContainer, range.endOffset) && isSplitPoint(range.endContainer, range.endOffset)) {\n          splitNodeAt(ancestorWithClass, range.endContainer, range.endOffset);\n          range.setEndAfter(ancestorWithClass);\n        }\n        if (ancestorRange.isPointInRange(range.startContainer, range.startOffset) && isSplitPoint(range.startContainer, range.startOffset)) {\n          ancestorWithClass = splitNodeAt(ancestorWithClass, range.startContainer, range.startOffset);\n        }\n      }\n\n      if (this.similarClassRegExp) {\n        removeClass(ancestorWithClass, this.similarClassRegExp);\n      }\n      if (this.isRemovable(ancestorWithClass)) {\n        replaceWithOwnChildren(ancestorWithClass);\n      }\n    },\n\n    applyToRange: function applyToRange(range) {\n      var textNodes = range.getNodes([wysihtml5.TEXT_NODE]);\n      if (!textNodes.length) {\n        try {\n          var node = this.createContainer(range.endContainer.ownerDocument);\n          range.surroundContents(node);\n          this.selectNode(range, node);\n          return;\n        } catch (e) {}\n      }\n\n      range.splitBoundaries();\n      textNodes = range.getNodes([wysihtml5.TEXT_NODE]);\n\n      if (textNodes.length) {\n        var textNode;\n\n        for (var i = 0, len = textNodes.length; i < len; ++i) {\n          textNode = textNodes[i];\n          if (!this.getAncestorWithClass(textNode)) {\n            this.applyToTextNode(textNode);\n          }\n        }\n\n        range.setStart(textNodes[0], 0);\n        textNode = textNodes[textNodes.length - 1];\n        range.setEnd(textNode, textNode.length);\n\n        if (this.normalize) {\n          this.postApply(textNodes, range);\n        }\n      }\n    },\n\n    undoToRange: function undoToRange(range) {\n      var textNodes = range.getNodes([wysihtml5.TEXT_NODE]),\n          textNode,\n          ancestorWithClass;\n      if (textNodes.length) {\n        range.splitBoundaries();\n        textNodes = range.getNodes([wysihtml5.TEXT_NODE]);\n      } else {\n        var doc = range.endContainer.ownerDocument,\n            node = doc.createTextNode(wysihtml5.INVISIBLE_SPACE);\n        range.insertNode(node);\n        range.selectNode(node);\n        textNodes = [node];\n      }\n\n      for (var i = 0, len = textNodes.length; i < len; ++i) {\n        textNode = textNodes[i];\n        ancestorWithClass = this.getAncestorWithClass(textNode);\n        if (ancestorWithClass) {\n          this.undoToTextNode(textNode, range, ancestorWithClass);\n        }\n      }\n\n      if (len == 1) {\n        this.selectNode(range, textNodes[0]);\n      } else {\n        range.setStart(textNodes[0], 0);\n        textNode = textNodes[textNodes.length - 1];\n        range.setEnd(textNode, textNode.length);\n\n        if (this.normalize) {\n          this.postApply(textNodes, range);\n        }\n      }\n    },\n\n    selectNode: function selectNode(range, node) {\n      var isElement = node.nodeType === wysihtml5.ELEMENT_NODE,\n          canHaveHTML = \"canHaveHTML\" in node ? node.canHaveHTML : true,\n          content = isElement ? node.innerHTML : node.data,\n          isEmpty = content === \"\" || content === wysihtml5.INVISIBLE_SPACE;\n\n      if (isEmpty && isElement && canHaveHTML) {\n        // Make sure that caret is visible in node by inserting a zero width no breaking space\n        try {\n          node.innerHTML = wysihtml5.INVISIBLE_SPACE;\n        } catch (e) {}\n      }\n      range.selectNodeContents(node);\n      if (isEmpty && isElement) {\n        range.collapse(false);\n      } else if (isEmpty) {\n        range.setStartAfter(node);\n        range.setEndAfter(node);\n      }\n    },\n\n    getTextSelectedByRange: function getTextSelectedByRange(textNode, range) {\n      var textRange = range.cloneRange();\n      textRange.selectNodeContents(textNode);\n\n      var intersectionRange = textRange.intersection(range);\n      var text = intersectionRange ? intersectionRange.toString() : \"\";\n      textRange.detach();\n\n      return text;\n    },\n\n    isAppliedToRange: function isAppliedToRange(range) {\n      var ancestors = [],\n          ancestor,\n          textNodes = range.getNodes([wysihtml5.TEXT_NODE]);\n      if (!textNodes.length) {\n        ancestor = this.getAncestorWithClass(range.startContainer);\n        return ancestor ? [ancestor] : false;\n      }\n\n      for (var i = 0, len = textNodes.length, selectedText; i < len; ++i) {\n        selectedText = this.getTextSelectedByRange(textNodes[i], range);\n        ancestor = this.getAncestorWithClass(textNodes[i]);\n        if (selectedText != \"\" && !ancestor) {\n          return false;\n        } else {\n          ancestors.push(ancestor);\n        }\n      }\n      return ancestors;\n    },\n\n    toggleRange: function toggleRange(range) {\n      if (this.isAppliedToRange(range)) {\n        this.undoToRange(range);\n      } else {\n        this.applyToRange(range);\n      }\n    }\n  };\n\n  wysihtml5.selection.HTMLApplier = HTMLApplier;\n})(wysihtml5, rangy); /**\n                      * Rich Text Query/Formatting Commands\n                      * \n                      * @example\n                      *    var commands = new wysihtml5.Commands(editor);\n                      */\nwysihtml5.Commands = Base.extend(\n/** @scope wysihtml5.Commands.prototype */{\n  constructor: function constructor(editor) {\n    this.editor = editor;\n    this.composer = editor.composer;\n    this.doc = this.composer.doc;\n  },\n\n  /**\n   * Check whether the browser supports the given command\n   *\n   * @param {String} command The command string which to check (eg. \"bold\", \"italic\", \"insertUnorderedList\")\n   * @example\n   *    commands.supports(\"createLink\");\n   */\n  support: function support(command) {\n    return wysihtml5.browser.supportsCommand(this.doc, command);\n  },\n\n  /**\n   * Check whether the browser supports the given command\n   *\n   * @param {String} command The command string which to execute (eg. \"bold\", \"italic\", \"insertUnorderedList\")\n   * @param {String} [value] The command value parameter, needed for some commands (\"createLink\", \"insertImage\", ...), optional for commands that don't require one (\"bold\", \"underline\", ...)\n   * @example\n   *    commands.exec(\"insertImage\", \"http://a1.twimg.com/profile_images/113868655/schrei_twitter_reasonably_small.jpg\");\n   */\n  exec: function exec(command, value) {\n    var obj = wysihtml5.commands[command],\n        args = wysihtml5.lang.array(arguments).get(),\n        method = obj && obj.exec,\n        result = null;\n\n    this.editor.fire(\"beforecommand:composer\");\n\n    if (method) {\n      args.unshift(this.composer);\n      result = method.apply(obj, args);\n    } else {\n      try {\n        // try/catch for buggy firefox\n        result = this.doc.execCommand(command, false, value);\n      } catch (e) {}\n    }\n\n    this.editor.fire(\"aftercommand:composer\");\n    return result;\n  },\n\n  /**\n   * Check whether the current command is active\n   * If the caret is within a bold text, then calling this with command \"bold\" should return true\n   *\n   * @param {String} command The command string which to check (eg. \"bold\", \"italic\", \"insertUnorderedList\")\n   * @param {String} [commandValue] The command value parameter (eg. for \"insertImage\" the image src)\n   * @return {Boolean} Whether the command is active\n   * @example\n   *    var isCurrentSelectionBold = commands.state(\"bold\");\n   */\n  state: function state(command, commandValue) {\n    var obj = wysihtml5.commands[command],\n        args = wysihtml5.lang.array(arguments).get(),\n        method = obj && obj.state;\n    if (method) {\n      args.unshift(this.composer);\n      return method.apply(obj, args);\n    } else {\n      try {\n        // try/catch for buggy firefox\n        return this.doc.queryCommandState(command);\n      } catch (e) {\n        return false;\n      }\n    }\n  },\n\n  /**\n   * Get the current command's value\n   *\n   * @param {String} command The command string which to check (eg. \"formatBlock\")\n   * @return {String} The command value\n   * @example\n   *    var currentBlockElement = commands.value(\"formatBlock\");\n   */\n  value: function value(command) {\n    var obj = wysihtml5.commands[command],\n        method = obj && obj.value;\n    if (method) {\n      return method.call(obj, this.composer, command);\n    } else {\n      try {\n        // try/catch for buggy firefox\n        return this.doc.queryCommandValue(command);\n      } catch (e) {\n        return null;\n      }\n    }\n  }\n});\n(function (wysihtml5) {\n  var undef;\n\n  wysihtml5.commands.bold = {\n    exec: function exec(composer, command) {\n      return wysihtml5.commands.formatInline.exec(composer, command, \"b\");\n    },\n\n    state: function state(composer, command, color) {\n      // element.ownerDocument.queryCommandState(\"bold\") results:\n      // firefox: only <b>\n      // chrome:  <b>, <strong>, <h1>, <h2>, ...\n      // ie:      <b>, <strong>\n      // opera:   <b>, <strong>\n      return wysihtml5.commands.formatInline.state(composer, command, \"b\");\n    },\n\n    value: function value() {\n      return undef;\n    }\n  };\n})(wysihtml5);\n\n(function (wysihtml5) {\n  var undef,\n      NODE_NAME = \"A\",\n      dom = wysihtml5.dom;\n\n  function _removeFormat(composer, anchors) {\n    var length = anchors.length,\n        i = 0,\n        anchor,\n        codeElement,\n        textContent;\n    for (; i < length; i++) {\n      anchor = anchors[i];\n      codeElement = dom.getParentElement(anchor, { nodeName: \"code\" });\n      textContent = dom.getTextContent(anchor);\n\n      // if <a> contains url-like text content, rename it to <code> to prevent re-autolinking\n      // else replace <a> with its childNodes\n      if (textContent.match(dom.autoLink.URL_REG_EXP) && !codeElement) {\n        // <code> element is used to prevent later auto-linking of the content\n        codeElement = dom.renameElement(anchor, \"code\");\n      } else {\n        dom.replaceWithChildNodes(anchor);\n      }\n    }\n  }\n\n  function _format(composer, attributes) {\n    var doc = composer.doc,\n        tempClass = \"_wysihtml5-temp-\" + +new Date(),\n        tempClassRegExp = /non-matching-class/g,\n        i = 0,\n        length,\n        anchors,\n        anchor,\n        hasElementChild,\n        isEmpty,\n        elementToSetCaretAfter,\n        textContent,\n        whiteSpace,\n        j;\n    wysihtml5.commands.formatInline.exec(composer, undef, NODE_NAME, tempClass, tempClassRegExp);\n    anchors = doc.querySelectorAll(NODE_NAME + \".\" + tempClass);\n    length = anchors.length;\n    for (; i < length; i++) {\n      anchor = anchors[i];\n      anchor.removeAttribute(\"class\");\n      for (j in attributes) {\n        anchor.setAttribute(j, attributes[j]);\n      }\n    }\n\n    elementToSetCaretAfter = anchor;\n    if (length === 1) {\n      textContent = dom.getTextContent(anchor);\n      hasElementChild = !!anchor.querySelector(\"*\");\n      isEmpty = textContent === \"\" || textContent === wysihtml5.INVISIBLE_SPACE;\n      if (!hasElementChild && isEmpty) {\n        dom.setTextContent(anchor, attributes.text || anchor.href);\n        whiteSpace = doc.createTextNode(\" \");\n        composer.selection.setAfter(anchor);\n        composer.selection.insertNode(whiteSpace);\n        elementToSetCaretAfter = whiteSpace;\n      }\n    }\n    composer.selection.setAfter(elementToSetCaretAfter);\n  }\n\n  wysihtml5.commands.createLink = {\n    /**\n     * TODO: Use HTMLApplier or formatInline here\n     *\n     * Turns selection into a link\n     * If selection is already a link, it removes the link and wraps it with a <code> element\n     * The <code> element is needed to avoid auto linking\n     * \n     * @example\n     *    // either ...\n     *    wysihtml5.commands.createLink.exec(composer, \"createLink\", \"http://www.google.de\");\n     *    // ... or ...\n     *    wysihtml5.commands.createLink.exec(composer, \"createLink\", { href: \"http://www.google.de\", target: \"_blank\" });\n     */\n    exec: function exec(composer, command, value) {\n      var anchors = this.state(composer, command);\n      if (anchors) {\n        // Selection contains links\n        composer.selection.executeAndRestore(function () {\n          _removeFormat(composer, anchors);\n        });\n      } else {\n        // Create links\n        value = (typeof value === \"undefined\" ? \"undefined\" : _typeof(value)) === \"object\" ? value : { href: value };\n        _format(composer, value);\n      }\n    },\n\n    state: function state(composer, command) {\n      return wysihtml5.commands.formatInline.state(composer, command, \"A\");\n    },\n\n    value: function value() {\n      return undef;\n    }\n  };\n})(wysihtml5); /**\n               * document.execCommand(\"fontSize\") will create either inline styles (firefox, chrome) or use font tags\n               * which we don't want\n               * Instead we set a css class\n               */\n(function (wysihtml5) {\n  var undef,\n      REG_EXP = /wysiwyg-font-size-[a-z\\-]+/g;\n\n  wysihtml5.commands.fontSize = {\n    exec: function exec(composer, command, size) {\n      return wysihtml5.commands.formatInline.exec(composer, command, \"span\", \"wysiwyg-font-size-\" + size, REG_EXP);\n    },\n\n    state: function state(composer, command, size) {\n      return wysihtml5.commands.formatInline.state(composer, command, \"span\", \"wysiwyg-font-size-\" + size, REG_EXP);\n    },\n\n    value: function value() {\n      return undef;\n    }\n  };\n})(wysihtml5);\n/**\n * document.execCommand(\"foreColor\") will create either inline styles (firefox, chrome) or use font tags\n * which we don't want\n * Instead we set a css class\n */\n(function (wysihtml5) {\n  var undef,\n      REG_EXP = /wysiwyg-color-[a-z]+/g;\n\n  wysihtml5.commands.foreColor = {\n    exec: function exec(composer, command, color) {\n      return wysihtml5.commands.formatInline.exec(composer, command, \"span\", \"wysiwyg-color-\" + color, REG_EXP);\n    },\n\n    state: function state(composer, command, color) {\n      return wysihtml5.commands.formatInline.state(composer, command, \"span\", \"wysiwyg-color-\" + color, REG_EXP);\n    },\n\n    value: function value() {\n      return undef;\n    }\n  };\n})(wysihtml5);(function (wysihtml5) {\n  var undef,\n      dom = wysihtml5.dom,\n      DEFAULT_NODE_NAME = \"DIV\",\n\n\n  // Following elements are grouped\n  // when the caret is within a H1 and the H4 is invoked, the H1 should turn into H4\n  // instead of creating a H4 within a H1 which would result in semantically invalid html\n  BLOCK_ELEMENTS_GROUP = [\"H1\", \"H2\", \"H3\", \"H4\", \"H5\", \"H6\", \"P\", \"BLOCKQUOTE\", DEFAULT_NODE_NAME];\n\n  /**\n   * Remove similiar classes (based on classRegExp)\n   * and add the desired class name\n   */\n  function _addClass(element, className, classRegExp) {\n    if (element.className) {\n      _removeClass(element, classRegExp);\n      element.className += \" \" + className;\n    } else {\n      element.className = className;\n    }\n  }\n\n  function _removeClass(element, classRegExp) {\n    element.className = element.className.replace(classRegExp, \"\");\n  }\n\n  /**\n   * Check whether given node is a text node and whether it's empty\n   */\n  function _isBlankTextNode(node) {\n    return node.nodeType === wysihtml5.TEXT_NODE && !wysihtml5.lang.string(node.data).trim();\n  }\n\n  /**\n   * Returns previous sibling node that is not a blank text node\n   */\n  function _getPreviousSiblingThatIsNotBlank(node) {\n    var previousSibling = node.previousSibling;\n    while (previousSibling && _isBlankTextNode(previousSibling)) {\n      previousSibling = previousSibling.previousSibling;\n    }\n    return previousSibling;\n  }\n\n  /**\n   * Returns next sibling node that is not a blank text node\n   */\n  function _getNextSiblingThatIsNotBlank(node) {\n    var nextSibling = node.nextSibling;\n    while (nextSibling && _isBlankTextNode(nextSibling)) {\n      nextSibling = nextSibling.nextSibling;\n    }\n    return nextSibling;\n  }\n\n  /**\n   * Adds line breaks before and after the given node if the previous and next siblings\n   * aren't already causing a visual line break (block element or <br>)\n   */\n  function _addLineBreakBeforeAndAfter(node) {\n    var doc = node.ownerDocument,\n        nextSibling = _getNextSiblingThatIsNotBlank(node),\n        previousSibling = _getPreviousSiblingThatIsNotBlank(node);\n\n    if (nextSibling && !_isLineBreakOrBlockElement(nextSibling)) {\n      node.parentNode.insertBefore(doc.createElement(\"br\"), nextSibling);\n    }\n    if (previousSibling && !_isLineBreakOrBlockElement(previousSibling)) {\n      node.parentNode.insertBefore(doc.createElement(\"br\"), node);\n    }\n  }\n\n  /**\n   * Removes line breaks before and after the given node\n   */\n  function _removeLineBreakBeforeAndAfter(node) {\n    var nextSibling = _getNextSiblingThatIsNotBlank(node),\n        previousSibling = _getPreviousSiblingThatIsNotBlank(node);\n\n    if (nextSibling && _isLineBreak(nextSibling)) {\n      nextSibling.parentNode.removeChild(nextSibling);\n    }\n    if (previousSibling && _isLineBreak(previousSibling)) {\n      previousSibling.parentNode.removeChild(previousSibling);\n    }\n  }\n\n  function _removeLastChildIfLineBreak(node) {\n    var lastChild = node.lastChild;\n    if (lastChild && _isLineBreak(lastChild)) {\n      lastChild.parentNode.removeChild(lastChild);\n    }\n  }\n\n  function _isLineBreak(node) {\n    return node.nodeName === \"BR\";\n  }\n\n  /**\n   * Checks whether the elment causes a visual line break\n   * (<br> or block elements)\n   */\n  function _isLineBreakOrBlockElement(element) {\n    if (_isLineBreak(element)) {\n      return true;\n    }\n\n    if (dom.getStyle(\"display\").from(element) === \"block\") {\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Execute native query command\n   * and if necessary modify the inserted node's className\n   */\n  function _execCommand(doc, command, nodeName, className) {\n    if (className) {\n      var eventListener = dom.observe(doc, \"DOMNodeInserted\", function (event) {\n        var target = event.target,\n            displayStyle;\n        if (target.nodeType !== wysihtml5.ELEMENT_NODE) {\n          return;\n        }\n        displayStyle = dom.getStyle(\"display\").from(target);\n        if (displayStyle.substr(0, 6) !== \"inline\") {\n          // Make sure that only block elements receive the given class\n          target.className += \" \" + className;\n        }\n      });\n    }\n    doc.execCommand(command, false, nodeName);\n    if (eventListener) {\n      eventListener.stop();\n    }\n  }\n\n  function _selectLineAndWrap(composer, element) {\n    composer.selection.selectLine();\n    composer.selection.surround(element);\n    _removeLineBreakBeforeAndAfter(element);\n    _removeLastChildIfLineBreak(element);\n    composer.selection.selectNode(element);\n  }\n\n  function _hasClasses(element) {\n    return !!wysihtml5.lang.string(element.className).trim();\n  }\n\n  wysihtml5.commands.formatBlock = {\n    exec: function exec(composer, command, nodeName, className, classRegExp) {\n      var doc = composer.doc,\n          blockElement = this.state(composer, command, nodeName, className, classRegExp),\n          selectedNode;\n\n      nodeName = typeof nodeName === \"string\" ? nodeName.toUpperCase() : nodeName;\n\n      if (blockElement) {\n        composer.selection.executeAndRestoreSimple(function () {\n          if (classRegExp) {\n            _removeClass(blockElement, classRegExp);\n          }\n          var hasClasses = _hasClasses(blockElement);\n          if (!hasClasses && blockElement.nodeName === (nodeName || DEFAULT_NODE_NAME)) {\n            // Insert a line break afterwards and beforewards when there are siblings\n            // that are not of type line break or block element\n            _addLineBreakBeforeAndAfter(blockElement);\n            dom.replaceWithChildNodes(blockElement);\n          } else if (hasClasses) {\n            // Make sure that styling is kept by renaming the element to <div> and copying over the class name\n            dom.renameElement(blockElement, DEFAULT_NODE_NAME);\n          }\n        });\n        return;\n      }\n\n      // Find similiar block element and rename it (<h2 class=\"foo\"></h2>  =>  <h1 class=\"foo\"></h1>)\n      if (nodeName === null || wysihtml5.lang.array(BLOCK_ELEMENTS_GROUP).contains(nodeName)) {\n        selectedNode = composer.selection.getSelectedNode();\n        blockElement = dom.getParentElement(selectedNode, {\n          nodeName: BLOCK_ELEMENTS_GROUP\n        });\n\n        if (blockElement) {\n          composer.selection.executeAndRestoreSimple(function () {\n            // Rename current block element to new block element and add class\n            if (nodeName) {\n              blockElement = dom.renameElement(blockElement, nodeName);\n            }\n            if (className) {\n              _addClass(blockElement, className, classRegExp);\n            }\n          });\n          return;\n        }\n      }\n\n      if (composer.commands.support(command)) {\n        _execCommand(doc, command, nodeName || DEFAULT_NODE_NAME, className);\n        return;\n      }\n\n      blockElement = doc.createElement(nodeName || DEFAULT_NODE_NAME);\n      if (className) {\n        blockElement.className = className;\n      }\n      _selectLineAndWrap(composer, blockElement);\n    },\n\n    state: function state(composer, command, nodeName, className, classRegExp) {\n      nodeName = typeof nodeName === \"string\" ? nodeName.toUpperCase() : nodeName;\n      var selectedNode = composer.selection.getSelectedNode();\n      return dom.getParentElement(selectedNode, {\n        nodeName: nodeName,\n        className: className,\n        classRegExp: classRegExp\n      });\n    },\n\n    value: function value() {\n      return undef;\n    }\n  };\n})(wysihtml5); /**\n               * formatInline scenarios for tag \"B\" (| = caret, |foo| = selected text)\n               *\n               *   #1 caret in unformatted text:\n               *      abcdefg|\n               *   output:\n               *      abcdefg<b>|</b>\n               *   \n               *   #2 unformatted text selected:\n               *      abc|deg|h\n               *   output:\n               *      abc<b>|deg|</b>h\n               *   \n               *   #3 unformatted text selected across boundaries:\n               *      ab|c <span>defg|h</span>\n               *   output:\n               *      ab<b>|c </b><span><b>defg</b>|h</span>\n               *\n               *   #4 formatted text entirely selected\n               *      <b>|abc|</b>\n               *   output:\n               *      |abc|\n               *\n               *   #5 formatted text partially selected\n               *      <b>ab|c|</b>\n               *   output:\n               *      <b>ab</b>|c|\n               *\n               *   #6 formatted text selected across boundaries\n               *      <span>ab|c</span> <b>de|fgh</b>\n               *   output:\n               *      <span>ab|c</span> de|<b>fgh</b>\n               */\n(function (wysihtml5) {\n  var undef,\n\n\n  // Treat <b> as <strong> and vice versa\n  ALIAS_MAPPING = {\n    \"strong\": \"b\",\n    \"em\": \"i\",\n    \"b\": \"strong\",\n    \"i\": \"em\"\n  },\n      htmlApplier = {};\n\n  function _getTagNames(tagName) {\n    var alias = ALIAS_MAPPING[tagName];\n    return alias ? [tagName.toLowerCase(), alias.toLowerCase()] : [tagName.toLowerCase()];\n  }\n\n  function _formatClear(range) {\n    body = $(range.endContainer.ownerDocument.body);\n    $.each(body.children('font'), function () {\n      font_el = $(this);\n      font_el.replaceWith('<span>' + font_el.html() + '</span>');\n    });\n\n    $.each(body.children('span'), function () {\n      span_el = $(this);\n      reduced_dimension(span_el);\n    });\n    not_span_list = $('tbody:first > tr').not('td').toArray();\n    while (not_span_list.length) {\n      not_span_list_item = not_span_list.pop();\n      $.each(not_span_list_item.children(), function () {\n        new_el = $(this);\n        if (new_el.is('span')) {\n          reduced_dimension(new_el);\n        } else {\n          not_span_list.push(new_el);\n        }\n      });\n    }\n    $.each(body.find('span'), function () {\n      el = $(this);\n      if (!$.trim(el.text()).length) {\n        el.remove();\n      }\n    });\n    range.endContainer.ownerDocument.getSelection().empty();\n  }\n\n  // make <span class='a'>123<span class='b'>4</span>5</span> become\n  // <span class='a'>123</span> <span class='b'>4</span> <span class='a'>5</span>\n  function reduced_dimension(span) {\n    if (span.children('span').length) {\n      class_name = $.trim(span.get(0).className);\n      for (var i = 0; i < span.children('span').length; i++) {\n        child_span = $(span.children('span')[i]);\n        reduced_dimension(child_span);\n      }\n\n      console.log(span.parents('span').length);\n      html_text = span.html();\n      if (!class_name.length) {\n        class_name = 'wysiwyg-color-clear';\n      }\n      html_text = html_text.replace(/<span\\ /, '</span><span ');\n      html_text = html_text.replace(/<\\/span>(?![\\s\\S]*<\\/span>[\\s\\S]*$)/i, \"</span><span class='\" + class_name + \"'>\");\n      html_text = \"<span class='\" + class_name + \"'>\" + html_text + \"</span>\";\n      span.replaceWith(html_text);\n    } else {\n      return;\n    }\n  }\n\n  function _getApplier(tagName, className, classRegExp) {\n    var identifier = tagName + \":\" + className;\n    if (!htmlApplier[identifier]) {\n      htmlApplier[identifier] = new wysihtml5.selection.HTMLApplier(_getTagNames(tagName), className, classRegExp, true);\n    }\n    return htmlApplier[identifier];\n  }\n\n  wysihtml5.commands.formatInline = {\n    exec: function exec(composer, command, tagName, className, classRegExp) {\n      var range = composer.selection.getRange();\n      if (!range) {\n        return false;\n      }\n      _getApplier(tagName, className, classRegExp).toggleRange(range);\n      composer.selection.setSelection(range);\n      _formatClear(range);\n    },\n\n    state: function state(composer, command, tagName, className, classRegExp) {\n      var doc = composer.doc,\n          aliasTagName = ALIAS_MAPPING[tagName] || tagName,\n          range;\n\n      // Check whether the document contains a node with the desired tagName\n      if (!wysihtml5.dom.hasElementWithTagName(doc, tagName) && !wysihtml5.dom.hasElementWithTagName(doc, aliasTagName)) {\n        return false;\n      }\n\n      // Check whether the document contains a node with the desired className\n      if (className && !wysihtml5.dom.hasElementWithClassName(doc, className)) {\n        return false;\n      }\n\n      range = composer.selection.getRange();\n      if (!range) {\n        return false;\n      }\n\n      return _getApplier(tagName, className, classRegExp).isAppliedToRange(range);\n    },\n\n    value: function value() {\n      return undef;\n    }\n  };\n})(wysihtml5);(function (wysihtml5) {\n  var undef;\n\n  wysihtml5.commands.insertHTML = {\n    exec: function exec(composer, command, html) {\n      if (composer.commands.support(command)) {\n        composer.doc.execCommand(command, false, html);\n      } else {\n        composer.selection.insertHTML(html);\n      }\n    },\n\n    state: function state() {\n      return false;\n    },\n\n    value: function value() {\n      return undef;\n    }\n  };\n})(wysihtml5);(function (wysihtml5) {\n  var NODE_NAME = \"IMG\";\n\n  wysihtml5.commands.insertImage = {\n    /**\n     * Inserts an <img>\n     * If selection is already an image link, it removes it\n     * \n     * @example\n     *    // either ...\n     *    wysihtml5.commands.insertImage.exec(composer, \"insertImage\", \"http://www.google.de/logo.jpg\");\n     *    // ... or ...\n     *    wysihtml5.commands.insertImage.exec(composer, \"insertImage\", { src: \"http://www.google.de/logo.jpg\", title: \"foo\" });\n     */\n    exec: function exec(composer, command, value) {\n      value = (typeof value === \"undefined\" ? \"undefined\" : _typeof(value)) === \"object\" ? value : { src: value };\n\n      var doc = composer.doc,\n          image = this.state(composer),\n          textNode,\n          i,\n          parent;\n\n      if (image) {\n        // Image already selected, set the caret before it and delete it\n        composer.selection.setBefore(image);\n        parent = image.parentNode;\n        parent.removeChild(image);\n\n        // and it's parent <a> too if it hasn't got any other relevant child nodes\n        wysihtml5.dom.removeEmptyTextNodes(parent);\n        if (parent.nodeName === \"A\" && !parent.firstChild) {\n          composer.selection.setAfter(parent);\n          parent.parentNode.removeChild(parent);\n        }\n\n        // firefox and ie sometimes don't remove the image handles, even though the image got removed\n        wysihtml5.quirks.redraw(composer.element);\n        return;\n      }\n\n      image = doc.createElement(NODE_NAME);\n\n      for (i in value) {\n        image[i] = value[i];\n      }\n\n      composer.selection.insertNode(image);\n      if (wysihtml5.browser.hasProblemsSettingCaretAfterImg()) {\n        textNode = doc.createTextNode(wysihtml5.INVISIBLE_SPACE);\n        composer.selection.insertNode(textNode);\n        composer.selection.setAfter(textNode);\n      } else {\n        composer.selection.setAfter(image);\n      }\n    },\n\n    state: function state(composer) {\n      var doc = composer.doc,\n          selectedNode,\n          text,\n          imagesInSelection;\n\n      if (!wysihtml5.dom.hasElementWithTagName(doc, NODE_NAME)) {\n        return false;\n      }\n\n      selectedNode = composer.selection.getSelectedNode();\n      if (!selectedNode) {\n        return false;\n      }\n\n      if (selectedNode.nodeName === NODE_NAME) {\n        // This works perfectly in IE\n        return selectedNode;\n      }\n\n      if (selectedNode.nodeType !== wysihtml5.ELEMENT_NODE) {\n        return false;\n      }\n\n      text = composer.selection.getText();\n      text = wysihtml5.lang.string(text).trim();\n      if (text) {\n        return false;\n      }\n\n      imagesInSelection = composer.selection.getNodes(wysihtml5.ELEMENT_NODE, function (node) {\n        return node.nodeName === \"IMG\";\n      });\n\n      if (imagesInSelection.length !== 1) {\n        return false;\n      }\n\n      return imagesInSelection[0];\n    },\n\n    value: function value(composer) {\n      var image = this.state(composer);\n      return image && image.src;\n    }\n  };\n})(wysihtml5);(function (wysihtml5) {\n  var undef,\n      LINE_BREAK = \"<br>\" + (wysihtml5.browser.needsSpaceAfterLineBreak() ? \" \" : \"\");\n\n  wysihtml5.commands.insertLineBreak = {\n    exec: function exec(composer, command) {\n      if (composer.commands.support(command)) {\n        composer.doc.execCommand(command, false, null);\n        if (!wysihtml5.browser.autoScrollsToCaret()) {\n          composer.selection.scrollIntoView();\n        }\n      } else {\n        composer.commands.exec(\"insertHTML\", LINE_BREAK);\n      }\n    },\n\n    state: function state() {\n      return false;\n    },\n\n    value: function value() {\n      return undef;\n    }\n  };\n})(wysihtml5);(function (wysihtml5) {\n  var undef;\n  //\n  // function _removeFormat(composer, anchors) {\n  //   var length  = anchors.length,\n  //       i       = 0,\n  //       anchor,\n  //       codeElement,\n  //       textContent;\n  //   for (; i<length; i++) {\n  //     anchor      = anchors[i];\n  //     codeElement = dom.getParentElement(anchor, { nodeName: \"code\" });\n  //     textContent = dom.getTextContent(anchor);\n  //\n  //     // if <a> contains url-like text content, rename it to <code> to prevent re-autolinking\n  //     // else replace <a> with its childNodes\n  //     if (textContent.match(dom.autoLink.URL_REG_EXP) && !codeElement) {\n  //       // <code> element is used to prevent later auto-linking of the content\n  //       codeElement = dom.renameElement(anchor, \"code\");\n  //     } else {\n  //       dom.replaceWithChildNodes(anchor);\n  //     }\n  //   }\n  // }\n  //\n  //\n  wysihtml5.commands.clear = {\n    exec: function exec(composer, command) {\n      composer.doc.execCommand('removeFormat');\n      REG_EXP = /wysiwyg-color-[a-z]+/g;\n      wysihtml5.commands.formatInline.exec(composer, command, \"span\", \"\", REG_EXP);\n    }\n  };\n  wysihtml5.commands.insertOrderedList = {\n    exec: function exec(composer, command) {\n      var doc = composer.doc,\n          selectedNode = composer.selection.getSelectedNode(),\n          list = wysihtml5.dom.getParentElement(selectedNode, { nodeName: \"OL\" }),\n          otherList = wysihtml5.dom.getParentElement(selectedNode, { nodeName: \"UL\" }),\n          tempClassName = \"_wysihtml5-temp-\" + new Date().getTime(),\n          isEmpty,\n          tempElement;\n\n      if (composer.commands.support(command)) {\n        doc.execCommand(command, false, null);\n        return;\n      }\n\n      if (list) {\n        // Unwrap list\n        // <ol><li>foo</li><li>bar</li></ol>\n        // becomes:\n        // foo<br>bar<br>\n        composer.selection.executeAndRestoreSimple(function () {\n          wysihtml5.dom.resolveList(list);\n        });\n      } else if (otherList) {\n        // Turn an unordered list into an ordered list\n        // <ul><li>foo</li><li>bar</li></ul>\n        // becomes:\n        // <ol><li>foo</li><li>bar</li></ol>\n        composer.selection.executeAndRestoreSimple(function () {\n          wysihtml5.dom.renameElement(otherList, \"ol\");\n        });\n      } else {\n        // Create list\n        composer.commands.exec(\"formatBlock\", \"div\", tempClassName);\n        tempElement = doc.querySelector(\".\" + tempClassName);\n        isEmpty = tempElement.innerHTML === \"\" || tempElement.innerHTML === wysihtml5.INVISIBLE_SPACE;\n        composer.selection.executeAndRestoreSimple(function () {\n          list = wysihtml5.dom.convertToList(tempElement, \"ol\");\n        });\n        if (isEmpty) {\n          composer.selection.selectNode(list.querySelector(\"li\"));\n        }\n      }\n    },\n\n    state: function state(composer) {\n      var selectedNode = composer.selection.getSelectedNode();\n      return wysihtml5.dom.getParentElement(selectedNode, { nodeName: \"OL\" });\n    },\n\n    value: function value() {\n      return undef;\n    }\n  };\n})(wysihtml5);(function (wysihtml5) {\n  var undef;\n\n  wysihtml5.commands.insertUnorderedList = {\n    exec: function exec(composer, command) {\n      var doc = composer.doc,\n          selectedNode = composer.selection.getSelectedNode(),\n          list = wysihtml5.dom.getParentElement(selectedNode, { nodeName: \"UL\" }),\n          otherList = wysihtml5.dom.getParentElement(selectedNode, { nodeName: \"OL\" }),\n          tempClassName = \"_wysihtml5-temp-\" + new Date().getTime(),\n          isEmpty,\n          tempElement;\n\n      if (composer.commands.support(command)) {\n        doc.execCommand(command, false, null);\n        return;\n      }\n\n      if (list) {\n        // Unwrap list\n        // <ul><li>foo</li><li>bar</li></ul>\n        // becomes:\n        // foo<br>bar<br>\n        composer.selection.executeAndRestoreSimple(function () {\n          wysihtml5.dom.resolveList(list);\n        });\n      } else if (otherList) {\n        // Turn an ordered list into an unordered list\n        // <ol><li>foo</li><li>bar</li></ol>\n        // becomes:\n        // <ul><li>foo</li><li>bar</li></ul>\n        composer.selection.executeAndRestoreSimple(function () {\n          wysihtml5.dom.renameElement(otherList, \"ul\");\n        });\n      } else {\n        // Create list\n        composer.commands.exec(\"formatBlock\", \"div\", tempClassName);\n        tempElement = doc.querySelector(\".\" + tempClassName);\n        isEmpty = tempElement.innerHTML === \"\" || tempElement.innerHTML === wysihtml5.INVISIBLE_SPACE;\n        composer.selection.executeAndRestoreSimple(function () {\n          list = wysihtml5.dom.convertToList(tempElement, \"ul\");\n        });\n        if (isEmpty) {\n          composer.selection.selectNode(list.querySelector(\"li\"));\n        }\n      }\n    },\n\n    state: function state(composer) {\n      var selectedNode = composer.selection.getSelectedNode();\n      return wysihtml5.dom.getParentElement(selectedNode, { nodeName: \"UL\" });\n    },\n\n    value: function value() {\n      return undef;\n    }\n  };\n})(wysihtml5);(function (wysihtml5) {\n  var undef;\n\n  wysihtml5.commands.italic = {\n    exec: function exec(composer, command) {\n      return wysihtml5.commands.formatInline.exec(composer, command, \"i\");\n    },\n\n    state: function state(composer, command, color) {\n      // element.ownerDocument.queryCommandState(\"italic\") results:\n      // firefox: only <i>\n      // chrome:  <i>, <em>, <blockquote>, ...\n      // ie:      <i>, <em>\n      // opera:   only <i>\n      return wysihtml5.commands.formatInline.state(composer, command, \"i\");\n    },\n\n    value: function value() {\n      return undef;\n    }\n  };\n})(wysihtml5);(function (wysihtml5) {\n  var undef,\n      CLASS_NAME = \"wysiwyg-text-align-center\",\n      REG_EXP = /wysiwyg-text-align-[a-z]+/g;\n\n  wysihtml5.commands.justifyCenter = {\n    exec: function exec(composer, command) {\n      return wysihtml5.commands.formatBlock.exec(composer, \"formatBlock\", null, CLASS_NAME, REG_EXP);\n    },\n\n    state: function state(composer, command) {\n      return wysihtml5.commands.formatBlock.state(composer, \"formatBlock\", null, CLASS_NAME, REG_EXP);\n    },\n\n    value: function value() {\n      return undef;\n    }\n  };\n})(wysihtml5);(function (wysihtml5) {\n  var undef,\n      CLASS_NAME = \"wysiwyg-text-align-left\",\n      REG_EXP = /wysiwyg-text-align-[a-z]+/g;\n\n  wysihtml5.commands.justifyLeft = {\n    exec: function exec(composer, command) {\n      return wysihtml5.commands.formatBlock.exec(composer, \"formatBlock\", null, CLASS_NAME, REG_EXP);\n    },\n\n    state: function state(composer, command) {\n      return wysihtml5.commands.formatBlock.state(composer, \"formatBlock\", null, CLASS_NAME, REG_EXP);\n    },\n\n    value: function value() {\n      return undef;\n    }\n  };\n})(wysihtml5);(function (wysihtml5) {\n  var undef,\n      CLASS_NAME = \"wysiwyg-text-align-right\",\n      REG_EXP = /wysiwyg-text-align-[a-z]+/g;\n\n  wysihtml5.commands.justifyRight = {\n    exec: function exec(composer, command) {\n      return wysihtml5.commands.formatBlock.exec(composer, \"formatBlock\", null, CLASS_NAME, REG_EXP);\n    },\n\n    state: function state(composer, command) {\n      return wysihtml5.commands.formatBlock.state(composer, \"formatBlock\", null, CLASS_NAME, REG_EXP);\n    },\n\n    value: function value() {\n      return undef;\n    }\n  };\n})(wysihtml5);(function (wysihtml5) {\n  var undef;\n  wysihtml5.commands.underline = {\n    exec: function exec(composer, command) {\n      return wysihtml5.commands.formatInline.exec(composer, command, \"u\");\n    },\n\n    state: function state(composer, command) {\n      return wysihtml5.commands.formatInline.state(composer, command, \"u\");\n    },\n\n    value: function value() {\n      return undef;\n    }\n  };\n})(wysihtml5); /**\n               * Undo Manager for wysihtml5\n               * slightly inspired by http://rniwa.com/editing/undomanager.html#the-undomanager-interface\n               */\n(function (wysihtml5) {\n  var Z_KEY = 90,\n      Y_KEY = 89,\n      BACKSPACE_KEY = 8,\n      DELETE_KEY = 46,\n      MAX_HISTORY_ENTRIES = 40,\n      UNDO_HTML = '<span id=\"_wysihtml5-undo\" class=\"_wysihtml5-temp\">' + wysihtml5.INVISIBLE_SPACE + '</span>',\n      REDO_HTML = '<span id=\"_wysihtml5-redo\" class=\"_wysihtml5-temp\">' + wysihtml5.INVISIBLE_SPACE + '</span>',\n      dom = wysihtml5.dom;\n\n  function cleanTempElements(doc) {\n    var tempElement;\n    while (tempElement = doc.querySelector(\"._wysihtml5-temp\")) {\n      tempElement.parentNode.removeChild(tempElement);\n    }\n  }\n\n  wysihtml5.UndoManager = wysihtml5.lang.Dispatcher.extend(\n  /** @scope wysihtml5.UndoManager.prototype */{\n    constructor: function constructor(editor) {\n      this.editor = editor;\n      this.composer = editor.composer;\n      this.element = this.composer.element;\n      this.history = [this.composer.getValue()];\n      this.position = 1;\n\n      // Undo manager currently only supported in browsers who have the insertHTML command (not IE)\n      if (this.composer.commands.support(\"insertHTML\")) {\n        this._observe();\n      }\n    },\n\n    _observe: function _observe() {\n      var that = this,\n          doc = this.composer.sandbox.getDocument(),\n          lastKey;\n\n      // Catch CTRL+Z and CTRL+Y\n      dom.observe(this.element, \"keydown\", function (event) {\n        if (event.altKey || !event.ctrlKey && !event.metaKey) {\n          return;\n        }\n\n        var keyCode = event.keyCode,\n            isUndo = keyCode === Z_KEY && !event.shiftKey,\n            isRedo = keyCode === Z_KEY && event.shiftKey || keyCode === Y_KEY;\n\n        if (isUndo) {\n          that.undo();\n          event.preventDefault();\n        } else if (isRedo) {\n          that.redo();\n          event.preventDefault();\n        }\n      });\n\n      // Catch delete and backspace\n      dom.observe(this.element, \"keydown\", function (event) {\n        var keyCode = event.keyCode;\n        if (keyCode === lastKey) {\n          return;\n        }\n\n        lastKey = keyCode;\n\n        if (keyCode === BACKSPACE_KEY || keyCode === DELETE_KEY) {\n          that.transact();\n        }\n      });\n\n      // Now this is very hacky:\n      // These days browsers don't offer a undo/redo event which we could hook into\n      // to be notified when the user hits undo/redo in the contextmenu.\n      // Therefore we simply insert two elements as soon as the contextmenu gets opened.\n      // The last element being inserted will be immediately be removed again by a exexCommand(\"undo\")\n      //  => When the second element appears in the dom tree then we know the user clicked \"redo\" in the context menu\n      //  => When the first element disappears from the dom tree then we know the user clicked \"undo\" in the context menu\n      if (wysihtml5.browser.hasUndoInContextMenu()) {\n        var interval,\n            observed,\n            cleanUp = function cleanUp() {\n          cleanTempElements(doc);\n          clearInterval(interval);\n        };\n\n        dom.observe(this.element, \"contextmenu\", function () {\n          cleanUp();\n          that.composer.selection.executeAndRestoreSimple(function () {\n            if (that.element.lastChild) {\n              that.composer.selection.setAfter(that.element.lastChild);\n            }\n\n            // enable undo button in context menu\n            doc.execCommand(\"insertHTML\", false, UNDO_HTML);\n            // enable redo button in context menu\n            doc.execCommand(\"insertHTML\", false, REDO_HTML);\n            doc.execCommand(\"undo\", false, null);\n          });\n\n          interval = setInterval(function () {\n            if (doc.getElementById(\"_wysihtml5-redo\")) {\n              cleanUp();\n              that.redo();\n            }\n          }, 400);\n\n          if (!observed) {\n            observed = true;\n            dom.observe(document, \"mousedown\", cleanUp);\n            dom.observe(doc, [\"mousedown\", \"paste\", \"cut\", \"copy\"], cleanUp);\n          }\n        });\n      }\n\n      this.editor.observe(\"newword:composer\", function () {\n        that.transact();\n      }).observe(\"beforecommand:composer\", function () {\n        that.transact();\n      });\n    },\n\n    transact: function transact() {\n      var previousHtml = this.history[this.position - 1],\n          currentHtml = this.composer.getValue();\n\n      if (currentHtml == previousHtml) {\n        return;\n      }\n\n      var length = this.history.length = this.position;\n      if (length > MAX_HISTORY_ENTRIES) {\n        this.history.shift();\n        this.position--;\n      }\n\n      this.position++;\n      this.history.push(currentHtml);\n    },\n\n    undo: function undo() {\n      this.transact();\n\n      if (this.position <= 1) {\n        return;\n      }\n\n      this.set(this.history[--this.position - 1]);\n      this.editor.fire(\"undo:composer\");\n    },\n\n    redo: function redo() {\n      if (this.position >= this.history.length) {\n        return;\n      }\n\n      this.set(this.history[++this.position - 1]);\n      this.editor.fire(\"redo:composer\");\n    },\n\n    set: function set(html) {\n      this.composer.setValue(html);\n      this.editor.focus(true);\n    }\n  });\n})(wysihtml5);\n/**\n * TODO: the following methods still need unit test coverage\n */\nwysihtml5.views.View = Base.extend(\n/** @scope wysihtml5.views.View.prototype */{\n  constructor: function constructor(parent, textareaElement, config) {\n    this.parent = parent;\n    this.element = textareaElement;\n    this.config = config;\n\n    this._observeViewChange();\n  },\n\n  _observeViewChange: function _observeViewChange() {\n    var that = this;\n    this.parent.observe(\"beforeload\", function () {\n      that.parent.observe(\"change_view\", function (view) {\n        if (view === that.name) {\n          that.parent.currentView = that;\n          that.show();\n          // Using tiny delay here to make sure that the placeholder is set before focusing\n          setTimeout(function () {\n            that.focus();\n          }, 0);\n        } else {\n          that.hide();\n        }\n      });\n    });\n  },\n\n  focus: function focus() {\n    if (this.element.ownerDocument.querySelector(\":focus\") === this.element) {\n      return;\n    }\n\n    try {\n      this.element.focus();\n    } catch (e) {}\n  },\n\n  hide: function hide() {\n    this.element.style.display = \"none\";\n  },\n\n  show: function show() {\n    this.element.style.display = \"\";\n  },\n\n  disable: function disable() {\n    this.element.setAttribute(\"disabled\", \"disabled\");\n  },\n\n  enable: function enable() {\n    this.element.removeAttribute(\"disabled\");\n  }\n});(function (wysihtml5) {\n  var dom = wysihtml5.dom,\n      browser = wysihtml5.browser;\n\n  wysihtml5.views.Composer = wysihtml5.views.View.extend(\n  /** @scope wysihtml5.views.Composer.prototype */{\n    name: \"composer\",\n\n    // Needed for firefox in order to display a proper caret in an empty contentEditable\n    CARET_HACK: \"<br>\",\n\n    constructor: function constructor(parent, textareaElement, config) {\n      this.base(parent, textareaElement, config);\n      this.textarea = this.parent.textarea;\n      this._initSandbox();\n    },\n\n    clear: function clear() {\n      this.element.innerHTML = browser.displaysCaretInEmptyContentEditableCorrectly() ? \"\" : this.CARET_HACK;\n    },\n\n    getValue: function getValue(parse) {\n      var value = this.isEmpty() ? \"\" : wysihtml5.quirks.getCorrectInnerHTML(this.element);\n\n      if (parse) {\n        value = this.parent.parse(value);\n      }\n\n      // Replace all \"zero width no breaking space\" chars\n      // which are used as hacks to enable some functionalities\n      // Also remove all CARET hacks that somehow got left\n      value = wysihtml5.lang.string(value).replace(wysihtml5.INVISIBLE_SPACE).by(\"\");\n\n      return value;\n    },\n\n    setValue: function setValue(html, parse) {\n      if (parse) {\n        html = this.parent.parse(html);\n      }\n      this.element.innerHTML = html;\n    },\n\n    show: function show() {\n      this.iframe.style.display = this._displayStyle || \"\";\n\n      // Firefox needs this, otherwise contentEditable becomes uneditable\n      this.disable();\n      this.enable();\n    },\n\n    hide: function hide() {\n      this._displayStyle = dom.getStyle(\"display\").from(this.iframe);\n      if (this._displayStyle === \"none\") {\n        this._displayStyle = null;\n      }\n      this.iframe.style.display = \"none\";\n    },\n\n    disable: function disable() {\n      this.element.removeAttribute(\"contentEditable\");\n      this.base();\n    },\n\n    enable: function enable() {\n      this.element.setAttribute(\"contentEditable\", \"true\");\n      this.base();\n    },\n\n    focus: function focus(setToEnd) {\n      // IE 8 fires the focus event after .focus()\n      // This is needed by our simulate_placeholder.js to work\n      // therefore we clear it ourselves this time\n      if (wysihtml5.browser.doesAsyncFocus() && this.hasPlaceholderSet()) {\n        this.clear();\n      }\n\n      this.base();\n\n      var lastChild = this.element.lastChild;\n      if (setToEnd && lastChild) {\n        if (lastChild.nodeName === \"BR\") {\n          this.selection.setBefore(this.element.lastChild);\n        } else {\n          this.selection.setAfter(this.element.lastChild);\n        }\n      }\n    },\n\n    getTextContent: function getTextContent() {\n      return dom.getTextContent(this.element);\n    },\n\n    hasPlaceholderSet: function hasPlaceholderSet() {\n      return this.getTextContent() == this.textarea.element.getAttribute(\"placeholder\");\n    },\n\n    isEmpty: function isEmpty() {\n      var innerHTML = this.element.innerHTML,\n          elementsWithVisualValue = \"blockquote, ul, ol, img, embed, object, table, iframe, svg, video, audio, button, input, select, textarea\";\n      return innerHTML === \"\" || innerHTML === this.CARET_HACK || this.hasPlaceholderSet() || this.getTextContent() === \"\" && !this.element.querySelector(elementsWithVisualValue);\n    },\n\n    _initSandbox: function _initSandbox() {\n      var that = this;\n\n      this.sandbox = new dom.Sandbox(function () {\n        that._create();\n      }, {\n        stylesheets: this.config.stylesheets\n      });\n      this.iframe = this.sandbox.getIframe();\n\n      // Create hidden field which tells the server after submit, that the user used an wysiwyg editor\n      var hiddenField = document.createElement(\"input\");\n      hiddenField.type = \"hidden\";\n      hiddenField.name = \"_wysihtml5_mode\";\n      hiddenField.value = 1;\n\n      // Store reference to current wysihtml5 instance on the textarea element\n      var textareaElement = this.textarea.element;\n      dom.insert(this.iframe).after(textareaElement);\n      dom.insert(hiddenField).after(textareaElement);\n    },\n\n    _create: function _create() {\n      var that = this;\n\n      this.doc = this.sandbox.getDocument();\n      this.element = this.doc.body;\n      this.textarea = this.parent.textarea;\n      this.element.innerHTML = this.textarea.getValue(true);\n      this.enable();\n\n      // Make sure our selection handler is ready\n      this.selection = new wysihtml5.Selection(this.parent);\n\n      // Make sure commands dispatcher is ready\n      this.commands = new wysihtml5.Commands(this.parent);\n\n      dom.copyAttributes([\"className\", \"spellcheck\", \"title\", \"lang\", \"dir\", \"accessKey\"]).from(this.textarea.element).to(this.element);\n\n      dom.addClass(this.element, this.config.composerClassName);\n\n      // Make the editor look like the original textarea, by syncing styles\n      if (this.config.style) {\n        this.style();\n      }\n\n      this.observe();\n\n      var name = this.config.name;\n      if (name) {\n        dom.addClass(this.element, name);\n        dom.addClass(this.iframe, name);\n      }\n\n      // Simulate html5 placeholder attribute on contentEditable element\n      var placeholderText = typeof this.config.placeholder === \"string\" ? this.config.placeholder : this.textarea.element.getAttribute(\"placeholder\");\n      if (placeholderText) {\n        dom.simulatePlaceholder(this.parent, this, placeholderText);\n      }\n\n      // Make sure that the browser avoids using inline styles whenever possible\n      this.commands.exec(\"styleWithCSS\", false);\n\n      this._initAutoLinking();\n      this._initObjectResizing();\n      this._initUndoManager();\n\n      // Simulate html5 autofocus on contentEditable element\n      if (this.textarea.element.hasAttribute(\"autofocus\") || document.querySelector(\":focus\") == this.textarea.element) {\n        setTimeout(function () {\n          that.focus();\n        }, 100);\n      }\n\n      wysihtml5.quirks.insertLineBreakOnReturn(this);\n\n      // IE sometimes leaves a single paragraph, which can't be removed by the user\n      if (!browser.clearsContentEditableCorrectly()) {\n        wysihtml5.quirks.ensureProperClearing(this);\n      }\n\n      if (!browser.clearsListsInContentEditableCorrectly()) {\n        wysihtml5.quirks.ensureProperClearingOfLists(this);\n      }\n\n      // Set up a sync that makes sure that textarea and editor have the same content\n      if (this.initSync && this.config.sync) {\n        this.initSync();\n      }\n\n      // Okay hide the textarea, we are ready to go\n      this.textarea.hide();\n\n      // Fire global (before-)load event\n      this.parent.fire(\"beforeload\").fire(\"load\");\n    },\n\n    _initAutoLinking: function _initAutoLinking() {\n      var that = this,\n          supportsDisablingOfAutoLinking = browser.canDisableAutoLinking(),\n          supportsAutoLinking = browser.doesAutoLinkingInContentEditable();\n      if (supportsDisablingOfAutoLinking) {\n        this.commands.exec(\"autoUrlDetect\", false);\n      }\n\n      if (!this.config.autoLink) {\n        return;\n      }\n\n      // Only do the auto linking by ourselves when the browser doesn't support auto linking\n      // OR when he supports auto linking but we were able to turn it off (IE9+)\n      if (!supportsAutoLinking || supportsAutoLinking && supportsDisablingOfAutoLinking) {\n        this.parent.observe(\"newword:composer\", function () {\n          that.selection.executeAndRestore(function (startContainer, endContainer) {\n            dom.autoLink(endContainer.parentNode);\n          });\n        });\n      }\n\n      // Assuming we have the following:\n      //  <a href=\"http://www.google.de\">http://www.google.de</a>\n      // If a user now changes the url in the innerHTML we want to make sure that\n      // it's synchronized with the href attribute (as long as the innerHTML is still a url)\n      var // Use a live NodeList to check whether there are any links in the document\n      links = this.sandbox.getDocument().getElementsByTagName(\"a\"),\n\n\n      // The autoLink helper method reveals a reg exp to detect correct urls\n      urlRegExp = dom.autoLink.URL_REG_EXP,\n          getTextContent = function getTextContent(element) {\n        var textContent = wysihtml5.lang.string(dom.getTextContent(element)).trim();\n        if (textContent.substr(0, 4) === \"www.\") {\n          textContent = \"http://\" + textContent;\n        }\n        return textContent;\n      };\n\n      dom.observe(this.element, \"keydown\", function (event) {\n        if (!links.length) {\n          return;\n        }\n\n        var selectedNode = that.selection.getSelectedNode(event.target.ownerDocument),\n            link = dom.getParentElement(selectedNode, { nodeName: \"A\" }, 4),\n            textContent;\n\n        if (!link) {\n          return;\n        }\n\n        textContent = getTextContent(link);\n        // keydown is fired before the actual content is changed\n        // therefore we set a timeout to change the href\n        setTimeout(function () {\n          var newTextContent = getTextContent(link);\n          if (newTextContent === textContent) {\n            return;\n          }\n\n          // Only set href when new href looks like a valid url\n          if (newTextContent.match(urlRegExp)) {\n            link.setAttribute(\"href\", newTextContent);\n          }\n        }, 0);\n      });\n    },\n\n    _initObjectResizing: function _initObjectResizing() {\n      var properties = [\"width\", \"height\"],\n          propertiesLength = properties.length,\n          element = this.element;\n\n      this.commands.exec(\"enableObjectResizing\", this.config.allowObjectResizing);\n\n      if (this.config.allowObjectResizing) {\n        // IE sets inline styles after resizing objects\n        // The following lines make sure that the width/height css properties\n        // are copied over to the width/height attributes\n        if (browser.supportsEvent(\"resizeend\")) {\n          dom.observe(element, \"resizeend\", function (event) {\n            var target = event.target || event.srcElement,\n                style = target.style,\n                i = 0,\n                property;\n            for (; i < propertiesLength; i++) {\n              property = properties[i];\n              if (style[property]) {\n                target.setAttribute(property, parseInt(style[property], 10));\n                style[property] = \"\";\n              }\n            }\n            // After resizing IE sometimes forgets to remove the old resize handles\n            wysihtml5.quirks.redraw(element);\n          });\n        }\n      } else {\n        if (browser.supportsEvent(\"resizestart\")) {\n          dom.observe(element, \"resizestart\", function (event) {\n            event.preventDefault();\n          });\n        }\n      }\n    },\n\n    _initUndoManager: function _initUndoManager() {\n      new wysihtml5.UndoManager(this.parent);\n    }\n  });\n})(wysihtml5);(function (wysihtml5) {\n  var dom = wysihtml5.dom,\n      doc = document,\n      win = window,\n      HOST_TEMPLATE = doc.createElement(\"div\"),\n\n\n  /**\n   * Styles to copy from textarea to the composer element\n   */\n  TEXT_FORMATTING = [\"background-color\", \"color\", \"cursor\", \"font-family\", \"font-size\", \"font-style\", \"font-variant\", \"font-weight\", \"line-height\", \"letter-spacing\", \"text-align\", \"text-decoration\", \"text-indent\", \"text-rendering\", \"word-break\", \"word-wrap\", \"word-spacing\"],\n\n\n  /**\n   * Styles to copy from textarea to the iframe\n   */\n  BOX_FORMATTING = [\"background-color\", \"border-collapse\", \"border-bottom-color\", \"border-bottom-style\", \"border-bottom-width\", \"border-left-color\", \"border-left-style\", \"border-left-width\", \"border-right-color\", \"border-right-style\", \"border-right-width\", \"border-top-color\", \"border-top-style\", \"border-top-width\", \"clear\", \"display\", \"float\", \"margin-bottom\", \"margin-left\", \"margin-right\", \"margin-top\", \"outline-color\", \"outline-offset\", \"outline-width\", \"outline-style\", \"padding-left\", \"padding-right\", \"padding-top\", \"padding-bottom\", \"position\", \"top\", \"left\", \"right\", \"bottom\", \"z-index\", \"vertical-align\", \"text-align\", \"-webkit-box-sizing\", \"-moz-box-sizing\", \"-ms-box-sizing\", \"box-sizing\", \"-webkit-box-shadow\", \"-moz-box-shadow\", \"-ms-box-shadow\", \"box-shadow\", \"-webkit-border-top-right-radius\", \"-moz-border-radius-topright\", \"border-top-right-radius\", \"-webkit-border-bottom-right-radius\", \"-moz-border-radius-bottomright\", \"border-bottom-right-radius\", \"-webkit-border-bottom-left-radius\", \"-moz-border-radius-bottomleft\", \"border-bottom-left-radius\", \"-webkit-border-top-left-radius\", \"-moz-border-radius-topleft\", \"border-top-left-radius\", \"width\", \"height\"],\n\n\n  /**\n   * Styles to sync while the window gets resized\n   */\n  RESIZE_STYLE = [\"width\", \"height\", \"top\", \"left\", \"right\", \"bottom\"],\n      ADDITIONAL_CSS_RULES = [\"html             { height: 100%; }\", \"body             { min-height: 100%; padding: 0; margin: 0; margin-top: -1px; padding-top: 1px; white-space: pre-wrap; }\", \"._wysihtml5-temp { display: none; }\", wysihtml5.browser.isGecko ? \"body.placeholder { color: graytext !important; }\" : \"body.placeholder { color: #a9a9a9 !important; }\", \"body[disabled]   { background-color: #eee !important; color: #999 !important; cursor: default !important; }\",\n  // Ensure that user see's broken images and can delete them\n  \"img:-moz-broken  { -moz-force-broken-image-icon: 1; height: 24px; width: 24px; }\"];\n\n  /**\n   * With \"setActive\" IE offers a smart way of focusing elements without scrolling them into view:\n   * http://msdn.microsoft.com/en-us/library/ms536738(v=vs.85).aspx\n   *\n   * Other browsers need a more hacky way: (pssst don't tell my mama)\n   * In order to prevent the element being scrolled into view when focusing it, we simply\n   * move it out of the scrollable area, focus it, and reset it's position\n   */\n  var focusWithoutScrolling = function focusWithoutScrolling(element) {\n    if (element.setActive) {\n      // Following line could cause a js error when the textarea is invisible\n      // See https://github.com/xing/wysihtml5/issues/9\n      try {\n        element.setActive();\n      } catch (e) {}\n    } else {\n      var elementStyle = element.style,\n          originalScrollTop = doc.documentElement.scrollTop || doc.body.scrollTop,\n          originalScrollLeft = doc.documentElement.scrollLeft || doc.body.scrollLeft,\n          originalStyles = {\n        position: elementStyle.position,\n        top: elementStyle.top,\n        left: elementStyle.left,\n        WebkitUserSelect: elementStyle.WebkitUserSelect\n      };\n\n      dom.setStyles({\n        position: \"absolute\",\n        top: \"-99999px\",\n        left: \"-99999px\",\n        // Don't ask why but temporarily setting -webkit-user-select to none makes the whole thing performing smoother\n        WebkitUserSelect: \"none\"\n      }).on(element);\n\n      element.focus();\n\n      dom.setStyles(originalStyles).on(element);\n\n      if (win.scrollTo) {\n        // Some browser extensions unset this method to prevent annoyances\n        // \"Better PopUp Blocker\" for Chrome http://code.google.com/p/betterpopupblocker/source/browse/trunk/blockStart.js#100\n        // Issue: http://code.google.com/p/betterpopupblocker/issues/detail?id=1\n        win.scrollTo(originalScrollLeft, originalScrollTop);\n      }\n    }\n  };\n\n  wysihtml5.views.Composer.prototype.style = function () {\n    var that = this,\n        originalActiveElement = doc.querySelector(\":focus\"),\n        textareaElement = this.textarea.element,\n        hasPlaceholder = textareaElement.hasAttribute(\"placeholder\"),\n        originalPlaceholder = hasPlaceholder && textareaElement.getAttribute(\"placeholder\");\n    this.focusStylesHost = this.focusStylesHost || HOST_TEMPLATE.cloneNode(false);\n    this.blurStylesHost = this.blurStylesHost || HOST_TEMPLATE.cloneNode(false);\n\n    // Remove placeholder before copying (as the placeholder has an affect on the computed style)\n    if (hasPlaceholder) {\n      textareaElement.removeAttribute(\"placeholder\");\n    }\n\n    if (textareaElement === originalActiveElement) {\n      textareaElement.blur();\n    }\n\n    // --------- iframe styles (has to be set before editor styles, otherwise IE9 sets wrong fontFamily on blurStylesHost) ---------\n    dom.copyStyles(BOX_FORMATTING).from(textareaElement).to(this.iframe).andTo(this.blurStylesHost);\n\n    // --------- editor styles ---------\n    dom.copyStyles(TEXT_FORMATTING).from(textareaElement).to(this.element).andTo(this.blurStylesHost);\n\n    // --------- apply standard rules ---------\n    dom.insertCSS(ADDITIONAL_CSS_RULES).into(this.element.ownerDocument);\n\n    // --------- :focus styles ---------\n    focusWithoutScrolling(textareaElement);\n    dom.copyStyles(BOX_FORMATTING).from(textareaElement).to(this.focusStylesHost);\n    dom.copyStyles(TEXT_FORMATTING).from(textareaElement).to(this.focusStylesHost);\n\n    // Make sure that we don't change the display style of the iframe when copying styles oblur/onfocus\n    // this is needed for when the change_view event is fired where the iframe is hidden and then\n    // the blur event fires and re-displays it\n    var boxFormattingStyles = wysihtml5.lang.array(BOX_FORMATTING).without([\"display\"]);\n\n    // --------- restore focus ---------\n    if (originalActiveElement) {\n      originalActiveElement.focus();\n    } else {\n      textareaElement.blur();\n    }\n\n    // --------- restore placeholder ---------\n    if (hasPlaceholder) {\n      textareaElement.setAttribute(\"placeholder\", originalPlaceholder);\n    }\n\n    // When copying styles, we only get the computed style which is never returned in percent unit\n    // Therefore we've to recalculate style onresize\n    if (!wysihtml5.browser.hasCurrentStyleProperty()) {\n      var winObserver = dom.observe(win, \"resize\", function () {\n        // Remove event listener if composer doesn't exist anymore\n        if (!dom.contains(document.documentElement, that.iframe)) {\n          winObserver.stop();\n          return;\n        }\n        var originalTextareaDisplayStyle = dom.getStyle(\"display\").from(textareaElement),\n            originalComposerDisplayStyle = dom.getStyle(\"display\").from(that.iframe);\n        textareaElement.style.display = \"\";\n        that.iframe.style.display = \"none\";\n        dom.copyStyles(RESIZE_STYLE).from(textareaElement).to(that.iframe).andTo(that.focusStylesHost).andTo(that.blurStylesHost);\n        that.iframe.style.display = originalComposerDisplayStyle;\n        textareaElement.style.display = originalTextareaDisplayStyle;\n      });\n    }\n\n    // --------- Sync focus/blur styles ---------\n    this.parent.observe(\"focus:composer\", function () {\n      dom.copyStyles(boxFormattingStyles).from(that.focusStylesHost).to(that.iframe);\n      dom.copyStyles(TEXT_FORMATTING).from(that.focusStylesHost).to(that.element);\n    });\n\n    this.parent.observe(\"blur:composer\", function () {\n      dom.copyStyles(boxFormattingStyles).from(that.blurStylesHost).to(that.iframe);\n      dom.copyStyles(TEXT_FORMATTING).from(that.blurStylesHost).to(that.element);\n    });\n\n    return this;\n  };\n})(wysihtml5); /**\n               * Taking care of events\n               *  - Simulating 'change' event on contentEditable element\n               *  - Handling drag & drop logic\n               *  - Catch paste events\n               *  - Dispatch proprietary newword:composer event\n               *  - Keyboard shortcuts\n               */\n(function (wysihtml5) {\n  var dom = wysihtml5.dom,\n      browser = wysihtml5.browser,\n\n\n  /**\n   * Map keyCodes to query commands\n   */\n  shortcuts = {\n    \"66\": \"bold\", // B\n    \"73\": \"italic\", // I\n    \"85\": \"underline\" // U\n  };\n\n  wysihtml5.views.Composer.prototype.observe = function () {\n    var that = this,\n        state = this.getValue(),\n        iframe = this.sandbox.getIframe(),\n        element = this.element,\n        focusBlurElement = browser.supportsEventsInIframeCorrectly() ? element : this.sandbox.getWindow(),\n\n\n    // Firefox < 3.5 doesn't support the drop event, instead it supports a so called \"dragdrop\" event which behaves almost the same\n    pasteEvents = browser.supportsEvent(\"drop\") ? [\"drop\", \"paste\"] : [\"dragdrop\", \"paste\"];\n\n    // --------- destroy:composer event ---------\n    dom.observe(iframe, \"DOMNodeRemoved\", function () {\n      clearInterval(domNodeRemovedInterval);\n      that.parent.fire(\"destroy:composer\");\n    });\n\n    // DOMNodeRemoved event is not supported in IE 8\n    var domNodeRemovedInterval = setInterval(function () {\n      if (!dom.contains(document.documentElement, iframe)) {\n        clearInterval(domNodeRemovedInterval);\n        that.parent.fire(\"destroy:composer\");\n      }\n    }, 250);\n\n    // --------- Focus & blur logic ---------\n    dom.observe(focusBlurElement, \"focus\", function () {\n      that.parent.fire(\"focus\").fire(\"focus:composer\");\n\n      // Delay storing of state until all focus handler are fired\n      // especially the one which resets the placeholder\n      setTimeout(function () {\n        state = that.getValue();\n      }, 0);\n    });\n\n    dom.observe(focusBlurElement, \"blur\", function () {\n      if (state !== that.getValue()) {\n        that.parent.fire(\"change\").fire(\"change:composer\");\n      }\n      that.parent.fire(\"blur\").fire(\"blur:composer\");\n    });\n\n    if (wysihtml5.browser.isIos()) {\n      // When on iPad/iPhone/IPod after clicking outside of editor, the editor loses focus\n      // but the UI still acts as if the editor has focus (blinking caret and onscreen keyboard visible)\n      // We prevent that by focusing a temporary input element which immediately loses focus\n      dom.observe(element, \"blur\", function () {\n        var input = element.ownerDocument.createElement(\"input\"),\n            originalScrollTop = document.documentElement.scrollTop || document.body.scrollTop,\n            originalScrollLeft = document.documentElement.scrollLeft || document.body.scrollLeft;\n        try {\n          that.selection.insertNode(input);\n        } catch (e) {\n          element.appendChild(input);\n        }\n        input.focus();\n        input.parentNode.removeChild(input);\n\n        window.scrollTo(originalScrollLeft, originalScrollTop);\n      });\n    }\n\n    // --------- Drag & Drop logic ---------\n    dom.observe(element, \"dragenter\", function () {\n      that.parent.fire(\"unset_placeholder\");\n    });\n\n    if (browser.firesOnDropOnlyWhenOnDragOverIsCancelled()) {\n      dom.observe(element, [\"dragover\", \"dragenter\"], function (event) {\n        event.preventDefault();\n      });\n    }\n\n    dom.observe(element, pasteEvents, function (event) {\n      var dataTransfer = event.dataTransfer,\n          data;\n\n      if (dataTransfer && browser.supportsDataTransfer()) {\n        data = dataTransfer.getData(\"text/html\") || dataTransfer.getData(\"text/plain\");\n      }\n      if (data) {\n        element.focus();\n        that.commands.exec(\"insertHTML\", data);\n        that.parent.fire(\"paste\").fire(\"paste:composer\");\n        event.stopPropagation();\n        event.preventDefault();\n      } else {\n        setTimeout(function () {\n          that.parent.fire(\"paste\").fire(\"paste:composer\");\n        }, 0);\n      }\n    });\n\n    // --------- neword event ------+---\n    dom.observe(element, \"keyup\", function (event) {\n      var keyCode = event.keyCode;\n      if (keyCode === wysihtml5.ENTER_KEY) {\n        that.parent.fire(\"newword:composer\");\n      }\n    });\n\n    this.parent.observe(\"paste:composer\", function () {\n      setTimeout(function () {\n        that.parent.fire(\"newword:composer\");\n      }, 0);\n    });\n\n    // --------- Make sure that images are selected when clicking on them ---------\n    if (!browser.canSelectImagesInContentEditable()) {\n      dom.observe(element, \"mousedown\", function (event) {\n        var target = event.target;\n        if (target.nodeName === \"IMG\") {\n          that.selection.selectNode(target);\n          event.preventDefault();\n        }\n      });\n    }\n\n    // --------- Shortcut logic ---------\n    dom.observe(element, \"keydown\", function (event) {\n      var keyCode = event.keyCode,\n          command = shortcuts[keyCode];\n      if ((event.ctrlKey || event.metaKey) && !event.altKey && command) {\n        that.commands.exec(command);\n        event.preventDefault();\n      }\n    });\n\n    // --------- Make sure that when pressing backspace/delete on selected images deletes the image and it's anchor ---------\n    dom.observe(element, \"keydown\", function (event) {\n      var target = that.selection.getSelectedNode(true),\n          keyCode = event.keyCode,\n          parent;\n      if (target && target.nodeName === \"IMG\" && (keyCode === wysihtml5.BACKSPACE_KEY || keyCode === wysihtml5.DELETE_KEY)) {\n        // 8 => backspace, 46 => delete\n        parent = target.parentNode;\n        // delete the <img>\n        parent.removeChild(target);\n        // and it's parent <a> too if it hasn't got any other child nodes\n        if (parent.nodeName === \"A\" && !parent.firstChild) {\n          parent.parentNode.removeChild(parent);\n        }\n\n        setTimeout(function () {\n          wysihtml5.quirks.redraw(element);\n        }, 0);\n        event.preventDefault();\n      }\n    });\n\n    // --------- Show url in tooltip when hovering links or images ---------\n    var titlePrefixes = {\n      IMG: \"Image: \",\n      A: \"Link: \"\n    };\n\n    dom.observe(element, \"mouseover\", function (event) {\n      var target = event.target,\n          nodeName = target.nodeName,\n          title;\n      if (nodeName !== \"A\" && nodeName !== \"IMG\") {\n        return;\n      }\n      var hasTitle = target.hasAttribute(\"title\");\n      if (!hasTitle) {\n        title = titlePrefixes[nodeName] + (target.getAttribute(\"href\") || target.getAttribute(\"src\"));\n        target.setAttribute(\"title\", title);\n      }\n    });\n  };\n})(wysihtml5); /**\n               * Class that takes care that the value of the composer and the textarea is always in sync\n               */\n(function (wysihtml5) {\n  var INTERVAL = 400;\n\n  wysihtml5.views.Synchronizer = Base.extend(\n  /** @scope wysihtml5.views.Synchronizer.prototype */{\n\n    constructor: function constructor(editor, textarea, composer) {\n      this.editor = editor;\n      this.textarea = textarea;\n      this.composer = composer;\n\n      this._observe();\n    },\n\n    /**\n     * Sync html from composer to textarea\n     * Takes care of placeholders\n     * @param {Boolean} shouldParseHtml Whether the html should be sanitized before inserting it into the textarea\n     */\n    fromComposerToTextarea: function fromComposerToTextarea(shouldParseHtml) {\n      this.textarea.setValue(wysihtml5.lang.string(this.composer.getValue()).trim(), shouldParseHtml);\n    },\n\n    /**\n     * Sync value of textarea to composer\n     * Takes care of placeholders\n     * @param {Boolean} shouldParseHtml Whether the html should be sanitized before inserting it into the composer\n     */\n    fromTextareaToComposer: function fromTextareaToComposer(shouldParseHtml) {\n      var textareaValue = this.textarea.getValue();\n      if (textareaValue) {\n        this.composer.setValue(textareaValue, shouldParseHtml);\n      } else {\n        this.composer.clear();\n        this.editor.fire(\"set_placeholder\");\n      }\n    },\n\n    /**\n     * Invoke syncing based on view state\n     * @param {Boolean} shouldParseHtml Whether the html should be sanitized before inserting it into the composer/textarea\n     */\n    sync: function sync(shouldParseHtml) {\n      if (this.editor.currentView.name === \"textarea\") {\n        this.fromTextareaToComposer(shouldParseHtml);\n      } else {\n        this.fromComposerToTextarea(shouldParseHtml);\n      }\n    },\n\n    /**\n     * Initializes interval-based syncing\n     * also makes sure that on-submit the composer's content is synced with the textarea\n     * immediately when the form gets submitted\n     */\n    _observe: function _observe() {\n      var interval,\n          that = this,\n          form = this.textarea.element.form,\n          startInterval = function startInterval() {\n        interval = setInterval(function () {\n          that.fromComposerToTextarea();\n        }, INTERVAL);\n      },\n          stopInterval = function stopInterval() {\n        clearInterval(interval);\n        interval = null;\n      };\n\n      startInterval();\n\n      if (form) {\n        // If the textarea is in a form make sure that after onreset and onsubmit the composer\n        // has the correct state\n        wysihtml5.dom.observe(form, \"submit\", function () {\n          that.sync(true);\n        });\n        wysihtml5.dom.observe(form, \"reset\", function () {\n          setTimeout(function () {\n            that.fromTextareaToComposer();\n          }, 0);\n        });\n      }\n\n      this.editor.observe(\"change_view\", function (view) {\n        if (view === \"composer\" && !interval) {\n          that.fromTextareaToComposer(true);\n          startInterval();\n        } else if (view === \"textarea\") {\n          that.fromComposerToTextarea(true);\n          stopInterval();\n        }\n      });\n\n      this.editor.observe(\"destroy:composer\", stopInterval);\n    }\n  });\n})(wysihtml5);\nwysihtml5.views.Textarea = wysihtml5.views.View.extend(\n/** @scope wysihtml5.views.Textarea.prototype */{\n  name: \"textarea\",\n\n  constructor: function constructor(parent, textareaElement, config) {\n    this.base(parent, textareaElement, config);\n\n    this._observe();\n  },\n\n  clear: function clear() {\n    this.element.value = \"\";\n  },\n\n  getValue: function getValue(parse) {\n    var value = this.isEmpty() ? \"\" : this.element.value;\n    if (parse) {\n      value = this.parent.parse(value);\n    }\n    return value;\n  },\n\n  setValue: function setValue(html, parse) {\n    if (parse) {\n      html = this.parent.parse(html);\n    }\n    this.element.value = html;\n  },\n\n  hasPlaceholderSet: function hasPlaceholderSet() {\n    var supportsPlaceholder = wysihtml5.browser.supportsPlaceholderAttributeOn(this.element),\n        placeholderText = this.element.getAttribute(\"placeholder\") || null,\n        value = this.element.value,\n        isEmpty = !value;\n    return supportsPlaceholder && isEmpty || value === placeholderText;\n  },\n\n  isEmpty: function isEmpty() {\n    return !wysihtml5.lang.string(this.element.value).trim() || this.hasPlaceholderSet();\n  },\n\n  _observe: function _observe() {\n    var element = this.element,\n        parent = this.parent,\n        eventMapping = {\n      focusin: \"focus\",\n      focusout: \"blur\"\n    },\n\n\n    /**\n     * Calling focus() or blur() on an element doesn't synchronously trigger the attached focus/blur events\n     * This is the case for focusin and focusout, so let's use them whenever possible, kkthxbai\n     */\n    events = wysihtml5.browser.supportsEvent(\"focusin\") ? [\"focusin\", \"focusout\", \"change\"] : [\"focus\", \"blur\", \"change\"];\n\n    parent.observe(\"beforeload\", function () {\n      wysihtml5.dom.observe(element, events, function (event) {\n        var eventName = eventMapping[event.type] || event.type;\n        parent.fire(eventName).fire(eventName + \":textarea\");\n      });\n\n      wysihtml5.dom.observe(element, [\"paste\", \"drop\"], function () {\n        setTimeout(function () {\n          parent.fire(\"paste\").fire(\"paste:textarea\");\n        }, 0);\n      });\n    });\n  }\n}); /**\n    * Toolbar Dialog\n    *\n    * @param {Element} link The toolbar link which causes the dialog to show up\n    * @param {Element} container The dialog container\n    *\n    * @example\n    *    <!-- Toolbar link -->\n    *    <a data-wysihtml5-command=\"insertImage\">insert an image</a>\n    *\n    *    <!-- Dialog -->\n    *    <div data-wysihtml5-dialog=\"insertImage\" style=\"display: none;\">\n    *      <label>\n    *        URL: <input data-wysihtml5-dialog-field=\"src\" value=\"http://\">\n    *      </label>\n    *      <label>\n    *        Alternative text: <input data-wysihtml5-dialog-field=\"alt\" value=\"\">\n    *      </label>\n    *    </div>\n    *\n    *    <script>\n    *      var dialog = new wysihtml5.toolbar.Dialog(\n    *        document.querySelector(\"[data-wysihtml5-command='insertImage']\"),\n    *        document.querySelector(\"[data-wysihtml5-dialog='insertImage']\")\n    *      );\n    *      dialog.observe(\"save\", function(attributes) {\n    *        // do something\n    *      });\n    *    </script>\n    */\n(function (wysihtml5) {\n  var dom = wysihtml5.dom,\n      CLASS_NAME_OPENED = \"wysihtml5-command-dialog-opened\",\n      SELECTOR_FORM_ELEMENTS = \"input, select, textarea\",\n      SELECTOR_FIELDS = \"[data-wysihtml5-dialog-field]\",\n      ATTRIBUTE_FIELDS = \"data-wysihtml5-dialog-field\";\n\n  wysihtml5.toolbar.Dialog = wysihtml5.lang.Dispatcher.extend(\n  /** @scope wysihtml5.toolbar.Dialog.prototype */{\n    constructor: function constructor(link, container) {\n      this.link = link;\n      this.container = container;\n    },\n\n    _observe: function _observe() {\n      if (this._observed) {\n        return;\n      }\n\n      var that = this,\n          callbackWrapper = function callbackWrapper(event) {\n        var attributes = that._serialize();\n        if (attributes == that.elementToChange) {\n          that.fire(\"edit\", attributes);\n        } else {\n          that.fire(\"save\", attributes);\n        }\n        that.hide();\n        event.preventDefault();\n        event.stopPropagation();\n      };\n\n      dom.observe(that.link, \"click\", function (event) {\n        if (dom.hasClass(that.link, CLASS_NAME_OPENED)) {\n          setTimeout(function () {\n            that.hide();\n          }, 0);\n        }\n      });\n\n      dom.observe(this.container, \"keydown\", function (event) {\n        var keyCode = event.keyCode;\n        if (keyCode === wysihtml5.ENTER_KEY) {\n          callbackWrapper(event);\n        }\n        if (keyCode === wysihtml5.ESCAPE_KEY) {\n          // that.hide();\n        }\n      });\n\n      dom.delegate(this.container, \"[data-wysihtml5-dialog-action=save]\", \"click\", callbackWrapper);\n\n      dom.delegate(this.container, \"[data-wysihtml5-dialog-action=cancel]\", \"click\", function (event) {\n        that.fire(\"cancel\");\n        that.hide();\n        event.preventDefault();\n        event.stopPropagation();\n      });\n\n      var formElements = this.container.querySelectorAll(SELECTOR_FORM_ELEMENTS),\n          i = 0,\n          length = formElements.length,\n          _clearInterval = function _clearInterval() {\n        clearInterval(that.interval);\n      };\n      for (; i < length; i++) {\n        dom.observe(formElements[i], \"change\", _clearInterval);\n      }\n\n      this._observed = true;\n    },\n\n    /**\n     * Grabs all fields in the dialog and puts them in key=>value style in an object which\n     * then gets returned\n     */\n    _serialize: function _serialize() {\n      var data = this.elementToChange || {},\n          fields = this.container.querySelectorAll(SELECTOR_FIELDS),\n          length = fields.length,\n          i = 0;\n      for (; i < length; i++) {\n        data[fields[i].getAttribute(ATTRIBUTE_FIELDS)] = fields[i].value;\n      }\n      return data;\n    },\n\n    /**\n     * Takes the attributes of the \"elementToChange\"\n     * and inserts them in their corresponding dialog input fields\n     * \n     * Assume the \"elementToChange\" looks like this:\n     *    <a href=\"http://www.google.com\" target=\"_blank\">foo</a>\n     *\n     * and we have the following dialog:\n     *    <input type=\"text\" data-wysihtml5-dialog-field=\"href\" value=\"\">\n     *    <input type=\"text\" data-wysihtml5-dialog-field=\"target\" value=\"\">\n     * \n     * after calling _interpolate() the dialog will look like this\n     *    <input type=\"text\" data-wysihtml5-dialog-field=\"href\" value=\"http://www.google.com\">\n     *    <input type=\"text\" data-wysihtml5-dialog-field=\"target\" value=\"_blank\">\n     *\n     * Basically it adopted the attribute values into the corresponding input fields\n     *\n     */\n    _interpolate: function _interpolate(avoidHiddenFields) {\n      var field,\n          fieldName,\n          newValue,\n          focusedElement = document.querySelector(\":focus\"),\n          fields = this.container.querySelectorAll(SELECTOR_FIELDS),\n          length = fields.length,\n          i = 0;\n      for (; i < length; i++) {\n        field = fields[i];\n\n        // Never change elements where the user is currently typing in\n        if (field === focusedElement) {\n          continue;\n        }\n\n        // Don't update hidden fields\n        // See https://github.com/xing/wysihtml5/pull/14\n        if (avoidHiddenFields && field.type === \"hidden\") {\n          continue;\n        }\n\n        fieldName = field.getAttribute(ATTRIBUTE_FIELDS);\n        newValue = this.elementToChange ? this.elementToChange[fieldName] || \"\" : field.defaultValue;\n        field.value = newValue;\n      }\n    },\n\n    /**\n     * Show the dialog element\n     */\n    show: function show(elementToChange) {\n      var that = this,\n          firstField = this.container.querySelector(SELECTOR_FORM_ELEMENTS);\n      this.elementToChange = elementToChange;\n      this._observe();\n      this._interpolate();\n      if (elementToChange) {\n        this.interval = setInterval(function () {\n          that._interpolate(true);\n        }, 500);\n      }\n      dom.addClass(this.link, CLASS_NAME_OPENED);\n      this.container.style.display = \"\";\n      this.fire(\"show\");\n      if (firstField && !elementToChange) {\n        try {\n          firstField.focus();\n        } catch (e) {}\n      }\n    },\n\n    /**\n     * Hide the dialog element\n     */\n    hide: function hide() {\n      clearInterval(this.interval);\n      this.elementToChange = null;\n      dom.removeClass(this.link, CLASS_NAME_OPENED);\n      this.container.style.display = \"none\";\n      this.fire(\"hide\");\n    }\n  });\n})(wysihtml5);\n/**\n * Converts speech-to-text and inserts this into the editor\n * As of now (2011/03/25) this only is supported in Chrome >= 11\n *\n * Note that it sends the recorded audio to the google speech recognition api:\n * http://stackoverflow.com/questions/4361826/does-chrome-have-buil-in-speech-recognition-for-input-type-text-x-webkit-speec\n *\n * Current HTML5 draft can be found here\n * http://lists.w3.org/Archives/Public/public-xg-htmlspeech/2011Feb/att-0020/api-draft.html\n * \n * \"Accessing Google Speech API Chrome 11\"\n * http://mikepultz.com/2011/03/accessing-google-speech-api-chrome-11/\n */\n(function (wysihtml5) {\n  var dom = wysihtml5.dom;\n\n  var linkStyles = {\n    position: \"relative\"\n  };\n\n  var wrapperStyles = {\n    left: 0,\n    margin: 0,\n    opacity: 0,\n    overflow: \"hidden\",\n    padding: 0,\n    position: \"absolute\",\n    top: 0,\n    zIndex: 1\n  };\n\n  var inputStyles = {\n    cursor: \"inherit\",\n    fontSize: \"50px\",\n    height: \"50px\",\n    marginTop: \"-25px\",\n    outline: 0,\n    padding: 0,\n    position: \"absolute\",\n    right: \"-4px\",\n    top: \"50%\"\n  };\n\n  var inputAttributes = {\n    \"x-webkit-speech\": \"\",\n    \"speech\": \"\"\n  };\n\n  wysihtml5.toolbar.Speech = function (parent, link) {\n    var input = document.createElement(\"input\");\n    if (!wysihtml5.browser.supportsSpeechApiOn(input)) {\n      link.style.display = \"none\";\n      return;\n    }\n\n    var wrapper = document.createElement(\"div\");\n\n    wysihtml5.lang.object(wrapperStyles).merge({\n      width: link.offsetWidth + \"px\",\n      height: link.offsetHeight + \"px\"\n    });\n\n    dom.insert(input).into(wrapper);\n    dom.insert(wrapper).into(link);\n\n    dom.setStyles(inputStyles).on(input);\n    dom.setAttributes(inputAttributes).on(input);\n\n    dom.setStyles(wrapperStyles).on(wrapper);\n    dom.setStyles(linkStyles).on(link);\n\n    var eventName = \"onwebkitspeechchange\" in input ? \"webkitspeechchange\" : \"speechchange\";\n    dom.observe(input, eventName, function () {\n      parent.execCommand(\"insertText\", input.value);\n      input.value = \"\";\n    });\n\n    dom.observe(input, \"click\", function (event) {\n      if (dom.hasClass(link, \"wysihtml5-command-disabled\")) {\n        event.preventDefault();\n      }\n\n      event.stopPropagation();\n    });\n  };\n})(wysihtml5); /**\n               * Toolbar\n               *\n               * @param {Object} parent Reference to instance of Editor instance\n               * @param {Element} container Reference to the toolbar container element\n               *\n               * @example\n               *    <div id=\"toolbar\">\n               *      <a data-wysihtml5-command=\"createLink\">insert link</a>\n               *      <a data-wysihtml5-command=\"formatBlock\" data-wysihtml5-command-value=\"h1\">insert h1</a>\n               *    </div>\n               *\n               *    <script>\n               *      var toolbar = new wysihtml5.toolbar.Toolbar(editor, document.getElementById(\"toolbar\"));\n               *    </script>\n               */\n(function (wysihtml5) {\n  var CLASS_NAME_COMMAND_DISABLED = \"wysihtml5-command-disabled\",\n      CLASS_NAME_COMMANDS_DISABLED = \"wysihtml5-commands-disabled\",\n      CLASS_NAME_COMMAND_ACTIVE = \"wysihtml5-command-active\",\n      CLASS_NAME_ACTION_ACTIVE = \"wysihtml5-action-active\",\n      dom = wysihtml5.dom;\n\n  wysihtml5.toolbar.Toolbar = Base.extend(\n  /** @scope wysihtml5.toolbar.Toolbar.prototype */{\n    constructor: function constructor(editor, container) {\n      this.editor = editor;\n      this.container = typeof container === \"string\" ? document.getElementById(container) : container;\n      this.composer = editor.composer;\n\n      this._getLinks(\"command\");\n      this._getLinks(\"action\");\n\n      this._observe();\n      this.show();\n\n      var speechInputLinks = this.container.querySelectorAll(\"[data-wysihtml5-command=insertSpeech]\"),\n          length = speechInputLinks.length,\n          i = 0;\n      for (; i < length; i++) {\n        new wysihtml5.toolbar.Speech(this, speechInputLinks[i]);\n      }\n    },\n\n    _getLinks: function _getLinks(type) {\n      var links = this[type + \"Links\"] = wysihtml5.lang.array(this.container.querySelectorAll(\"[data-wysihtml5-\" + type + \"]\")).get(),\n          length = links.length,\n          i = 0,\n          mapping = this[type + \"Mapping\"] = {},\n          link,\n          group,\n          name,\n          value,\n          dialog;\n      for (; i < length; i++) {\n        link = links[i];\n        name = link.getAttribute(\"data-wysihtml5-\" + type);\n        value = link.getAttribute(\"data-wysihtml5-\" + type + \"-value\");\n        group = this.container.querySelector(\"[data-wysihtml5-\" + type + \"-group='\" + name + \"']\");\n        dialog = this._getDialog(link, name);\n\n        mapping[name + \":\" + value] = {\n          link: link,\n          group: group,\n          name: name,\n          value: value,\n          dialog: dialog,\n          state: false\n        };\n      }\n    },\n\n    _getDialog: function _getDialog(link, command) {\n      var that = this,\n          dialogElement = this.container.querySelector(\"[data-wysihtml5-dialog='\" + command + \"']\"),\n          dialog,\n          caretBookmark;\n\n      if (dialogElement) {\n        dialog = new wysihtml5.toolbar.Dialog(link, dialogElement);\n\n        dialog.observe(\"show\", function () {\n          caretBookmark = that.composer.selection.getBookmark();\n\n          that.editor.fire(\"show:dialog\", { command: command, dialogContainer: dialogElement, commandLink: link });\n        });\n\n        dialog.observe(\"save\", function (attributes) {\n          if (caretBookmark) {\n            that.composer.selection.setBookmark(caretBookmark);\n          }\n          that._execCommand(command, attributes);\n\n          that.editor.fire(\"save:dialog\", { command: command, dialogContainer: dialogElement, commandLink: link });\n        });\n\n        dialog.observe(\"cancel\", function () {\n          that.editor.focus(false);\n          that.editor.fire(\"cancel:dialog\", { command: command, dialogContainer: dialogElement, commandLink: link });\n        });\n      }\n      return dialog;\n    },\n\n    /**\n     * @example\n     *    var toolbar = new wysihtml5.Toolbar();\n     *    // Insert a <blockquote> element or wrap current selection in <blockquote>\n     *    toolbar.execCommand(\"formatBlock\", \"blockquote\");\n     */\n    execCommand: function execCommand(command, commandValue) {\n      if (this.commandsDisabled) {\n        return;\n      }\n\n      var commandObj = this.commandMapping[command + \":\" + commandValue];\n\n      // Show dialog when available\n      if (commandObj && commandObj.dialog && !commandObj.state) {\n        commandObj.dialog.show();\n      } else {\n        this._execCommand(command, commandValue);\n      }\n    },\n\n    _execCommand: function _execCommand(command, commandValue) {\n      // Make sure that composer is focussed (false => don't move caret to the end)\n      this.editor.focus(false);\n\n      this.composer.commands.exec(command, commandValue);\n      this._updateLinkStates();\n    },\n\n    execAction: function execAction(action) {\n      var editor = this.editor;\n      switch (action) {\n        case \"change_view\":\n          if (editor.currentView === editor.textarea) {\n            editor.fire(\"change_view\", \"composer\");\n          } else {\n            editor.fire(\"change_view\", \"textarea\");\n          }\n          break;\n      }\n    },\n\n    _observe: function _observe() {\n      var that = this,\n          editor = this.editor,\n          container = this.container,\n          links = this.commandLinks.concat(this.actionLinks),\n          length = links.length,\n          i = 0;\n\n      for (; i < length; i++) {\n        // 'javascript:;' and unselectable=on Needed for IE, but done in all browsers to make sure that all get the same css applied\n        // (you know, a:link { ... } doesn't match anchors with missing href attribute)\n        dom.setAttributes({\n          href: \"javascript:;\",\n          unselectable: \"on\"\n        }).on(links[i]);\n      }\n\n      // Needed for opera\n      dom.delegate(container, \"[data-wysihtml5-command]\", \"mousedown\", function (event) {\n        event.preventDefault();\n      });\n\n      dom.delegate(container, \"[data-wysihtml5-command]\", \"click\", function (event) {\n        var link = this,\n            command = link.getAttribute(\"data-wysihtml5-command\"),\n            commandValue = link.getAttribute(\"data-wysihtml5-command-value\");\n        that.execCommand(command, commandValue);\n        event.preventDefault();\n      });\n\n      dom.delegate(container, \"[data-wysihtml5-action]\", \"click\", function (event) {\n        var action = this.getAttribute(\"data-wysihtml5-action\");\n        that.execAction(action);\n        event.preventDefault();\n      });\n\n      editor.observe(\"focus:composer\", function () {\n        that.bookmark = null;\n        clearInterval(that.interval);\n        that.interval = setInterval(function () {\n          that._updateLinkStates();\n        }, 500);\n      });\n\n      editor.observe(\"blur:composer\", function () {\n        clearInterval(that.interval);\n      });\n\n      editor.observe(\"destroy:composer\", function () {\n        clearInterval(that.interval);\n      });\n\n      editor.observe(\"change_view\", function (currentView) {\n        // Set timeout needed in order to let the blur event fire first\n        setTimeout(function () {\n          that.commandsDisabled = currentView !== \"composer\";\n          that._updateLinkStates();\n          if (that.commandsDisabled) {\n            dom.addClass(container, CLASS_NAME_COMMANDS_DISABLED);\n          } else {\n            dom.removeClass(container, CLASS_NAME_COMMANDS_DISABLED);\n          }\n        }, 0);\n      });\n    },\n\n    _updateLinkStates: function _updateLinkStates() {\n      var element = this.composer.element,\n          commandMapping = this.commandMapping,\n          actionMapping = this.actionMapping,\n          i,\n          state,\n          action,\n          command;\n      // every millisecond counts... this is executed quite often\n      for (i in commandMapping) {\n        command = commandMapping[i];\n        if (this.commandsDisabled) {\n          state = false;\n          dom.removeClass(command.link, CLASS_NAME_COMMAND_ACTIVE);\n          if (command.group) {\n            dom.removeClass(command.group, CLASS_NAME_COMMAND_ACTIVE);\n          }\n          if (command.dialog) {\n            command.dialog.hide();\n          }\n        } else {\n          state = this.composer.commands.state(command.name, command.value);\n          if (wysihtml5.lang.object(state).isArray()) {\n            // Grab first and only object/element in state array, otherwise convert state into boolean\n            // to avoid showing a dialog for multiple selected elements which may have different attributes\n            // eg. when two links with different href are selected, the state will be an array consisting of both link elements\n            // but the dialog interface can only update one\n            state = state.length === 1 ? state[0] : true;\n          }\n          dom.removeClass(command.link, CLASS_NAME_COMMAND_DISABLED);\n          if (command.group) {\n            dom.removeClass(command.group, CLASS_NAME_COMMAND_DISABLED);\n          }\n        }\n\n        if (command.state === state) {\n          continue;\n        }\n\n        command.state = state;\n        if (state) {\n          dom.addClass(command.link, CLASS_NAME_COMMAND_ACTIVE);\n          if (command.group) {\n            dom.addClass(command.group, CLASS_NAME_COMMAND_ACTIVE);\n          }\n          if (command.dialog) {\n            if ((typeof state === \"undefined\" ? \"undefined\" : _typeof(state)) === \"object\") {\n              command.dialog.show(state);\n            } else {\n              command.dialog.hide();\n            }\n          }\n        } else {\n          dom.removeClass(command.link, CLASS_NAME_COMMAND_ACTIVE);\n          if (command.group) {\n            dom.removeClass(command.group, CLASS_NAME_COMMAND_ACTIVE);\n          }\n          if (command.dialog) {\n            command.dialog.hide();\n          }\n        }\n      }\n\n      for (i in actionMapping) {\n        action = actionMapping[i];\n\n        if (action.name === \"change_view\") {\n          action.state = this.editor.currentView === this.editor.textarea;\n          if (action.state) {\n            dom.addClass(action.link, CLASS_NAME_ACTION_ACTIVE);\n          } else {\n            dom.removeClass(action.link, CLASS_NAME_ACTION_ACTIVE);\n          }\n        }\n      }\n    },\n\n    show: function show() {\n      this.container.style.display = \"\";\n    },\n\n    hide: function hide() {\n      this.container.style.display = \"none\";\n    }\n  });\n})(wysihtml5);\n/**\n * WYSIHTML5 Editor\n *\n * @param {Element} textareaElement Reference to the textarea which should be turned into a rich text interface\n * @param {Object} [config] See defaultConfig object below for explanation of each individual config option\n *\n * @events\n *    load\n *    beforeload (for internal use only)\n *    focus\n *    focus:composer\n *    focus:textarea\n *    blur\n *    blur:composer\n *    blur:textarea\n *    change\n *    change:composer\n *    change:textarea\n *    paste\n *    paste:composer\n *    paste:textarea\n *    newword:composer\n *    destroy:composer\n *    undo:composer\n *    redo:composer\n *    beforecommand:composer\n *    aftercommand:composer\n *    change_view\n */\n(function (wysihtml5) {\n  var undef;\n\n  var defaultConfig = {\n    // Give the editor a name, the name will also be set as class name on the iframe and on the iframe's body \n    name: undef,\n    // Whether the editor should look like the textarea (by adopting styles)\n    style: true,\n    // Id of the toolbar element, pass falsey value if you don't want any toolbar logic\n    toolbar: undef,\n    // Whether urls, entered by the user should automatically become clickable-links\n    autoLink: true,\n    // Object which includes parser rules to apply when html gets inserted via copy & paste\n    // See parser_rules/*.js for examples\n    parserRules: { tags: { br: {}, span: {}, div: {}, p: {} }, classes: {} },\n    // Parser method to use when the user inserts content via copy & paste\n    parser: wysihtml5.dom.parse,\n    // Class name which should be set on the contentEditable element in the created sandbox iframe, can be styled via the 'stylesheets' option\n    composerClassName: \"wysihtml5-editor\",\n    // Class name to add to the body when the wysihtml5 editor is supported\n    bodyClassName: \"wysihtml5-supported\",\n    // Array (or single string) of stylesheet urls to be loaded in the editor's iframe\n    stylesheets: [],\n    // Placeholder text to use, defaults to the placeholder attribute on the textarea element\n    placeholderText: undef,\n    // Whether the composer should allow the user to manually resize images, tables etc.\n    allowObjectResizing: true,\n    // Whether the rich text editor should be rendered on touch devices (wysihtml5 >= 0.3.0 comes with basic support for iOS 5)\n    supportTouchDevices: true\n  };\n\n  wysihtml5.Editor = wysihtml5.lang.Dispatcher.extend(\n  /** @scope wysihtml5.Editor.prototype */{\n    constructor: function constructor(textareaElement, config) {\n      this.textareaElement = typeof textareaElement === \"string\" ? document.getElementById(textareaElement) : textareaElement;\n      this.config = wysihtml5.lang.object({}).merge(defaultConfig).merge(config).get();\n      this.textarea = new wysihtml5.views.Textarea(this, this.textareaElement, this.config);\n      this.currentView = this.textarea;\n      this._isCompatible = wysihtml5.browser.supported();\n\n      // Sort out unsupported/unwanted browsers here\n      if (!this._isCompatible || !this.config.supportTouchDevices && wysihtml5.browser.isTouchDevice()) {\n        var that = this;\n        setTimeout(function () {\n          that.fire(\"beforeload\").fire(\"load\");\n        }, 0);\n        return;\n      }\n\n      // Add class name to body, to indicate that the editor is supported\n      wysihtml5.dom.addClass(document.body, this.config.bodyClassName);\n\n      this.composer = new wysihtml5.views.Composer(this, this.textareaElement, this.config);\n      this.currentView = this.composer;\n\n      if (typeof this.config.parser === \"function\") {\n        this._initParser();\n      }\n\n      this.observe(\"beforeload\", function () {\n        this.synchronizer = new wysihtml5.views.Synchronizer(this, this.textarea, this.composer);\n        if (this.config.toolbar) {\n          this.toolbar = new wysihtml5.toolbar.Toolbar(this, this.config.toolbar);\n        }\n      });\n\n      try {\n        console.log(\"Heya! This page is using wysihtml5 for rich text editing. Check out https://github.com/xing/wysihtml5\");\n      } catch (e) {}\n    },\n\n    isCompatible: function isCompatible() {\n      return this._isCompatible;\n    },\n\n    clear: function clear() {\n      this.currentView.clear();\n      return this;\n    },\n\n    getValue: function getValue(parse) {\n      return this.currentView.getValue(parse);\n    },\n\n    setValue: function setValue(html, parse) {\n      if (!html) {\n        return this.clear();\n      }\n      this.currentView.setValue(html, parse);\n      return this;\n    },\n\n    focus: function focus(setToEnd) {\n      this.currentView.focus(setToEnd);\n      return this;\n    },\n\n    /**\n     * Deactivate editor (make it readonly)\n     */\n    disable: function disable() {\n      this.currentView.disable();\n      return this;\n    },\n\n    /**\n     * Activate editor\n     */\n    enable: function enable() {\n      this.currentView.enable();\n      return this;\n    },\n\n    isEmpty: function isEmpty() {\n      return this.currentView.isEmpty();\n    },\n\n    hasPlaceholderSet: function hasPlaceholderSet() {\n      return this.currentView.hasPlaceholderSet();\n    },\n\n    parse: function parse(htmlOrElement) {\n      var returnValue = this.config.parser(htmlOrElement, this.config.parserRules, this.composer.sandbox.getDocument(), true);\n      if ((typeof htmlOrElement === \"undefined\" ? \"undefined\" : _typeof(htmlOrElement)) === \"object\") {\n        wysihtml5.quirks.redraw(htmlOrElement);\n      }\n      return returnValue;\n    },\n\n    /**\n     * Prepare html parser logic\n     *  - Observes for paste and drop\n     */\n    _initParser: function _initParser() {\n      this.observe(\"paste:composer\", function () {\n        var keepScrollPosition = true,\n            that = this;\n        that.composer.selection.executeAndRestore(function () {\n          wysihtml5.quirks.cleanPastedHTML(that.composer.element);\n          that.parse(that.composer.element);\n        }, keepScrollPosition);\n      });\n\n      this.observe(\"paste:textarea\", function () {\n        var value = this.textarea.getValue(),\n            newValue;\n        newValue = this.parse(value);\n        this.textarea.setValue(newValue);\n      });\n    }\n  });\n})(wysihtml5);\n/**\nBootstrap wysihtml5 editor. Based on [bootstrap-wysihtml5](https://github.com/jhollingworth/bootstrap-wysihtml5).  \nYou should include **manually** distributives of `wysihtml5` and `bootstrap-wysihtml5`:\n\n    <link href=\"js/inputs-ext/wysihtml5/bootstrap-wysihtml5-0.0.2/bootstrap-wysihtml5-0.0.2.css\" rel=\"stylesheet\" type=\"text/css\"></link>  \n    <script src=\"js/inputs-ext/wysihtml5/bootstrap-wysihtml5-0.0.2/wysihtml5-0.3.0.min.js\"></script>  \n    <script src=\"js/inputs-ext/wysihtml5/bootstrap-wysihtml5-0.0.2/bootstrap-wysihtml5-0.0.2.min.js\"></script>\n    \nAnd also include `wysihtml5.js` from `inputs-ext` directory of x-editable:\n      \n    <script src=\"js/inputs-ext/wysihtml5/wysihtml5.js\"></script>  \n\n**Note:** It's better to use fresh bootstrap-wysihtml5 from it's [master branch](https://github.com/jhollingworth/bootstrap-wysihtml5/tree/master/src) as there is update for correct image insertion.    \n    \n@class wysihtml5\n@extends abstractinput\n@final\n@since 1.4.0\n@example\n<div id=\"comments\" data-type=\"wysihtml5\" data-pk=\"1\"><h2>awesome</h2> comment!</div>\n<script>\n$(function(){\n    $('#comments').editable({\n        url: '/post',\n        title: 'Enter comments'\n    });\n});\n</script>\n**/\n(function ($) {\n\n  window.Wysihtml5 = function Wysihtml5(options) {\n    this.init('wysihtml5', options, Wysihtml5.defaults);\n\n    //extend wysihtml5 manually as $.extend not recursive \n    this.options.wysihtml5 = $.extend({}, Wysihtml5.defaults.wysihtml5, options.wysihtml5);\n  };\n\n  window.$.fn.editableutils.inherit(Wysihtml5, window.$.fn.editabletypes.abstractinput);\n\n  $.extend(Wysihtml5.prototype, {\n    render: function render() {\n      var deferred = $.Deferred(),\n          msieOld;\n\n      //generate unique id as it required for wysihtml5\n      this.$input.attr('id', 'textarea_' + new Date().getTime());\n\n      this.setClass();\n      this.setAttr('placeholder');\n\n      //resolve deffered when widget loaded\n      $.extend(this.options.wysihtml5, {\n        events: {\n          load: function load() {\n            deferred.resolve();\n          }\n        }\n      });\n\n      this.$input.wysihtml5(this.options.wysihtml5);\n\n      /*\n       In IE8 wysihtml5 iframe stays on the same line with buttons toolbar (inside popover).\n       The only solution I found is to add <br>. If you fine better way, please send PR.   \n      */\n      msieOld = /msie\\s*(8|7|6)/.test(navigator.userAgent.toLowerCase());\n      if (msieOld) {\n        this.$input.before('<br><br>');\n      }\n\n      return deferred.promise();\n    },\n\n    value2html: function value2html(value, element) {\n      $(element).html(value);\n    },\n\n    html2value: function html2value(html) {\n      return html;\n    },\n\n    value2input: function value2input(value) {\n      this.$input.data(\"wysihtml5\").editor.setValue(value, true);\n    },\n\n    activate: function activate() {\n      this.$input.data(\"wysihtml5\").editor.focus();\n    },\n\n    isEmpty: function isEmpty($element) {\n      if ($.trim($element.html()) === '') {\n        return true;\n      } else if ($.trim($element.text()) !== '') {\n        return false;\n      } else {\n        //e.g. '<img>', '<br>', '<p></p>'\n        return !$element.height() || !$element.width();\n      }\n    }\n  });\n\n  Wysihtml5.defaults = $.extend({}, window.$.fn.editabletypes.abstractinput.defaults, {\n    /**\n    @property tpl\n    @default <textarea></textarea>\n    **/\n    tpl: '<textarea></textarea>',\n    /**\n    @property inputclass\n    @default editable-wysihtml5\n    **/\n    inputclass: 'editable-wysihtml5',\n    /**\n    Placeholder attribute of input. Shown when input is empty.\n     @property placeholder\n    @type string\n    @default null\n    **/\n    placeholder: null,\n    /**\n    Wysihtml5 default options.  \n    See https://github.com/jhollingworth/bootstrap-wysihtml5#options\n     @property wysihtml5\n    @type object\n    @default {stylesheets: false}\n    **/\n    wysihtml5: {\n      stylesheets: false\n    }\n  });\n\n  window.$.fn.editabletypes.wysihtml5 = Wysihtml5;\n})(window.jQuery);\n\n!function ($, wysi) {\n\n  var tpl = {\n    \"font-styles\": function fontStyles(locale, options) {\n      var size = options && options.size ? ' btn-' + options.size : '';\n      return \"<li class='dropdown'>\" + \"<a class='btn btn-default dropdown-toggle\" + size + \"' data-toggle='dropdown' href='#'>\" + \"<i class='fa fa-font'></i>&nbsp;<span class='current-font'>\" + locale.font_styles.normal + \"</span>&nbsp;<b class='caret'></b>\" + \"</a>\" + \"<ul class='dropdown-menu'>\" + \"<li><a data-wysihtml5-command='formatBlock' data-wysihtml5-command-value='div' tabindex='-1'>\" + locale.font_styles.normal + \"</a></li>\" + \"<li><a data-wysihtml5-command='formatBlock' data-wysihtml5-command-value='h1' tabindex='-1'>\" + locale.font_styles.h1 + \"</a></li>\" + \"<li><a data-wysihtml5-command='formatBlock' data-wysihtml5-command-value='h2' tabindex='-1'>\" + locale.font_styles.h2 + \"</a></li>\" + \"<li><a data-wysihtml5-command='formatBlock' data-wysihtml5-command-value='h3' tabindex='-1'>\" + locale.font_styles.h3 + \"</a></li>\" + \"</ul>\" + \"</li>\";\n    },\n\n    \"emphasis\": function emphasis(locale, options) {\n      var size = options && options.size ? ' btn-' + options.size : '';\n      return \"<li>\" + \"<div class='btn-group'>\" + \"<a class='btn btn-default\" + size + \"' data-wysihtml5-command='bold' title='CTRL+B' tabindex='-1'>\" + locale.emphasis.bold + \"</a>\" + \"<a class='btn btn-default\" + size + \"' data-wysihtml5-command='italic' title='CTRL+I' tabindex='-1'>\" + locale.emphasis.italic + \"</a>\" + \"<a class='btn btn-default\" + size + \"' data-wysihtml5-command='underline' title='CTRL+U' tabindex='-1'>\" + locale.emphasis.underline + \"</a>\" + \"</div>\" + \"</li>\";\n    },\n\n    \"lists\": function lists(locale, options) {\n      var size = options && options.size ? ' btn-' + options.size : '';\n      return \"<li>\" + \"<div class='btn-group'>\" + \"<a class='btn btn-default\" + size + \"' data-wysihtml5-command='insertUnorderedList' title='\" + locale.lists.unordered + \"' tabindex='-1'><i class='fa fa-list'></i></a>\" + \"<a class='btn btn-default\" + size + \"' data-wysihtml5-command='insertOrderedList' title='\" + locale.lists.ordered + \"' tabindex='-1'><i class='fa fa-th-list'></i></a>\" + \"<a class='btn btn-default\" + size + \"' data-wysihtml5-command='clear' title='ban' tabindex='-1'><i class='fa fa-ban'></i></a>\" + \"</div>\" + \"</li>\";\n    },\n\n    \"link\": function link(locale, options) {\n      var size = options && options.size ? ' btn-' + options.size : '';\n      return \"<li>\" + \"<div class='bootstrap-wysihtml5-insert-link-modal modal hide fade'>\" + \"<div class='modal-header'>\" + \"<a class='close' data-dismiss='modal'>&times;</a>\" + \"<h3>\" + locale.link.insert + \"</h3>\" + \"</div>\" + \"<div class='modal-body'>\" + \"<input value='http://' class='bootstrap-wysihtml5-insert-link-url input-xlarge'>\" + \"</div>\" + \"<div class='modal-footer'>\" + \"<a href='#' class='btn btn-default' data-dismiss='modal'>\" + locale.link.cancel + \"</a>\" + \"<a href='#' class='btn btn-primary' data-dismiss='modal'>\" + locale.link.insert + \"</a>\" + \"</div>\" + \"</div>\" + \"<a class='btn btn-default\" + size + \"' data-wysihtml5-command='createLink' title='\" + locale.link.insert + \"' tabindex='-1'><i class='fa fa-share'></i></a>\" + \"</li>\";\n    },\n\n    \"image\": function image(locale, options) {\n      var size = options && options.size ? ' btn-' + options.size : '';\n      return \"<li>\" + \"<div class='bootstrap-wysihtml5-insert-image-modal modal hide fade'>\" + \"<div class='modal-header'>\" + \"<a class='close' data-dismiss='modal'>&times;</a>\" + \"<h3>\" + locale.image.insert + \"</h3>\" + \"</div>\" + \"<div class='modal-body'>\" + \"<input value='http://' class='bootstrap-wysihtml5-insert-image-url input-xlarge'>\" + \"</div>\" + \"<div class='modal-footer'>\" + \"<a href='#' class='btn btn-default' data-dismiss='modal'>\" + locale.image.cancel + \"</a>\" + \"<a href='#' class='btn btn-primary' data-dismiss='modal'>\" + locale.image.insert + \"</a>\" + \"</div>\" + \"</div>\" + \"<a class='btn btn-default\" + size + \"' data-wysihtml5-command='insertImage' title='\" + locale.image.insert + \"' tabindex='-1'><i class='fa fa-picture'></i></a>\" + \"</li>\";\n    },\n\n    \"html\": function html(locale, options) {\n      var size = options && options.size ? ' btn-' + options.size : '';\n      return \"<li>\" + \"<div class='btn-group'>\" + \"<a class='btn btn-default\" + size + \"' data-wysihtml5-action='change_view' title='\" + locale.html.edit + \"' tabindex='-1'><i class='fa fa-pencil'></i></a>\" + \"</div>\" + \"</li>\";\n    },\n\n    \"color\": function color(locale, options) {\n      var size = options && options.size ? ' btn-' + options.size : '';\n      return \"<li class='dropdown'>\" + \"<a class='btn btn-default dropdown-toggle\" + size + \"' data-toggle='dropdown' href='#' tabindex='-1'>\" + \"<span class='current-color'>åŽŸè‰²</span>&nbsp;<b class='caret'></b>\" + \"</a>\" + \"<ul class='dropdown-menu'>\" + \"<li><div class='wysihtml5-colors' data-wysihtml5-command-value='clear'></div><a class='wysihtml5-colors-title' data-wysihtml5-command='foreColor' data-wysihtml5-command-value='clear'>\" + locale.colours.clear + \"</a></li>\" + \"<li><div class='wysihtml5-colors' data-wysihtml5-command-value='first'></div><a class='wysihtml5-colors-title' data-wysihtml5-command='foreColor' data-wysihtml5-command-value='first'>\" + locale.colours.first + \"</a></li>\" + \"<li><div class='wysihtml5-colors' data-wysihtml5-command-value='second'></div><a class='wysihtml5-colors-title' data-wysihtml5-command='foreColor' data-wysihtml5-command-value='second'>\" + locale.colours.second + \"</a></li>\" + \"<li><div class='wysihtml5-colors' data-wysihtml5-command-value='three'></div><a class='wysihtml5-colors-title' data-wysihtml5-command='foreColor' data-wysihtml5-command-value='three'>\" + locale.colours.three + \"</a></li>\" + \"</ul>\" + \"</li>\";\n    }\n  };\n\n  var templates = function templates(key, locale, options) {\n    return tpl[key](locale, options);\n  };\n\n  var Wysihtml5 = function Wysihtml5(el, options) {\n    this.el = el;\n    var toolbarOpts = options || defaultOptions;\n    for (var t in toolbarOpts.customTemplates) {\n      tpl[t] = toolbarOpts.customTemplates[t];\n    }\n    this.toolbar = this.createToolbar(el, toolbarOpts);\n    this.editor = this.createEditor(options);\n\n    window.editor = this.editor;\n\n    $('iframe.wysihtml5-sandbox').each(function (i, el) {\n      $(el.contentWindow).off('focus.wysihtml5').on({\n        'focus.wysihtml5': function focusWysihtml5() {\n          $('li.dropdown').removeClass('open');\n        }\n      });\n    });\n  };\n\n  Wysihtml5.prototype = {\n\n    constructor: Wysihtml5,\n\n    createEditor: function createEditor(options) {\n      options = options || {};\n\n      // Add the toolbar to a clone of the options object so multiple instances\n      // of the WYISYWG don't break because \"toolbar\" is already defined\n      options = $.extend(true, {}, options);\n      options.toolbar = this.toolbar[0];\n\n      var editor = new wysihtml5.Editor(this.el[0], options);\n\n      if (options && options.events) {\n        for (var eventName in options.events) {\n          editor.on(eventName, options.events[eventName]);\n        }\n      }\n      return editor;\n    },\n\n    createToolbar: function createToolbar(el, options) {\n      var self = this;\n      var toolbar = $(\"<ul/>\", {\n        'class': \"wysihtml5-toolbar\",\n        'style': \"display:none\"\n      });\n      var culture = options.locale || defaultOptions.locale || \"en\";\n      for (var key in window.$.fn.wysihtml5.defaultOptions) {\n        var value = false;\n\n        if (options[key] !== undefined) {\n          if (options[key] === true) {\n            value = true;\n          }\n        } else {\n          value = defaultOptions[key];\n        }\n\n        if (value === true) {\n          toolbar.append(templates(key, locale[culture], options));\n\n          if (key === \"html\") {\n            this.initHtml(toolbar);\n          }\n\n          if (key === \"link\") {\n            this.initInsertLink(toolbar);\n          }\n\n          if (key === \"image\") {\n            this.initInsertImage(toolbar);\n          }\n        }\n      }\n\n      if (options.toolbar) {\n        for (key in options.toolbar) {\n          toolbar.append(options.toolbar[key]);\n        }\n      }\n\n      toolbar.find(\"a[data-wysihtml5-command='formatBlock']\").click(function (e) {\n        var target = e.target || e.srcElement;\n        var el = $(target);\n        self.toolbar.find('.current-font').text(el.html());\n      });\n\n      toolbar.find(\"a[data-wysihtml5-command='foreColor']\").click(function (e) {\n        var target = e.target || e.srcElement;\n        var el = $(target);\n        self.toolbar.find('.current-color').text(el.html());\n      });\n\n      this.el.before(toolbar);\n\n      return toolbar;\n    },\n\n    initHtml: function initHtml(toolbar) {\n      var changeViewSelector = \"a[data-wysihtml5-action='change_view']\";\n      toolbar.find(changeViewSelector).click(function (e) {\n        toolbar.find('a.btn').not(changeViewSelector).toggleClass('disabled');\n      });\n    },\n\n    initInsertImage: function initInsertImage(toolbar) {\n      var self = this;\n      var insertImageModal = toolbar.find('.bootstrap-wysihtml5-insert-image-modal');\n      var urlInput = insertImageModal.find('.bootstrap-wysihtml5-insert-image-url');\n      var insertButton = insertImageModal.find('a.btn-primary');\n      var initialValue = urlInput.val();\n      var caretBookmark;\n\n      var insertImage = function insertImage() {\n        var url = urlInput.val();\n        urlInput.val(initialValue);\n        self.editor.currentView.element.focus();\n        if (caretBookmark) {\n          self.editor.composer.selection.setBookmark(caretBookmark);\n          caretBookmark = null;\n        }\n        self.editor.composer.commands.exec(\"insertImage\", url);\n      };\n\n      urlInput.keypress(function (e) {\n        if (e.which == 13) {\n          insertImage();\n          insertImageModal.modal('hide');\n        }\n      });\n\n      insertButton.click(insertImage);\n\n      insertImageModal.on('shown', function () {\n        urlInput.focus();\n      });\n\n      insertImageModal.on('hide', function () {\n        self.editor.currentView.element.focus();\n      });\n\n      toolbar.find('a[data-wysihtml5-command=insertImage]').click(function () {\n        var activeButton = $(this).hasClass(\"wysihtml5-command-active\");\n\n        if (!activeButton) {\n          self.editor.currentView.element.focus(false);\n          caretBookmark = self.editor.composer.selection.getBookmark();\n          insertImageModal.appendTo('body').modal('show');\n          insertImageModal.on('click.dismiss.modal', '[data-dismiss=\"modal\"]', function (e) {\n            e.stopPropagation();\n          });\n          return false;\n        } else {\n          return true;\n        }\n      });\n    },\n\n    initInsertLink: function initInsertLink(toolbar) {\n      var self = this;\n      var insertLinkModal = toolbar.find('.bootstrap-wysihtml5-insert-link-modal');\n      var urlInput = insertLinkModal.find('.bootstrap-wysihtml5-insert-link-url');\n      var insertButton = insertLinkModal.find('a.btn-primary');\n      var initialValue = urlInput.val();\n      var caretBookmark;\n\n      var insertLink = function insertLink() {\n        var url = urlInput.val();\n        urlInput.val(initialValue);\n        self.editor.currentView.element.focus();\n        if (caretBookmark) {\n          self.editor.composer.selection.setBookmark(caretBookmark);\n          caretBookmark = null;\n        }\n        self.editor.composer.commands.exec(\"createLink\", {\n          href: url,\n          target: \"_blank\",\n          rel: \"nofollow\"\n        });\n      };\n      var pressedEnter = false;\n\n      urlInput.keypress(function (e) {\n        if (e.which == 13) {\n          insertLink();\n          insertLinkModal.modal('hide');\n        }\n      });\n\n      insertButton.click(insertLink);\n\n      insertLinkModal.on('shown', function () {\n        urlInput.focus();\n      });\n\n      insertLinkModal.on('hide', function () {\n        self.editor.currentView.element.focus();\n      });\n\n      toolbar.find('a[data-wysihtml5-command=createLink]').click(function () {\n        var activeButton = $(this).hasClass(\"wysihtml5-command-active\");\n\n        if (!activeButton) {\n          self.editor.currentView.element.focus(false);\n          caretBookmark = self.editor.composer.selection.getBookmark();\n          insertLinkModal.appendTo('body').modal('show');\n          insertLinkModal.on('click.dismiss.modal', '[data-dismiss=\"modal\"]', function (e) {\n            e.stopPropagation();\n          });\n          return false;\n        } else {\n          return true;\n        }\n      });\n    }\n  };\n\n  // these define our public api\n  var methods = {\n    resetDefaults: function resetDefaults() {\n      window.$.fn.wysihtml5.defaultOptions = $.extend(true, {}, window.$.fn.wysihtml5.defaultOptionsCache);\n    },\n    bypassDefaults: function bypassDefaults(options) {\n      return this.each(function () {\n        var $this = $(this);\n        $this.data('wysihtml5', new Wysihtml5($this, options));\n      });\n    },\n    shallowExtend: function shallowExtend(options) {\n      var settings = $.extend({}, window.$.fn.wysihtml5.defaultOptions, options || {});\n      var that = this;\n      return methods.bypassDefaults.apply(that, [settings]);\n    },\n    deepExtend: function deepExtend(options) {\n      var settings = $.extend(true, {}, window.$.fn.wysihtml5.defaultOptions, options || {});\n      var that = this;\n      return methods.bypassDefaults.apply(that, [settings]);\n    },\n    init: function init(options) {\n      var that = this;\n      return methods.shallowExtend.apply(that, [options]);\n    }\n  };\n\n  window.$.fn.wysihtml5 = function (method) {\n    if (methods[method]) {\n      return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));\n    } else if ((typeof method === \"undefined\" ? \"undefined\" : _typeof(method)) === 'object' || !method) {\n      return methods.init.apply(this, arguments);\n    } else {\n      $.error('Method ' + method + ' does not exist on jQuery.wysihtml5');\n    }\n  };\n\n  window.$.fn.wysihtml5.Constructor = Wysihtml5;\n\n  window.$.fn.wysihtml5.defaultOptions = {\n    \"font-styles\": true,\n    \"color\": false,\n    \"emphasis\": true,\n    \"lists\": true,\n    \"html\": false,\n    \"link\": true,\n    \"image\": true,\n    events: {},\n    parserRules: {\n      classes: {\n        // (path_to_project/lib/css/wysiwyg-color.css)\n        \"wysiwyg-color-clear\": 1,\n        \"wysiwyg-color-first\": 1,\n        \"wysiwyg-color-second\": 1,\n        \"wysiwyg-color-three\": 1\n      },\n      tags: {\n        \"b\": {},\n        \"i\": {},\n        \"br\": {},\n        \"ol\": {},\n        \"ul\": {},\n        \"li\": {},\n        \"h1\": {},\n        \"h2\": {},\n        \"h3\": {},\n        \"blockquote\": {},\n        \"u\": 1,\n        \"img\": {\n          \"check_attributes\": {\n            \"width\": \"numbers\",\n            \"alt\": \"alt\",\n            \"src\": \"url\",\n            \"height\": \"numbers\"\n          }\n        },\n        \"a\": {\n          set_attributes: {\n            target: \"_blank\",\n            rel: \"nofollow\"\n          },\n          check_attributes: {\n            href: \"url\" // important to avoid XSS\n          }\n        },\n        \"span\": 1,\n        \"div\": 1,\n        // to allow save and edit files with code tag hacks\n        \"code\": 1,\n        \"pre\": 1\n      }\n    },\n    stylesheets: [\"./lib/css/wysiwyg-color.css\"], // (path_to_project/lib/css/wysiwyg-color.css)\n    locale: \"en\"\n  };\n\n  if (typeof window.$.fn.wysihtml5.defaultOptionsCache === 'undefined') {\n    window.$.fn.wysihtml5.defaultOptionsCache = $.extend(true, {}, window.$.fn.wysihtml5.defaultOptions);\n  }\n\n  var locale = window.$.fn.wysihtml5.locale = {\n    en: {\n      font_styles: {\n        normal: \"Normal text\",\n        h1: \"Heading 1\",\n        h2: \"Heading 2\",\n        h3: \"Heading 3\"\n      },\n      emphasis: {\n        bold: \"Bold\",\n        italic: \"Italic\",\n        underline: \"Underline\"\n      },\n      lists: {\n        unordered: \"Unordered list\",\n        ordered: \"Ordered list\",\n        outdent: \"Outdent\",\n        indent: \"Indent\"\n      },\n      link: {\n        insert: \"Insert link\",\n        cancel: \"Cancel\"\n      },\n      image: {\n        insert: \"Insert image\",\n        cancel: \"Cancel\"\n      },\n      html: {\n        edit: \"Edit HTML\"\n      },\n      colours: {\n        clear: \"Clear\",\n        first: \"é¦–é€‰\",\n        second: \"æ¬¡é€‰\",\n        three: \"å¤‡é€‰\",\n        black: \"Black\",\n        silver: \"Silver\",\n        gray: \"Grey\",\n        maroon: \"Maroon\",\n        red: \"Red\",\n        purple: \"Purple\",\n        green: \"Green\",\n        olive: \"Olive\",\n        navy: \"Navy\",\n        blue: \"Blue\",\n        orange: \"Orange\"\n      }\n    }\n  };\n}(window.jQuery, window.wysihtml5);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///22\n");

/***/ })
/******/ ]);